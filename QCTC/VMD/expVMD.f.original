      PROGRAM DRIVER
c
c
c

C     .. Local Scalars ..
      INTEGER JF,LBIG,LBRA,LCODE,LENBRA,LENKET,LKET,LSWITCH,LTOT,MAXL
      CHARACTER*4 CH1
      CHARACTER*6 SPACE
      CHARACTER*9 SPACE2
      CHARACTER*72 PROGRAMNAME,PROGRAMNAME2,STRING,STRING2
      CHARACTER*100 FILENAME
C     ..
C     .. External Subroutines ..
      EXTERNAL EXPLICITCONTRACT,EXPLICITGAMMAS2,EXPLICITMDRS,IFBLOCK,
     +         OPENNEW,PREAMBLE,SQUISH
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC INDEX
C     ..
      SPACE = '      '
      SPACE2 = '         '
c
      LSWITCH = 3
c
      FILENAME = 'VMDBlock.Inc'
      CALL OPENNEW(88,FILENAME)

      FILENAME = 'VMDObjs'
      CALL OPENNEW(44,FILENAME)
      WRITE (44,FMT=*) ' VObjectFiles =\\'
c
      MAXL = 4
      LBIG = 10*MAXL + MAXL
c
      DO LBRA = 0,MAXL
          DO LKET = 0,MAXL
c
              CALL IFBLOCK(LBRA,LKET)
c
              LTOT = LBRA + LKET
c
              LCODE = 10*LBRA + LKET
c
              WRITE (CH1,FMT='(I4)') LCODE

              FILENAME = 'VMD'//CH1//'.o'
              CALL SQUISH(FILENAME)
              JF = INDEX(FILENAME,' ')

              IF (LKET+LBRA.EQ.2*MAXL) THEN
                  WRITE (44,FMT=*) FILENAME(1:JF)
              ELSE
                  WRITE (44,FMT=*) FILENAME(1:JF),'\\'
              END IF

              FILENAME = 'VMD'//CH1//'.f'
              CALL OPENNEW(77,FILENAME)
              PROGRAMNAME = 'VMD'//CH1//'(NQ,Px,Py,Pz,Omega,Upq,Tol,'
              CALL SQUISH(PROGRAMNAME)
              PROGRAMNAME2 = '       SUBROUTINE '//PROGRAMNAME
              WRITE (77,FMT=*) PROGRAMNAME2
              WRITE (77,FMT=*)
     +          '    $          rQx,rQy,rQz,rQt,RhoCo,HGKet)'
c
              CALL PREAMBLE(LBRA,LKET,LTOT,LSWITCH)
              LENBRA = (LBRA+1)* (LBRA+2)* (LBRA+3)/6
              LENKET = (LKET+1)* (LKET+2)* (LKET+3)/6
c
              CALL EXPLICITGAMMAS2(LBRA,LKET,LSWITCH)
c
              CALL EXPLICITMDRS(LTOT)
c
              CALL EXPLICITCONTRACT(LBRA,LKET)
c
              WRITE (77,FMT=*) ' 100  CONTINUE'
              WRITE (77,FMT=*) '      RETURN'
              WRITE (77,FMT=*) '      END'
              WRITE (77,FMT=*) ' '
c
              CLOSE (77,STATUS='keep')
          END DO
      END DO
c

      LBIG = 10*MAXL + MAXL
      WRITE (CH1,FMT='(I4)') LBIG + 1
      STRING = 'CASE('//CH1//':)'
      CALL SQUISH(STRING)
      STRING2 = '          '//STRING
      WRITE (88,FMT=*) STRING2
      WRITE (88,FMT=*) '             CALL QCrash('
      WRITE (88,FMT=*) '          END SELECT'
      CLOSE (88,STATUS='keep')
      CLOSE (44,STATUS='keep')

      STOP
      END
c
      SUBROUTINE EXPLICITCONTRACT(LBRA,LKET)
c
c

c
C     .. Parameters ..
      INTEGER MAXN
      PARAMETER (MAXN=1000)
C     ..
C     .. Scalar Arguments ..
      INTEGER LBRA,LKET
C     ..
C     .. Local Scalars ..
      INTEGER K,LAB,LCD,LMNBRA,LMNKET,LMNTOT,LTOT,MAB,MCD,N,NAB,NCD
      CHARACTER*4 CH1,CH2,CH3
      CHARACTER*6 SPACE
      CHARACTER*9 SPACE2
      CHARACTER*72 STRING,STRING2
C     ..
C     .. Local Arrays ..
      INTEGER INTLIST(MAXN,2)
C     ..
C     .. External Functions ..
      INTEGER LMNDEX
      EXTERNAL LMNDEX
C     ..
C     .. External Subroutines ..
      EXTERNAL ORDER2D,SQUISH
C     ..
      SPACE = '      '
      SPACE2 = '         '

      LTOT = LBRA + LKET

      DO NAB = 0,LBRA
          DO MAB = 0,LBRA - NAB
              DO LAB = 0,LBRA - NAB - MAB
                  LMNBRA = LMNDEX(LAB,MAB,NAB)
                  N = 0
                  DO NCD = 0,LKET
                      DO MCD = 0,LKET - NCD
                          DO LCD = 0,LKET - NCD - MCD
                              LMNKET = LMNDEX(LCD,MCD,NCD)
                              LMNTOT = LMNDEX(LAB+LCD,MAB+MCD,NAB+NCD)
                              N = N + 1
                              INTLIST(N,1) = LMNKET
                              INTLIST(N,2) = LMNTOT
                          END DO
                      END DO
                  END DO
                  CALL ORDER2D(MAXN,N,INTLIST)
                  DO K = 1,N
                      LMNKET = INTLIST(K,1)
                      LMNTOT = INTLIST(K,2)
                      WRITE (CH1,FMT='(I4)') LMNBRA
                      WRITE (CH2,FMT='(I4)') LMNTOT
                      WRITE (CH3,FMT='(I4)') LMNKET
                      IF (LKET.EQ.0) THEN
                          STRING = 'HGKet('//CH1//')=HGKet('//CH1//
     +                             ')+r'//CH2//'*RhoCo(iq)'
                          CALL SQUISH(STRING)
                          STRING2 = SPACE2//STRING
                          WRITE (77,FMT=*) STRING2
                      ELSE
                          STRING = 'HGKet('//CH1//')=HGKet('//CH1//
     +                             ')+r'//CH2//'*RhoCo(jadd+'//CH3//')'
                          CALL SQUISH(STRING)
                          STRING2 = SPACE2//STRING
                          WRITE (77,FMT=*) STRING2
                      END IF
                  END DO
              END DO
          END DO
      END DO
      END
c
      SUBROUTINE EXPLICITMDRS(LTOT)
c
c
c
C     .. Scalar Arguments ..
      INTEGER LTOT
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION FLT1
      INTEGER I0,I1,I2,IDX1,IDX2,IDX3,J
      CHARACTER*4 CH1
      CHARACTER*6 SPACE
      CHARACTER*9 SPACE2
      CHARACTER*72 STRING,STRING2
C     ..
C     .. External Functions ..
      INTEGER LMNDEX
      EXTERNAL LMNDEX
C     ..
C     .. External Subroutines ..
      EXTERNAL LINEASSIGN,SQUISH
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC REAL
C     ..
      SPACE = '      '
      SPACE2 = '         '
c
      DO J = LTOT,0,-1
          DO I0 = LTOT - J,1,-1
              IDX1 = LMNDEX(I0,0,0)
              IDX2 = LMNDEX(I0-1,0,0)
              IDX3 = LMNDEX(I0-2,0,0)
              FLT1 = REAL(I0-1)
              CALL LINEASSIGN(IDX1,IDX2,IDX3,FLT1,'x')
c                     AR(IDX1)=QPx*AR(IDX2)+FLT1*AR(IDX3)
              DO I1 = LTOT - J - I0,1,-1
                  IDX1 = LMNDEX(I1,I0,0)
                  IDX2 = LMNDEX(I1-1,I0,0)
                  IDX3 = LMNDEX(I1-2,I0,0)
                  FLT1 = REAL(I1-1)
                  CALL LINEASSIGN(IDX1,IDX2,IDX3,FLT1,'x')
c                     AR(IDX1)=QPx*AR(IDX2)+FLT1*AR(IDX3)
                  DO I2 = LTOT - J - I0 - I1,1,-1
                      IDX1 = LMNDEX(I2,I1,I0)
                      IDX2 = LMNDEX(I2-1,I1,I0)
                      IDX3 = LMNDEX(I2-2,I1,I0)
                      FLT1 = REAL(I2-1)
                      CALL LINEASSIGN(IDX1,IDX2,IDX3,FLT1,'x')
                  END DO
                  IDX1 = LMNDEX(0,I1,I0)
                  IDX2 = LMNDEX(0,I1-1,I0)
                  IDX3 = LMNDEX(0,I1-2,I0)
                  FLT1 = REAL(I1-1)
                  CALL LINEASSIGN(IDX1,IDX2,IDX3,FLT1,'y')
c                     AR(IDX1)=QPy*AR(IDX2)+FLT1*AR(IDX3)
                  IDX1 = LMNDEX(I1,0,I0)
                  IDX2 = LMNDEX(I1-1,0,I0)
                  IDX3 = LMNDEX(I1-2,0,I0)
                  FLT1 = REAL(I1-1)
                  CALL LINEASSIGN(IDX1,IDX2,IDX3,FLT1,'x')
              END DO
              IDX1 = LMNDEX(0,I0,0)
              IDX2 = LMNDEX(0,I0-1,0)
              IDX3 = LMNDEX(0,I0-2,0)
              FLT1 = REAL(I0-1)
              CALL LINEASSIGN(IDX1,IDX2,IDX3,FLT1,'y')
c                     AR(IDX1)=QPy*AR(IDX2)+FLT1*AR(IDX3)
              IDX1 = LMNDEX(0,0,I0)
              IDX2 = LMNDEX(0,0,I0-1)
              IDX3 = LMNDEX(0,0,I0-2)
              FLT1 = REAL(I0-1)
c                     AR(IDX1)=QPz*AR(IDX2)+FLT1*AR(IDX3)
              CALL LINEASSIGN(IDX1,IDX2,IDX3,FLT1,'z')
          END DO
c
          WRITE (CH1,FMT='(I4)') J
          STRING = 'r1=Aux'//CH1
          CALL SQUISH(STRING)
          STRING2 = SPACE2//STRING
          WRITE (77,FMT=*) STRING2
      END DO
c
      END
c
      SUBROUTINE LINEASSIGN(I1,I2,I3,FLT,XYZ)
c
c
c
C     .. Scalar Arguments ..
      DOUBLE PRECISION FLT
      INTEGER I1,I2,I3
      CHARACTER XYZ
C     ..
C     .. Local Scalars ..
      CHARACTER*4 CH1,CH2,CH3
      CHARACTER*9 SPACE
      CHARACTER*10 CH10
      CHARACTER*12 SPACE2
      CHARACTER*72 STRING,STRING2
C     ..
C     .. External Subroutines ..
      EXTERNAL SQUISH
C     ..
      SPACE = '         '
      SPACE2 = SPACE//'   '
c
      WRITE (CH1,FMT='(I4)') I1
      WRITE (CH2,FMT='(I4)') I2
      WRITE (CH3,FMT='(I4)') I3
      WRITE (CH10,FMT='(D10.5)') FLT
      IF (FLT.GT.1.0) THEN

          STRING = 'r'//CH1//'=QP'//XYZ//'*r'//CH2//'+'//CH10//'*r'//CH3
          CALL SQUISH(STRING)
          STRING2 = SPACE//STRING
          WRITE (77,FMT=*) STRING2


      ELSE IF (FLT.EQ.1.0) THEN

          STRING = 'r'//CH1//'=QP'//XYZ//'*r'//CH2//'+r'//CH3
          CALL SQUISH(STRING)
          STRING2 = SPACE//STRING
          WRITE (77,FMT=*) STRING2
      ELSE


          STRING = 'r'//CH1//'=QP'//XYZ//'*r'//CH2
          CALL SQUISH(STRING)
          STRING2 = SPACE//STRING
          WRITE (77,FMT=*) STRING2

      END IF
c
      END

c
c
      SUBROUTINE OPENNEW(UNIT,FILENAME)
C     .. Scalar Arguments ..
      INTEGER UNIT
      CHARACTER*100 FILENAME
C     ..
C     .. Local Scalars ..
      INTEGER M
C     ..
C     .. External Subroutines ..
      EXTERNAL SQUISHM
C     ..
      CALL SQUISHM(FILENAME,M)
      OPEN (UNIT,FILE=FILENAME(1:M),STATUS='unknown')
      CLOSE (UNIT,STATUS='delete')
      OPEN (UNIT,FILE=FILENAME(1:M),STATUS='new')
      END
      SUBROUTINE SQUISHM(STRING,M)
C     .. Scalar Arguments ..
      INTEGER M
      CHARACTER*100 STRING
C     ..
C     .. Local Scalars ..
      INTEGER I,J,L
C     ..
      J = 0
      L = 100
      DO I = 1,L
          IF (STRING(I:I).NE.' ') THEN
              J = J + 1
              STRING(J:J) = STRING(I:I)
          END IF
      END DO
      J = J + 1
      STRING(J:L) = ' '
      DO I = 1,L
          IF (STRING(I:I).EQ.' ') GO TO 30
      END DO
      RETURN
   30 M = I
      END


      SUBROUTINE PREAMBLE(LBRA,LKET,LTOT,LSWITCH)
c
c


C     .. Scalar Arguments ..
      INTEGER LBRA,LKET,LSWITCH,LTOT
C     ..
C     .. Local Scalars ..
      INTEGER LENBRA,LENKET,LL
      CHARACTER*4 CH3
      CHARACTER*6 SPACE
      CHARACTER*8 CH8
      CHARACTER*9 SPACE2
      CHARACTER*72 STRING,STRING2
C     ..
C     .. External Subroutines ..
      EXTERNAL SQUISH
C     ..
      SPACE = '      '
      SPACE2 = '         '

      WRITE (77,FMT=*) '      IMPLICIT DOUBLE PRECISION(a-h,o-z)'
      WRITE (77,FMT=*) '      IMPLICIT INTEGER(i-n)'
      WRITE (77,FMT=*) '      DOUBLE PRECISION rQx(*)'
      WRITE (77,FMT=*) '      DOUBLE PRECISION rQy(*)'
      WRITE (77,FMT=*) '      DOUBLE PRECISION rQz(*)'
      WRITE (77,FMT=*) '      DOUBLE PRECISION rQt(*)'
      WRITE (77,FMT=*) '      DOUBLE PRECISION RhoCo(*)'
      WRITE (77,FMT=*) '      DOUBLE PRECISION HGKet(*)'
      WRITE (77,FMT=*) '      INCLUDE "Mesh.Inc"'

      IF (LTOT.GE.LSWITCH) THEN
          WRITE (CH3,FMT='(I4)') LTOT
          STRING = 'F'//CH3//'_0(0:Mesh),F'//CH3//'_1(0:Mesh),'//'F'//
     +             CH3//'_2(0:Mesh),F'//CH3//'_3(0:Mesh) '
          CALL SQUISH(STRING)
          STRING2 = '      DOUBLE PRECISION '//STRING
          WRITE (77,FMT=*) STRING2
      ELSE
          DO LL = 0,LTOT
              WRITE (CH3,FMT='(I4)') LL
              STRING = 'F'//CH3//'_0(0:Mesh),F'//CH3//'_1(0:Mesh),'//
     +                 'F'//CH3//'_2(0:Mesh),F'//CH3//'_3(0:Mesh) '
              CALL SQUISH(STRING)
              STRING2 = '      DOUBLE PRECISION '//STRING
              WRITE (77,FMT=*) STRING2
          END DO
      END IF
c
c          WRITE(77,*)space,'DATA Grid   /4.36097974746711D+01/'
c          WRITE(77,*)space,'DATA Switch / 2.21917200679731D+01/'
c
      IF (LTOT.GE.LSWITCH) THEN
          WRITE (CH3,FMT='(I4)') LTOT
          STRING = 'Gamma_'//CH3//'.Inc"'
          CALL SQUISH(STRING)
          WRITE (77,FMT=*) '      INCLUDE "'//STRING
      ELSE
          DO LL = 0,LTOT
              WRITE (CH3,FMT='(I4)') LL
              STRING = 'Gamma_'//CH3//'.Inc"'
              CALL SQUISH(STRING)
              WRITE (77,FMT=*) '      INCLUDE "'//STRING
          END DO
      END IF
c
      WRITE (77,FMT=*) '      INCLUDE "Gamma_Asymptotics.Inc"'
c
      LENBRA = (LBRA+1)* (LBRA+2)* (LBRA+3)/6
      LENKET = (LKET+1)* (LKET+2)* (LKET+3)/6
c
c            WRITE(77,*)space,'DO 100 iq=1,NQ'
c            WRITE(77,*)space,'   IF(rQt(iq).LT.Tol)GOTO 101 '
c
      WRITE (77,FMT=*) SPACE,'IF(rQt(1).LT.Tol)THEN'
      WRITE (77,FMT=*) SPACE,'   RETURN'
      WRITE (77,FMT=*) SPACE,'ELSEIF(rQt(NQ).GT.Tol)THEN'
      WRITE (77,FMT=*) SPACE,'   N=NQ'
      WRITE (77,FMT=*) SPACE,'ELSE'
      WRITE (77,FMT=*) SPACE,'   K=0'
      WRITE (77,FMT=*) SPACE,'   L=NQ'
      WRITE (77,FMT=*) SPACE,'   N=NQ/2'
      WRITE (77,FMT=*) ' 102     CONTINUE'
      WRITE (77,FMT=*) SPACE,'   IF(rQt(N).LT.Tol)THEN'
      WRITE (77,FMT=*) SPACE,'      L=N'
      WRITE (77,FMT=*) SPACE,'   ELSE'
      WRITE (77,FMT=*) SPACE,'      K=N'
      WRITE (77,FMT=*) SPACE,'   ENDIF'
      WRITE (77,FMT=*) SPACE,'   N=(K+L)/2'
      WRITE (77,FMT=*) SPACE,'   IF((K.LT.N).AND.(N.LT.L))GOTO 102'
      WRITE (77,FMT=*) SPACE,'ENDIF'
      WRITE (77,FMT=*) SPACE,'DO 100 iq=1,N'

      WRITE (CH8,FMT='(I8)') LENKET
      STRING = 'jadd=(iq-1)*'//CH8
      CALL SQUISH(STRING)
      STRING2 = '   '//STRING
      IF (LKET.NE.0) THEN
          WRITE (77,FMT=*) SPACE,STRING2
      END IF
c
      WRITE (77,FMT=*) SPACE,'   QPx=rQx(iq)-Px'
      WRITE (77,FMT=*) SPACE,'   QPy=rQy(iq)-Py'
      WRITE (77,FMT=*) SPACE,'   QPz=rQz(iq)-Pz'
      WRITE (77,FMT=*) SPACE,'   T=Omega*(QPx*QPx+QPy*QPy+QPz*QPz)'
      WRITE (77,FMT=*) SPACE,'   o1=Upq'
      WRITE (77,FMT=*) SPACE,'   o2=-2.0D0*Omega'
c
      END
c
      SUBROUTINE IFBLOCK(LBRA,LKET)
c
c
c


C     .. Scalar Arguments ..
      INTEGER LBRA,LKET
C     ..
C     .. Local Scalars ..
      INTEGER LCODE
      CHARACTER*4 CH1,CH2,CH3
      CHARACTER*6 SPACE
      CHARACTER*9 SPACE2
      CHARACTER*72 STRING
C     ..
C     .. External Subroutines ..
      EXTERNAL SQUISH
C     ..
      SPACE = '      '
      SPACE2 = '         '


      IF (LBRA.EQ.0 .AND. LKET.EQ.0) THEN
          WRITE (88,FMT=*) '        SELECT CASE(LCode)'
      END IF

      LCODE = 10*LBRA + LKET
      WRITE (CH1,FMT='(I4)') LCODE
      WRITE (CH2,FMT='(I4)') LBRA
      WRITE (CH3,FMT='(I4)') LKET


      STRING = 'CASE('//CH1//')'

      STRING = 'ELSEIF(LBra.EQ.'//CH2//'.AND.LKet.EQ.'//CH3//')THEN'

      CALL SQUISH(STRING)
      STRING = '           '//STRING
      WRITE (88,FMT=*) STRING
      STRING = 'VMD'//CH1//'(NQ(zq),Px,Py,Pz,Omega,Upq,Tol,'
      CALL SQUISH(STRING)
      STRING = '              CALL '//STRING
      WRITE (88,FMT=*) STRING
      STRING = '    $              '//
     +         'rQ(oq+1,1),rQ(oq+1,2),rQ(oq+1,3),rQ(oq+1,4),'
      WRITE (88,FMT=*) STRING
      STRING = '    $              '//'RhoCo(or+1),HGKet)'
      WRITE (88,FMT=*) STRING

      END
c

      SUBROUTINE EXPLICITGAMMAS2(LBRA,LKET,LSWITCH)
c
c
c
c
C     .. Scalar Arguments ..
      INTEGER LBRA,LKET,LSWITCH
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION TMP
      INTEGER L,LT
      CHARACTER*4 CH1,CH2
      CHARACTER*9 SPACE
      CHARACTER*12 SPACE2
      CHARACTER*21 CH21
      CHARACTER*72 STRING,STRING2
C     ..
C     .. External Subroutines ..
      EXTERNAL SQUISH
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC REAL
C     ..
      SPACE = '            '
      SPACE2 = SPACE//'   '
c

      LT = LBRA + LKET

      WRITE (77,FMT=*) SPACE,'IF(T.LT.Switch)THEN'
c
      STRING = 'j=AINT(T*Grid)'
      STRING2 = SPACE//'   '//STRING
      WRITE (77,FMT=*) STRING2
c
      STRING = 'T2=T*T'
      STRING2 = SPACE//'   '//STRING
      WRITE (77,FMT=*) STRING2
c
      STRING = 'T3=T2*T'
      STRING2 = SPACE//'   '//STRING
      WRITE (77,FMT=*) STRING2
c
      IF (LT.GE.LSWITCH) THEN
c-------------------------------------------------

          WRITE (CH1,FMT='(I4)') LT
          STRING = 'G'//CH1//'=(F'//CH1//'_0(j)'//'+T * F'//CH1//
     +             '_1(j)'//'+T2* F'//CH1//'_2(j)'//'+T3* F'//CH1//
     +             '_3(j) )'
          CALL SQUISH(STRING)
          STRING2 = SPACE2//STRING
          WRITE (77,FMT=*) STRING2
          WRITE (77,FMT=*) SPACE2,'ET=DEXP(-T)'
          WRITE (77,FMT=*) SPACE2,'TwoT=2.0D0*T'
          DO L = LT - 1,0,-1
              WRITE (CH1,FMT='(I4)') L + 1
              WRITE (CH2,FMT='(I4)') L
              TMP = 1.0D0/ (2.0d0*REAL(L)+1.0D0)
              WRITE (CH21,FMT='(D21.15)') TMP
              IF (L.EQ.0) THEN
                  STRING = 'G'//CH2//'=TwoT*G'//CH1//'+ET'
              ELSE
                  STRING = 'G'//CH2//'='//CH21//'*(TwoT*G'//CH1//'+ET)'
              END IF
              CALL SQUISH(STRING)
              STRING2 = SPACE2//STRING
              WRITE (77,FMT=*) STRING2
          END DO
c       write(77,*)space2,'o1=Upq'
          DO L = 0,LT
              IF (L.GT.0) THEN
                  WRITE (77,FMT=*) SPACE2,'o1=o2*o1'
              END IF
              WRITE (CH2,FMT='(I4)') L
              STRING = 'Aux'//CH2//'=o1*G'//CH2
              CALL SQUISH(STRING)
              STRING2 = SPACE2//STRING
              WRITE (77,FMT=*) STRING2
          END DO
      ELSE
c-------------------------------------------------
c-------------------------------------------------
          DO L = 0,LT
              WRITE (CH1,FMT='(I4)') L
              IF (L.EQ.0) THEN
                  STRING = 'o1=upq'
                  STRING2 = SPACE//'   '//STRING
                  WRITE (77,FMT=*) STRING2
              ELSE IF (L.GT.0) THEN
                  STRING = 'o1=o2*o1'
                  STRING2 = SPACE//'   '//STRING
                  WRITE (77,FMT=*) STRING2
              END IF
              STRING = 'Aux'//CH1//'=o1*(F'//CH1//'_0(j)'//'+T * F'//
     +                 CH1//'_1(j)'//'+T2* F'//CH1//'_2(j)'//'+T3* F'//
     +                 CH1//'_3(j) )'
              CALL SQUISH(STRING)
              STRING2 = SPACE//'   '//STRING
              WRITE (77,FMT=*) STRING2
          END DO
c
      END IF
c
c===============================================================
c
      STRING = 'ELSE'
      STRING2 = SPACE//STRING
      WRITE (77,FMT=*) STRING2
c
      STRING = 't1=1.0D0/T'
      STRING2 = SPACE//'   '//STRING
      WRITE (77,FMT=*) STRING2
c
      STRING = 't1x2=Upq*DSQRT(T1)'
      STRING2 = SPACE//'   '//STRING
      WRITE (77,FMT=*) STRING2
c
      IF (LT.NE.0) THEN
          STRING = 't1=o2*t1'
          STRING2 = SPACE//'   '//STRING
          WRITE (77,FMT=*) STRING2
      END IF
c
      DO L = 0,LT
          WRITE (CH1,FMT='(I4)') L
          STRING = 'Aux'//CH1//'=F'//CH1//'Asymp*t1x2'
          CALL SQUISH(STRING)
          STRING2 = SPACE//'   '//STRING
          WRITE (77,FMT=*) STRING2
          IF (L.NE.LT) THEN
              STRING = 't1x2=t1x2*t1'
              STRING2 = SPACE//'   '//STRING
              WRITE (77,FMT=*) STRING2
          END IF
      END DO
c
      STRING = 'ENDIF'
      STRING2 = SPACE//STRING
      WRITE (77,FMT=*) STRING2
c
      END


C
C     Matt Challacombe
C     Los Alamos National Laborry
C     Copywrite 1997, The University of California
C
      SUBROUTINE SQUISH(STRING)
C

C
C     .. Scalar Arguments ..
      CHARACTER*(*) STRING
C     ..
C     .. Local Scalars ..
      INTEGER I,J,L
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC LEN
C     ..
      J = 0
      L = LEN(STRING)
      DO I = 1,L
          IF (STRING(I:I).NE.' ') THEN
              J = J + 1
              STRING(J:J) = STRING(I:I)
          END IF
      END DO
      J = J + 1
      STRING(J:L) = ' '
C
      END
C
      INTEGER FUNCTION LHGTF(L)
C     .. Scalar Arguments ..
      INTEGER L
C     ..
      LHGTF = (L+1)* (L+2)* (L+3)/6
      END
C
      INTEGER FUNCTION ISTRIDE(I,J)
C     .. Scalar Arguments ..
      INTEGER I,J
C     ..
C     .. External Functions ..
      INTEGER LHGTF
      EXTERNAL LHGTF
C     ..
      ISTRIDE = LHGTF(J) - LHGTF(I-1)
      END
C
      INTEGER FUNCTION LBEGIN(L)
C     .. Scalar Arguments ..
      INTEGER L
C     ..
      LBEGIN = (L* (L+1)* (L+2))/6 + 1
      END
C
      INTEGER FUNCTION LEND(L)
C     .. Scalar Arguments ..
      INTEGER L
C     ..
C     .. External Functions ..
      INTEGER LBEGIN
      EXTERNAL LBEGIN
C     ..
      LEND = LBEGIN(L) + L* (L+1)/2 + L
      END
C
      INTEGER FUNCTION LMNDEX(L,M,N)
C     .. Scalar Arguments ..
      INTEGER L,M,N
C     ..
C     .. External Functions ..
      INTEGER LBEGIN
      EXTERNAL LBEGIN
C     ..
      LMNDEX = LBEGIN(L+M+N) + N* (2* (L+M+N)-N+3)/2 + M
      END
