
(*==================================================================================================*)
WriteExplicit[ellp_,ellq_,filename_String]:=Block[{srules,Rrules,Trules},

srules={Cp[m_,l_]:>(-1)^(m) Cp[Abs[m],l]/;m<0,Sp[m_,l_]:>(-1)^(m+1)   Sp[Abs[m],l]/;m<0,
        Cpq[m_,l_]:>(-1)^(m)Cpq[Abs[m],l]/;m<0,Spq[m_,l_]:> (-1)^(m+1) Spq[Abs[m],l]/;m<0,
        Cq[m_,l_]:>(-1)^(m) Cq[Abs[m],l]/;m<0,Sq[m_,l_]:> (-1)^(m+1)  Sq[Abs[m],l]/;m<0,
        Sp[m_,l_]:>0/;m==0,Spq[m_,l_]:>0/;m==0,Sq[m_,l_]:>0/;m==0};

Rrules={
Cpq[m_,l_]:>ToExpression[StringJoin["Cpq",ToString[iindex[m,l]]]],
Spq[m_,l_]:>ToExpression[StringJoin["Spq",ToString[iindex[m,l]]]]};

Trules={Cq[m_,l_]:>Cq[iindex[m,l]],Sq[m_,l_]:>Sq[iindex[m,l]]};

iindex[m_,l_]:=Binomial[l+1,2]+m;

SetOptions[FortranAssign,AssignPrecision->16];

WriteString[filename,"c       ------------------------------- \n"];
WriteString[filename,"        PQx2=PQx*PQx \n"];
WriteString[filename,"        PQy2=PQy*PQy \n"];
WriteString[filename,"        PQ2=PQx2+PQy2+PQz*PQz \n"];
WriteString[filename,"        PQ=DSQRT(PQ2) \n"];
Write[filename,FortranAssign[OneOverPQ,1.0/PQ]];
Write[filename,FortranAssign[Zpq,PQz*OneOverPQ]];      
WriteString[filename,"        Cp0=1.0D0 \n"];
WriteString[filename,"        Sp0=0.0D0 \n"];
WriteString[filename,"        Rxy=DSQRT(PQx2+PQy2) \n"];
WriteString[filename,"        IF(Rxy.NE.0.0D0)THEN  \n"];
WriteString[filename,"           OneOvRxy=1.0D0/Rxy \n"];
WriteString[filename,"           Cp1=PQy*OneOvRxy \n"];
WriteString[filename,"           Sp1=PQx*OneOvRxy  \n"];
WriteString[filename,"        ELSE \n"];
WriteString[filename,"           Cp1=0.70710678118654752D0 \n"];
WriteString[filename,"           Sp1=0.70710678118654752D0 \n"];
WriteString[filename,"        ENDIF \n"];
WriteString[filename,"        TwoC=2.0D0*Cp1 \n"];

PrintTime[
       Do[
          ms=ToString[m]; ms1=ToString[m-1]; ms2=ToString[m-2]; 
          string=StringJoin["        Cp",ms,"=TwoC*Cp",ms1,"-Cp",ms2," \n"];
          WriteString[filename,string];
          string=StringJoin["        Sp",ms,"=TwoC*Sp",ms1,"-Sp",ms2," \n"];
          WriteString[filename,string];
         ,{m,2,ellt}]; 

       WriteString[filename,"c       ------------------------------- \n"];

       WriteString[filename,"        SqZpq=DSQRT(1.D0-Zpq*Zpq) \n"];
       WriteString[filename,"        rss=1.D0 \n"];
         ];



Print[" Writting Associated Legendre recurences: "];
PrintTime[
       Do[ 
          is=ToString[iindex[m,m]];
          al=StringJoin["ALP",is];
          df=N[(-1)^m (2 m-1)!!,100];    
          SetOptions[FortranAssign,AssignReplace->{"x"->"_"," "->"","al"->al},
                                   AssignBreak->{69,"\n     >   "},
                                   AssignToArray->{cj,sj},
                                   AssignPrecision->16];
          Write[filename,FortranAssign[al,df*rss]];
          If[m!=ellt,Write[filename,FortranAssign[rss,rss*sqZpq]]];
          ,{m,0,ellt}];
       WriteString[filename,"c       ------------------------------- \n"];
       Do[ 

          is=ToString[iindex[m,m]];
          al=ToExpression[StringJoin["ALP",is]];

          is=ToString[iindex[m,m+1]];
          al1=StringJoin["ALP",is];

          SetOptions[FortranAssign,AssignReplace->{"x"->"_"," "->"","al1"->al1},
                                   AssignBreak->{69,"\n     >   "},
                                   AssignPrecision->16];
          Write[filename,FortranAssign[al1,(2 m+1) Zpq al]];
         ,{m,0,ellt-1}];

       WriteString[filename,"c       ------------------------------- \n"];

       Do[
          mp1=ToString[m+1];
          mm1=ToString[m-1];
          Do[ 
             is=ToString[iindex[m,l]];
             alA=StringJoin["ALP",is];

             is=ToString[iindex[m,l-1]];
             alB=ToExpression[StringJoin["ALP",is]];

             is=ToString[iindex[m,l-2]];
             alC=ToExpression[StringJoin["ALP",is]];

             SetOptions[FortranAssign,AssignReplace->{"x"->"_"," "->"","alA"->alA},
                                      AssignBreak->{69,"\n     >   "},
                                      AssignPrecision->16];
             Write[filename,FortranAssign[alA, (2 l-1)*Zpq*alB-alC*(l+m-1)*(l-m-1) ]];
            ,{l,m+2,ellt}]
         ,{m,0,ellt-2}];
       WriteString[filename,"c       ------------------------------- \n"];
      ];

Print[" Writting explicit harmonics: "];
PrintTime[
       ClearAll[cp,sp];
       Write[filename,FortranAssign[rr,1]];
       Do[  
          Write[filename,FortranAssign[rr,rr*OneOverPQ]];
          Do[ 
             is=ToString[iindex[m,l]];
             cc=StringJoin["Cpq",is];
             ss=StringJoin["Spq",is];
             al=ToExpression[StringJoin["ALP",is]];
             cp=ToExpression[StringJoin["Cp",ToString[m]]];
             sp=ToExpression[StringJoin["Sp",ToString[m]]];
             SetOptions[FortranAssign,AssignReplace->{" "->"","cc"->cc,"ss"->ss},AssignBreak->{69,"\n     $   "},AssignPrecision->16];
             Write[filename,FortranAssign[tt,rr*al]];
             Write[filename,FortranAssign[cc,tt*cp]];
             Write[filename,FortranAssign[ss,tt*sp]]; 
           ,{m,0,l}]
        ,{l,0,ellt}];
       WriteString[filename,"c       ------------------------------- \n"];
];

       tmpA=0;
       Do[ Do[
              tmpA=tmpA+(-1)^(lp)*Sum[ 
                                      Sum[ 
                                           Cp[mp,lp]*Cpq[mp+mq,lp+lq]*Cq[mq,lq] 
                                          +Sp[mp,lp]*Spq[mp+mq,lp+lq]*Cq[mq,lq]
                                          -Sp[mp,lp]*Cpq[mp+mq,lp+lq]*Sq[mq,lq]
                                          +Cp[mp,lp]*Spq[mp+mq,lp+lq]*Sq[mq,lq]
                                        ,{mq,-lq,lq}]
                                     ,{mp,-lp,lp}];
             ,{lq,0,ellq}]
         ,{lp,0,ellp}];

       tmp=Expand[tmpA]/.srules;
       tmp=Expand[tmp]//.{2 x_:>re2 x,-2 x_:>-re2 x};
       tmp=Expand[tmp];
       onelist=tmp/.re2->0;

(*==================================================================================================*)
Print[" Pulling out factors of two: "];
PrintTime[
       twolist=tmp-onelist;
       twolist=twolist/.re2->1;
       twolist=Expand[twolist];

       Do[ Do[ cf[m,l]=Coefficient[twolist,Cp[m,l]];
               sf[m,l]=Coefficient[twolist,Sp[m,l]];
             ,{m,0,l}];
         ,{l,0,ellp}];
         ];

(*==================================================================================================*)

(* extract contributions for non-redundant terms *)
Print[" Pulling out non-redundant terms: "];
PrintTime[
       Do[ Do[ cg[m,l]=Coefficient[onelist,Cp[m,l]];
               sg[m,l]=Coefficient[onelist,Sp[m,l]];
             ,{m,0,l}];
         ,{l,0,ellp}];
         ];

(*==================================================================================================*)
(* write redundant contraction statements *)

Print[" Writting redundant contractions: "];
PrintTime[

clist=Table[Table[Cq[m,l],{m,0,l}],{l,0,ellq}];
slist=Table[Table[Sq[m,l],{m,0,l}],{l,0,ellq}];
cl=Flatten[Union[clist,slist]]//.Rrules//.Trules;

Do[ 
   Do[
      cm=cf[m,l]//.Rrules//.Trules;
      sm=sf[m,l]//.Rrules//.Trules;
      cm= Simplify[ Collect[cm,cl]];
      sm= Simplify[ Collect[sm,cl]];
      is=ToString[iindex[m,l]];
      ct=StringJoin["CTwo",is];
      st=StringJoin["STwo",is];
      zeroC2[m,l]=Not[TrueQ[cm==0]];
      zeroS2[m,l]=Not[TrueQ[sm==0]];


      SetOptions[FortranAssign,AssignReplace->{" "->"","ct"->ct,"st"->st},AssignBreak->{69,"\n     $   "},
                               AssignPrecision->6,AssignToArray->{Cq,Sq},AssignMaxSize->300];

      If[zeroC2[m,l],Write[filename,FortranAssign[ct,cm]]];
      If[zeroS2[m,l],Write[filename,FortranAssign[st,sm]]];

     ,{m,0,l}]
   ,{l,0,ellp}];

  WriteString[filename,"c       ------------------------------- \n"];
       ];
(*==================================================================================================*)
(* write non-redundant contraction statements *)
Print[" Writting non-redundant contractions: "];
PrintTime[

Do[ 
   Do[
      cm=cg[m,l]//.Rrules//.Trules;
      sm=sg[m,l]//.Rrules//.Trules;
      cm=Simplify[Collect[cm,cl]];
      sm=Simplify[Collect[sm,cl]];
      zeroC1[m,l]=Not[TrueQ[cm==0]];
      zeroS1[m,l]=Not[TrueQ[sm==0]];
      Print[l," ",m," ",zeroC1[m,l]];

      ms=ToString[m];
      ls=ToString[l];
      is=ToString[iindex[m,l]];

      ct=StringJoin["Cone",is];  st=StringJoin["Sone",is];

      SetOptions[FortranAssign,AssignReplace->{"x"->"_"," "->"","ct"->ct,"st"->st},
                               AssignBreak->{69,"\n     >   "},
                               AssignPrecision->4,
                               AssignToArray->{Cq,Sq}];

      If[zeroC1[m,l],Write[filename,FortranAssign[ct,cm]]];
      If[zeroS1[m,l],Write[filename,FortranAssign[st,sm]]];

     ,{m,0,l}]
   ,{l,0,ellp}];

   WriteString[filename,"c       ------------------------------- \n"];
];
(*==================================================================================================*)
(* finish contraction statements *)
Do[ 
   Do[
      ms=ToString[m];
      ls=ToString[l];
      is=ToString[iindex[m,l]];
      ct=StringJoin["CKet(",is,")"];
      st=StringJoin["SKet(",is,")"];
      ctm=ToExpression[StringJoin["CTwo",is]];
      stm=ToExpression[StringJoin["STwo",is]];
      com=ToExpression[StringJoin["COne",is]];
      som=ToExpression[StringJoin["SOne",is]];
      cje=ToExpression[StringJoin["CKet[",is,"]"]];
      sje=ToExpression[StringJoin["SKet[",is,"]"]];
      cjs=StringJoin["CKet(",is,")"];
      sjs=StringJoin["SKet(",is,")"];

      SetOptions[FortranAssign,AssignReplace->{"x"->"_"," "->"","ct"->cjs,"st"->sjs},
                               AssignBreak->{69,"\n     >   "},
                               AssignToArray->{CKet,SKet},
                               AssignPrecision->16];

      If[zeroC1[m,l],c1=1,c1=0];
      If[zeroS1[m,l],s1=1,s1=0];
      If[zeroC2[m,l],c2=1,c2=0];
      If[zeroS2[m,l],s2=1,s2=0];

      If[c1+c2!=0,Write[filename,FortranAssign[ct,cje+c2 2 ctm+ c1 com]]];
      If[s1+s2!=0,Write[filename,FortranAssign[st,sje+s2 2 stm+ s1 som]]];

    ,{m,0,l}]
  ,{l,0,ellp}];

  WriteString[filename,"c       ------------------------------- \n"];










                                             ];



