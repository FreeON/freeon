# -*- python -*-
# ex: set syntax=python:
# vim: tw=0

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave

slaves = []
slaves.append(BuildSlave("bot1", "bot1passwd"))
#slaves[-1].setBot("Nicolas Bock <nbock@lanl.gov>")

c['slaves'] = slaves

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()


####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler
c['schedulers'] = []
c['schedulers'].append(Scheduler(name="tar",
                                 branch="tar",
                                 treeStableTimer=20,
                                 builderNames=["tar-gcc-4.2.4",
                                               "tar-gcc-4.2.4-debug",
                                               "tar-ifort-10.1.018",
                                               "tar-ifort-10.1.018-debug"]))
c['schedulers'].append(Scheduler(name="savannah",
                                 branch="master",
                                 treeStableTimer=20,
                                 builderNames=["master-gcc-4.2.4",
                                               "master-gcc-4.2.4-debug",
                                               "master-ifort-10.1.018",
                                               "master-ifort-10.1.018-debug",
                                               "master-distcheck",
                                               ]))
c['schedulers'].append(Scheduler(name="validate-debug",
                                 branch="validate-debug",
                                 treeStableTimer=5,
                                 builderNames=["validate-debug"]))

####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

from buildbot.process import factory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand, Compile, Configure
from validate import Validate

f = []
b = []

f.append(factory.BuildFactory())
f[-1].addStep(ShellCommand(command=["cp", "/tmp/Validate/runTests.py", "."]))
f[-1].addStep(ShellCommand(command=["cp", "/tmp/Validate/Dynamics/MD-H2O-TRBO.test", "."]))
f[-1].addStep(ShellCommand(command=["cp", "/tmp/Validate/Dynamics/MD-H2O-TRBO.inp", "."]))
f[-1].addStep(ShellCommand(command=["cp", "/tmp/Validate/Dynamics/MD-H2O-TRBO.reference", "."]))
f[-1].addStep(Validate(env={ 'PATH' : "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin:/home/nbock/freeon-install/bin" },
                       command = ["./runTests.py", "MD-H2O-TRBO.test"]))

b.append({"name" : "validate-debug",
          "slavename" : "bot1",
          "builddir" : "validate-debug",
          "factory" : f[-1]
          })

f.append(factory.BuildFactory())
f[-1].addStep(Git(repourl="http://git.sv.gnu.org/r/freeon.git",
                  branch="master"))
f[-1].addStep(Configure(command=["autoreconf", "-is"],
                        description="creating the configure script",
                        descriptionDone="create the configure script"
                        ))
f[-1].addStep(Configure(command=["./configure", "--prefix=/tmp/master-gcc-4.2.4"],
                        env={"CC" : "/usr/local/gcc-4.2.4/bin/gcc",
                             "FC" : "/usr/local/gcc-4.2.4/bin/gfortran",
                             "F77" : "/usr/local/gcc-4.2.4/bin/gfortran",
                             "LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"
                            },
                        logfiles={ "config.log" : "config.log" }))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      logfiles={ "config.log" : "config.log" },
                      command=[ "make", "clean" ],
                      description="making clean",
                      descriptionDone="make clean"))
f[-1].addStep(Compile(env={"CC" : "/usr/local/gcc-4.2.4/bin/gcc",
                           "FC" : "/usr/local/gcc-4.2.4/bin/gfortran",
                           "F77" : "/usr/local/gcc-4.2.4/bin/gfortran",
                           "LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"
                          },
                      command=[ "make", "distcheck" ]))

b.append({"name" : "master-distcheck",
          "slavename" : "bot1",
          "builddir" : "master-distcheck",
          "factory" : f[-1]
          })

f.append(factory.BuildFactory())
f[-1].addStep(Git(repourl="http://git.sv.gnu.org/r/freeon.git",
                  branch="master"))
f[-1].addStep(Configure(command=["autoreconf", "-is"],
                        description="creating the configure script",
                        descriptionDone="create the configure script"
                        ))
f[-1].addStep(Configure(command=["./configure", "--prefix=/tmp/master-gcc-4.2.4"],
                        env={"CC" : "/usr/local/gcc-4.2.4/bin/gcc",
                             "FC" : "/usr/local/gcc-4.2.4/bin/gfortran",
                             "F77" : "/usr/local/gcc-4.2.4/bin/gfortran",
                             "LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"
                            },
                        logfiles={ "config.log" : "config.log" }))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      logfiles={ "config.log" : "config.log" },
                      command=[ "make", "clean" ],
                      description="making clean",
                      descriptionDone="make clean"))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      command=[ "make" ]))
f[-1].addStep(ShellCommand(command=["rm", "-rf", "/tmp/master-gcc-4.2.4"],
                           description="removing installation directory",
                           descriptionDone="remove installation directory"))
f[-1].addStep(ShellCommand(command=["make", "install"],
                           description="installing binaries",
                           descriptionDone="install binaries"))
f[-1].addStep(Validate(env={ 'PATH' : "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin:/tmp/master-gcc-4.2.4/bin" }))

b.append({'name': "master-gcc-4.2.4",
          'slavename': "bot1",
          'builddir': "master-gcc-4.2.4",
          'factory': f[-1]
          })

f.append(factory.BuildFactory())
f[-1].addStep(Git(repourl="http://git.sv.gnu.org/r/freeon.git",
                  branch="master"))
f[-1].addStep(Configure(command=["autoreconf", "-is"],
                        description="creating the configure script",
                        descriptionDone="create the configure script"
                        ))
f[-1].addStep(Configure(command=["./configure",
                                 "--disable-optimizations",
                                 "--enable-internal-lapack-checks",
                                 "--prefix=/tmp/master-gcc-4.2.4-debug"],
                        env={"CC" : "/usr/local/gcc-4.2.4/bin/gcc",
                             "FC" : "/usr/local/gcc-4.2.4/bin/gfortran",
                             "F77" : "/usr/local/gcc-4.2.4/bin/gfortran",
                             "LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"
                            },
                        logfiles={ "config.log" : "config.log" }))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      logfiles={ "config.log" : "config.log" },
                      command=[ "make", "clean" ],
                      description="making clean",
                      descriptionDone="make clean"))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      command=[ "make" ]))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      description="checking dependencies in MondoMods",
                      descriptionDone="MondoMods dependencies",
                      command=[ "make", "-C", "MondoMods", "depcheck-lib" ]))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      description="checking dependencies in FreeON",
                      descriptionDone="FreeON dependencies",
                      command=[ "make", "-C", "FreeON", "depcheck-bin" ]))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      description="checking dependencies in SCFeqs",
                      descriptionDone="SCFeqs dependencies",
                      command=[ "make", "-C", "SCFeqs", "depcheck-bin" ]))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      description="checking dependencies in OneE",
                      descriptionDone="OneE dependencies",
                      command=[ "make", "-C", "OneE", "depcheck-bin" ]))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      description="checking dependencies in QCTC",
                      descriptionDone="QCTC dependencies",
                      command=[ "make", "-C", "QCTC", "depcheck-bin" ]))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      description="checking dependencies in HiCu",
                      descriptionDone="HiCu dependencies",
                      command=[ "make", "-C", "HiCu", "depcheck-bin" ]))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      description="checking dependencies in ONX",
                      descriptionDone="ONX dependencies",
                      command=[ "make", "-C", "ONX", "depcheck-bin" ]))
f[-1].addStep(ShellCommand(command=["rm", "-rf", "/tmp/master-gcc-4.2.4-debug"],
                           description="removing installation directory",
                           descriptionDone="remove installation directory"))
f[-1].addStep(ShellCommand(command=["make", "install"],
                           description="installing binaries",
                           descriptionDone="install binaries"))
f[-1].addStep(Validate(env={ 'PATH' : "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin:/tmp/master-gcc-4.2.4-debug/bin" }))

b.append({'name': "master-gcc-4.2.4-debug",
          'slavename': "bot1",
          'builddir': "master-gcc-4.2.4-debug",
          'factory': f[-1]
          })

f.append(factory.BuildFactory())
f[-1].addStep(Git(repourl="http://git.sv.gnu.org/r/freeon.git",
                  branch="master"))
f[-1].addStep(Configure(command=["autoreconf", "-is"],
                        description="creating the configure script",
                        descriptionDone="create the configure script"
                        ))
f[-1].addStep(Configure(command=["./configure", "--prefix=/tmp/master-ifort-10.1.018"],
                        env={"CC" : "/usr/local/gcc-4.2.4/bin/gcc",
                             "FC" : "/opt/intel/fce/10.1.018/bin/ifort",
                             "F77" : "/opt/intel/fce/10.1.018/bin/ifort",
                             "LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                             "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                            },
                        logfiles={ "config.log" : "config.log" }))
f[-1].addStep(Compile(logfiles={ "config.log" : "config.log" },
                      command=["make", "clean"],
                      env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                           "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                          },
                      description="making clean",
                      descriptionDone="make clean"))
f[-1].addStep(Compile(command=["make"],
                      env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                           "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                          }))
f[-1].addStep(ShellCommand(command=["rm", "-rf", "/tmp/master-ifort-10.1.018"],
                           description="removing installation directory",
                           descriptionDone="remove installation directory"))
f[-1].addStep(ShellCommand(command=["make", "install"],
                           env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                                "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                               },
                           description="installing binaries",
                           descriptionDone="install binaries"))
f[-1].addStep(Validate(env={ 'PATH' : "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin:/tmp/master-ifort-10.1.018/bin" }))

b.append({'name': "master-ifort-10.1.018",
          'slavename': "bot1",
          'builddir': "master-ifort-10.1.018",
          'factory': f[-1]
         })

f.append(factory.BuildFactory())
f[-1].addStep(Git(repourl="http://git.sv.gnu.org/r/freeon.git",
                  branch="master"))
f[-1].addStep(Configure(command=["autoreconf", "-is"],
                        description="creating the configure script",
                        descriptionDone="create the configure script"
                        ))
f[-1].addStep(Configure(command=["./configure",
                                 "--disable-optimizations",
                                 "--enable-internal-lapack-checks",
                                 "--prefix=/tmp/master-ifort-10.1.018-debug"],
                        env={"CC" : "/usr/local/gcc-4.2.4/bin/gcc",
                             "FC" : "/opt/intel/fce/10.1.018/bin/ifort",
                             "F77" : "/opt/intel/fce/10.1.018/bin/ifort",
                             "LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                             "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                            },
                        logfiles={ "config.log" : "config.log" }))
f[-1].addStep(Compile(logfiles={ "config.log" : "config.log" },
                      command=[ "make", "clean" ],
                      env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                           "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                          },
                      description="making clean",
                      descriptionDone="make clean"))
f[-1].addStep(Compile(command=[ "make" ],
                      env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                           "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                          }))
f[-1].addStep(ShellCommand(command=["rm", "-rf", "/tmp/master-ifort-10.1.018-debug"],
                           description="removing installation directory",
                           descriptionDone="remove installation directory"))
f[-1].addStep(ShellCommand(command=["make", "install"],
                           env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                                "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                               },
                           description="installing binaries",
                           descriptionDone="install binaries"))
f[-1].addStep(Validate(env={ 'PATH' : "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin:/tmp/master-ifort-10.1.018-debug/bin" }))

b.append({'name': "master-ifort-10.1.018-debug",
          'slavename': "bot1",
          'builddir': "master-ifort-10.1.018-debug",
          'factory': f[-1]
         })

f.append(factory.BuildFactory())
f[-1].addStep(Configure(command=["tar", "-x", "-f", "/tmp/freeon-latest.tar.bz2", "-j", "--strip-components=1"],
                        description="unpacking the dist tar archive",
                        descriptionDone="unpack the dist tar archive"))
f[-1].addStep(Configure(command=["./configure", "--prefix=/tmp/tar-gcc-4.2.4"],
                        logfiles={ "config.log" : "config.log" },
                        env={"CC" : "/usr/local/gcc-4.2.4/bin/gcc",
                             "FC" : "/usr/local/gcc-4.2.4/bin/gfortran",
                             "F77" : "/usr/local/gcc-4.2.4/bin/gfortran",
                             "LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"
                            }))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      command=[ "make", "clean" ],
                      description="making clean",
                      descriptionDone="make clean"))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      command=[ "make" ]))
f[-1].addStep(ShellCommand(command=["rm", "-rf", "/tmp/tar-gcc-4.2.4"],
                           description="removing installation directory",
                           descriptionDone="remove installation directory"))
f[-1].addStep(ShellCommand(command=["make", "install"],
                           description="installing binaries",
                           descriptionDone="install binaries"))
f[-1].addStep(Validate(env={ 'PATH' : "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin:/tmp/tar-gcc-4.2.4/bin" }))

b.append({'name': "tar-gcc-4.2.4",
          'slavename': "bot1",
          'builddir': "tar-gcc-4.2.4",
          'factory': f[-1]
          })

f.append(factory.BuildFactory())
f[-1].addStep(Configure(command=["tar", "-x", "-f", "/tmp/freeon-latest.tar.bz2", "-j", "--strip-components=1"],
                        description="unpacking the dist tar archive",
                        descriptionDone="unpack the dist tar archive"))
f[-1].addStep(Configure(command=["./configure",
                                 "--disable-optimizations",
                                 "--prefix=/tmp/tar-gcc-4.2.4-debug"],
                        logfiles={ "config.log" : "config.log" },
                        env={"CC" : "/usr/local/gcc-4.2.4/bin/gcc",
                             "FC" : "/usr/local/gcc-4.2.4/bin/gfortran",
                             "F77" : "/usr/local/gcc-4.2.4/bin/gfortran",
                             "LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"
                            }))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      command=[ "make", "clean" ],
                      description="making clean",
                      descriptionDone="make clean"))
f[-1].addStep(Compile(env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib"},
                      command=[ "make" ]))
f[-1].addStep(ShellCommand(command=["rm", "-rf", "/tmp/tar-gcc-4.2.4-debug"],
                           description="removing installation directory",
                           descriptionDone="remove installation directory"))
f[-1].addStep(ShellCommand(command=["make", "install"],
                           description="installing binaries",
                           descriptionDone="install binaries"))
f[-1].addStep(Validate(env={ 'PATH' : "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin:/tmp/tar-gcc-4.2.4-debug/bin" }))

b.append({'name': "tar-gcc-4.2.4-debug",
          'slavename': "bot1",
          'builddir': "tar-gcc-4.2.4-debug",
          'factory': f[-1]
          })

f.append(factory.BuildFactory())
f[-1].addStep(Configure(command=["tar", "-x", "-f", "/tmp/freeon-latest.tar.bz2", "-j", "--strip-components=1"],
                        description="unpacking the dist tar archive",
                        descriptionDone="unpack the dist tar archive"))
f[-1].addStep(Configure(command=["./configure", "--prefix=/tmp/tar-ifort-10.1.018"],
                        env={"CC" : "/usr/local/gcc-4.2.4/bin/gcc",
                             "FC" : "/opt/intel/fce/10.1.018/bin/ifort",
                             "F77" : "/opt/intel/fce/10.1.018/bin/ifort",
                             "LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                             "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                            },
                        logfiles={ "config.log" : "config.log" }))
f[-1].addStep(Compile(command=[ "make", "clean" ],
                      env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                           "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                          },
                      description="making clean",
                      descriptionDone="make clean"))
f[-1].addStep(Compile(command=[ "make" ],
                      env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                           "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                          }))
f[-1].addStep(ShellCommand(command=["rm", "-rf", "/tmp/tar-ifort-10.1.018"],
                           description="removing installation directory",
                           descriptionDone="remove installation directory"))
f[-1].addStep(ShellCommand(command=["make", "install"],
                           env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                                "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                               },
                           description="installing binaries",
                           descriptionDone="install binaries"))
f[-1].addStep(Validate(env={ 'PATH' : "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin:/tmp/tar-ifort-10.1.018/bin" }))

b.append({'name': "tar-ifort-10.1.018",
          'slavename': "bot1",
          'builddir': "tar-ifort-10.1.018",
          'factory': f[-1]
          })

f.append(factory.BuildFactory())
f[-1].addStep(Configure(command=["tar", "-x", "-f", "/tmp/freeon-latest.tar.bz2", "-j", "--strip-components=1"],
                        description="unpacking the dist tar archive",
                        descriptionDone="unpack the dist tar archive"))
f[-1].addStep(Configure(command=["./configure",
                                 "--disable-optimizations",
                                 "--prefix=/tmp/tar-ifort-10.1.018-debug"],
                        env={"CC" : "/usr/local/gcc-4.2.4/bin/gcc",
                             "FC" : "/opt/intel/fce/10.1.018/bin/ifort",
                             "F77" : "/opt/intel/fce/10.1.018/bin/ifort",
                             "LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                             "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                            },
                        logfiles={ "config.log" : "config.log" }))
f[-1].addStep(Compile(command=[ "make", "clean" ],
                      env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                           "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                          },
                      description="making clean",
                      descriptionDone="make clean"))
f[-1].addStep(Compile(command=[ "make" ],
                      env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                           "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                          }))
f[-1].addStep(ShellCommand(command=["rm", "-rf", "/tmp/tar-ifort-10.1.018-debug"],
                           description="removing installation directory",
                           descriptionDone="remove installation directory"))
f[-1].addStep(ShellCommand(command=["make", "install"],
                           env={"LD_LIBRARY_PATH" : "/usr/local/mpfr-2.3.1/lib:/usr/local/gmp-4.2.2/lib:/usr/local/gcc-4.2.4/lib:/opt/intel/fce/10.1.018/lib",
                                "INTEL_LICENSE_FILE" : "/opt/intel/fce/10.1.018/licenses:/opt/intel/licenses"
                               },
                           description="installing binaries",
                           descriptionDone="install binaries"))
f[-1].addStep(Validate(env={ 'PATH' : "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/X11R6/bin:/tmp/tar-ifort-10.1.018-debug/bin" }))

b.append({'name': "tar-ifort-10.1.018-debug",
          'slavename': "bot1",
          'builddir': "tar-ifort-10.1.018-debug",
          'factory': f[-1]
          })

c['builders'] = b

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
from buildbot.status import client
c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

c['debugPassword'] = "debug"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "FreeON"
c['projectURL'] = "http://www.nongnu.org/freeon/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"
