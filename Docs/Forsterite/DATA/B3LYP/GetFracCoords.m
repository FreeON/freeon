
#wrap the coor back in the cell (0==No, 1==Yes)
wrap=1;
rscl=0;
# Name of the output
Name="XXX";

# Input and output Coord Format "Frac" or "Atom"
InputCoordFormat="Atom";

# a b c alpha beta gamma
t=[ 9.574460/2 10.258702 11.991359/2 90.0 90.0 90.0 ];
#t=[14.362687/3 10.257567 11.990901/2 90.0 90.0 90.0 ];

#Geo in Frac or Atom

##########
#2x1x2
Q=[12         4.77641        0.01038        5.98420  
 12         4.77569        0.01127        2.98646  
 12         2.38174        5.13929        5.98438  
 12         2.38245        5.13983        2.98676  
 12         4.80897        2.86014        4.48589  
 12         4.74232        7.42040        1.48905  
 12         2.41576        2.29076        1.48863  
 12         2.34902        7.98898        4.48538  
 14         0.32883        4.17568        1.48797  
 14         4.43540        6.10456        4.48668  
 14         2.72262        0.97515        4.48648  
 14         2.04158        9.30478        1.48788  
 8          1.09586        0.94304        4.48614  
 8          3.66841        9.33702        1.48829  
 8          3.48915        4.20764        1.48786  
 8          1.27511        6.07240        4.48638  
 8          1.31434        0.55037        1.48817  
 8          3.45003        9.72991        4.48582  
 8          3.70801        4.60052        4.48613  
 8          1.05609        5.67973        1.48824  
 8          1.05763        3.47706        2.79349  
 8          3.70672        6.80279        5.79197  
 8          3.45104        1.67432        3.18138  
 8          1.31355        8.60666        0.18224  
 8          3.70680        6.80332        3.18145  
 8          1.05715        3.47731        0.18212  
 8          1.31275        8.60620        2.79338  
 8          3.45135        1.67342        5.79201  
 12         4.77584        0.01045       11.98002  
 12         4.77528        0.01160        8.98215  
 12         2.38134        5.14033       11.98002  
 12         2.38273        5.14059        8.98215  
 12         4.80835        2.86007       10.48128  
 12         4.74223        7.42032        7.48425  
 12         2.41585        2.29085        7.48435  
 12         2.34922        7.98912       10.48061  
 14         0.32904        4.17552        7.48401  
 14         4.43565        6.10452       10.48216  
 14         2.72232        0.97502       10.48204  
 14         2.04184        9.30494        7.48340  
 8          1.09558        0.94298       10.48157  
 8          3.66876        9.33730        7.48368  
 8          3.48918        4.20783        7.48383  
 8          1.27493        6.07249       10.48146  
 8          1.31444        0.55053        7.48384  
 8          3.44977        9.72969       10.48132  
 8          3.70802        4.60061       10.48165  
 8          1.05636        5.67963        7.48416  
 8          1.05753        3.47657        8.78891  
 8          3.70660        6.80323       11.78773  
 8          3.45118        1.67382        9.17705  
 8          1.31329        8.60668        6.17792  
 8          3.70691        6.80317        9.17650  
 8          1.05724        3.47726        6.17835  
 8          1.31324        8.60599        8.78875  
 8          3.45071        1.67360       11.78724  
 12         9.56334        0.01091        5.98432  
 12         9.56260        0.01138        2.98673  
 12         7.16978        5.13981        5.98484  
 12         7.16914        5.14082        2.98700  
 12         0.02110        2.85985        4.48584  
 12         9.52893        7.42036        1.48946  
 12         7.20331        2.29108        1.48892  
 12         7.13576        7.98910        4.48583  
 14         5.11625        4.17552        1.48805  
 14         9.22277        6.10445        4.48665  
 14         7.50961        0.97508        4.48655  
 14         6.82890        9.30503        1.48805  
 8          5.88292        0.94295        4.48612  
 8          8.45575        9.33705        1.48848  
 8          8.27655        4.20771        1.48830  
 8          6.06227        6.07246        4.48623  
 8          6.10177        0.55043        1.48821  
 8          8.23708        9.72969        4.48620  
 8          8.49511        4.60065        4.48623  
 8          5.84341        5.67972        1.48800  
 8          5.84500        3.47706        2.79357  
 8          8.49407        6.80267        5.79207  
 8          8.23833        1.67390        3.18148  
 8          6.10057        8.60656        0.18271  
 8          8.49383        6.80361        3.18130  
 8          5.84474        3.47738        0.18238  
 8          6.10041        8.60653        2.79324  
 8          8.23828        1.67357        5.79194  
 12         9.56327        0.01041       11.98007  
 12         9.56284        0.01147        8.98233  
 12         7.16936        5.13981       11.98017  
 12         7.16978        5.14063        8.98245  
 12         0.02137        2.85980       10.48060  
 12         9.52945        7.42074        7.48484  
 12         7.20308        2.29108        7.48481  
 12         7.13626        7.98884       10.48069  
 14         5.11617        4.17569        7.48384  
 14         9.22279        6.10453       10.48218  
 14         7.50964        0.97496       10.48221  
 14         6.82903        9.30503        7.48390  
 8          5.88272        0.94267       10.48126  
 8          8.45599        9.33712        7.48404  
 8          8.27670        4.20770        7.48409  
 8          6.06239        6.07223       10.48171  
 8          6.10188        0.55021        7.48396  
 8          8.23721        9.72957       10.48157  
 8          8.49549        4.60051       10.48159  
 8          5.84364        5.67954        7.48404  
 8          5.84481        3.47702        8.78918  
 8          8.49413        6.80259       11.78788  
 8          8.23846        1.67386        9.17710  
 8          6.10054        8.60676        6.17823  
 8          8.49402        6.80300        9.17687  
 8          5.84466        3.47745        6.17830  
 8          6.10026        8.60622        8.78890  
 8          8.23836        1.67352       11.78757  
##########
#3x1x2
#Q=[ 12       4.77082       10.25398        5.99418  
# 12       4.77091       10.25404        2.99666  
# 12       2.37715        5.12533        5.99445  
# 12       2.37713        5.12525        2.99652  
# 12       4.80452        2.84531        4.49551  
# 12       4.73760        7.40517        1.49794  
# 12       2.41058        2.27634        1.49777  
# 12       2.34374        7.97351        4.49545  
# 14       0.32383        4.16063        1.49764  
# 14       4.43071        6.08911        4.49540  
# 14       2.71734        0.96078        4.49545  
# 14       2.03713        9.28870        1.49787  
# 8        1.09038        0.92903        4.49541  
# 8        3.66373        9.32144        1.49792  
# 8        3.48427        4.19289        1.49777  
# 8        1.26986        6.05669        4.49534  
# 8        1.31006        0.53552        1.49796  
# 8        3.44445        9.71427        4.49549  
# 8        3.70310        4.58532        4.49547  
# 8        1.05123        5.66422        1.49766  
# 8        1.05268        3.46216        2.80277  
# 8        3.70190        6.78766        5.80036  
# 8        3.44629        1.65906        3.19034  
# 8        1.30816        8.59085        0.19228  
# 8        3.70210        6.78763        3.19050  
# 8        1.05261        3.46197        0.19277  
# 8        1.30824        8.59096        2.80327  
# 8        3.44630        1.65921        5.80049  
# 12       4.77085       10.25449       11.99007  
# 12       4.77096       10.25399        8.99210  
# 12       2.37753        5.12564       11.99025  
# 12       2.37725        5.12501        8.99198  
# 12       4.80493        2.84530       10.49050  
# 12       4.73746        7.40529        7.49293  
# 12       2.41081        2.27629        7.49301  
# 12       2.34381        7.97352       10.49059  
# 14       0.32375        4.16061        7.49321  
# 14       4.43078        6.08907       10.49075  
# 14       2.71743        0.96064       10.49072  
# 14       2.03693        9.28869        7.49320  
# 8        1.09027        0.92892       10.49067  
# 8        3.66377        9.32122        7.49313  
# 8        3.48425        4.19271        7.49306  
# 8        1.26989        6.05674       10.49083  
# 8        1.30983        0.53545        7.49303  
# 8        3.44453        9.71448       10.49098  
# 8        3.70316        4.58523       10.49073  
# 8        1.05137        5.66438        7.49328  
# 8        1.05255        3.46195        8.79809  
# 8        3.70195        6.78764       11.79590  
# 8        3.44638        1.65882        9.18553  
# 8        1.30819        8.59082        6.18800  
# 8        3.70189        6.78763        9.18573  
# 8        1.05255        3.46222        6.18819  
# 8        1.30809        8.59108        8.79853  
# 8        3.44629        1.65901       11.79583  
# 12       9.55886       10.25386        5.99404  
# 12       9.55868       10.25371        2.99675  
# 12       7.16493        5.12510        5.99438  
# 12       7.16463        5.12501        2.99659  
# 12       9.59213        2.84528        4.49549  
# 12       9.52493        7.40531        1.49761  
# 12       7.19810        2.27592        1.49788  
# 12       7.13145        7.97382        4.49547  
# 14       5.11118        4.16066        1.49764  
# 14       9.21831        6.08934        4.49524  
# 14       7.50510        0.96042        4.49533  
# 14       6.82410        9.28944        1.49775  
# 8        5.87805        0.92816        4.49539  
# 8        8.45109        9.32153        1.49771  
# 8        8.27177        4.19282        1.49775  
# 8        6.05762        6.05689        4.49551  
# 8        6.09656        0.53603        1.49772  
# 8        8.23245        9.71424        4.49547  
# 8        8.49076        4.58551        4.49540  
# 8        5.83871        5.66447        1.49764  
# 8        5.83986        3.46218        2.80280  
# 8        8.48952        6.78792        5.80027  
# 8        8.23401        1.65900        3.19019  
# 8        6.09564        8.59107        0.19267  
# 8        8.48944        6.78764        3.19014  
# 8        5.84025        3.46191        0.19251  
# 8        6.09557        8.59091        2.80284  
# 8        8.23409        1.65915        5.80040  
# 12       9.55857       10.25426       11.98972  
# 12       9.55870       10.25371        8.99203  
# 12       7.16497        5.12498       11.98989  
# 12       7.16482        5.12511        8.99195  
# 12       9.59227        2.84513       10.49053  
# 12       9.52526        7.40526        7.49285  
# 12       7.19825        2.27605        7.49300  
# 12       7.13138        7.97387       10.49067  
# 14       5.11124        4.16075        7.49304  
# 14       9.21841        6.08935       10.49062  
# 14       7.50503        0.96037       10.49072  
# 14       6.82418        9.28942        7.49307  
# 8        5.87807        0.92833       10.49072  
# 8        8.45136        9.32160        7.49289  
# 8        8.27199        4.19299        7.49301  
# 8        6.05775        6.05678       10.49077  
# 8        6.09669        0.53595        7.49305  
# 8        8.23252        9.71415       10.49078  
# 8        8.49087        4.58539       10.49072  
# 8        5.83870        5.66457        7.49301  
# 8        5.84019        3.46225        8.79821  
# 8        8.48977        6.78796       11.79565  
# 8        8.23407        1.65908        9.18539  
# 8        6.09562        8.59102        6.18820  
# 8        8.48946        6.78781        9.18551  
# 8        5.84011        3.46213        6.18804  
# 8        6.09569        8.59099        8.79815  
# 8        8.23374        1.65902       11.79571  
# 12      14.34721       10.25427        5.99417  
# 12      14.34718       10.25412        2.99673  
# 12      11.95251        5.12484        5.99437  
# 12      11.95228        5.12490        2.99645  
# 12       0.01765        2.84560        4.49537  
# 12      14.31168        7.40501        1.49758  
# 12      11.98517        2.27603        1.49790  
# 12      11.91899        7.97395        4.49533  
# 14       9.89864        4.16084        1.49770  
# 14      14.00564        6.08929        4.49523  
# 14      12.29313        0.96023        4.49538  
# 14      11.61190        9.28939        1.49768  
# 8       10.66581        0.92816        4.49540  
# 8       13.23944        9.32164        1.49774  
# 8       13.05972        4.19300        1.49764  
# 8       10.84529        6.05690        4.49523  
# 8       10.88435        0.53560        1.49773  
# 8       13.02080        9.71423        4.49519  
# 8       13.27810        4.58531        4.49537  
# 8       10.62635        5.66468        1.49750  
# 8       10.62769        3.46213        2.80282  
# 8       13.27706        6.78761        5.80031  
# 8       13.02153        1.65891        3.19008  
# 8       10.88305        8.59104        0.19255  
# 8       13.27716        6.78762        3.19025  
# 8       10.62727        3.46209        0.19296  
# 8       10.88324        8.59098        2.80273  
# 8       13.02155        1.65883        5.80065  
# 12      14.34712       10.25460       11.98950  
# 12      14.34699       10.25470        8.99203  
# 12      11.95228        5.12455       11.98980  
# 12      11.95252        5.12485        8.99187  
# 12       0.01773        2.84558       10.49094  
# 12      14.31170        7.40497        7.49317  
# 12      11.98542        2.27575        7.49280  
# 12      11.91866        7.97389       10.49059  
# 14       9.89887        4.16088        7.49300  
# 14      14.00570        6.08938       10.49092  
# 14      12.29294        0.96028       10.49079  
# 14      11.61216        9.28919        7.49307  
# 8       10.66565        0.92837       10.49071  
# 8       13.23904        9.32133        7.49298  
# 8       13.05972        4.19303        7.49305  
# 8       10.84539        6.05697       10.49059  
# 8       10.88451        0.53562        7.49307  
# 8       13.02039        9.71426       10.49076  
# 8       13.27830        4.58557       10.49087  
# 8       10.62647        5.66443        7.49277  
# 8       10.62794        3.46197        8.79828  
# 8       13.27703        6.78793       11.79591  
# 8       13.02132        1.65885        9.18540  
# 8       10.88326        8.59085        6.18796  
# 8       13.27679        6.78804        9.18564  
# 8       10.62786        3.46200        6.18786  
# 8       10.88314        8.59087        8.79819  
# 8       13.02154        1.65898       11.79615  
];


N=size(Q,1)


#Compute M=(a,b,c)
DegToRad=pi/180;
M=zeros(3,3);
M(1,1)=t(1);
M(1,2)=t(2)*cos(DegToRad*t(6));
M(2,2)=t(2)*sin(DegToRad*t(6));
M(1,3)=t(3)*cos(DegToRad*t(5));
M(2,3)=(t(2)*t(3)*cos(DegToRad*t(4))-M(1,2)*M(1,3))/M(2,2);
M(3,3)=sqrt(t(3)^2-M(1,3)^2-M(2,3)^2);

if(InputCoordFormat == "Frac")
  P=zeros(N,4);
  P=Q;
elseif(InputCoordFormat == "Atom")
  P=zeros(N,4);
  P(:,1)=Q(:,1);
  P(:,2:4)=(inv(M)*(Q(:,2:4)'))';
else
  break;
endif

for iAt=1:N
  fx=P(iAt,2);
  fy=P(iAt,3);
  fz=P(iAt,4);
  if(wrap==1)
    fx=fx-round(fx);
    fy=fy-round(fy);
    fz=fz-round(fz);
  end
  F(iAt,1)=fx;
  F(iAt,2)=fy;
  F(iAt,3)=fz;
end

f0(1)=F(1,1);
f0(2)=F(1,2);
f0(3)=F(1,3);
for iAt=1:N
  F(iAt,1:3)=F(iAt,1:3)-f0(1:3)';
  if(rscl==1)
    if(F(iAt,1)<0)
      F(iAt,1)=F(iAt,1)+1;
    endif
    if(F(iAt,2)<0)
      F(iAt,2)=F(iAt,2)+1;
    endif
    if(F(iAt,3)<0)
      F(iAt,3)=F(iAt,3)+1;
    endif
  endif
end

id1=fopen([Name,".dat"],"w");
fprintf(id1," %5i \n\n",N);
for iAt=1:N
  if(    P(iAt,1)== 1)
    At="H ";
  elseif(P(iAt,1)== 6)
    At="C ";
  elseif(P(iAt,1)== 7)
    At="N ";
  elseif(P(iAt,1)== 8)
    At="O ";
  elseif(P(iAt,1)== 9)
    At="F ";
  elseif(P(iAt,1)==12)
    At="Mg";
  elseif(P(iAt,1)==14)
    At="Si";
  elseif(P(iAt,1)==15)
    At="P ";
  elseif(P(iAt,1)==16)
    At="S ";
  elseif(P(iAt,1)==17)
    At="Cl";
  elseif(P(iAt,1)==19)
    At="K ";
  elseif(P(iAt,1)==25)
    At="Mn";
  else
    return;
  end
# Print Positions.
# Print Position to file.
  fprintf(id1," %s %16.10f %16.10f %16.10f \n",At, F(iAt,1) , F(iAt,2) , F(iAt,3) );

end
fclose(id1);


###################################
NAtmInCell=28;

i1=1;i2=1;i3=1;i4=1;i5=1;i6=1;

for iCell=1:N/NAtmInCell

#Mg1
  for iMg1=1:4
    Mg1=iMg1+(iCell-1)*NAtmInCell;
#x
    if(F(Mg1,1)>0.001)
      vMg1(i1,1)=F(Mg1,1)-.5;
    elseif(F(Mg1,1)<-0.001)
      vMg1(i1,1)=F(Mg1,1)+.5;
    else
      vMg1(i1,1)=F(Mg1,1);
    end
#y
    if(F(Mg1,2)>0.001)
      vMg1(i1,2)=F(Mg1,2)-.5;
    elseif(F(Mg1,2)<-0.001)
      vMg1(i1,2)=F(Mg1,2)+.5;
    else
      vMg1(i1,2)=F(Mg1,2);
    end
#z
    if(F(Mg1,3)>0.001)
      vMg1(i1,3)=F(Mg1,3)-.5;
    elseif(F(Mg1,3)<-0.001)
      vMg1(i1,3)=F(Mg1,3)+.5;
    else
      vMg1(i1,3)=F(Mg1,3);
    end

    i1=i1+1;
  end


#Mg2
  for iMg2=5:8
    Mg2=iMg2+(iCell-1)*NAtmInCell;
#x
    if(abs(F(Mg2,1))>0.01)
      vMg2(i2,1)=.5-abs(F(Mg2,1));
    else
      vMg2(i2,1)=abs(F(Mg2,1));
    end
#y
    if(abs(F(Mg2,2))<0.25)
      vMg2(i2,2)=.5-abs(F(Mg2,2));
    else
      vMg2(i2,2)=abs(F(Mg2,2));
    end
#z
    if(abs(F(Mg2,3))>0.01)
      vMg2(i2,3)=.5-abs(F(Mg2,3));
    else
      vMg2(i2,3)=abs(F(Mg2,3));
    end

    i2=i2+1;
  end

#Si
  for iSi=9:12
    Si=iSi+(iCell-1)*NAtmInCell;
#x
    if(abs(F(Si,1))<0.4)
      vSi(i3,1)=.5-abs(F(Si,1));
    else
      vSi(i3,1)=abs(F(Si,1));
    end
#y
    if(abs(F(Si,2))>0.25)
      vSi(i3,2)=.5-abs(F(Si,2));
    else
      vSi(i3,2)=abs(F(Si,2));
    end
#z
    if(abs(F(Si,3))>0.01)
      vSi(i3,3)=.5-abs(F(Si,3));
    else
      vSi(i3,3)=abs(F(Si,3));
    end

    i3=i3+1;
  end

#O1
  for iO1=13:16
    ii=iO1+(iCell-1)*NAtmInCell;
#x
    if(abs(F(ii,1))>0.25)
      vO1(i4,1)=-.5+abs(F(ii,1));
    else
      vO1(i4,1)=-abs(F(ii,1));
    end
#y
    if(abs(F(ii,2))>0.25)
      vO1(i4,2)=.5-abs(F(ii,2));
    else
      vO1(i4,2)=abs(F(ii,2));
    end
#z
    if(abs(F(ii,3))>0.01)
      vO1(i4,3)=.5-abs(F(ii,3));
    else
      vO1(i4,3)=abs(F(ii,3));
    end

    i4=i4+1;
  end

#O2
  for iO2=17:20
    ii=iO2+(iCell-1)*NAtmInCell;
#x
    if(abs(F(ii,1))>0.25)
      vO2(i5,1)=.5-abs(F(ii,1));
    else
      vO2(i5,1)=abs(F(ii,1));
    end
#y
    if(abs(F(ii,2))<0.25)
      vO2(i5,2)=.5-abs(F(ii,2));
    else
      vO2(i5,2)=abs(F(ii,2));
    end
#z
    if(abs(F(ii,3))>0.01)
      vO2(i5,3)=.5-abs(F(ii,3));
    else
      vO2(i5,3)=abs(F(ii,3));
    end

    i5=i5+1;
  end

#O3
  for iO3=21:28
    ii=iO3+(iCell-1)*NAtmInCell;
#x
    if(abs(F(ii,1))<0.25)
      vO3(i6,1)=.5-abs(F(ii,1));
    else
      vO3(i6,1)=abs(F(ii,1));
    end
#y
    if(abs(F(ii,2))>0.25)
      vO3(i6,2)=.5-abs(F(ii,2));
    else
      vO3(i6,2)=abs(F(ii,2));
    end
#z
    if(abs(F(ii,3))>0.1)
      vO3(i6,3)=.5-abs(F(ii,3));
    else
      vO3(i6,3)=abs(F(ii,3));
    end

    i6=i6+1;
  end

end



#vMg1
m=abs(mean(vMg1));
s=std(vMg1);
printf(" Mg1 x = %7.5f %7.5f  y = %7.5f %7.5f  z = %7.5f %7.5f \n", m(1), s(1), m(2), s(2), m(3), s(3) );

#vMg2(:,3)
m=abs(mean(vMg2));
s=std(vMg2);
printf(" Mg2 x = %7.5f %7.5f  y = %7.5f %7.5f  z = %7.5f %7.5f \n", m(1), s(1), m(2), s(2), m(3), s(3) );

#vSi(:,1)
m=mean(vSi);
s=std(vSi);
printf(" Si  x = %7.5f %7.5f  y = %7.5f %7.5f  z = %7.5f %7.5f \n", m(1), s(1), m(2), s(2), m(3), s(3) );

#vO1(:,1)
m=abs(mean(vO1));
s=std(vO1);
printf(" O1  x = %7.5f %7.5f  y = %7.5f %7.5f  z = %7.5f %7.5f \n", m(1), s(1), m(2), s(2), m(3), s(3) );

#vO2(:,2)
m=mean(vO2);
s=std(vO2);
printf(" O2  x = %7.5f %7.5f  y = %7.5f %7.5f  z = %7.5f %7.5f \n", m(1), s(1), m(2), s(2), m(3), s(3) );

#vO3(:,3)
m=mean(vO3);
s=std(vO3);
printf(" O3  x = %7.5f %7.5f  y = %7.5f %7.5f  z = %7.5f %7.5f \n", m(1), s(1), m(2), s(2), m(3), s(3) );


