%!PS-Adobe-2.0 EPSF-2.0
%%Title: grads.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Thu Apr 21 01:43:45 2005
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid false def
/gnulinewidth 12.500 def
/userlinewidth gnulinewidth def
/vshift -100 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Times Roman) findfont 300 scalefont setfont
1.000 UL
LTb
1530 900 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 900 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-4.5)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 1293 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 1293 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-4)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 1687 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 1687 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-3.5)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 2080 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 2080 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-3)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 2473 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 2473 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-2.5)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 2867 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 2867 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-2)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 3260 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 3260 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-1.5)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 3653 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 3653 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-1)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 4047 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 4047 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-0.5)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 4440 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 4440 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 0)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 900 M
0 63 V
0 3477 R
0 -63 V
stroke
1530 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 0)]
] -100.0 MCshow
grestore
1.000 UL
LTb
2390 900 M
0 63 V
0 3477 R
0 -63 V
stroke
2390 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 10)]
] -100.0 MCshow
grestore
1.000 UL
LTb
3250 900 M
0 63 V
0 3477 R
0 -63 V
stroke
3250 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 20)]
] -100.0 MCshow
grestore
1.000 UL
LTb
4110 900 M
0 63 V
0 3477 R
0 -63 V
stroke
4110 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 30)]
] -100.0 MCshow
grestore
1.000 UL
LTb
4970 900 M
0 63 V
0 3477 R
0 -63 V
stroke
4970 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 40)]
] -100.0 MCshow
grestore
1.000 UL
LTb
5830 900 M
0 63 V
0 3477 R
0 -63 V
stroke
5830 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 50)]
] -100.0 MCshow
grestore
1.000 UL
LTb
6690 900 M
0 63 V
0 3477 R
0 -63 V
stroke
6690 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 60)]
] -100.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1530 900 M
5160 0 V
0 3540 V
-5160 0 V
0 -3540 V
LTb
300 2670 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Times Roman) 300.0 0.0 true true 0 (log)]
[(Times Roman) 240.0 -90.0 true true 0 (10)]
[(Times Roman) 300.0 0.0 true true 0 (\(g)]
[(Times Roman) 240.0 -90.0 true true 0 (i)]
[(Times Roman) 300.0 0.0 true true 0 (\))]
] -70.0 MCshow
grestore
grestore
LTb
4110 150 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (i, optimization step)]
] -100.0 MCshow
grestore
LTb
11310 4590 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (atomic grad)]
] -100.0 MCshow
grestore
1.000 UP
2.000 UP
2.500 UL
LT0
1616 3549 M
86 -226 V
86 -66 V
86 -157 V
86 -185 V
86 -139 V
86 -140 V
86 63 V
86 -115 V
86 -30 V
86 -138 V
86 32 V
86 -58 V
86 295 V
86 -255 V
86 26 V
86 -62 V
86 159 V
86 -41 V
86 161 V
86 -22 V
86 -177 V
86 -26 V
86 40 V
86 -222 V
86 65 V
86 -119 V
86 -30 V
86 198 V
86 17 V
86 -107 V
86 -158 V
86 285 V
86 -128 V
86 -107 V
86 -58 V
86 156 V
86 -105 V
86 7 V
86 -225 V
86 404 V
86 -69 V
86 -182 V
86 58 V
86 -112 V
86 99 V
86 49 V
86 -152 V
86 133 V
86 -131 V
86 91 V
86 -265 V
86 18 V
86 188 V
86 -302 V
1616 3549 Box
1702 3323 Box
1788 3257 Box
1874 3100 Box
1960 2915 Box
2046 2776 Box
2132 2636 Box
2218 2699 Box
2304 2584 Box
2390 2554 Box
2476 2416 Box
2562 2448 Box
2648 2390 Box
2734 2685 Box
2820 2430 Box
2906 2456 Box
2992 2394 Box
3078 2553 Box
3164 2512 Box
3250 2673 Box
3336 2651 Box
3422 2474 Box
3508 2448 Box
3594 2488 Box
3680 2266 Box
3766 2331 Box
3852 2212 Box
3938 2182 Box
4024 2380 Box
4110 2397 Box
4196 2290 Box
4282 2132 Box
4368 2417 Box
4454 2289 Box
4540 2182 Box
4626 2124 Box
4712 2280 Box
4798 2175 Box
4884 2182 Box
4970 1957 Box
5056 2361 Box
5142 2292 Box
5228 2110 Box
5314 2168 Box
5400 2056 Box
5486 2155 Box
5572 2204 Box
5658 2052 Box
5744 2185 Box
5830 2054 Box
5916 2145 Box
6002 1880 Box
6088 1898 Box
6174 2086 Box
6260 1784 Box
2.000 UP
2.500 UL
LT1
1616 4266 M
86 -593 V
86 -275 V
86 -467 V
86 110 V
86 -165 V
86 -113 V
86 -108 V
86 -311 V
86 -204 V
86 70 V
86 -17 V
86 81 V
86 -282 V
86 146 V
86 -90 V
86 31 V
86 23 V
86 -17 V
86 -289 V
86 358 V
86 -119 V
86 87 V
86 -34 V
86 -209 V
86 205 V
86 50 V
86 -117 V
86 -93 V
86 94 V
86 -72 V
86 -386 V
86 306 V
86 25 V
86 -75 V
86 218 V
86 -233 V
86 160 V
86 -83 V
86 67 V
86 -132 V
86 108 V
86 -326 V
86 25 V
86 -355 V
86 -48 V
86 467 V
86 -211 V
86 303 V
86 -526 V
86 429 V
86 -116 V
86 68 V
86 40 V
86 -217 V
1616 4266 Box
1702 3673 Box
1788 3398 Box
1874 2931 Box
1960 3041 Box
2046 2876 Box
2132 2763 Box
2218 2655 Box
2304 2344 Box
2390 2140 Box
2476 2210 Box
2562 2193 Box
2648 2274 Box
2734 1992 Box
2820 2138 Box
2906 2048 Box
2992 2079 Box
3078 2102 Box
3164 2085 Box
3250 1796 Box
3336 2154 Box
3422 2035 Box
3508 2122 Box
3594 2088 Box
3680 1879 Box
3766 2084 Box
3852 2134 Box
3938 2017 Box
4024 1924 Box
4110 2018 Box
4196 1946 Box
4282 1560 Box
4368 1866 Box
4454 1891 Box
4540 1816 Box
4626 2034 Box
4712 1801 Box
4798 1961 Box
4884 1878 Box
4970 1945 Box
5056 1813 Box
5142 1921 Box
5228 1595 Box
5314 1620 Box
5400 1265 Box
5486 1217 Box
5572 1684 Box
5658 1473 Box
5744 1776 Box
5830 1250 Box
5916 1679 Box
6002 1563 Box
6088 1631 Box
6174 1671 Box
6260 1454 Box
1.000 UL
LTb
1530 900 M
5160 0 V
0 3540 V
-5160 0 V
0 -3540 V
1.000 UP
stroke
grestore
end
showpage
