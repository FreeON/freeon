%!PS-Adobe-2.0 EPSF-2.0
%%Title: curve2_1.eps
%%Creator: gnuplot 3.8j patchlevel 0
%%CreationDate: Fri Mar 26 18:24:41 2004
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid false def
/gnulinewidth 12.500 def
/userlinewidth gnulinewidth def
/vshift -100 def
/dl {20.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {{dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse } forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Times Roman) findfont 300 scalefont setfont
1.000 UL
LTb
1530 900 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 900 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-7)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 1440 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 1440 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-6.5)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 1980 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 1980 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-6)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 2520 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 2520 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-5.5)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 3060 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 3060 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-5)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 3600 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 3600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-4.5)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 4140 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 4140 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-4)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 4680 M
63 0 V
5097 0 R
-63 0 V
stroke
1350 4680 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-3.5)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1530 900 M
0 63 V
0 3717 R
0 -63 V
stroke
1530 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 0)]
] -100.0 MCshow
grestore
1.000 UL
LTb
2267 900 M
0 63 V
0 3717 R
0 -63 V
stroke
2267 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 10)]
] -100.0 MCshow
grestore
1.000 UL
LTb
3004 900 M
0 63 V
0 3717 R
0 -63 V
stroke
3004 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 20)]
] -100.0 MCshow
grestore
1.000 UL
LTb
3741 900 M
0 63 V
0 3717 R
0 -63 V
stroke
3741 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 30)]
] -100.0 MCshow
grestore
1.000 UL
LTb
4479 900 M
0 63 V
0 3717 R
0 -63 V
stroke
4479 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 40)]
] -100.0 MCshow
grestore
1.000 UL
LTb
5216 900 M
0 63 V
0 3717 R
0 -63 V
stroke
5216 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 50)]
] -100.0 MCshow
grestore
1.000 UL
LTb
5953 900 M
0 63 V
0 3717 R
0 -63 V
stroke
5953 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 60)]
] -100.0 MCshow
grestore
1.000 UL
LTb
6690 900 M
0 63 V
0 3717 R
0 -63 V
stroke
6690 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 70)]
] -100.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1530 900 M
5160 0 V
0 3780 V
-5160 0 V
0 -3780 V
LTb
300 2790 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Times Roman) 300.0 0.0 true true 0 (log|\(E)]
[(Times Roman) 240.0 -90.0 true true 0 (i+1)]
[(Times Roman) 300.0 0.0 true true 0 ( - E)]
[(Times Roman) 240.0 -90.0 true true 0 (opt)]
[(Times Roman) 300.0 0.0 true true 0 (\)/E)]
[(Times Roman) 240.0 -90.0 true true 0 (opt)]
[(Times Roman) 300.0 0.0 true true 0 (|)]
] -70.0 MCshow
grestore
grestore
LTb
4110 150 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (i)]
] -100.0 MCshow
grestore
1.000 UP
2.000 UP
2.000 UL
LT0
1604 4662 M
73 -316 V
74 -116 V
74 -86 V
74 -78 V
73 -95 V
74 -84 V
74 -67 V
73 -75 V
74 -74 V
74 -48 V
74 -46 V
73 -40 V
74 -61 V
74 -61 V
73 -14 V
74 -15 V
74 -40 V
74 -32 V
73 -38 V
74 -33 V
74 -37 V
73 -46 V
74 -42 V
74 -36 V
74 -53 V
73 -37 V
74 -61 V
74 -51 V
73 -19 V
74 -62 V
74 -32 V
74 -37 V
73 -31 V
74 -13 V
74 -12 V
73 -19 V
74 -8 V
74 0 V
74 -25 V
73 -39 V
74 -42 V
74 3 V
73 -27 V
74 -45 V
74 5 V
74 -33 V
73 -48 V
74 4 V
74 -59 V
73 -39 V
74 -68 V
74 43 V
74 -13 V
73 -87 V
74 -13 V
74 -75 V
73 26 V
74 -113 V
74 -100 V
74 -26 V
73 -146 V
74 -148 V
74 -10 V
73 12 V
74 -94 V
74 87 V
74 -359 V
73 93 V
74 -190 V
1604 4662 Pls
1677 4346 Pls
1751 4230 Pls
1825 4144 Pls
1899 4066 Pls
1972 3971 Pls
2046 3887 Pls
2120 3820 Pls
2193 3745 Pls
2267 3671 Pls
2341 3623 Pls
2415 3577 Pls
2488 3537 Pls
2562 3476 Pls
2636 3415 Pls
2709 3401 Pls
2783 3386 Pls
2857 3346 Pls
2931 3314 Pls
3004 3276 Pls
3078 3243 Pls
3152 3206 Pls
3225 3160 Pls
3299 3118 Pls
3373 3082 Pls
3447 3029 Pls
3520 2992 Pls
3594 2931 Pls
3668 2880 Pls
3741 2861 Pls
3815 2799 Pls
3889 2767 Pls
3963 2730 Pls
4036 2699 Pls
4110 2686 Pls
4184 2674 Pls
4257 2655 Pls
4331 2647 Pls
4405 2647 Pls
4479 2622 Pls
4552 2583 Pls
4626 2541 Pls
4700 2544 Pls
4773 2517 Pls
4847 2472 Pls
4921 2477 Pls
4995 2444 Pls
5068 2396 Pls
5142 2400 Pls
5216 2341 Pls
5289 2302 Pls
5363 2234 Pls
5437 2277 Pls
5511 2264 Pls
5584 2177 Pls
5658 2164 Pls
5732 2089 Pls
5805 2115 Pls
5879 2002 Pls
5953 1902 Pls
6027 1876 Pls
6100 1730 Pls
6174 1582 Pls
6248 1572 Pls
6321 1584 Pls
6395 1490 Pls
6469 1577 Pls
6543 1218 Pls
6616 1311 Pls
6690 1121 Pls
1.000 UL
LTb
1530 900 M
5160 0 V
0 3780 V
-5160 0 V
0 -3780 V
1.000 UP
stroke
grestore
end
showpage
                                                                                                                                                                                                                                                                                 %%Trailer
%%DocumentFonts: Times Roman
