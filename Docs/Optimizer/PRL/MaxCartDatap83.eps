%!PS-Adobe-2.0 EPSF-2.0
%%Title: MaxCartDatap83.eps
%%Creator: gnuplot 3.8j patchlevel 0
%%CreationDate: Wed Apr 21 12:09:09 2004
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid false def
/gnulinewidth 12.500 def
/userlinewidth gnulinewidth def
/vshift -100 def
/dl {20.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {{dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse } forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Times Roman) findfont 300 scalefont setfont
1.000 UL
LTb
1170 900 M
63 0 V
5457 0 R
-63 0 V
stroke
990 900 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-8)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1170 1440 M
63 0 V
5457 0 R
-63 0 V
stroke
990 1440 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-7)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1170 1980 M
63 0 V
5457 0 R
-63 0 V
stroke
990 1980 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-6)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1170 2520 M
63 0 V
5457 0 R
-63 0 V
stroke
990 2520 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-5)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1170 3060 M
63 0 V
5457 0 R
-63 0 V
stroke
990 3060 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-4)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1170 3600 M
63 0 V
5457 0 R
-63 0 V
stroke
990 3600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-3)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1170 4140 M
63 0 V
5457 0 R
-63 0 V
stroke
990 4140 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-2)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1170 4680 M
63 0 V
5457 0 R
-63 0 V
stroke
990 4680 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (-1)]
] -100.0 MRshow
grestore
1.000 UL
LTb
1170 900 M
0 63 V
0 3717 R
0 -63 V
stroke
1170 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 0)]
] -100.0 MCshow
grestore
1.000 UL
LTb
1783 900 M
0 63 V
0 3717 R
0 -63 V
stroke
1783 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 10)]
] -100.0 MCshow
grestore
1.000 UL
LTb
2397 900 M
0 63 V
0 3717 R
0 -63 V
stroke
2397 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 20)]
] -100.0 MCshow
grestore
1.000 UL
LTb
3010 900 M
0 63 V
0 3717 R
0 -63 V
stroke
3010 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 30)]
] -100.0 MCshow
grestore
1.000 UL
LTb
3623 900 M
0 63 V
0 3717 R
0 -63 V
stroke
3623 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 40)]
] -100.0 MCshow
grestore
1.000 UL
LTb
4237 900 M
0 63 V
0 3717 R
0 -63 V
stroke
4237 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 50)]
] -100.0 MCshow
grestore
1.000 UL
LTb
4850 900 M
0 63 V
0 3717 R
0 -63 V
stroke
4850 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 60)]
] -100.0 MCshow
grestore
1.000 UL
LTb
5463 900 M
0 63 V
0 3717 R
0 -63 V
stroke
5463 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 70)]
] -100.0 MCshow
grestore
1.000 UL
LTb
6077 900 M
0 63 V
0 3717 R
0 -63 V
stroke
6077 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 80)]
] -100.0 MCshow
grestore
1.000 UL
LTb
6690 900 M
0 63 V
0 3717 R
0 -63 V
stroke
6690 600 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 ( 90)]
] -100.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1170 900 M
5520 0 V
0 3780 V
-5520 0 V
0 -3780 V
LTb
300 2790 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Times Roman) 300.0 0.0 true true 0 (log)]
[(Times Roman) 240.0 -90.0 true true 0 (10)]
[(Times Roman) 300.0 0.0 true true 0 (\(g)]
[(Times Roman) 240.0 -90.0 true true 0 (i)]
[(Times Roman) 300.0 0.0 true true 0 (\))]
] -70.0 MCshow
grestore
grestore
LTb
3930 150 M
gsave 0 setgray
[ [(Times Roman) 300.0 0.0 true true 0 (i)]
] -100.0 MCshow
grestore
1.000 UP
2.000 UP
2.000 UL
LT0
1231 4556 M
62 -230 V
61 -279 V
61 12 V
62 -163 V
61 35 V
61 21 V
62 -16 V
61 -110 V
61 62 V
62 -205 V
61 83 V
61 138 V
62 -348 V
61 -202 V
61 36 V
62 357 V
61 -342 V
61 596 V
62 -796 V
61 -52 V
61 -218 V
62 124 V
61 -116 V
61 220 V
62 -89 V
61 58 V
61 37 V
62 200 V
61 210 V
61 -125 V
62 -1 V
61 -31 V
61 -22 V
62 -59 V
61 -162 V
61 -330 V
62 -12 V
61 57 V
61 26 V
62 -362 V
61 -241 V
61 178 V
62 -35 V
61 184 V
61 -277 V
62 439 V
61 -78 V
61 63 V
62 89 V
61 -165 V
61 -46 V
62 211 V
61 -245 V
61 -100 V
62 321 V
61 -161 V
61 77 V
62 -317 V
61 -82 V
61 -54 V
62 58 V
61 295 V
61 -88 V
62 -464 V
61 152 V
61 -8 V
62 -207 V
61 -220 V
61 100 V
62 63 V
61 419 V
61 -478 V
62 -270 V
61 232 V
61 283 V
62 -197 V
61 -454 V
61 -79 V
62 181 V
61 -151 V
61 -62 V
1231 4556 Pls
1293 4326 Pls
1354 4047 Pls
1415 4059 Pls
1477 3896 Pls
1538 3931 Pls
1599 3952 Pls
1661 3936 Pls
1722 3826 Pls
1783 3888 Pls
1845 3683 Pls
1906 3766 Pls
1967 3904 Pls
2029 3556 Pls
2090 3354 Pls
2151 3390 Pls
2213 3747 Pls
2274 3405 Pls
2335 4001 Pls
2397 3205 Pls
2458 3153 Pls
2519 2935 Pls
2581 3059 Pls
2642 2943 Pls
2703 3163 Pls
2765 3074 Pls
2826 3132 Pls
2887 3169 Pls
2949 3369 Pls
3010 3579 Pls
3071 3454 Pls
3133 3453 Pls
3194 3422 Pls
3255 3400 Pls
3317 3341 Pls
3378 3179 Pls
3439 2849 Pls
3501 2837 Pls
3562 2894 Pls
3623 2920 Pls
3685 2558 Pls
3746 2317 Pls
3807 2495 Pls
3869 2460 Pls
3930 2644 Pls
3991 2367 Pls
4053 2806 Pls
4114 2728 Pls
4175 2791 Pls
4237 2880 Pls
4298 2715 Pls
4359 2669 Pls
4421 2880 Pls
4482 2635 Pls
4543 2535 Pls
4605 2856 Pls
4666 2695 Pls
4727 2772 Pls
4789 2455 Pls
4850 2373 Pls
4911 2319 Pls
4973 2377 Pls
5034 2672 Pls
5095 2584 Pls
5157 2120 Pls
5218 2272 Pls
5279 2264 Pls
5341 2057 Pls
5402 1837 Pls
5463 1937 Pls
5525 2000 Pls
5586 2419 Pls
5647 1941 Pls
5709 1671 Pls
5770 1903 Pls
5831 2186 Pls
5893 1989 Pls
5954 1535 Pls
6015 1456 Pls
6077 1637 Pls
6138 1486 Pls
6199 1424 Pls
1.000 UL
LTb
1170 900 M
5520 0 V
0 3780 V
-5520 0 V
0 -3780 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Times Roman
