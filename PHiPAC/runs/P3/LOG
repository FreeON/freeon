perl ../../search-2.2/search.pl -custom -machine machine_specs -ccopt compiler_options -prec double -level 0
--- using custom option files () ---
/n/srv5/mchalla/Desktop/PHiPAC.gamma/search-2.2/search_start.pl

Search initialization started on ice on Fri Oct 20 13:58:29 MDT 2000

creating cache ./config.cache
checking host system type... Invalid configuration `i686-unknown-linux': machine `i686-unknown' not recognized

checking build system type... Invalid configuration `i686-unknown-linux': machine `i686-unknown' not recognized

checking for i686-unknown-linux-gcc... gcc
checking whether we are using GNU C... yes
checking for a BSD compatible install... /usr/bin/install -c
checking for i686-unknown-linux-ar... ar
checking for i686-unknown-linux-ranlib... no
checking for ranlib... ranlib
checking how to run test programs... host
checking how to run the C preprocessor... gcc -E
checking for AIX... no
/n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0/configure: test: =: unary operator expected
checking for getrusage... yes
checking for gettimeofday... yes
updating cache ./config.cache
creating ./config.status
creating Makefile
make: *** Warning: File `Makefile' has modification time in the future (2000-10-20 13:58:33 > 2000-10-20 13:58:31)
gcc -DHAVE_GETRUSAGE=1 -DHAVE_GETTIMEOFDAY=1 -DIPM_GETTIMEOFDAY_RESOLUTION=\(0.0001\) -DIPM_init_DEFAULT=IPM_init_gettimeofday  -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0 -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/include  -c /n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0/IPM_version.c
gcc -DHAVE_GETRUSAGE=1 -DHAVE_GETTIMEOFDAY=1 -DIPM_GETTIMEOFDAY_RESOLUTION=\(0.0001\) -DIPM_init_DEFAULT=IPM_init_gettimeofday  -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0 -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/include  -c /n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0/IPM_timer.c
gcc -DHAVE_GETRUSAGE=1 -DHAVE_GETTIMEOFDAY=1 -DIPM_GETTIMEOFDAY_RESOLUTION=\(0.0001\) -DIPM_init_DEFAULT=IPM_init_gettimeofday  -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0 -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/include  -c /n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0/IPM_timer_getrusage.c
gcc -DHAVE_GETRUSAGE=1 -DHAVE_GETTIMEOFDAY=1 -DIPM_GETTIMEOFDAY_RESOLUTION=\(0.0001\) -DIPM_init_DEFAULT=IPM_init_gettimeofday  -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0 -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/include  -c /n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0/IPM_timer_gettimeofday.c
rm -f libipm.a
ar rcv libipm.a IPM_version.o IPM_timer.o  IPM_timer_getrusage.o IPM_timer_gettimeofday.o
a - IPM_version.o
a - IPM_timer.o
a - IPM_timer_getrusage.o
a - IPM_timer_gettimeofday.o
ranlib libipm.a
/usr/bin/install -c -m 644 libipm.a /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/lib/libipm.a
ranlib /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/lib/libipm.a
/usr/bin/install -c -m 644 /n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0/IPM_timer.h /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/include/IPM_timer.h
/usr/bin/install -c -m 644 /n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0/README /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/doc/IPM.txt
make: *** Warning:  Clock skew detected.  Your build may be incomplete.
loading cache ./config.cache
checking host system type... Invalid configuration `i686-unknown-linux': machine `i686-unknown' not recognized

checking target system type... Invalid configuration `i686-unknown-linux': machine `i686-unknown' not recognized

checking build system type... Invalid configuration `i686-unknown-linux': machine `i686-unknown' not recognized

checking for i686-unknown-linux-gcc... (cached) gcc
checking whether we are using GNU C... (cached) yes
checking for a BSD compatible install... (cached) /usr/bin/install -c
checking for i686-unknown-linux-ar... (cached) ar
checking for i686-unknown-linux-ranlib... (cached) ranlib
checking how to run the C preprocessor... (cached) gcc -E
checking whether cross-compiling... no
checking for ANSI C header files... yes
checking for memory.h... yes
checking for working const... yes
checking for strtod... yes
checking for strtol... yes
/n/srv5/mchalla/Desktop/PHiPAC.gamma/rprf-v0_19/configure: test: =: unary operator expected
updating cache ./config.cache
creating ./config.status
creating Makefile
make: *** Warning: File `Makefile' has modification time in the future (2000-10-20 13:58:37 > 2000-10-20 13:58:35)
gcc -DSTDC_HEADERS=1 -DHAVE_MEMORY_H=1 -DHAVE_STRTOD=1 -DHAVE_STRTOL=1  -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/rprf-v0_19 -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/include  -c /n/srv5/mchalla/Desktop/PHiPAC.gamma/rprf-v0_19/rprf.c
rm -f librprf.a
ar rcv librprf.a rprf.o
a - rprf.o
ranlib librprf.a
/n/srv5/mchalla/Desktop/PHiPAC.gamma/rprf-v0_19/mkinstalldirs /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/include /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/lib
for i in librprf.a; do \
	/usr/bin/install -c $i /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/lib/$i; \
	ranlib /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/lib/$i; \
done
for i in /n/srv5/mchalla/Desktop/PHiPAC.gamma/rprf-v0_19/rprf.h; do \
	/usr/bin/install -c -m 644 $i /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/include/`basename $i`; \
done
make: *** Warning:  Clock skew detected.  Your build may be incomplete.
Creating subdirectories...
>>> rm -rf /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp; mkdir /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp; rm -rf /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/perf; mkdir /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/perf
>>> mkdir /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/include /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/lib /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/src /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/obj /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/bin /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/doc
Compiling IPM...
>>> env CC=gcc CFLAGS='' /n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0/configure --srcdir=/n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0 --prefix=/n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp
>>> make install
Compiling RPRF...
>>> env CC=gcc CFLAGS='' /n/srv5/mchalla/Desktop/PHiPAC.gamma/rprf-v0_19/configure --srcdir=/n/srv5/mchalla/Desktop/PHiPAC.gamma/rprf-v0_19 --prefix=/n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp
>>> make install
Compiling core-code generator...
>>> gcc -O -o mm_cgen /n/srv5/mchalla/Desktop/PHiPAC.gamma/mm_gen-2.0/mm_cgen.c
Compiling level-code generator...
>>> gcc -O -o mm_lgen /n/srv5/mchalla/Desktop/PHiPAC.gamma/mm_gen-2.0/mm_lgen.c


Search initialization completed on ice at Fri Oct 20 13:58:43 MDT 2000



L0CORE Search started on ice on Fri Oct 20 13:58:44 MDT 2000

(5,14,9) <- (1,0,9).*(5, 14+0,1): 182.671411 Mflop/s
(15,14,15) <- (3,1,15).*(5, 14+0,1): 185.594721 Mflop/s
Compiling timer object code...
>>> gcc -O1 -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0 -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/rprf-v0_19 -o ./obj/mm_timer.o -c /n/srv5/mchalla/Desktop/PHiPAC.gamma/search-2.2/mm_timer.c -DSEARCH_MODE_L0CORE -DALPHA_EQUALS_ONE -DDOUBLE_PREC
Testing double.NN.1.1A.CC (-O1)...

Testing m0 = 5, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 14 9 5 14 14 9 5 9
<<< (M = 5, K = 14, N = 9) : 182.671411
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 185.594721
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 14,1) :   184.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 1 (0.0%), 11249 (100.0%) left; Finishing by Sat Oct 21 11:51:13 2000

(9,14,12) <- (9,0,0).*(1, 14+0,12): 132.588296 Mflop/s
(15,14,12) <- (15,1,1).*(1, 14+0,12): 134.613872 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 12 9 14 14 12 9 12
<<< (M = 9, K = 14, N = 12) : 132.588296
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 134.613872
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,12) :   133.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 2 (0.0%), 11248 (100.0%) left; Finishing by Sat Oct 21  8:43:43 2000

(8,12,8) <- (2,0,2).*(4, 12+0,4): 61.259080 Mflop/s
(12,12,12) <- (3,1,3).*(4, 12+0,4): 70.559130 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 61.259080
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 12 12 12 12 12 12 12
<<< (M = 12, K = 12, N = 12) : 70.559130
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 12,4) :    65.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 3 (0.0%), 11247 (100.0%) left; Finishing by Sat Oct 21  7:41:13 2000

(9,10,14) <- (9,0,0).*(1, 10+0,14): 126.261637 Mflop/s
(15,10,14) <- (15,1,1).*(1, 10+0,14): 122.292912 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 14 9 10 10 14 9 14
<<< (M = 9, K = 10, N = 14) : 126.261637
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 122.292912
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,14) :   124.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 4 (0.0%), 11246 (100.0%) left; Finishing by Sat Oct 21  7:56:50 2000

(12,11,9) <- (0,0,9).*(12, 11+0,1): 124.650871 Mflop/s
(12,11,15) <- (1,1,15).*(12, 11+0,1): 127.855856 Mflop/s

Testing m0 = 12, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 12  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 9 12 11 11 9 12 9
<<< (M = 12, K = 11, N = 9) : 124.650871
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 127.855856
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (12, 11,1) :   126.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 5 (0.0%), 11245 (100.0%) left; Finishing by Sat Oct 21  7:28:43 2000

(9,6,7) <- (9,1,1).*(1, 6+0,7): 116.440659 Mflop/s
(15,12,14) <- (15,2,2).*(1, 6+0,7): 139.988050 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 7 9 6 6 7 9 7
<<< (M = 9, K = 6, N = 7) : 116.440659
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 139.988050
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,7) :   127.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 6 (0.1%), 11244 (99.9%) left; Finishing by Sat Oct 21  7:41:13 2000

(14,13,9) <- (0,0,9).*(14, 13+0,1): 131.588941 Mflop/s
(14,13,15) <- (1,1,15).*(14, 13+0,1): 131.273241 Mflop/s

Testing m0 = 14, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 14  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 9 14 13 13 9 14 9
<<< (M = 14, K = 13, N = 9) : 131.588941
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 131.273241
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (14, 13,1) :   131.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 7 (0.1%), 11243 (99.9%) left; Finishing by Sat Oct 21  7:23:21 2000

(8,5,9) <- (2,1,3).*(4, 5+0,3): 49.121885 Mflop/s
(12,15,15) <- (3,3,5).*(4, 5+0,3): 71.261327 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 9 8 5 5 9 8 9
<<< (M = 8, K = 5, N = 9) : 49.121885
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 71.261327
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 5,3) :    58.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 8 (0.1%), 11242 (99.9%) left; Finishing by Sat Oct 21  7:09:58 2000

(8,8,9) <- (2,1,3).*(4, 8+0,3): 59.267833 Mflop/s
(12,8,15) <- (3,1,5).*(4, 8+0,3): 60.134695 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 59.267833
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 15 12 8 8 15 12 15
<<< (M = 12, K = 8, N = 15) : 60.134695
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 8,3) :    59.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 9 (0.1%), 11241 (99.9%) left; Finishing by Sat Oct 21  6:59:33 2000

(8,11,9) <- (2,0,9).*(4, 11+0,1): 159.159342 Mflop/s
(12,11,15) <- (3,1,15).*(4, 11+0,1): 167.816914 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 159.159342
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 167.816914
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 11,1) :   163.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 10 (0.1%), 11240 (99.9%) left; Finishing by Sat Oct 21  7:09:58 2000

(5,10,9) <- (1,0,3).*(5, 10+0,3): 126.579849 Mflop/s
(15,10,15) <- (3,1,5).*(5, 10+0,3): 112.726087 Mflop/s

Testing m0 = 5, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 9 5 10 10 9 5 9
<<< (M = 5, K = 10, N = 9) : 126.579849
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 112.726087
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 10,3) :   119.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 11 (0.1%), 11239 (99.9%) left; Finishing by Sat Oct 21  7:18:29 2000

(9,5,16) <- (9,1,0).*(1, 5+0,16): 110.028413 Mflop/s
(15,15,16) <- (15,3,0).*(1, 5+0,16): 138.336758 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 16 9 5 5 16 9 16
<<< (M = 9, K = 5, N = 16) : 110.028413
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 16 15 15 15 16 15 16
<<< (M = 15, K = 15, N = 16) : 138.336758
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,16) :   122.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 12 (0.1%), 11238 (99.9%) left; Finishing by Sat Oct 21  7:25:35 2000

(8,5,8) <- (1,1,4).*(8, 5+0,2): 99.706911 Mflop/s
(8,15,14) <- (1,3,7).*(8, 5+0,2): 124.576130 Mflop/s

Testing m0 = 8, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 8 8 5 5 8 8 8
<<< (M = 8, K = 5, N = 8) : 99.706911
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 14 8 15 15 14 8 14
<<< (M = 8, K = 15, N = 14) : 124.576130
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 5,2) :   110.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 13 (0.1%), 11237 (99.9%) left; Finishing by Sat Oct 21  7:31:36 2000

(9,12,9) <- (1,0,9).*(9, 12+0,1): 127.633257 Mflop/s
(9,12,15) <- (1,1,15).*(9, 12+0,1): 127.394034 Mflop/s

Testing m0 = 9, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 9  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 127.633257
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 127.394034
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (9, 12,1) :   127.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 14 (0.1%), 11236 (99.9%) left; Finishing by Sat Oct 21  7:09:58 2000

(6,7,8) <- (1,1,4).*(6, 7+0,2): 48.419053 Mflop/s
(12,14,14) <- (2,2,7).*(6, 7+0,2): 59.422673 Mflop/s

Testing m0 = 6, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 7 8 6 7 7 8 6 8
<<< (M = 6, K = 7, N = 8) : 48.419053
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 59.422673
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 7,2) :    53.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 15 (0.1%), 11235 (99.9%) left; Finishing by Sat Oct 21  7:28:43 2000

(5,8,8) <- (1,1,4).*(5, 8+0,2): 112.179015 Mflop/s
(15,8,14) <- (3,1,7).*(5, 8+0,2): 118.107340 Mflop/s

Testing m0 = 5, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 8 5 8 8 8 5 8
<<< (M = 5, K = 8, N = 8) : 112.179015
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 14 15 8 8 14 15 14
<<< (M = 15, K = 8, N = 14) : 118.107340
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 8,2) :   115.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 16 (0.1%), 11234 (99.9%) left; Finishing by Sat Oct 21  7:45:07 2000

(7,7,9) <- (1,1,9).*(7, 7+0,1): 97.618242 Mflop/s
(14,14,15) <- (2,2,15).*(7, 7+0,1): 115.201330 Mflop/s

Testing m0 = 7, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 7 9 7 7 7 9 7 9
<<< (M = 7, K = 7, N = 9) : 97.618242
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 115.201330
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 7,1) :   105.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 17 (0.2%), 11233 (99.8%) left; Finishing by Sat Oct 21  7:48:34 2000

(13,15,9) <- (0,0,9).*(13, 15+0,1): 134.750535 Mflop/s
(13,15,15) <- (1,1,15).*(13, 15+0,1): 135.094278 Mflop/s

Testing m0 = 13, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 13  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 9 13 15 15 9 13 9
<<< (M = 13, K = 15, N = 9) : 134.750535
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 15 13 15 15 15 13 15
<<< (M = 13, K = 15, N = 15) : 135.094278
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (13, 15,1) :   134.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 18 (0.2%), 11232 (99.8%) left; Finishing by Sat Oct 21  7:51:38 2000

(9,8,10) <- (9,2,0).*(1, 4+0,10): 126.321129 Mflop/s
(15,12,10) <- (15,3,1).*(1, 4+0,10): 136.526824 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 10 9 8 8 10 9 10
<<< (M = 9, K = 8, N = 10) : 126.321129
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 10 15 12 12 10 15 10
<<< (M = 15, K = 12, N = 10) : 136.526824
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,10) :   131.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 19 (0.2%), 11231 (99.8%) left; Finishing by Sat Oct 21  7:54:22 2000

(13,12,9) <- (0,0,9).*(13, 12+0,1): 53.836972 Mflop/s
(13,12,15) <- (1,1,15).*(13, 12+0,1): 53.831648 Mflop/s

Testing m0 = 13, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 13  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 9 13 12 12 9 13 9
<<< (M = 13, K = 12, N = 9) : 53.836972
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 15 13 12 12 15 13 15
<<< (M = 13, K = 12, N = 15) : 53.831648
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (13, 12,1) :    53.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 20 (0.2%), 11230 (99.8%) left; Finishing by Sat Oct 21  8:06:13 2000

(8,14,9) <- (4,0,9).*(2, 14+0,1): 165.888142 Mflop/s
(14,14,15) <- (7,1,15).*(2, 14+0,1): 170.260347 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 165.888142
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 170.260347
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 14,1) :   168.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 21 (0.2%), 11229 (99.8%) left; Finishing by Sat Oct 21  7:59:04 2000

(5,11,9) <- (1,0,3).*(5, 11+0,3): 131.115323 Mflop/s
(15,11,15) <- (3,1,5).*(5, 11+0,3): 115.535488 Mflop/s

Testing m0 = 5, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 11 9 5 11 11 9 5 9
<<< (M = 5, K = 11, N = 9) : 131.115323
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 115.535488
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 11,3) :   122.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 22 (0.2%), 11228 (99.8%) left; Finishing by Sat Oct 21  8:09:37 2000

(9,11,9) <- (3,0,3).*(3, 11+0,3): 110.188738 Mflop/s
(15,11,15) <- (5,1,5).*(3, 11+0,3): 143.779806 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 110.188738
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 143.779806
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 11,3) :   124.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 23 (0.2%), 11227 (99.8%) left; Finishing by Sat Oct 21  8:19:15 2000

(9,5,8) <- (3,1,4).*(3, 5+0,2): 104.267209 Mflop/s
(15,15,14) <- (5,3,7).*(3, 5+0,2): 148.416336 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 8 9 5 5 8 9 8
<<< (M = 9, K = 5, N = 8) : 104.267209
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 148.416336
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 5,2) :   122.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 24 (0.2%), 11226 (99.8%) left; Finishing by Sat Oct 21  8:20:16 2000

(9,8,9) <- (1,4,9).*(9, 2+0,1): 69.818577 Mflop/s
(9,14,15) <- (1,7,15).*(9, 2+0,1): 74.212207 Mflop/s

Testing m0 = 9, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 9  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 69.818577
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 74.212207
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (9, 2,1) :    71.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 25 (0.2%), 11225 (99.8%) left; Finishing by Sat Oct 21  8:13:43 2000

(9,13,9) <- (3,0,3).*(3, 13+0,3): 113.830314 Mflop/s
(15,13,15) <- (5,1,5).*(3, 13+0,3): 147.000584 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 113.830314
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 147.000584
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 13,3) :   128.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 26 (0.2%), 11224 (99.8%) left; Finishing by Sat Oct 21  8:07:39 2000

(14,12,9) <- (0,0,9).*(14, 12+0,1): 128.233555 Mflop/s
(14,12,15) <- (1,1,15).*(14, 12+0,1): 129.325063 Mflop/s

Testing m0 = 14, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 14  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 9 14 12 12 9 14 9
<<< (M = 14, K = 12, N = 9) : 128.233555
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 129.325063
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (14, 12,1) :   128.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 27 (0.2%), 11223 (99.8%) left; Finishing by Sat Oct 21  8:08:59 2000

(9,8,8) <- (9,2,1).*(1, 4+0,8): 129.545331 Mflop/s
(15,12,8) <- (15,3,1).*(1, 4+0,8): 141.791112 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 129.545331
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 8 15 12 12 8 15 8
<<< (M = 15, K = 12, N = 8) : 141.791112
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,8) :   135.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 28 (0.2%), 11222 (99.8%) left; Finishing by Sat Oct 21  8:10:14 2000

(9,6,11) <- (9,1,0).*(1, 6+0,11): 117.387591 Mflop/s
(15,12,11) <- (15,2,1).*(1, 6+0,11): 133.599723 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 11 9 6 6 11 9 11
<<< (M = 9, K = 6, N = 11) : 117.387591
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 11 15 12 12 11 15 11
<<< (M = 15, K = 12, N = 11) : 133.599723
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,11) :   125.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 29 (0.3%), 11221 (99.7%) left; Finishing by Sat Oct 21  8:11:23 2000

(9,8,9) <- (9,2,1).*(1, 4+0,9): 125.613971 Mflop/s
(15,12,9) <- (15,3,1).*(1, 4+0,9): 137.625631 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 125.613971
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 137.625631
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,9) :   131.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 30 (0.3%), 11220 (99.7%) left; Finishing by Sat Oct 21  8:12:28 2000

(11,7,9) <- (0,1,9).*(11, 7+0,1): 56.169671 Mflop/s
(11,14,15) <- (1,2,15).*(11, 7+0,1): 66.769084 Mflop/s

Testing m0 = 11, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 11  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 7 9 11 7 7 9 11 9
<<< (M = 11, K = 7, N = 9) : 56.169671
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 15 11 14 14 15 11 15
<<< (M = 11, K = 14, N = 15) : 66.769084
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (11, 7,1) :    61.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 31 (0.3%), 11219 (99.7%) left; Finishing by Sat Oct 21  8:13:28 2000

(8,9,9) <- (4,3,9).*(2, 3+0,1): 134.078212 Mflop/s
(14,15,15) <- (7,5,15).*(2, 3+0,1): 156.995547 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 134.078212
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 156.995547
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 3,1) :   144.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 32 (0.3%), 11218 (99.7%) left; Finishing by Sat Oct 21  8:08:33 2000

(7,13,9) <- (1,0,9).*(7, 13+0,1): 110.572081 Mflop/s
(14,13,15) <- (2,1,15).*(7, 13+0,1): 113.120811 Mflop/s

Testing m0 = 7, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 13 9 7 13 13 9 7 9
<<< (M = 7, K = 13, N = 9) : 110.572081
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 113.120811
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 13,1) :   111.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 33 (0.3%), 11217 (99.7%) left; Finishing by Sat Oct 21  8:03:56 2000

(9,13,12) <- (9,0,0).*(1, 13+0,12): 131.019624 Mflop/s
(15,13,12) <- (15,1,1).*(1, 13+0,12): 125.383080 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 12 9 13 13 12 9 12
<<< (M = 9, K = 13, N = 12) : 131.019624
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 125.383080
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,12) :   128.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 34 (0.3%), 11216 (99.7%) left; Finishing by Sat Oct 21  8:05:06 2000

(8,7,9) <- (1,1,9).*(8, 7+0,1): 99.914654 Mflop/s
(8,14,15) <- (1,2,15).*(8, 7+0,1): 123.225756 Mflop/s

Testing m0 = 8, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 99.914654
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 15 8 14 14 15 8 15
<<< (M = 8, K = 14, N = 15) : 123.225756
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 7,1) :   110.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 35 (0.3%), 11215 (99.7%) left; Finishing by Sat Oct 21  8:00:51 2000

(10,9,9) <- (0,3,9).*(10, 3+0,1): 129.652791 Mflop/s
(10,15,15) <- (1,5,15).*(10, 3+0,1): 146.052445 Mflop/s

Testing m0 = 10, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 10  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 9 9 10 9 9 9 10 9
<<< (M = 10, K = 9, N = 9) : 129.652791
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 15 10 15 15 15 10 15
<<< (M = 10, K = 15, N = 15) : 146.052445
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (10, 3,1) :   137.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 36 (0.3%), 11214 (99.7%) left; Finishing by Sat Oct 21  8:02:03 2000

(8,12,5) <- (4,0,1).*(2, 12+0,5): 77.207263 Mflop/s
(14,12,15) <- (7,1,3).*(2, 12+0,5): 65.949919 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  12 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 5 8 12 12 5 8 5
<<< (M = 8, K = 12, N = 5) : 77.207263
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 65.949919
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 12,5) :    71.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 37 (0.3%), 11213 (99.7%) left; Finishing by Sat Oct 21  7:58:06 2000

(11,12,9) <- (0,0,9).*(11, 12+0,1): 124.258330 Mflop/s
(11,12,15) <- (1,1,15).*(11, 12+0,1): 125.677030 Mflop/s

Testing m0 = 11, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 11  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 9 11 12 12 9 11 9
<<< (M = 11, K = 12, N = 9) : 124.258330
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 15 11 12 12 15 11 15
<<< (M = 11, K = 12, N = 15) : 125.677030
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (11, 12,1) :   125.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 38 (0.3%), 11212 (99.7%) left; Finishing by Sat Oct 21  7:54:22 2000

(11,9,9) <- (0,9,9).*(11,1+0,1): 100.970086 Mflop/s
(11,15,15) <- (1,15,15).*(11,1+0,1): 111.045616 Mflop/s

Testing m0 = 11, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 11 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 9 9 11 9 9 9 11 9
<<< (M = 11, K = 9, N = 9) : 100.970086
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 15 11 15 15 15 11 15
<<< (M = 11, K = 15, N = 15) : 111.045616
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (11,1,1) :   105.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 39 (0.3%), 11211 (99.7%) left; Finishing by Sat Oct 21  7:50:49 2000

(8,9,8) <- (1,1,4).*(8, 9+0,2): 49.972190 Mflop/s
(8,9,14) <- (1,1,7).*(8, 9+0,2): 50.123966 Mflop/s

Testing m0 = 8, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 49.972190
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 14 8 9 9 14 8 14
<<< (M = 8, K = 9, N = 14) : 50.123966
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 9,2) :    50.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 40 (0.4%), 11210 (99.6%) left; Finishing by Sat Oct 21  7:47:28 2000

(9,6,8) <- (9,1,2).*(1, 6+0,4): 119.073600 Mflop/s
(15,12,12) <- (15,2,3).*(1, 6+0,4): 142.574944 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 119.073600
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 142.574944
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,4) :   129.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 41 (0.4%), 11209 (99.6%) left; Finishing by Sat Oct 21  7:48:50 2000

(8,13,9) <- (4,0,9).*(2, 13+0,1): 164.956513 Mflop/s
(14,13,15) <- (7,1,15).*(2, 13+0,1): 163.988698 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 164.956513
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 163.988698
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 13,1) :   164.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 42 (0.4%), 11208 (99.6%) left; Finishing by Sat Oct 21  7:41:13 2000

(9,6,8) <- (9,1,4).*(1, 6+0,2): 108.151926 Mflop/s
(15,12,14) <- (15,2,7).*(1, 6+0,2): 137.490965 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 108.151926
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 137.490965
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,2) :   121.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 43 (0.4%), 11207 (99.6%) left; Finishing by Sat Oct 21  7:47:01 2000

(9,10,7) <- (9,0,1).*(1, 10+0,7): 132.357106 Mflop/s
(15,10,14) <- (15,1,2).*(1, 10+0,7): 136.051051 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 7 9 10 10 7 9 7
<<< (M = 9, K = 10, N = 7) : 132.357106
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 136.051051
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,7) :   134.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 44 (0.4%), 11206 (99.6%) left; Finishing by Sat Oct 21  7:48:19 2000

(9,9,8) <- (3,1,4).*(3, 9+0,2): 134.373940 Mflop/s
(15,9,14) <- (5,1,7).*(3, 9+0,2): 136.164886 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 134.373940
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 136.164886
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 9,2) :   135.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 45 (0.4%), 11205 (99.6%) left; Finishing by Sat Oct 21  7:41:13 2000

(8,8,8) <- (4,2,4).*(2, 4+0,2): 132.811074 Mflop/s
(14,12,14) <- (7,3,7).*(2, 4+0,2): 145.575068 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 132.811074
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 145.575068
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 4,2) :   138.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 46 (0.4%), 11204 (99.6%) left; Finishing by Sat Oct 21  7:42:34 2000

(9,9,15) <- (9,9,0).*(1,1+0,15): 51.473135 Mflop/s
(15,15,15) <- (15,15,1).*(1,1+0,15): 57.965027 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 15 9 9 9 15 9 15
<<< (M = 9, K = 9, N = 15) : 51.473135
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 57.965027
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,15) :    54.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 47 (0.4%), 11203 (99.6%) left; Finishing by Sat Oct 21  7:39:53 2000

(8,10,9) <- (2,0,9).*(4, 10+0,1): 157.166477 Mflop/s
(12,10,15) <- (3,1,15).*(4, 10+0,1): 161.453268 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 157.166477
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 161.453268
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 10,1) :   159.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 48 (0.4%), 11202 (99.6%) left; Finishing by Sat Oct 21  7:41:13 2000

(10,8,9) <- (0,4,9).*(10, 2+0,1): 120.263258 Mflop/s
(10,14,15) <- (1,7,15).*(10, 2+0,1): 132.554287 Mflop/s

Testing m0 = 10, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 10  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 8 9 10 8 8 9 10 9
<<< (M = 10, K = 8, N = 9) : 120.263258
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 15 10 14 14 15 10 15
<<< (M = 10, K = 14, N = 15) : 132.554287
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (10, 2,1) :   126.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 49 (0.4%), 11201 (99.6%) left; Finishing by Sat Oct 21  7:34:50 2000

(8,9,9) <- (2,1,3).*(4, 9+0,3): 61.250282 Mflop/s
(12,9,15) <- (3,1,5).*(4, 9+0,3): 61.971120 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 61.250282
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 61.971120
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 9,3) :    61.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 50 (0.4%), 11200 (99.6%) left; Finishing by Sat Oct 21  7:32:28 2000

(9,13,15) <- (9,0,0).*(1, 13+0,15): 64.599852 Mflop/s
(15,13,15) <- (15,1,1).*(1, 13+0,15): 63.999300 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 15 9 13 13 15 9 15
<<< (M = 9, K = 13, N = 15) : 64.599852
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 63.999300
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,15) :    64.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 51 (0.5%), 11199 (99.5%) left; Finishing by Sat Oct 21  7:30:11 2000

(9,11,9) <- (3,0,9).*(3, 11+0,1): 162.748582 Mflop/s
(15,11,15) <- (5,1,15).*(3, 11+0,1): 167.377413 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 162.748582
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 167.377413
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 11,1) :   165.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 52 (0.5%), 11198 (99.5%) left; Finishing by Sat Oct 21  7:31:36 2000

(9,9,7) <- (9,3,1).*(1, 3+0,7): 128.126128 Mflop/s
(15,15,14) <- (15,5,2).*(1, 3+0,7): 141.709637 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 7 9 9 9 7 9 7
<<< (M = 9, K = 9, N = 7) : 128.126128
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 141.709637
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,7) :   134.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 53 (0.5%), 11197 (99.5%) left; Finishing by Sat Oct 21  7:32:57 2000

(8,6,8) <- (4,1,1).*(2, 6+0,8): 54.911329 Mflop/s
(14,12,8) <- (7,2,1).*(2, 6+0,8): 64.270644 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  6 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 54.911329
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 8 14 12 12 8 14 8
<<< (M = 14, K = 12, N = 8) : 64.270644
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 6,8) :    59.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 54 (0.5%), 11196 (99.5%) left; Finishing by Sat Oct 21  7:30:48 2000

(8,5,6) <- (4,1,1).*(2, 5+0,6): 54.741583 Mflop/s
(14,15,12) <- (7,3,2).*(2, 5+0,6): 72.641368 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  5 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 6 8 5 5 6 8 6
<<< (M = 8, K = 5, N = 6) : 54.741583
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 72.641368
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 5,6) :    62.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 55 (0.5%), 11195 (99.5%) left; Finishing by Sat Oct 21  7:35:32 2000

(9,9,8) <- (3,9,4).*(3,1+0,2): 109.790877 Mflop/s
(15,15,14) <- (5,15,7).*(3,1+0,2): 122.651796 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 109.790877
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 122.651796
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3,1,2) :   115.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 56 (0.5%), 11194 (99.5%) left; Finishing by Sat Oct 21  7:33:24 2000

(9,7,7) <- (9,1,1).*(1, 7+0,7): 119.474251 Mflop/s
(15,14,14) <- (15,2,2).*(1, 7+0,7): 143.290790 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 7 9 7 7 7 9 7
<<< (M = 9, K = 7, N = 7) : 119.474251
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 143.290790
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,7) :   130.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 57 (0.5%), 11193 (99.5%) left; Finishing by Sat Oct 21  7:34:38 2000

(8,8,9) <- (4,4,3).*(2, 2+0,3): 91.234501 Mflop/s
(14,14,15) <- (7,7,5).*(2, 2+0,3): 72.354317 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 91.234501
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 72.354317
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 2,3) :    80.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 58 (0.5%), 11192 (99.5%) left; Finishing by Sat Oct 21  7:29:21 2000

(9,8,9) <- (3,4,3).*(3, 2+0,3): 96.480455 Mflop/s
(15,14,15) <- (5,7,5).*(3, 2+0,3): 133.890005 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 96.480455
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 133.890005
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 2,3) :   112.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 59 (0.5%), 11191 (99.5%) left; Finishing by Sat Oct 21  7:33:48 2000

(15,12,9) <- (0,0,9).*(15, 12+0,1): 53.673990 Mflop/s
(15,12,15) <- (1,1,15).*(15, 12+0,1): 53.126213 Mflop/s

Testing m0 = 15, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 15  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 53.673990
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 53.126213
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (15, 12,1) :    53.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 60 (0.5%), 11190 (99.5%) left; Finishing by Sat Oct 21  7:31:50 2000

(8,8,9) <- (1,2,9).*(8, 4+0,1): 127.911273 Mflop/s
(8,12,15) <- (1,3,15).*(8, 4+0,1): 140.276344 Mflop/s

Testing m0 = 8, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 127.911273
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 15 8 12 12 15 8 15
<<< (M = 8, K = 12, N = 15) : 140.276344
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 4,1) :   133.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 61 (0.5%), 11189 (99.5%) left; Finishing by Sat Oct 21  7:33:01 2000

(7,13,8) <- (1,0,4).*(7, 13+0,2): 112.823858 Mflop/s
(14,13,14) <- (2,1,7).*(7, 13+0,2): 114.417545 Mflop/s

Testing m0 = 7, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 13 8 7 13 13 8 7 8
<<< (M = 7, K = 13, N = 8) : 112.823858
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 14 14 13 13 14 14 14
<<< (M = 14, K = 13, N = 14) : 114.417545
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 13,2) :   113.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 62 (0.6%), 11188 (99.4%) left; Finishing by Sat Oct 21  7:34:09 2000

(9,5,8) <- (9,1,2).*(1, 5+0,4): 112.336809 Mflop/s
(15,15,12) <- (15,3,3).*(1, 5+0,4): 145.814714 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 8 9 5 5 8 9 8
<<< (M = 9, K = 5, N = 8) : 112.336809
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 145.814714
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,4) :   126.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 63 (0.6%), 11187 (99.4%) left; Finishing by Sat Oct 21  7:35:15 2000

(5,6,9) <- (1,1,9).*(5, 6+0,1): 124.082138 Mflop/s
(15,12,15) <- (3,2,15).*(5, 6+0,1): 170.955204 Mflop/s

Testing m0 = 5, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 6 9 5 6 6 9 5 9
<<< (M = 5, K = 6, N = 9) : 124.082138
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 170.955204
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 6,1) :   143.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 64 (0.6%), 11186 (99.4%) left; Finishing by Sat Oct 21  7:33:24 2000

(9,7,8) <- (9,1,1).*(1, 7+0,8): 119.996290 Mflop/s
(15,14,8) <- (15,2,1).*(1, 7+0,8): 140.710712 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 119.996290
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 8 15 14 14 8 15 8
<<< (M = 15, K = 14, N = 8) : 140.710712
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,8) :   129.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 65 (0.6%), 11185 (99.4%) left; Finishing by Sat Oct 21  7:34:29 2000

(5,9,9) <- (1,9,9).*(5,1+0,1): 114.378735 Mflop/s
(15,15,15) <- (3,15,15).*(5,1+0,1): 134.505828 Mflop/s

Testing m0 = 5, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 114.378735
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 134.505828
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5,1,1) :   123.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 66 (0.6%), 11184 (99.4%) left; Finishing by Sat Oct 21  7:35:32 2000

(14,6,9) <- (0,1,9).*(14, 6+0,1): 115.939580 Mflop/s
(14,12,15) <- (1,2,15).*(14, 6+0,1): 142.695775 Mflop/s

Testing m0 = 14, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 14  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 6 9 14 6 6 9 14 9
<<< (M = 14, K = 6, N = 9) : 115.939580
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 142.695775
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (14, 6,1) :   127.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 67 (0.6%), 11183 (99.4%) left; Finishing by Sat Oct 21  7:30:57 2000

(9,8,15) <- (9,1,0).*(1, 8+0,15): 124.628019 Mflop/s
(15,8,15) <- (15,1,1).*(1, 8+0,15): 124.963483 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 15 9 8 8 15 9 15
<<< (M = 9, K = 8, N = 15) : 124.628019
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 124.963483
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,15) :   124.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 68 (0.6%), 11182 (99.4%) left; Finishing by Sat Oct 21  7:32:01 2000

(7,12,8) <- (1,0,4).*(7, 12+0,2): 112.003054 Mflop/s
(14,12,14) <- (2,1,7).*(7, 12+0,2): 112.683200 Mflop/s

Testing m0 = 7, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 8 7 12 12 8 7 8
<<< (M = 7, K = 12, N = 8) : 112.003054
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 112.683200
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 12,2) :   112.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 69 (0.6%), 11181 (99.4%) left; Finishing by Sat Oct 21  7:33:03 2000

(9,13,8) <- (9,0,4).*(1, 13+0,2): 132.361966 Mflop/s
(15,13,14) <- (15,1,7).*(1, 13+0,2): 131.388342 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 132.361966
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 131.388342
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,2) :   131.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 70 (0.6%), 11180 (99.4%) left; Finishing by Sat Oct 21  7:34:04 2000

(8,7,5) <- (4,1,1).*(2, 7+0,5): 66.483759 Mflop/s
(14,14,15) <- (7,2,3).*(2, 7+0,5): 66.912686 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  7 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 5 8 7 7 5 8 5
<<< (M = 8, K = 7, N = 5) : 66.483759
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 66.912686
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 7,5) :    66.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 71 (0.6%), 11179 (99.4%) left; Finishing by Sat Oct 21  7:35:03 2000

(12,9,9) <- (0,9,9).*(12,1+0,1): 49.987022 Mflop/s
(12,15,15) <- (1,15,15).*(12,1+0,1): 59.489373 Mflop/s

Testing m0 = 12, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 12 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 9 12 9 9 9 12 9
<<< (M = 12, K = 9, N = 9) : 49.987022
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 59.489373
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (12,1,1) :    54.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 72 (0.6%), 11178 (99.4%) left; Finishing by Sat Oct 21  7:33:24 2000

(9,9,13) <- (9,9,0).*(1,1+0,13): 61.516836 Mflop/s
(15,15,13) <- (15,15,1).*(1,1+0,13): 55.052449 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 13 9 9 9 13 9 13
<<< (M = 9, K = 9, N = 13) : 61.516836
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 13 15 15 15 13 15 13
<<< (M = 15, K = 15, N = 13) : 55.052449
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,13) :    58.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 73 (0.6%), 11177 (99.4%) left; Finishing by Sat Oct 21  7:31:47 2000

(9,13,9) <- (9,0,3).*(1, 13+0,3): 143.097060 Mflop/s
(15,13,15) <- (15,1,5).*(1, 13+0,3): 146.062509 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 143.097060
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 146.062509
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,3) :   144.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 74 (0.7%), 11176 (99.3%) left; Finishing by Sat Oct 21  7:27:42 2000

(8,14,9) <- (2,0,9).*(4, 14+0,1): 177.556623 Mflop/s
(12,14,15) <- (3,1,15).*(4, 14+0,1): 178.106164 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 177.556623
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 178.106164
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 14,1) :   177.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 75 (0.7%), 11175 (99.3%) left; Finishing by Sat Oct 21  7:26:13 2000

(8,8,9) <- (1,4,9).*(8, 2+0,1): 115.388895 Mflop/s
(8,14,15) <- (1,7,15).*(8, 2+0,1): 126.335254 Mflop/s

Testing m0 = 8, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 115.388895
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 15 8 14 14 15 8 15
<<< (M = 8, K = 14, N = 15) : 126.335254
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 2,1) :   120.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 76 (0.7%), 11174 (99.3%) left; Finishing by Sat Oct 21  7:24:46 2000

(9,9,8) <- (3,1,2).*(3, 9+0,4): 126.681100 Mflop/s
(15,9,12) <- (5,1,3).*(3, 9+0,4): 130.169963 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 126.681100
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 130.169963
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 9,4) :   128.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 77 (0.7%), 11173 (99.3%) left; Finishing by Sat Oct 21  7:25:47 2000

(5,9,9) <- (1,9,3).*(5,1+0,3): 55.817803 Mflop/s
(15,15,15) <- (3,15,5).*(5,1+0,3): 68.038749 Mflop/s

Testing m0 = 5, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 55.817803
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 68.038749
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5,1,3) :    61.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 78 (0.7%), 11172 (99.3%) left; Finishing by Sat Oct 21  7:24:23 2000

(9,8,11) <- (9,1,0).*(1, 8+0,11): 125.422397 Mflop/s
(15,8,11) <- (15,1,1).*(1, 8+0,11): 127.127195 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 11 9 8 8 11 9 11
<<< (M = 9, K = 8, N = 11) : 125.422397
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 11 15 8 8 11 15 11
<<< (M = 15, K = 8, N = 11) : 127.127195
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,11) :   126.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 79 (0.7%), 11171 (99.3%) left; Finishing by Sat Oct 21  7:20:38 2000

(5,8,9) <- (1,2,3).*(5, 4+0,3): 118.740728 Mflop/s
(15,12,15) <- (3,3,5).*(5, 4+0,3): 116.299240 Mflop/s

Testing m0 = 5, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 118.740728
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 116.299240
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 4,3) :   117.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 80 (0.7%), 11170 (99.3%) left; Finishing by Sat Oct 21  7:21:41 2000

(7,9,9) <- (1,1,9).*(7, 9+0,1): 104.222710 Mflop/s
(14,9,15) <- (2,1,15).*(7, 9+0,1): 106.499900 Mflop/s

Testing m0 = 7, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 9 7 9 9 9 7 9
<<< (M = 7, K = 9, N = 9) : 104.222710
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 106.499900
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 9,1) :   105.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 81 (0.7%), 11169 (99.3%) left; Finishing by Sat Oct 21  7:22:41 2000

(9,12,11) <- (9,0,0).*(1, 12+0,11): 130.051394 Mflop/s
(15,12,11) <- (15,1,1).*(1, 12+0,11): 131.710472 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 11 9 12 12 11 9 11
<<< (M = 9, K = 12, N = 11) : 130.051394
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 11 15 12 12 11 15 11
<<< (M = 15, K = 12, N = 11) : 131.710472
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,11) :   130.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 82 (0.7%), 11168 (99.3%) left; Finishing by Sat Oct 21  7:21:23 2000

(9,13,13) <- (9,0,0).*(1, 13+0,13): 69.373592 Mflop/s
(15,13,13) <- (15,1,1).*(1, 13+0,13): 71.649532 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 13 9 13 13 13 9 13
<<< (M = 9, K = 13, N = 13) : 69.373592
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 13 15 13 13 13 15 13
<<< (M = 15, K = 13, N = 13) : 71.649532
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,13) :    70.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 83 (0.7%), 11167 (99.3%) left; Finishing by Sat Oct 21  7:20:07 2000

(9,8,9) <- (9,1,9).*(1, 8+0,1): 117.321165 Mflop/s
(15,8,15) <- (15,1,15).*(1, 8+0,1): 124.526933 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 117.321165
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 124.526933
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,1) :   120.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 84 (0.7%), 11166 (99.3%) left; Finishing by Sat Oct 21  7:21:07 2000

(8,13,9) <- (4,0,3).*(2, 13+0,3): 111.333289 Mflop/s
(14,13,15) <- (7,1,5).*(2, 13+0,3): 85.600224 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 111.333289
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 85.600224
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 13,3) :    96.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 85 (0.8%), 11165 (99.2%) left; Finishing by Sat Oct 21  7:19:53 2000

(9,6,13) <- (9,1,0).*(1, 6+0,13): 114.819459 Mflop/s
(15,12,13) <- (15,2,1).*(1, 6+0,13): 130.628163 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 13 9 6 6 13 9 13
<<< (M = 9, K = 6, N = 13) : 114.819459
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 13 15 12 12 13 15 13
<<< (M = 15, K = 12, N = 13) : 130.628163
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,13) :   122.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 86 (0.8%), 11164 (99.2%) left; Finishing by Sat Oct 21  7:18:41 2000

(9,11,8) <- (9,0,1).*(1, 11+0,8): 132.827620 Mflop/s
(15,11,8) <- (15,1,1).*(1, 11+0,8): 135.637673 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 132.827620
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 8 15 11 11 8 15 8
<<< (M = 15, K = 11, N = 8) : 135.637673
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,8) :   134.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 87 (0.8%), 11163 (99.2%) left; Finishing by Sat Oct 21  7:19:39 2000

(9,9,8) <- (9,3,2).*(1, 3+0,4): 132.812712 Mflop/s
(15,15,12) <- (15,5,3).*(1, 3+0,4): 149.140068 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 132.812712
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 149.140068
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,4) :   140.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 88 (0.8%), 11162 (99.2%) left; Finishing by Sat Oct 21  7:20:37 2000

(14,5,9) <- (0,1,9).*(14, 5+0,1): 102.982654 Mflop/s
(14,15,15) <- (1,3,15).*(14, 5+0,1): 136.085888 Mflop/s

Testing m0 = 14, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 14  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 5 9 14 5 5 9 14 9
<<< (M = 14, K = 5, N = 9) : 102.982654
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 136.085888
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (14, 5,1) :   117.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 89 (0.8%), 11161 (99.2%) left; Finishing by Sat Oct 21  7:17:20 2000

(9,14,5) <- (9,0,1).*(1, 14+0,5): 144.960701 Mflop/s
(15,14,15) <- (15,1,3).*(1, 14+0,5): 150.561396 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 5 9 14 14 5 9 5
<<< (M = 9, K = 14, N = 5) : 144.960701
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 150.561396
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,5) :   147.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 90 (0.8%), 11160 (99.2%) left; Finishing by Sat Oct 21  7:18:18 2000

(8,11,8) <- (2,0,2).*(4, 11+0,4): 60.650552 Mflop/s
(12,11,12) <- (3,1,3).*(4, 11+0,4): 69.981857 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 60.650552
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 12 12 11 11 12 12 12
<<< (M = 12, K = 11, N = 12) : 69.981857
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 11,4) :    65.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 91 (0.8%), 11159 (99.2%) left; Finishing by Sat Oct 21  7:17:10 2000

(6,6,9) <- (1,1,9).*(6, 6+0,1): 115.347843 Mflop/s
(12,12,15) <- (2,2,15).*(6, 6+0,1): 144.080974 Mflop/s

Testing m0 = 6, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 6 9 6 6 6 9 6 9
<<< (M = 6, K = 6, N = 9) : 115.347843
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 144.080974
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 6,1) :   128.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 92 (0.8%), 11158 (99.2%) left; Finishing by Sat Oct 21  7:18:07 2000

(9,10,8) <- (9,0,4).*(1, 10+0,2): 130.710300 Mflop/s
(15,10,14) <- (15,1,7).*(1, 10+0,2): 131.729198 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 130.710300
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 131.729198
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,2) :   131.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 93 (0.8%), 11157 (99.2%) left; Finishing by Sat Oct 21  7:19:02 2000

(8,8,8) <- (4,4,2).*(2, 2+0,4): 69.193525 Mflop/s
(14,14,12) <- (7,7,3).*(2, 2+0,4): 65.552268 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 69.193525
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 65.552268
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 2,4) :    67.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 94 (0.8%), 11156 (99.2%) left; Finishing by Sat Oct 21  7:15:57 2000

(13,14,9) <- (0,0,9).*(13, 14+0,1): 59.969833 Mflop/s
(13,14,15) <- (1,1,15).*(13, 14+0,1): 60.219872 Mflop/s

Testing m0 = 13, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 13  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 9 13 14 14 9 13 9
<<< (M = 13, K = 14, N = 9) : 59.969833
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 15 13 14 14 15 13 15
<<< (M = 13, K = 14, N = 15) : 60.219872
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (13, 14,1) :    60.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 95 (0.8%), 11155 (99.2%) left; Finishing by Sat Oct 21  7:14:54 2000

(13,9,9) <- (0,3,9).*(13, 3+0,1): 54.817719 Mflop/s
(13,15,15) <- (1,5,15).*(13, 3+0,1): 57.951583 Mflop/s

Testing m0 = 13, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 13  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 9 9 13 9 9 9 13 9
<<< (M = 13, K = 9, N = 9) : 54.817719
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 15 13 15 15 15 13 15
<<< (M = 13, K = 15, N = 15) : 57.951583
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (13, 3,1) :    56.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 96 (0.9%), 11154 (99.1%) left; Finishing by Sat Oct 21  7:13:52 2000

(7,10,8) <- (1,0,4).*(7, 10+0,2): 108.986413 Mflop/s
(14,10,14) <- (2,1,7).*(7, 10+0,2): 110.735605 Mflop/s

Testing m0 = 7, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 10 8 7 10 10 8 7 8
<<< (M = 7, K = 10, N = 8) : 108.986413
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 14 14 10 10 14 14 14
<<< (M = 14, K = 10, N = 14) : 110.735605
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 10,2) :   109.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 97 (0.9%), 11153 (99.1%) left; Finishing by Sat Oct 21  7:14:47 2000

(9,5,11) <- (9,1,0).*(1, 5+0,11): 110.563100 Mflop/s
(15,15,11) <- (15,3,1).*(1, 5+0,11): 137.393804 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 11 9 5 5 11 9 11
<<< (M = 9, K = 5, N = 11) : 110.563100
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 11 15 15 15 11 15 11
<<< (M = 15, K = 15, N = 11) : 137.393804
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,11) :   122.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 98 (0.9%), 11152 (99.1%) left; Finishing by Sat Oct 21  7:13:47 2000

(8,9,8) <- (2,3,4).*(4, 3+0,2): 56.039569 Mflop/s
(12,15,14) <- (3,5,7).*(4, 3+0,2): 72.377916 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 56.039569
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 72.377916
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 3,2) :    63.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 99 (0.9%), 11151 (99.1%) left; Finishing by Sat Oct 21  7:12:48 2000

(8,9,8) <- (4,3,1).*(2, 3+0,8): 61.147921 Mflop/s
(14,15,8) <- (7,5,1).*(2, 3+0,8): 65.037188 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  3 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 61.147921
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 8 14 15 15 8 14 8
<<< (M = 14, K = 15, N = 8) : 65.037188
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 3,8) :    63.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 100 (0.9%), 11150 (99.1%) left; Finishing by Sat Oct 21  7:09:58 2000

(9,7,9) <- (9,1,3).*(1, 7+0,3): 124.048040 Mflop/s
(15,14,15) <- (15,2,5).*(1, 7+0,3): 148.185912 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 124.048040
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 148.185912
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,3) :   135.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 101 (0.9%), 11149 (99.1%) left; Finishing by Sat Oct 21  7:10:53 2000

(8,15,8) <- (4,0,2).*(2, 15+0,4): 82.046106 Mflop/s
(14,15,12) <- (7,1,3).*(2, 15+0,4): 72.329030 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 82.046106
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 72.329030
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 15,4) :    76.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 102 (0.9%), 11148 (99.1%) left; Finishing by Sat Oct 21  7:09:58 2000

(10,10,9) <- (0,0,9).*(10, 10+0,1): 119.090562 Mflop/s
(10,10,15) <- (1,1,15).*(10, 10+0,1): 117.873760 Mflop/s

Testing m0 = 10, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 10  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 10 9 10 10 10 9 10 9
<<< (M = 10, K = 10, N = 9) : 119.090562
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 10 15 10 10 10 15 10 15
<<< (M = 10, K = 10, N = 15) : 117.873760
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (10, 10,1) :   118.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 103 (0.9%), 11147 (99.1%) left; Finishing by Sat Oct 21  7:10:52 2000

(9,6,5) <- (3,1,1).*(3, 6+0,5): 110.258322 Mflop/s
(15,12,15) <- (5,2,3).*(3, 6+0,5): 128.901768 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  6 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 5 9 6 6 5 9 5
<<< (M = 9, K = 6, N = 5) : 110.258322
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 128.901768
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 6,5) :   118.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 104 (0.9%), 11146 (99.1%) left; Finishing by Sat Oct 21  7:09:58 2000

(9,11,8) <- (9,0,2).*(1, 11+0,4): 140.335576 Mflop/s
(15,11,12) <- (15,1,3).*(1, 11+0,4): 141.087921 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 140.335576
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 141.087921
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,4) :   140.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 105 (0.9%), 11145 (99.1%) left; Finishing by Sat Oct 21  7:10:51 2000

(8,9,8) <- (4,9,1).*(2,1+0,8): 59.461408 Mflop/s
(14,15,8) <- (7,15,1).*(2,1+0,8): 63.818805 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2 1 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 59.461408
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 8 14 15 15 8 14 8
<<< (M = 14, K = 15, N = 8) : 63.818805
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2,1,8) :    61.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 106 (0.9%), 11144 (99.1%) left; Finishing by Sat Oct 21  7:09:58 2000

(8,8,8) <- (2,2,2).*(4, 4+0,4): 55.961538 Mflop/s
(12,12,12) <- (3,3,3).*(4, 4+0,4): 69.467370 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 55.961538
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 12 12 12 12 12 12 12
<<< (M = 12, K = 12, N = 12) : 69.467370
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 4,4) :    62.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 107 (1.0%), 11143 (99.0%) left; Finishing by Sat Oct 21  7:09:05 2000

(8,14,8) <- (2,0,4).*(4, 14+0,2): 62.577493 Mflop/s
(12,14,14) <- (3,1,7).*(4, 14+0,2): 81.794637 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 62.577493
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 81.794637
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 14,2) :    70.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 108 (1.0%), 11142 (99.0%) left; Finishing by Sat Oct 21  7:08:13 2000

(9,12,6) <- (9,0,1).*(1, 12+0,6): 139.422451 Mflop/s
(15,12,12) <- (15,1,2).*(1, 12+0,6): 143.799835 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 6 9 12 12 6 9 6
<<< (M = 9, K = 12, N = 6) : 139.422451
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 143.799835
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,6) :   141.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 109 (1.0%), 11141 (99.0%) left; Finishing by Sat Oct 21  7:09:06 2000

(9,12,10) <- (9,0,0).*(1, 12+0,10): 136.112572 Mflop/s
(15,12,10) <- (15,1,1).*(1, 12+0,10): 136.238018 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 10 9 12 12 10 9 10
<<< (M = 9, K = 12, N = 10) : 136.112572
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 10 15 12 12 10 15 10
<<< (M = 15, K = 12, N = 10) : 136.238018
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,10) :   136.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 110 (1.0%), 11140 (99.0%) left; Finishing by Sat Oct 21  7:08:15 2000

(15,9,9) <- (0,3,9).*(15, 3+0,1): 53.323977 Mflop/s
(15,15,15) <- (1,5,15).*(15, 3+0,1): 54.664661 Mflop/s

Testing m0 = 15, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 15  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 9 15 9 9 9 15 9
<<< (M = 15, K = 9, N = 9) : 53.323977
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 54.664661
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (15, 3,1) :    54.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 111 (1.0%), 11139 (99.0%) left; Finishing by Sat Oct 21  7:07:25 2000

(8,13,8) <- (4,0,1).*(2, 13+0,8): 64.501253 Mflop/s
(14,13,8) <- (7,1,1).*(2, 13+0,8): 64.120535 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  13 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 64.501253
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 8 14 13 13 8 14 8
<<< (M = 14, K = 13, N = 8) : 64.120535
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 13,8) :    64.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 112 (1.0%), 11138 (99.0%) left; Finishing by Sat Oct 21  7:06:37 2000

(9,12,8) <- (3,0,2).*(3, 12+0,4): 135.864572 Mflop/s
(15,12,12) <- (5,1,3).*(3, 12+0,4): 136.631565 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 135.864572
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 136.631565
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 12,4) :   136.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 113 (1.0%), 11137 (99.0%) left; Finishing by Sat Oct 21  7:07:28 2000

(9,5,9) <- (1,1,9).*(9, 5+0,1): 64.119447 Mflop/s
(9,15,15) <- (1,3,15).*(9, 5+0,1): 78.814468 Mflop/s

Testing m0 = 9, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 9  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 9 9 5 5 9 9 9
<<< (M = 9, K = 5, N = 9) : 64.119447
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 78.814468
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (9, 5,1) :    70.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 114 (1.0%), 11136 (99.0%) left; Finishing by Sat Oct 21  7:08:19 2000

(9,8,5) <- (9,2,1).*(1, 4+0,5): 126.396169 Mflop/s
(15,12,15) <- (15,3,3).*(1, 4+0,5): 144.390820 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 126.396169
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 144.390820
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,5) :   134.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 115 (1.0%), 11135 (99.0%) left; Finishing by Sat Oct 21  7:07:31 2000

(9,14,8) <- (9,0,4).*(1, 14+0,2): 140.224393 Mflop/s
(15,14,14) <- (15,1,7).*(1, 14+0,2): 143.877597 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 140.224393
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 143.877597
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,2) :   142.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 116 (1.0%), 11134 (99.0%) left; Finishing by Sat Oct 21  7:06:44 2000

(11,11,9) <- (0,0,9).*(11, 11+0,1): 61.200320 Mflop/s
(11,11,15) <- (1,1,15).*(11, 11+0,1): 65.549792 Mflop/s

Testing m0 = 11, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 11  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 11 9 11 11 11 9 11 9
<<< (M = 11, K = 11, N = 9) : 61.200320
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 11 15 11 11 11 15 11 15
<<< (M = 11, K = 11, N = 15) : 65.549792
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (11, 11,1) :    63.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 117 (1.0%), 11133 (99.0%) left; Finishing by Sat Oct 21  7:05:57 2000

(8,8,8) <- (4,1,4).*(2, 8+0,2): 134.150568 Mflop/s
(14,8,14) <- (7,1,7).*(2, 8+0,2): 135.951621 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 134.150568
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 14 14 8 8 14 14 14
<<< (M = 14, K = 8, N = 14) : 135.951621
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 8,2) :   135.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 118 (1.0%), 11132 (99.0%) left; Finishing by Sat Oct 21  7:06:47 2000

(9,7,8) <- (3,1,2).*(3, 7+0,4): 107.655764 Mflop/s
(15,14,12) <- (5,2,3).*(3, 7+0,4): 138.430049 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 107.655764
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 138.430049
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 7,4) :   121.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 119 (1.1%), 11131 (98.9%) left; Finishing by Sat Oct 21  7:06:01 2000

(10,11,9) <- (0,0,9).*(10, 11+0,1): 72.341949 Mflop/s
(10,11,15) <- (1,1,15).*(10, 11+0,1): 64.030306 Mflop/s

Testing m0 = 10, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 10  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 11 9 10 11 11 9 10 9
<<< (M = 10, K = 11, N = 9) : 72.341949
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 11 15 10 11 11 15 10 15
<<< (M = 10, K = 11, N = 15) : 64.030306
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (10, 11,1) :    67.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 120 (1.1%), 11130 (98.9%) left; Finishing by Sat Oct 21  7:05:16 2000

(9,5,9) <- (9,1,3).*(1, 5+0,3): 109.114104 Mflop/s
(15,15,15) <- (15,3,5).*(1, 5+0,3): 143.363765 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 9 9 5 5 9 9 9
<<< (M = 9, K = 5, N = 9) : 109.114104
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 143.363765
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,3) :   123.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 121 (1.1%), 11129 (98.9%) left; Finishing by Sat Oct 21  7:06:05 2000

(9,13,6) <- (9,0,1).*(1, 13+0,6): 142.604168 Mflop/s
(15,13,12) <- (15,1,2).*(1, 13+0,6): 145.487545 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 6 9 13 13 6 9 6
<<< (M = 9, K = 13, N = 6) : 142.604168
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 145.487545
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,6) :   144.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 122 (1.1%), 11128 (98.9%) left; Finishing by Sat Oct 21  7:06:53 2000

(9,9,7) <- (9,9,1).*(1,1+0,7): 120.587228 Mflop/s
(15,15,14) <- (15,15,2).*(1,1+0,7): 139.946030 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 7 9 9 9 7 9 7
<<< (M = 9, K = 9, N = 7) : 120.587228
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 139.946030
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,7) :   129.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 123 (1.1%), 11127 (98.9%) left; Finishing by Sat Oct 21  7:07:40 2000

(5,15,8) <- (1,0,4).*(5, 15+0,2): 141.077091 Mflop/s
(15,15,14) <- (3,1,7).*(5, 15+0,2): 108.385972 Mflop/s

Testing m0 = 5, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 8 5 15 15 8 5 8
<<< (M = 5, K = 15, N = 8) : 141.077091
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 108.385972
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 15,2) :   122.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 124 (1.1%), 11126 (98.9%) left; Finishing by Sat Oct 21  7:08:27 2000

(9,14,7) <- (9,0,1).*(1, 14+0,7): 113.394502 Mflop/s
(15,14,14) <- (15,1,2).*(1, 14+0,7): 140.590491 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 7 9 14 14 7 9 7
<<< (M = 9, K = 14, N = 7) : 113.394502
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 140.590491
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,7) :   125.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 125 (1.1%), 11125 (98.9%) left; Finishing by Sat Oct 21  7:07:43 2000

(5,8,8) <- (1,2,4).*(5, 4+0,2): 109.409743 Mflop/s
(15,12,14) <- (3,3,7).*(5, 4+0,2): 128.414589 Mflop/s

Testing m0 = 5, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 8 5 8 8 8 5 8
<<< (M = 5, K = 8, N = 8) : 109.409743
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 128.414589
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 4,2) :   118.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 126 (1.1%), 11124 (98.9%) left; Finishing by Sat Oct 21  7:06:59 2000

(14,15,9) <- (0,0,9).*(14, 15+0,1): 135.086293 Mflop/s
(14,15,15) <- (1,1,15).*(14, 15+0,1): 137.481258 Mflop/s

Testing m0 = 14, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 14  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 9 14 15 15 9 14 9
<<< (M = 14, K = 15, N = 9) : 135.086293
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 137.481258
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (14, 15,1) :   136.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 127 (1.1%), 11123 (98.9%) left; Finishing by Sat Oct 21  7:06:16 2000

(6,9,8) <- (1,1,4).*(6, 9+0,2): 52.793329 Mflop/s
(12,9,14) <- (2,1,7).*(6, 9+0,2): 53.843403 Mflop/s

Testing m0 = 6, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 8 6 9 9 8 6 8
<<< (M = 6, K = 9, N = 8) : 52.793329
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 14 12 9 9 14 12 14
<<< (M = 12, K = 9, N = 14) : 53.843403
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 9,2) :    53.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 128 (1.1%), 11122 (98.9%) left; Finishing by Sat Oct 21  7:05:34 2000

(16,9,9) <- (0,1,9).*(16, 9+0,1): 121.949499 Mflop/s
(16,9,15) <- (0,1,15).*(16, 9+0,1): 122.638409 Mflop/s

Testing m0 = 16, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 16  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 9 9 16 9 9 9 16 9
<<< (M = 16, K = 9, N = 9) : 121.949499
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 9 15 16 9 9 15 16 15
<<< (M = 16, K = 9, N = 15) : 122.638409
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (16, 9,1) :   122.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 129 (1.1%), 11121 (98.9%) left; Finishing by Sat Oct 21  7:04:52 2000

(9,9,10) <- (9,3,0).*(1, 3+0,10): 128.056141 Mflop/s
(15,15,10) <- (15,5,1).*(1, 3+0,10): 137.826704 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 10 9 9 9 10 9 10
<<< (M = 9, K = 9, N = 10) : 128.056141
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 10 15 15 15 10 15 10
<<< (M = 15, K = 15, N = 10) : 137.826704
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,10) :   132.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 130 (1.2%), 11120 (98.8%) left; Finishing by Sat Oct 21  7:04:11 2000

(8,9,9) <- (2,9,9).*(4,1+0,1): 99.116339 Mflop/s
(12,15,15) <- (3,15,15).*(4,1+0,1): 117.079444 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 99.116339
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 117.079444
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4,1,1) :   107.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 131 (1.2%), 11119 (98.8%) left; Finishing by Sat Oct 21  7:04:57 2000

(9,14,9) <- (9,0,9).*(1, 14+0,1): 132.742268 Mflop/s
(15,14,15) <- (15,1,15).*(1, 14+0,1): 137.278729 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 132.742268
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 137.278729
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,1) :   135.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 132 (1.2%), 11118 (98.8%) left; Finishing by Sat Oct 21  7:02:51 2000

(8,6,9) <- (4,1,9).*(2, 6+0,1): 114.675247 Mflop/s
(14,12,15) <- (7,2,15).*(2, 6+0,1): 154.887527 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 114.675247
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 154.887527
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 6,1) :   131.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 133 (1.2%), 11117 (98.8%) left; Finishing by Sat Oct 21  7:03:37 2000

(8,5,9) <- (1,1,9).*(8, 5+0,1): 110.860010 Mflop/s
(8,15,15) <- (1,3,15).*(8, 5+0,1): 144.701280 Mflop/s

Testing m0 = 8, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 9 8 5 5 9 8 9
<<< (M = 8, K = 5, N = 9) : 110.860010
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 15 8 15 15 15 8 15
<<< (M = 8, K = 15, N = 15) : 144.701280
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 5,1) :   125.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 134 (1.2%), 11116 (98.8%) left; Finishing by Sat Oct 21  7:02:58 2000

(8,9,6) <- (4,3,1).*(2, 3+0,6): 63.863414 Mflop/s
(14,15,12) <- (7,5,2).*(2, 3+0,6): 72.966131 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  3 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 6 8 9 9 6 8 6
<<< (M = 8, K = 9, N = 6) : 63.863414
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 72.966131
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 3,6) :    68.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 135 (1.2%), 11115 (98.8%) left; Finishing by Sat Oct 21  7:02:19 2000

(6,8,8) <- (1,4,4).*(6, 2+0,2): 109.176787 Mflop/s
(12,14,14) <- (2,7,7).*(6, 2+0,2): 122.428864 Mflop/s

Testing m0 = 6, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 8 6 8 8 8 6 8
<<< (M = 6, K = 8, N = 8) : 109.176787
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 122.428864
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 2,2) :   115.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 136 (1.2%), 11114 (98.8%) left; Finishing by Sat Oct 21  7:03:04 2000

(8,5,9) <- (4,1,3).*(2, 5+0,3): 81.284656 Mflop/s
(14,15,15) <- (7,3,5).*(2, 5+0,3): 80.404025 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 9 8 5 5 9 8 9
<<< (M = 8, K = 5, N = 9) : 81.284656
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 80.404025
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 5,3) :    80.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 137 (1.2%), 11113 (98.8%) left; Finishing by Sat Oct 21  7:03:48 2000

(9,8,8) <- (3,1,2).*(3, 8+0,4): 122.851559 Mflop/s
(15,8,12) <- (5,1,3).*(3, 8+0,4): 126.263456 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 122.851559
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 12 15 8 8 12 15 12
<<< (M = 15, K = 8, N = 12) : 126.263456
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 8,4) :   124.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 138 (1.2%), 11112 (98.8%) left; Finishing by Sat Oct 21  7:03:10 2000

(8,15,8) <- (4,0,1).*(2, 15+0,8): 66.005419 Mflop/s
(14,15,8) <- (7,1,1).*(2, 15+0,8): 64.894414 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  15 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 66.005419
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 8 14 15 15 8 14 8
<<< (M = 14, K = 15, N = 8) : 64.894414
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 15,8) :    65.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 139 (1.2%), 11111 (98.8%) left; Finishing by Sat Oct 21  7:03:53 2000

(9,15,13) <- (9,0,0).*(1, 15+0,13): 70.132945 Mflop/s
(15,15,13) <- (15,1,1).*(1, 15+0,13): 72.746562 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 13 9 15 15 13 9 13
<<< (M = 9, K = 15, N = 13) : 70.132945
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 13 15 15 15 13 15 13
<<< (M = 15, K = 15, N = 13) : 72.746562
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,13) :    71.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 140 (1.2%), 11110 (98.8%) left; Finishing by Sat Oct 21  7:03:16 2000

(8,13,9) <- (2,0,3).*(4, 13+0,3): 64.855468 Mflop/s
(12,13,15) <- (3,1,5).*(4, 13+0,3): 74.106737 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 64.855468
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 74.106737
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 13,3) :    69.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 141 (1.3%), 11109 (98.7%) left; Finishing by Sat Oct 21  7:02:39 2000

(6,8,9) <- (1,4,9).*(6, 2+0,1): 137.865771 Mflop/s
(12,14,15) <- (2,7,15).*(6, 2+0,1): 154.465943 Mflop/s

Testing m0 = 6, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 9 6 8 8 9 6 9
<<< (M = 6, K = 8, N = 9) : 137.865771
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 154.465943
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 2,1) :   145.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 142 (1.3%), 11108 (98.7%) left; Finishing by Sat Oct 21  7:02:02 2000

(10,9,9) <- (0,9,9).*(10,1+0,1): 103.964873 Mflop/s
(10,15,15) <- (1,15,15).*(10,1+0,1): 114.988568 Mflop/s

Testing m0 = 10, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 10 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 9 9 10 9 9 9 10 9
<<< (M = 10, K = 9, N = 9) : 103.964873
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 15 10 15 15 15 10 15
<<< (M = 10, K = 15, N = 15) : 114.988568
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (10,1,1) :   109.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 143 (1.3%), 11107 (98.7%) left; Finishing by Sat Oct 21  7:01:26 2000

(9,8,9) <- (9,4,1).*(1, 2+0,9): 124.603516 Mflop/s
(15,14,9) <- (15,7,1).*(1, 2+0,9): 135.593075 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 124.603516
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 135.593075
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,9) :   129.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 144 (1.3%), 11106 (98.7%) left; Finishing by Sat Oct 21  7:02:09 2000

(7,6,8) <- (1,1,4).*(7, 6+0,2): 95.207376 Mflop/s
(14,12,14) <- (2,2,7).*(7, 6+0,2): 113.421833 Mflop/s

Testing m0 = 7, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 6 8 7 6 6 8 7 8
<<< (M = 7, K = 6, N = 8) : 95.207376
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 113.421833
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 6,2) :   103.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 145 (1.3%), 11105 (98.7%) left; Finishing by Sat Oct 21  7:01:33 2000

(7,11,8) <- (1,0,4).*(7, 11+0,2): 109.901638 Mflop/s
(14,11,14) <- (2,1,7).*(7, 11+0,2): 112.821042 Mflop/s

Testing m0 = 7, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 11 8 7 11 11 8 7 8
<<< (M = 7, K = 11, N = 8) : 109.901638
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 14 14 11 11 14 14 14
<<< (M = 14, K = 11, N = 14) : 112.821042
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 11,2) :   111.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 146 (1.3%), 11104 (98.7%) left; Finishing by Sat Oct 21  7:03:32 2000

(9,8,14) <- (9,2,0).*(1, 4+0,14): 121.051719 Mflop/s
(15,12,14) <- (15,3,1).*(1, 4+0,14): 129.637682 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 14 9 8 8 14 9 14
<<< (M = 9, K = 8, N = 14) : 121.051719
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 129.637682
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,14) :   125.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 147 (1.3%), 11103 (98.7%) left; Finishing by Sat Oct 21  7:02:57 2000

(5,13,9) <- (1,0,3).*(5, 13+0,3): 136.143833 Mflop/s
(15,13,15) <- (3,1,5).*(5, 13+0,3): 118.112584 Mflop/s

Testing m0 = 5, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 13 9 5 13 13 9 5 9
<<< (M = 5, K = 13, N = 9) : 136.143833
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 118.112584
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 13,3) :   126.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 148 (1.3%), 11102 (98.7%) left; Finishing by Sat Oct 21  7:04:53 2000

(8,9,9) <- (4,9,3).*(2,1+0,3): 92.809064 Mflop/s
(14,15,15) <- (7,15,5).*(2,1+0,3): 76.383032 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 92.809064
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 76.383032
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2,1,3) :    83.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 149 (1.3%), 11101 (98.7%) left; Finishing by Sat Oct 21  7:03:02 2000

(10,5,9) <- (0,1,9).*(10, 5+0,1): 106.335862 Mflop/s
(10,15,15) <- (1,3,15).*(10, 5+0,1): 136.929913 Mflop/s

Testing m0 = 10, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 10  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 5 9 10 5 5 9 10 9
<<< (M = 10, K = 5, N = 9) : 106.335862
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 15 10 15 15 15 10 15
<<< (M = 10, K = 15, N = 15) : 136.929913
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (10, 5,1) :   119.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 150 (1.3%), 11100 (98.7%) left; Finishing by Sat Oct 21  7:03:43 2000

(8,5,8) <- (4,1,4).*(2, 5+0,2): 112.730051 Mflop/s
(14,15,14) <- (7,3,7).*(2, 5+0,2): 155.343063 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 8 8 5 5 8 8 8
<<< (M = 8, K = 5, N = 8) : 112.730051
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 155.343063
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 5,2) :   130.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 151 (1.3%), 11099 (98.7%) left; Finishing by Sat Oct 21  7:04:22 2000

(9,15,9) <- (1,0,9).*(9, 15+0,1): 107.330668 Mflop/s
(9,15,15) <- (1,1,15).*(9, 15+0,1): 108.373324 Mflop/s

Testing m0 = 9, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 9  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 107.330668
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 108.373324
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (9, 15,1) :   107.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 152 (1.4%), 11098 (98.6%) left; Finishing by Sat Oct 21  7:03:47 2000

(9,15,12) <- (9,0,0).*(1, 15+0,12): 138.416756 Mflop/s
(15,15,12) <- (15,1,1).*(1, 15+0,12): 126.068148 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 12 9 15 15 12 9 12
<<< (M = 9, K = 15, N = 12) : 138.416756
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 126.068148
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,12) :   132.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 153 (1.4%), 11097 (98.6%) left; Finishing by Sat Oct 21  7:03:13 2000

(8,8,6) <- (4,2,1).*(2, 4+0,6): 62.409774 Mflop/s
(14,12,12) <- (7,3,2).*(2, 4+0,6): 71.044440 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  4 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 6 8 8 8 6 8 6
<<< (M = 8, K = 8, N = 6) : 62.409774
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 71.044440
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 4,6) :    66.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 154 (1.4%), 11096 (98.6%) left; Finishing by Sat Oct 21  7:02:39 2000

(9,8,16) <- (9,2,0).*(1, 4+0,16): 127.683185 Mflop/s
(15,12,16) <- (15,3,0).*(1, 4+0,16): 134.831285 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 16 9 8 8 16 9 16
<<< (M = 9, K = 8, N = 16) : 127.683185
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 16 15 12 12 16 15 16
<<< (M = 15, K = 12, N = 16) : 134.831285
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,16) :   131.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 155 (1.4%), 11095 (98.6%) left; Finishing by Sat Oct 21  7:02:06 2000

(9,9,8) <- (9,1,4).*(1, 9+0,2): 125.783834 Mflop/s
(15,9,14) <- (15,1,7).*(1, 9+0,2): 124.070645 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 125.783834
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 124.070645
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,2) :   124.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 156 (1.4%), 11094 (98.6%) left; Finishing by Sat Oct 21  7:02:45 2000

(8,10,8) <- (2,0,2).*(4, 10+0,4): 59.370362 Mflop/s
(12,10,12) <- (3,1,3).*(4, 10+0,4): 69.462126 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 59.370362
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 12 12 10 10 12 12 12
<<< (M = 12, K = 10, N = 12) : 69.462126
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 10,4) :    64.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 157 (1.4%), 11093 (98.6%) left; Finishing by Sat Oct 21  7:02:12 2000

(8,10,6) <- (4,0,1).*(2, 10+0,6): 65.325480 Mflop/s
(14,10,12) <- (7,1,2).*(2, 10+0,6): 69.022727 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  10 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 6 8 10 10 6 8 6
<<< (M = 8, K = 10, N = 6) : 65.325480
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 12 14 10 10 12 14 12
<<< (M = 14, K = 10, N = 12) : 69.022727
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 10,6) :    67.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 158 (1.4%), 11092 (98.6%) left; Finishing by Sat Oct 21  7:00:28 2000

(9,12,8) <- (9,0,1).*(1, 12+0,8): 127.600737 Mflop/s
(15,12,8) <- (15,1,1).*(1, 12+0,8): 128.958356 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 127.600737
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 8 15 12 12 8 15 8
<<< (M = 15, K = 12, N = 8) : 128.958356
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,8) :   128.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 159 (1.4%), 11091 (98.6%) left; Finishing by Sat Oct 21  6:59:56 2000

(9,8,9) <- (9,1,1).*(1, 8+0,9): 127.486262 Mflop/s
(15,8,9) <- (15,1,1).*(1, 8+0,9): 128.084130 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 127.486262
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 9 15 8 8 9 15 9
<<< (M = 15, K = 8, N = 9) : 128.084130
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,9) :   127.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 160 (1.4%), 11090 (98.6%) left; Finishing by Sat Oct 21  7:00:35 2000

(8,8,8) <- (1,4,4).*(8, 2+0,2): 107.202139 Mflop/s
(8,14,14) <- (1,7,7).*(8, 2+0,2): 114.546117 Mflop/s

Testing m0 = 8, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 107.202139
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 14 8 14 14 14 8 14
<<< (M = 8, K = 14, N = 14) : 114.546117
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 2,2) :   110.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 161 (1.4%), 11089 (98.6%) left; Finishing by Sat Oct 21  7:00:04 2000

(8,13,6) <- (4,0,1).*(2, 13+0,6): 67.633603 Mflop/s
(14,13,12) <- (7,1,2).*(2, 13+0,6): 71.809940 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  13 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 6 8 13 13 6 8 6
<<< (M = 8, K = 13, N = 6) : 67.633603
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 12 14 13 13 12 14 12
<<< (M = 14, K = 13, N = 12) : 71.809940
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 13,6) :    69.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 162 (1.4%), 11088 (98.6%) left; Finishing by Sat Oct 21  6:59:33 2000

(9,11,9) <- (1,0,9).*(9, 11+0,1): 124.797977 Mflop/s
(9,11,15) <- (1,1,15).*(9, 11+0,1): 125.119700 Mflop/s

Testing m0 = 9, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 9  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 124.797977
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 15 9 11 11 15 9 15
<<< (M = 9, K = 11, N = 15) : 125.119700
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (9, 11,1) :   125.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 163 (1.4%), 11087 (98.6%) left; Finishing by Sat Oct 21  6:59:02 2000

(9,8,12) <- (9,4,0).*(1, 2+0,12): 120.993509 Mflop/s
(15,14,12) <- (15,7,1).*(1, 2+0,12): 130.536072 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 12 9 8 8 12 9 12
<<< (M = 9, K = 8, N = 12) : 120.993509
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 130.536072
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,12) :   125.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 164 (1.5%), 11086 (98.5%) left; Finishing by Sat Oct 21  6:59:40 2000

(9,8,8) <- (9,4,1).*(1, 2+0,8): 130.612945 Mflop/s
(15,14,8) <- (15,7,1).*(1, 2+0,8): 141.324070 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 130.612945
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 8 15 14 14 8 15 8
<<< (M = 15, K = 14, N = 8) : 141.324070
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,8) :   135.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 165 (1.5%), 11085 (98.5%) left; Finishing by Sat Oct 21  6:59:10 2000

(9,13,9) <- (1,0,9).*(9, 13+0,1): 129.313994 Mflop/s
(9,13,15) <- (1,1,15).*(9, 13+0,1): 130.805491 Mflop/s

Testing m0 = 9, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 9  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 129.313994
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 15 9 13 13 15 9 15
<<< (M = 9, K = 13, N = 15) : 130.805491
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (9, 13,1) :   130.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 166 (1.5%), 11084 (98.5%) left; Finishing by Sat Oct 21  6:58:40 2000

(8,8,6) <- (4,4,1).*(2, 2+0,6): 60.397319 Mflop/s
(14,14,12) <- (7,7,2).*(2, 2+0,6): 70.666176 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  2 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 6 8 8 8 6 8 6
<<< (M = 8, K = 8, N = 6) : 60.397319
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 70.666176
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 2,6) :    65.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 167 (1.5%), 11083 (98.5%) left; Finishing by Sat Oct 21  6:58:10 2000

(8,15,8) <- (2,0,2).*(4, 15+0,4): 63.230604 Mflop/s
(12,15,12) <- (3,1,3).*(4, 15+0,4): 73.409802 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 63.230604
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 12 12 15 15 12 12 12
<<< (M = 12, K = 15, N = 12) : 73.409802
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 15,4) :    67.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 168 (1.5%), 11082 (98.5%) left; Finishing by Sat Oct 21  6:57:41 2000

(9,15,9) <- (9,0,3).*(1, 15+0,3): 144.811026 Mflop/s
(15,15,15) <- (15,1,5).*(1, 15+0,3): 149.088478 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 144.811026
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 149.088478
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,3) :   146.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 169 (1.5%), 11081 (98.5%) left; Finishing by Sat Oct 21  6:57:12 2000

(9,9,9) <- (9,9,1).*(1,1+0,9): 88.819671 Mflop/s
(15,15,9) <- (15,15,1).*(1,1+0,9): 96.920230 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 88.819671
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 96.920230
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,9) :    92.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 170 (1.5%), 11080 (98.5%) left; Finishing by Sat Oct 21  6:55:37 2000

(9,8,8) <- (9,4,4).*(1, 2+0,2): 129.965618 Mflop/s
(15,14,14) <- (15,7,7).*(1, 2+0,2): 121.908032 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 129.965618
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 121.908032
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,2) :   125.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 171 (1.5%), 11079 (98.5%) left; Finishing by Sat Oct 21  6:56:15 2000

(5,5,9) <- (1,1,9).*(5, 5+0,1): 108.918899 Mflop/s
(15,15,15) <- (3,3,15).*(5, 5+0,1): 175.312065 Mflop/s

Testing m0 = 5, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 5 9 5 5 5 9 5 9
<<< (M = 5, K = 5, N = 9) : 108.918899
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 175.312065
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 5,1) :   134.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 172 (1.5%), 11078 (98.5%) left; Finishing by Sat Oct 21  6:55:47 2000

(8,6,8) <- (2,1,4).*(4, 6+0,2): 50.865408 Mflop/s
(12,12,14) <- (3,2,7).*(4, 6+0,2): 74.917710 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 50.865408
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 74.917710
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 6,2) :    60.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 173 (1.5%), 11077 (98.5%) left; Finishing by Sat Oct 21  6:55:20 2000

(9,5,9) <- (3,1,9).*(3, 5+0,1): 102.447686 Mflop/s
(15,15,15) <- (5,3,15).*(3, 5+0,1): 166.232028 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 9 9 5 5 9 9 9
<<< (M = 9, K = 5, N = 9) : 102.447686
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 166.232028
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 5,1) :   126.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 174 (1.5%), 11076 (98.5%) left; Finishing by Sat Oct 21  6:55:57 2000

(9,15,10) <- (9,0,0).*(1, 15+0,10): 122.858282 Mflop/s
(15,15,10) <- (15,1,1).*(1, 15+0,10): 140.678971 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 10 9 15 15 10 9 10
<<< (M = 9, K = 15, N = 10) : 122.858282
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 10 15 15 15 10 15 10
<<< (M = 15, K = 15, N = 10) : 140.678971
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,10) :   131.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 175 (1.6%), 11075 (98.4%) left; Finishing by Sat Oct 21  6:54:25 2000

(8,8,8) <- (2,1,4).*(4, 8+0,2): 55.315719 Mflop/s
(12,8,14) <- (3,1,7).*(4, 8+0,2): 55.477886 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 55.315719
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 14 12 8 8 14 12 14
<<< (M = 12, K = 8, N = 14) : 55.477886
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 8,2) :    55.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 176 (1.6%), 11074 (98.4%) left; Finishing by Sat Oct 21  6:53:59 2000

(9,9,15) <- (9,1,0).*(1, 9+0,15): 127.757427 Mflop/s
(15,9,15) <- (15,1,1).*(1, 9+0,15): 128.989364 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 15 9 9 9 15 9 15
<<< (M = 9, K = 9, N = 15) : 127.757427
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 128.989364
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,15) :   128.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 177 (1.6%), 11073 (98.4%) left; Finishing by Sat Oct 21  6:53:32 2000

(16,8,9) <- (0,1,9).*(16, 8+0,1): 129.551665 Mflop/s
(16,8,15) <- (0,1,15).*(16, 8+0,1): 130.418338 Mflop/s

Testing m0 = 16, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 16  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 8 9 16 8 8 9 16 9
<<< (M = 16, K = 8, N = 9) : 129.551665
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 8 15 16 8 8 15 16 15
<<< (M = 16, K = 8, N = 15) : 130.418338
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (16, 8,1) :   130.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 178 (1.6%), 11072 (98.4%) left; Finishing by Sat Oct 21  6:53:06 2000

(9,8,6) <- (9,2,1).*(1, 4+0,6): 127.553772 Mflop/s
(15,12,12) <- (15,3,2).*(1, 4+0,6): 141.625278 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 6 9 8 8 6 9 6
<<< (M = 9, K = 8, N = 6) : 127.553772
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 141.625278
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,6) :   134.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 179 (1.6%), 11071 (98.4%) left; Finishing by Sat Oct 21  6:52:40 2000

(9,8,7) <- (9,2,1).*(1, 4+0,7): 124.938050 Mflop/s
(15,12,14) <- (15,3,2).*(1, 4+0,7): 140.844275 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 7 9 8 8 7 9 7
<<< (M = 9, K = 8, N = 7) : 124.938050
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 140.844275
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,7) :   132.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 180 (1.6%), 11070 (98.4%) left; Finishing by Sat Oct 21  6:53:18 2000

(8,8,9) <- (4,1,9).*(2, 8+0,1): 124.848000 Mflop/s
(14,8,15) <- (7,1,15).*(2, 8+0,1): 125.090573 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 124.848000
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 15 14 8 8 15 14 15
<<< (M = 14, K = 8, N = 15) : 125.090573
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 8,1) :   125.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 181 (1.6%), 11069 (98.4%) left; Finishing by Sat Oct 21  6:53:54 2000

(9,9,12) <- (9,9,0).*(1,1+0,12): 64.985975 Mflop/s
(15,15,12) <- (15,15,1).*(1,1+0,12): 60.298861 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 12 9 9 9 12 9 12
<<< (M = 9, K = 9, N = 12) : 64.985975
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 60.298861
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,12) :    62.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 182 (1.6%), 11068 (98.4%) left; Finishing by Sat Oct 21  6:52:27 2000

(9,8,9) <- (3,4,9).*(3, 2+0,1): 139.745820 Mflop/s
(15,14,15) <- (5,7,15).*(3, 2+0,1): 147.531852 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 139.745820
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 147.531852
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 2,1) :   143.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 183 (1.6%), 11067 (98.4%) left; Finishing by Sat Oct 21  6:53:03 2000

(9,10,15) <- (9,0,0).*(1, 10+0,15): 129.923026 Mflop/s
(15,10,15) <- (15,1,1).*(1, 10+0,15): 130.150152 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 15 9 10 10 15 9 15
<<< (M = 9, K = 10, N = 15) : 129.923026
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 130.150152
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,15) :   130.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 184 (1.6%), 11066 (98.4%) left; Finishing by Sat Oct 21  6:52:38 2000

(8,9,8) <- (2,3,2).*(4, 3+0,4): 56.684917 Mflop/s
(12,15,12) <- (3,5,3).*(4, 3+0,4): 71.309137 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 56.684917
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 12 12 15 15 12 12 12
<<< (M = 12, K = 15, N = 12) : 71.309137
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 3,4) :    63.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 185 (1.6%), 11065 (98.4%) left; Finishing by Sat Oct 21  6:52:13 2000

(8,13,7) <- (4,0,1).*(2, 13+0,7): 120.723262 Mflop/s
(14,13,14) <- (7,1,2).*(2, 13+0,7): 134.266270 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  13 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 7 8 13 13 7 8 7
<<< (M = 8, K = 13, N = 7) : 120.723262
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 14 14 13 13 14 14 14
<<< (M = 14, K = 13, N = 14) : 134.266270
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 13,7) :   127.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 14,1) :   184.1 MFLOPS.
Done 186 (1.7%), 11064 (98.3%) left; Finishing by Sat Oct 21  6:52:49 2000

(6,14,9) <- (1,0,9).*(6, 14+0,1): 181.932652 Mflop/s
(12,14,15) <- (2,1,15).*(6, 14+0,1): 186.398674 Mflop/s

Testing m0 = 6, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 14 9 6 14 14 9 6 9
<<< (M = 6, K = 14, N = 9) : 181.932652
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 186.398674
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 14,1) :   184.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 187 (1.7%), 11063 (98.3%) left; Finishing by Sat Oct 21  6:53:25 2000

(9,8,8) <- (3,2,2).*(3, 4+0,4): 123.882440 Mflop/s
(15,12,12) <- (5,3,3).*(3, 4+0,4): 134.632236 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 123.882440
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 134.632236
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 4,4) :   129.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 188 (1.7%), 11062 (98.3%) left; Finishing by Sat Oct 21  6:53:00 2000

(9,10,5) <- (9,0,1).*(1, 10+0,5): 131.935817 Mflop/s
(15,10,15) <- (15,1,3).*(1, 10+0,5): 140.982098 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 5 9 10 10 5 9 5
<<< (M = 9, K = 10, N = 5) : 131.935817
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 140.982098
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,5) :   136.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 189 (1.7%), 11061 (98.3%) left; Finishing by Sat Oct 21  6:53:35 2000

(8,9,8) <- (1,3,4).*(8, 3+0,2): 113.697749 Mflop/s
(8,15,14) <- (1,5,7).*(8, 3+0,2): 121.610033 Mflop/s

Testing m0 = 8, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 113.697749
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 14 8 15 15 14 8 14
<<< (M = 8, K = 15, N = 14) : 121.610033
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 3,2) :   117.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 190 (1.7%), 11060 (98.3%) left; Finishing by Sat Oct 21  6:54:10 2000

(9,8,8) <- (3,1,4).*(3, 8+0,2): 126.805980 Mflop/s
(15,8,14) <- (5,1,7).*(3, 8+0,2): 132.383281 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 126.805980
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 14 15 8 8 14 15 14
<<< (M = 15, K = 8, N = 14) : 132.383281
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 8,2) :   129.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 191 (1.7%), 11059 (98.3%) left; Finishing by Sat Oct 21  6:53:46 2000

(9,10,9) <- (9,0,1).*(1, 10+0,9): 133.072798 Mflop/s
(15,10,9) <- (15,1,1).*(1, 10+0,9): 135.208311 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 133.072798
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 9 15 10 10 9 15 9
<<< (M = 15, K = 10, N = 9) : 135.208311
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,9) :   134.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 192 (1.7%), 11058 (98.3%) left; Finishing by Sat Oct 21  6:54:20 2000

(9,7,15) <- (9,1,0).*(1, 7+0,15): 58.594134 Mflop/s
(15,14,15) <- (15,2,1).*(1, 7+0,15): 64.606886 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 15 9 7 7 15 9 15
<<< (M = 9, K = 7, N = 15) : 58.594134
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 64.606886
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,15) :    61.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 193 (1.7%), 11057 (98.3%) left; Finishing by Sat Oct 21  6:53:56 2000

(9,13,5) <- (9,0,1).*(1, 13+0,5): 139.481043 Mflop/s
(15,13,15) <- (15,1,3).*(1, 13+0,5): 145.851798 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 5 9 13 13 5 9 5
<<< (M = 9, K = 13, N = 5) : 139.481043
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 145.851798
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,5) :   142.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 194 (1.7%), 11056 (98.3%) left; Finishing by Sat Oct 21  6:54:30 2000

(9,15,9) <- (9,0,9).*(1, 15+0,1): 126.593504 Mflop/s
(15,15,15) <- (15,1,15).*(1, 15+0,1): 129.821125 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 126.593504
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 129.821125
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,1) :   128.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 195 (1.7%), 11055 (98.3%) left; Finishing by Sat Oct 21  6:53:08 2000

(6,9,9) <- (1,3,9).*(6, 3+0,1): 136.919552 Mflop/s
(12,15,15) <- (2,5,15).*(6, 3+0,1): 152.675042 Mflop/s

Testing m0 = 6, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 9 6 9 9 9 6 9
<<< (M = 6, K = 9, N = 9) : 136.919552
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 152.675042
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 3,1) :   144.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 196 (1.7%), 11054 (98.3%) left; Finishing by Sat Oct 21  6:53:42 2000

(9,7,8) <- (3,1,4).*(3, 7+0,2): 120.341754 Mflop/s
(15,14,14) <- (5,2,7).*(3, 7+0,2): 145.913851 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 120.341754
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 145.913851
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 7,2) :   131.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 197 (1.8%), 11053 (98.2%) left; Finishing by Sat Oct 21  6:54:15 2000

(9,10,5) <- (3,0,1).*(3, 10+0,5): 125.724541 Mflop/s
(15,10,15) <- (5,1,3).*(3, 10+0,5): 127.373019 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  10 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 5 9 10 10 5 9 5
<<< (M = 9, K = 10, N = 5) : 125.724541
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 127.373019
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 10,5) :   126.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 198 (1.8%), 11052 (98.2%) left; Finishing by Sat Oct 21  6:54:48 2000

(8,15,8) <- (1,0,4).*(8, 15+0,2): 53.507821 Mflop/s
(8,15,14) <- (1,1,7).*(8, 15+0,2): 53.110933 Mflop/s

Testing m0 = 8, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 53.507821
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 14 8 15 15 14 8 14
<<< (M = 8, K = 15, N = 14) : 53.110933
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 15,2) :    53.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 199 (1.8%), 11051 (98.2%) left; Finishing by Sat Oct 21  6:54:25 2000

(9,8,9) <- (1,2,9).*(9, 4+0,1): 70.238226 Mflop/s
(9,12,15) <- (1,3,15).*(9, 4+0,1): 75.859578 Mflop/s

Testing m0 = 9, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 9  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 70.238226
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 75.859578
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (9, 4,1) :    72.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 200 (1.8%), 11050 (98.2%) left; Finishing by Sat Oct 21  6:54:01 2000

(9,15,5) <- (9,0,1).*(1, 15+0,5): 146.533816 Mflop/s
(15,15,15) <- (15,1,3).*(1, 15+0,5): 151.256272 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 5 9 15 15 5 9 5
<<< (M = 9, K = 15, N = 5) : 146.533816
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 151.256272
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,5) :   148.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 201 (1.8%), 11049 (98.2%) left; Finishing by Sat Oct 21  6:53:38 2000

(9,13,8) <- (3,0,2).*(3, 13+0,4): 137.425542 Mflop/s
(15,13,12) <- (5,1,3).*(3, 13+0,4): 138.952196 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 137.425542
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 138.952196
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 13,4) :   138.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 202 (1.8%), 11048 (98.2%) left; Finishing by Sat Oct 21  6:53:15 2000

(8,8,5) <- (4,4,1).*(2, 2+0,5): 65.199967 Mflop/s
(14,14,15) <- (7,7,3).*(2, 2+0,5): 62.297389 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  2 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 5 8 8 8 5 8 5
<<< (M = 8, K = 8, N = 5) : 65.199967
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 62.297389
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 2,5) :    63.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 203 (1.8%), 11047 (98.2%) left; Finishing by Sat Oct 21  6:53:48 2000

(12,9,9) <- (0,3,9).*(12, 3+0,1): 129.110531 Mflop/s
(12,15,15) <- (1,5,15).*(12, 3+0,1): 142.079878 Mflop/s

Testing m0 = 12, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 12  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 9 12 9 9 9 12 9
<<< (M = 12, K = 9, N = 9) : 129.110531
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 142.079878
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (12, 3,1) :   135.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 204 (1.8%), 11046 (98.2%) left; Finishing by Sat Oct 21  6:53:25 2000

(11,5,9) <- (0,1,9).*(11, 5+0,1): 57.262643 Mflop/s
(11,15,15) <- (1,3,15).*(11, 5+0,1): 70.467114 Mflop/s

Testing m0 = 11, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 11  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 5 9 11 5 5 9 11 9
<<< (M = 11, K = 5, N = 9) : 57.262643
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 15 11 15 15 15 11 15
<<< (M = 11, K = 15, N = 15) : 70.467114
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (11, 5,1) :    63.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 205 (1.8%), 11045 (98.2%) left; Finishing by Sat Oct 21  6:52:07 2000

(9,11,5) <- (3,0,1).*(3, 11+0,5): 128.147031 Mflop/s
(15,11,15) <- (5,1,3).*(3, 11+0,5): 130.048344 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  11 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 5 9 11 11 5 9 5
<<< (M = 9, K = 11, N = 5) : 128.147031
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 130.048344
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 11,5) :   129.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 206 (1.8%), 11044 (98.2%) left; Finishing by Sat Oct 21  6:52:40 2000

(8,8,8) <- (4,2,1).*(2, 4+0,8): 58.865455 Mflop/s
(14,12,8) <- (7,3,1).*(2, 4+0,8): 63.778410 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  4 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 58.865455
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 8 14 12 12 8 14 8
<<< (M = 14, K = 12, N = 8) : 63.778410
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 4,8) :    61.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 207 (1.8%), 11043 (98.2%) left; Finishing by Sat Oct 21  6:53:12 2000

(11,14,9) <- (0,0,9).*(11, 14+0,1): 144.539046 Mflop/s
(11,14,15) <- (1,1,15).*(11, 14+0,1): 145.253829 Mflop/s

Testing m0 = 11, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 11  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 9 11 14 14 9 11 9
<<< (M = 11, K = 14, N = 9) : 144.539046
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 15 11 14 14 15 11 15
<<< (M = 11, K = 14, N = 15) : 145.253829
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (11, 14,1) :   144.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 208 (1.8%), 11042 (98.2%) left; Finishing by Sat Oct 21  6:52:50 2000

(9,5,6) <- (9,1,1).*(1, 5+0,6): 110.608739 Mflop/s
(15,15,12) <- (15,3,2).*(1, 5+0,6): 146.757892 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 6 9 5 5 6 9 6
<<< (M = 9, K = 5, N = 6) : 110.608739
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 146.757892
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,6) :   126.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 209 (1.9%), 11041 (98.1%) left; Finishing by Sat Oct 21  6:53:22 2000

(8,5,9) <- (4,1,9).*(2, 5+0,1): 98.828981 Mflop/s
(14,15,15) <- (7,3,15).*(2, 5+0,1): 165.820660 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 9 8 5 5 9 8 9
<<< (M = 8, K = 5, N = 9) : 98.828981
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 165.820660
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 5,1) :   123.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 210 (1.9%), 11040 (98.1%) left; Finishing by Sat Oct 21  6:53:00 2000

(9,11,6) <- (9,0,1).*(1, 11+0,6): 136.577392 Mflop/s
(15,11,12) <- (15,1,2).*(1, 11+0,6): 142.265073 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 6 9 11 11 6 9 6
<<< (M = 9, K = 11, N = 6) : 136.577392
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 142.265073
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,6) :   139.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 211 (1.9%), 11039 (98.1%) left; Finishing by Sat Oct 21  6:53:31 2000

(6,14,8) <- (1,0,4).*(6, 14+0,2): 62.652280 Mflop/s
(12,14,14) <- (2,1,7).*(6, 14+0,2): 59.422477 Mflop/s

Testing m0 = 6, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 14 8 6 14 14 8 6 8
<<< (M = 6, K = 14, N = 8) : 62.652280
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 59.422477
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 14,2) :    61.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 212 (1.9%), 11038 (98.1%) left; Finishing by Sat Oct 21  6:53:09 2000

(9,13,16) <- (9,0,0).*(1, 13+0,16): 136.223900 Mflop/s
(15,13,16) <- (15,1,0).*(1, 13+0,16): 130.884684 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 16 9 13 13 16 9 16
<<< (M = 9, K = 13, N = 16) : 136.223900
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 16 15 13 13 16 15 16
<<< (M = 15, K = 13, N = 16) : 130.884684
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,16) :   133.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 213 (1.9%), 11037 (98.1%) left; Finishing by Sat Oct 21  6:52:48 2000

(8,11,8) <- (4,0,2).*(2, 11+0,4): 78.411227 Mflop/s
(14,11,12) <- (7,1,3).*(2, 11+0,4): 68.624241 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 78.411227
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 12 14 11 11 12 14 12
<<< (M = 14, K = 11, N = 12) : 68.624241
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 11,4) :    73.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 214 (1.9%), 11036 (98.1%) left; Finishing by Sat Oct 21  6:52:26 2000

(9,6,16) <- (9,1,0).*(1, 6+0,16): 119.645990 Mflop/s
(15,12,16) <- (15,2,0).*(1, 6+0,16): 136.865983 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 16 9 6 6 16 9 16
<<< (M = 9, K = 6, N = 16) : 119.645990
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 16 15 12 12 16 15 16
<<< (M = 15, K = 12, N = 16) : 136.865983
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,16) :   127.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 215 (1.9%), 11035 (98.1%) left; Finishing by Sat Oct 21  6:52:57 2000

(5,9,8) <- (1,1,4).*(5, 9+0,2): 119.763579 Mflop/s
(15,9,14) <- (3,1,7).*(5, 9+0,2): 124.216624 Mflop/s

Testing m0 = 5, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 8 5 9 9 8 5 8
<<< (M = 5, K = 9, N = 8) : 119.763579
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 124.216624
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 9,2) :   121.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 216 (1.9%), 11034 (98.1%) left; Finishing by Sat Oct 21  6:53:28 2000

(10,8,9) <- (0,1,9).*(10, 8+0,1): 113.563568 Mflop/s
(10,8,15) <- (1,1,15).*(10, 8+0,1): 114.960300 Mflop/s

Testing m0 = 10, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 10  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 8 9 10 8 8 9 10 9
<<< (M = 10, K = 8, N = 9) : 113.563568
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 8 15 10 8 8 15 10 15
<<< (M = 10, K = 8, N = 15) : 114.960300
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (10, 8,1) :   114.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 217 (1.9%), 11033 (98.1%) left; Finishing by Sat Oct 21  6:52:15 2000

(6,11,9) <- (1,0,9).*(6, 11+0,1): 142.983366 Mflop/s
(12,11,15) <- (2,1,15).*(6, 11+0,1): 140.495322 Mflop/s

Testing m0 = 6, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 11 9 6 11 11 9 6 9
<<< (M = 6, K = 11, N = 9) : 142.983366
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 140.495322
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 11,1) :   141.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 218 (1.9%), 11032 (98.1%) left; Finishing by Sat Oct 21  6:52:45 2000

(9,8,8) <- (3,2,4).*(3, 4+0,2): 125.805801 Mflop/s
(15,12,14) <- (5,3,7).*(3, 4+0,2): 142.842128 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 125.805801
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 142.842128
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 4,2) :   133.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 219 (1.9%), 11031 (98.1%) left; Finishing by Sat Oct 21  6:54:07 2000

(13,13,9) <- (0,0,9).*(13, 13+0,1): 54.338235 Mflop/s
(13,13,15) <- (1,1,15).*(13, 13+0,1): 54.815098 Mflop/s

Testing m0 = 13, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 13  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 13 9 13 13 13 9 13 9
<<< (M = 13, K = 13, N = 9) : 54.338235
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 13 15 13 13 13 15 13 15
<<< (M = 13, K = 13, N = 15) : 54.815098
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (13, 13,1) :    54.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 220 (2.0%), 11030 (98.0%) left; Finishing by Sat Oct 21  6:53:46 2000

(6,12,8) <- (1,0,4).*(6, 12+0,2): 55.619964 Mflop/s
(12,12,14) <- (2,1,7).*(6, 12+0,2): 56.956473 Mflop/s

Testing m0 = 6, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 8 6 12 12 8 6 8
<<< (M = 6, K = 12, N = 8) : 55.619964
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 56.956473
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 12,2) :    56.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 221 (2.0%), 11029 (98.0%) left; Finishing by Sat Oct 21  6:53:25 2000

(6,7,9) <- (1,1,9).*(6, 7+0,1): 139.676315 Mflop/s
(12,14,15) <- (2,2,15).*(6, 7+0,1): 178.150840 Mflop/s

Testing m0 = 6, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 7 9 6 7 7 9 6 9
<<< (M = 6, K = 7, N = 9) : 139.676315
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 178.150840
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 7,1) :   156.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 222 (2.0%), 11028 (98.0%) left; Finishing by Sat Oct 21  6:53:55 2000

(8,8,9) <- (4,4,9).*(2, 2+0,1): 131.235124 Mflop/s
(14,14,15) <- (7,7,15).*(2, 2+0,1): 133.697405 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 131.235124
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 133.697405
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 2,1) :   132.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 223 (2.0%), 11027 (98.0%) left; Finishing by Sat Oct 21  6:52:43 2000

(12,10,9) <- (0,0,9).*(12, 10+0,1): 120.371026 Mflop/s
(12,10,15) <- (1,1,15).*(12, 10+0,1): 123.067567 Mflop/s

Testing m0 = 12, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 12  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 9 12 10 10 9 12 9
<<< (M = 12, K = 10, N = 9) : 120.371026
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 123.067567
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (12, 10,1) :   121.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 224 (2.0%), 11026 (98.0%) left; Finishing by Sat Oct 21  6:52:23 2000

(13,11,9) <- (0,0,9).*(13, 11+0,1): 53.936676 Mflop/s
(13,11,15) <- (1,1,15).*(13, 11+0,1): 54.050793 Mflop/s

Testing m0 = 13, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 13  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 11 9 13 11 11 9 13 9
<<< (M = 13, K = 11, N = 9) : 53.936676
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 11 15 13 11 11 15 13 15
<<< (M = 13, K = 11, N = 15) : 54.050793
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (13, 11,1) :    54.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 225 (2.0%), 11025 (98.0%) left; Finishing by Sat Oct 21  6:52:53 2000

(8,13,8) <- (4,0,4).*(2, 13+0,2): 147.582845 Mflop/s
(14,13,14) <- (7,1,7).*(2, 13+0,2): 151.142280 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 147.582845
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 14 14 13 13 14 14 14
<<< (M = 14, K = 13, N = 14) : 151.142280
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 13,2) :   149.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 226 (2.0%), 11024 (98.0%) left; Finishing by Sat Oct 21  6:52:32 2000

(9,8,9) <- (9,2,3).*(1, 4+0,3): 126.453968 Mflop/s
(15,12,15) <- (15,3,5).*(1, 4+0,3): 143.411493 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 126.453968
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 143.411493
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,3) :   134.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 227 (2.0%), 11023 (98.0%) left; Finishing by Sat Oct 21  6:53:02 2000

(16,6,9) <- (0,1,9).*(16, 6+0,1): 115.186006 Mflop/s
(16,12,15) <- (0,2,15).*(16, 6+0,1): 141.296052 Mflop/s

Testing m0 = 16, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 16  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 6 9 16 6 6 9 16 9
<<< (M = 16, K = 6, N = 9) : 115.186006
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 15 16 12 12 15 16 15
<<< (M = 16, K = 12, N = 15) : 141.296052
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (16, 6,1) :   126.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 228 (2.0%), 11022 (98.0%) left; Finishing by Sat Oct 21  6:52:41 2000

(9,6,9) <- (3,1,3).*(3, 6+0,3): 93.281676 Mflop/s
(15,12,15) <- (5,2,5).*(3, 6+0,3): 144.289258 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 93.281676
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 144.289258
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 6,3) :   113.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 229 (2.0%), 11021 (98.0%) left; Finishing by Sat Oct 21  6:53:10 2000

(9,15,9) <- (3,0,9).*(3, 15+0,1): 166.329188 Mflop/s
(15,15,15) <- (5,1,15).*(3, 15+0,1): 166.633390 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 166.329188
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 166.633390
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 15,1) :   166.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 230 (2.0%), 11020 (98.0%) left; Finishing by Sat Oct 21  6:52:50 2000

(9,9,14) <- (9,3,0).*(1, 3+0,14): 127.227118 Mflop/s
(15,15,14) <- (15,5,1).*(1, 3+0,14): 137.711161 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 14 9 9 9 14 9 14
<<< (M = 9, K = 9, N = 14) : 127.227118
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 137.711161
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,14) :   132.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 231 (2.1%), 11019 (97.9%) left; Finishing by Sat Oct 21  6:51:42 2000

(9,8,5) <- (3,4,1).*(3, 2+0,5): 118.616010 Mflop/s
(15,14,15) <- (5,7,3).*(3, 2+0,5): 126.742452 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  2 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 118.616010
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 126.742452
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 2,5) :   122.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 232 (2.1%), 11018 (97.9%) left; Finishing by Sat Oct 21  6:52:11 2000

(9,9,9) <- (9,9,3).*(1,1+0,3): 112.922671 Mflop/s
(15,15,15) <- (15,15,5).*(1,1+0,3): 134.840643 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 112.922671
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 134.840643
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,3) :   122.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 233 (2.1%), 11017 (97.9%) left; Finishing by Sat Oct 21  6:52:39 2000

(8,8,8) <- (2,2,4).*(4, 4+0,2): 55.765752 Mflop/s
(12,12,14) <- (3,3,7).*(4, 4+0,2): 72.947553 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 55.765752
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 72.947553
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 4,2) :    63.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 234 (2.1%), 11016 (97.9%) left; Finishing by Sat Oct 21  6:53:08 2000

(8,5,9) <- (2,1,9).*(4, 5+0,1): 115.994038 Mflop/s
(12,15,15) <- (3,3,15).*(4, 5+0,1): 176.667271 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 9 8 5 5 9 8 9
<<< (M = 8, K = 5, N = 9) : 115.994038
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 176.667271
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 5,1) :   140.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 235 (2.1%), 11015 (97.9%) left; Finishing by Sat Oct 21  6:52:48 2000

(8,9,8) <- (2,9,2).*(4,1+0,4): 120.720702 Mflop/s
(12,15,12) <- (3,15,3).*(4,1+0,4): 132.540499 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 120.720702
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 12 12 15 15 12 12 12
<<< (M = 12, K = 15, N = 12) : 132.540499
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4,1,4) :   126.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 236 (2.1%), 11014 (97.9%) left; Finishing by Sat Oct 21  6:53:16 2000

(8,6,6) <- (4,1,1).*(2, 6+0,6): 55.374133 Mflop/s
(14,12,12) <- (7,2,2).*(2, 6+0,6): 70.891797 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  6 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 6 8 6 6 6 8 6
<<< (M = 8, K = 6, N = 6) : 55.374133
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 70.891797
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 6,6) :    62.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 237 (2.1%), 11013 (97.9%) left; Finishing by Sat Oct 21  6:53:44 2000

(5,5,8) <- (1,1,4).*(5, 5+0,2): 99.943250 Mflop/s
(15,15,14) <- (3,3,7).*(5, 5+0,2): 132.937182 Mflop/s

Testing m0 = 5, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 5 8 5 5 5 8 5 8
<<< (M = 5, K = 5, N = 8) : 99.943250
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 132.937182
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 5,2) :   114.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 238 (2.1%), 11012 (97.9%) left; Finishing by Sat Oct 21  6:54:12 2000

(11,9,9) <- (0,1,9).*(11, 9+0,1): 60.744883 Mflop/s
(11,9,15) <- (1,1,15).*(11, 9+0,1): 61.300596 Mflop/s

Testing m0 = 11, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 11  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 9 9 11 9 9 9 11 9
<<< (M = 11, K = 9, N = 9) : 60.744883
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 9 15 11 9 9 15 11 15
<<< (M = 11, K = 9, N = 15) : 61.300596
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (11, 9,1) :    61.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 239 (2.1%), 11011 (97.9%) left; Finishing by Sat Oct 21  6:53:53 2000

(9,12,12) <- (9,0,0).*(1, 12+0,12): 131.525998 Mflop/s
(15,12,12) <- (15,1,1).*(1, 12+0,12): 132.899961 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 12 9 12 12 12 9 12
<<< (M = 9, K = 12, N = 12) : 131.525998
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 132.899961
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,12) :   132.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 240 (2.1%), 11010 (97.9%) left; Finishing by Sat Oct 21  6:53:33 2000

(9,9,12) <- (9,1,0).*(1, 9+0,12): 125.555788 Mflop/s
(15,9,12) <- (15,1,1).*(1, 9+0,12): 125.840615 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 12 9 9 9 12 9 12
<<< (M = 9, K = 9, N = 12) : 125.555788
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 125.840615
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,12) :   125.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 241 (2.1%), 11009 (97.9%) left; Finishing by Sat Oct 21  6:52:27 2000

(10,12,9) <- (0,0,9).*(10, 12+0,1): 72.885784 Mflop/s
(10,12,15) <- (1,1,15).*(10, 12+0,1): 65.434967 Mflop/s

Testing m0 = 10, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 10  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 9 10 12 12 9 10 9
<<< (M = 10, K = 12, N = 9) : 72.885784
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 15 10 12 12 15 10 15
<<< (M = 10, K = 12, N = 15) : 65.434967
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (10, 12,1) :    69.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 242 (2.2%), 11008 (97.8%) left; Finishing by Sat Oct 21  6:52:55 2000

(14,9,9) <- (0,9,9).*(14,1+0,1): 46.708850 Mflop/s
(14,15,15) <- (1,15,15).*(14,1+0,1): 49.203085 Mflop/s

Testing m0 = 14, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 14 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 9 14 9 9 9 14 9
<<< (M = 14, K = 9, N = 9) : 46.708850
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 49.203085
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (14,1,1) :    47.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 243 (2.2%), 11007 (97.8%) left; Finishing by Sat Oct 21  6:51:50 2000

(8,9,8) <- (4,1,1).*(2, 9+0,8): 61.101660 Mflop/s
(14,9,8) <- (7,1,1).*(2, 9+0,8): 60.600000 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  9 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 61.101660
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 8 14 9 9 8 14 8
<<< (M = 14, K = 9, N = 8) : 60.600000
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 9,8) :    60.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 244 (2.2%), 11006 (97.8%) left; Finishing by Sat Oct 21  6:51:31 2000

(5,9,9) <- (1,3,3).*(5, 3+0,3): 120.355164 Mflop/s
(15,15,15) <- (3,5,5).*(5, 3+0,3): 115.502351 Mflop/s

Testing m0 = 5, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 120.355164
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 115.502351
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 3,3) :   117.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 245 (2.2%), 11005 (97.8%) left; Finishing by Sat Oct 21  6:51:58 2000

(5,5,9) <- (1,1,3).*(5, 5+0,3): 104.993998 Mflop/s
(15,15,15) <- (3,3,5).*(5, 5+0,3): 118.039218 Mflop/s

Testing m0 = 5, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 5 9 5 5 5 9 5 9
<<< (M = 5, K = 5, N = 9) : 104.993998
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 118.039218
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 5,3) :   111.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 246 (2.2%), 11004 (97.8%) left; Finishing by Sat Oct 21  6:52:26 2000

(8,9,8) <- (4,1,2).*(2, 9+0,4): 75.370783 Mflop/s
(14,9,12) <- (7,1,3).*(2, 9+0,4): 74.744422 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 75.370783
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 12 14 9 9 12 14 12
<<< (M = 14, K = 9, N = 12) : 74.744422
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 9,4) :    75.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 247 (2.2%), 11003 (97.8%) left; Finishing by Sat Oct 21  6:52:53 2000

(9,15,8) <- (3,0,2).*(3, 15+0,4): 124.758184 Mflop/s
(15,15,12) <- (5,1,3).*(3, 15+0,4): 139.021931 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 124.758184
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 139.021931
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 15,4) :   131.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 248 (2.2%), 11002 (97.8%) left; Finishing by Sat Oct 21  6:52:34 2000

(8,9,7) <- (4,3,1).*(2, 3+0,7): 65.795244 Mflop/s
(14,15,14) <- (7,5,2).*(2, 3+0,7): 66.072357 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  3 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 7 8 9 9 7 8 7
<<< (M = 8, K = 9, N = 7) : 65.795244
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 66.072357
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 3,7) :    65.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 249 (2.2%), 11001 (97.8%) left; Finishing by Sat Oct 21  6:53:01 2000

(9,13,9) <- (3,0,9).*(3, 13+0,1): 173.712874 Mflop/s
(15,13,15) <- (5,1,15).*(3, 13+0,1): 174.970835 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 173.712874
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 174.970835
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 13,1) :   174.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 250 (2.2%), 11000 (97.8%) left; Finishing by Sat Oct 21  6:52:43 2000

(8,7,8) <- (2,1,2).*(4, 7+0,4): 56.430848 Mflop/s
(12,14,12) <- (3,2,3).*(4, 7+0,4): 72.938749 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 56.430848
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 12 12 14 14 12 12 12
<<< (M = 12, K = 14, N = 12) : 72.938749
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 7,4) :    63.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 251 (2.2%), 10999 (97.8%) left; Finishing by Sat Oct 21  6:52:24 2000

(8,10,8) <- (4,0,4).*(2, 10+0,2): 142.214142 Mflop/s
(14,10,14) <- (7,1,7).*(2, 10+0,2): 140.368545 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 142.214142
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 14 14 10 10 14 14 14
<<< (M = 14, K = 10, N = 14) : 140.368545
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 10,2) :   141.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 252 (2.2%), 10998 (97.8%) left; Finishing by Sat Oct 21  6:53:35 2000

(8,14,9) <- (1,0,9).*(8, 14+0,1): 98.332950 Mflop/s
(8,14,15) <- (1,1,15).*(8, 14+0,1): 98.930597 Mflop/s

Testing m0 = 8, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 98.332950
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 15 8 14 14 15 8 15
<<< (M = 8, K = 14, N = 15) : 98.930597
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 14,1) :    98.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 253 (2.2%), 10997 (97.8%) left; Finishing by Sat Oct 21  6:52:33 2000

(8,12,8) <- (1,0,4).*(8, 12+0,2): 52.442549 Mflop/s
(8,12,14) <- (1,1,7).*(8, 12+0,2): 52.448336 Mflop/s

Testing m0 = 8, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 52.442549
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 14 8 12 12 14 8 14
<<< (M = 8, K = 12, N = 14) : 52.448336
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 12,2) :    52.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 254 (2.3%), 10996 (97.7%) left; Finishing by Sat Oct 21  6:52:59 2000

(8,14,8) <- (4,0,2).*(2, 14+0,4): 79.772064 Mflop/s
(14,14,12) <- (7,1,3).*(2, 14+0,4): 67.918896 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 79.772064
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 67.918896
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 14,4) :    73.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 255 (2.3%), 10995 (97.7%) left; Finishing by Sat Oct 21  6:52:41 2000

(8,8,8) <- (4,1,1).*(2, 8+0,8): 59.017037 Mflop/s
(14,8,8) <- (7,1,1).*(2, 8+0,8): 59.824813 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  8 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 59.017037
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 8 14 8 8 8 14 8
<<< (M = 14, K = 8, N = 8) : 59.824813
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 8,8) :    59.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 256 (2.3%), 10994 (97.7%) left; Finishing by Sat Oct 21  6:53:07 2000

(9,13,8) <- (9,0,2).*(1, 13+0,4): 146.031688 Mflop/s
(15,13,12) <- (15,1,3).*(1, 13+0,4): 147.870968 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 146.031688
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 147.870968
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,4) :   146.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 257 (2.3%), 10993 (97.7%) left; Finishing by Sat Oct 21  6:53:33 2000

(8,9,8) <- (2,1,4).*(4, 9+0,2): 58.836254 Mflop/s
(12,9,14) <- (3,1,7).*(4, 9+0,2): 59.668885 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 58.836254
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 14 12 9 9 14 12 14
<<< (M = 12, K = 9, N = 14) : 59.668885
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 9,2) :    59.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 258 (2.3%), 10992 (97.7%) left; Finishing by Sat Oct 21  6:52:31 2000

(9,14,15) <- (9,0,0).*(1, 14+0,15): 125.437231 Mflop/s
(15,14,15) <- (15,1,1).*(1, 14+0,15): 137.079216 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 125.437231
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 137.079216
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,15) :   131.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 259 (2.3%), 10991 (97.7%) left; Finishing by Sat Oct 21  6:52:57 2000

(8,8,7) <- (4,4,1).*(2, 2+0,7): 62.503636 Mflop/s
(14,14,14) <- (7,7,2).*(2, 2+0,7): 64.242719 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  2 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 7 8 8 8 7 8 7
<<< (M = 8, K = 8, N = 7) : 62.503636
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 64.242719
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 2,7) :    63.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 260 (2.3%), 10990 (97.7%) left; Finishing by Sat Oct 21  6:52:39 2000

(8,13,9) <- (1,0,9).*(8, 13+0,1): 97.105472 Mflop/s
(8,13,15) <- (1,1,15).*(8, 13+0,1): 99.266043 Mflop/s

Testing m0 = 8, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 97.105472
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 15 8 13 13 15 8 15
<<< (M = 8, K = 13, N = 15) : 99.266043
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 13,1) :    98.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 261 (2.3%), 10989 (97.7%) left; Finishing by Sat Oct 21  6:52:21 2000

(7,6,9) <- (1,1,9).*(7, 6+0,1): 94.846154 Mflop/s
(14,12,15) <- (2,2,15).*(7, 6+0,1): 111.858317 Mflop/s

Testing m0 = 7, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 6 9 7 6 6 9 7 9
<<< (M = 7, K = 6, N = 9) : 94.846154
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 111.858317
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 6,1) :   102.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 262 (2.3%), 10988 (97.7%) left; Finishing by Sat Oct 21  6:52:47 2000

(9,8,8) <- (9,1,4).*(1, 8+0,2): 129.831734 Mflop/s
(15,8,14) <- (15,1,7).*(1, 8+0,2): 131.017989 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 129.831734
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 14 15 8 8 14 15 14
<<< (M = 15, K = 8, N = 14) : 131.017989
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,2) :   130.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 263 (2.3%), 10987 (97.7%) left; Finishing by Sat Oct 21  6:53:12 2000

(6,9,8) <- (1,3,4).*(6, 3+0,2): 116.814109 Mflop/s
(12,15,14) <- (2,5,7).*(6, 3+0,2): 128.042662 Mflop/s

Testing m0 = 6, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 8 6 9 9 8 6 8
<<< (M = 6, K = 9, N = 8) : 116.814109
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 128.042662
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 3,2) :   122.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 264 (2.3%), 10986 (97.7%) left; Finishing by Sat Oct 21  6:52:55 2000

(8,11,7) <- (4,0,1).*(2, 11+0,7): 117.776580 Mflop/s
(14,11,14) <- (7,1,2).*(2, 11+0,7): 132.330930 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  11 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 7 8 11 11 7 8 7
<<< (M = 8, K = 11, N = 7) : 117.776580
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 14 14 11 11 14 14 14
<<< (M = 14, K = 11, N = 14) : 132.330930
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 11,7) :   124.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 265 (2.4%), 10985 (97.6%) left; Finishing by Sat Oct 21  6:53:20 2000

(8,13,8) <- (1,0,4).*(8, 13+0,2): 52.789774 Mflop/s
(8,13,14) <- (1,1,7).*(8, 13+0,2): 52.753473 Mflop/s

Testing m0 = 8, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 52.789774
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 14 8 13 13 14 8 14
<<< (M = 8, K = 13, N = 14) : 52.753473
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 13,2) :    52.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 266 (2.4%), 10984 (97.6%) left; Finishing by Sat Oct 21  6:53:45 2000

(8,9,7) <- (4,9,1).*(2,1+0,7): 63.139109 Mflop/s
(14,15,14) <- (7,15,2).*(2,1+0,7): 61.807028 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2 1 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 7 8 9 9 7 8 7
<<< (M = 8, K = 9, N = 7) : 63.139109
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 61.807028
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2,1,7) :    62.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 267 (2.4%), 10983 (97.6%) left; Finishing by Sat Oct 21  6:52:45 2000

(9,9,9) <- (1,9,9).*(9,1+0,1): 62.211936 Mflop/s
(9,15,15) <- (1,15,15).*(9,1+0,1): 67.344272 Mflop/s

Testing m0 = 9, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 9 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 62.211936
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 67.344272
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (9,1,1) :    64.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 268 (2.4%), 10982 (97.6%) left; Finishing by Sat Oct 21  6:52:28 2000

(9,14,10) <- (9,0,0).*(1, 14+0,10): 140.012340 Mflop/s
(15,14,10) <- (15,1,1).*(1, 14+0,10): 139.339394 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 10 9 14 14 10 9 10
<<< (M = 9, K = 14, N = 10) : 140.012340
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 10 15 14 14 10 15 10
<<< (M = 15, K = 14, N = 10) : 139.339394
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,10) :   139.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 269 (2.4%), 10981 (97.6%) left; Finishing by Sat Oct 21  6:52:11 2000

(9,5,13) <- (9,1,0).*(1, 5+0,13): 110.177255 Mflop/s
(15,15,13) <- (15,3,1).*(1, 5+0,13): 134.927944 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 13 9 5 5 13 9 13
<<< (M = 9, K = 5, N = 13) : 110.177255
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 13 15 15 15 13 15 13
<<< (M = 15, K = 15, N = 13) : 134.927944
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,13) :   121.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 270 (2.4%), 10980 (97.6%) left; Finishing by Sat Oct 21  6:51:54 2000

(9,9,9) <- (9,1,3).*(1, 9+0,3): 132.323416 Mflop/s
(15,9,15) <- (15,1,5).*(1, 9+0,3): 135.112270 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 132.323416
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 135.112270
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,3) :   133.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 271 (2.4%), 10979 (97.6%) left; Finishing by Sat Oct 21  6:52:19 2000

(9,14,13) <- (9,0,0).*(1, 14+0,13): 132.474291 Mflop/s
(15,14,13) <- (15,1,1).*(1, 14+0,13): 129.370039 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 13 9 14 14 13 9 13
<<< (M = 9, K = 14, N = 13) : 132.474291
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 13 15 14 14 13 15 13
<<< (M = 15, K = 14, N = 13) : 129.370039
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,13) :   130.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 272 (2.4%), 10978 (97.6%) left; Finishing by Sat Oct 21  6:52:02 2000

(8,12,7) <- (4,0,1).*(2, 12+0,7): 61.167889 Mflop/s
(14,12,14) <- (7,1,2).*(2, 12+0,7): 66.604429 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  12 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 7 8 12 12 7 8 7
<<< (M = 8, K = 12, N = 7) : 61.167889
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 66.604429
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 12,7) :    63.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 273 (2.4%), 10977 (97.6%) left; Finishing by Sat Oct 21  6:51:45 2000

(9,9,9) <- (9,1,9).*(1, 9+0,1): 109.517710 Mflop/s
(15,9,15) <- (15,1,15).*(1, 9+0,1): 113.794890 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 109.517710
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 113.794890
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,1) :   111.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 274 (2.4%), 10976 (97.6%) left; Finishing by Sat Oct 21  6:52:10 2000

(5,12,8) <- (1,0,4).*(5, 12+0,2): 127.914483 Mflop/s
(15,12,14) <- (3,1,7).*(5, 12+0,2): 131.367142 Mflop/s

Testing m0 = 5, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 8 5 12 12 8 5 8
<<< (M = 5, K = 12, N = 8) : 127.914483
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 131.367142
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 12,2) :   129.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 275 (2.4%), 10975 (97.6%) left; Finishing by Sat Oct 21  6:52:34 2000

(9,8,13) <- (9,4,0).*(1, 2+0,13): 119.614409 Mflop/s
(15,14,13) <- (15,7,1).*(1, 2+0,13): 133.043202 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 13 9 8 8 13 9 13
<<< (M = 9, K = 8, N = 13) : 119.614409
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 13 15 14 14 13 15 13
<<< (M = 15, K = 14, N = 13) : 133.043202
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,13) :   126.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 276 (2.5%), 10974 (97.5%) left; Finishing by Sat Oct 21  6:51:37 2000

(9,9,9) <- (3,9,3).*(3,1+0,3): 98.514517 Mflop/s
(15,15,15) <- (5,15,5).*(3,1+0,3): 145.095746 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 98.514517
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 145.095746
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3,1,3) :   117.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 277 (2.5%), 10973 (97.5%) left; Finishing by Sat Oct 21  6:51:21 2000

(14,10,9) <- (0,0,9).*(14, 10+0,1): 123.733504 Mflop/s
(14,10,15) <- (1,1,15).*(14, 10+0,1): 125.862862 Mflop/s

Testing m0 = 14, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 14  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 9 14 10 10 9 14 9
<<< (M = 14, K = 10, N = 9) : 123.733504
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 125.862862
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (14, 10,1) :   124.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 278 (2.5%), 10972 (97.5%) left; Finishing by Sat Oct 21  6:51:04 2000

(9,9,8) <- (9,1,2).*(1, 9+0,4): 135.612814 Mflop/s
(15,9,12) <- (15,1,3).*(1, 9+0,4): 134.973148 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 135.612814
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 134.973148
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,4) :   135.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 279 (2.5%), 10971 (97.5%) left; Finishing by Sat Oct 21  6:51:29 2000

(8,9,8) <- (2,9,4).*(4,1+0,2): 103.850391 Mflop/s
(12,15,14) <- (3,15,7).*(4,1+0,2): 116.118890 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 103.850391
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 116.118890
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4,1,2) :   109.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 280 (2.5%), 10970 (97.5%) left; Finishing by Sat Oct 21  6:51:13 2000

(12,6,9) <- (0,1,9).*(12, 6+0,1): 113.685399 Mflop/s
(12,12,15) <- (1,2,15).*(12, 6+0,1): 130.972616 Mflop/s

Testing m0 = 12, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 12  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 6 9 12 6 6 9 12 9
<<< (M = 12, K = 6, N = 9) : 113.685399
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 130.972616
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (12, 6,1) :   121.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 281 (2.5%), 10969 (97.5%) left; Finishing by Sat Oct 21  6:51:37 2000

(15,9,9) <- (0,9,9).*(15,1+0,1): 94.286984 Mflop/s
(15,15,15) <- (1,15,15).*(15,1+0,1): 99.312675 Mflop/s

Testing m0 = 15, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 15 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 9 15 9 9 9 15 9
<<< (M = 15, K = 9, N = 9) : 94.286984
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 99.312675
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (15,1,1) :    96.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 282 (2.5%), 10968 (97.5%) left; Finishing by Sat Oct 21  6:51:20 2000

(13,7,9) <- (0,1,9).*(13, 7+0,1): 49.318099 Mflop/s
(13,14,15) <- (1,2,15).*(13, 7+0,1): 55.075965 Mflop/s

Testing m0 = 13, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 13  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 7 9 13 7 7 9 13 9
<<< (M = 13, K = 7, N = 9) : 49.318099
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 15 13 14 14 15 13 15
<<< (M = 13, K = 14, N = 15) : 55.075965
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (13, 7,1) :    52.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 283 (2.5%), 10967 (97.5%) left; Finishing by Sat Oct 21  6:51:05 2000

(9,12,9) <- (9,0,1).*(1, 12+0,9): 137.221970 Mflop/s
(15,12,9) <- (15,1,1).*(1, 12+0,9): 138.629845 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 137.221970
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 138.629845
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,9) :   137.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 284 (2.5%), 10966 (97.5%) left; Finishing by Sat Oct 21  6:50:49 2000

(9,8,9) <- (9,4,9).*(1, 2+0,1): 91.728594 Mflop/s
(15,14,15) <- (15,7,15).*(1, 2+0,1): 92.133021 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 91.728594
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 92.133021
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,1) :    91.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 285 (2.5%), 10965 (97.5%) left; Finishing by Sat Oct 21  6:51:13 2000

(9,7,9) <- (3,1,3).*(3, 7+0,3): 98.621590 Mflop/s
(15,14,15) <- (5,2,5).*(3, 7+0,3): 147.814201 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 98.621590
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 147.814201
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 7,3) :   118.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 286 (2.5%), 10964 (97.5%) left; Finishing by Sat Oct 21  6:51:36 2000

(7,8,9) <- (1,2,9).*(7, 4+0,1): 121.549458 Mflop/s
(14,12,15) <- (2,3,15).*(7, 4+0,1): 139.695255 Mflop/s

Testing m0 = 7, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 9 7 8 8 9 7 9
<<< (M = 7, K = 8, N = 9) : 121.549458
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 139.695255
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 4,1) :   130.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 287 (2.6%), 10963 (97.4%) left; Finishing by Sat Oct 21  6:52:00 2000

(9,9,16) <- (9,3,0).*(1, 3+0,16): 129.031021 Mflop/s
(15,15,16) <- (15,5,0).*(1, 3+0,16): 138.998945 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 16 9 9 9 16 9 16
<<< (M = 9, K = 9, N = 16) : 129.031021
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 16 15 15 15 16 15 16
<<< (M = 15, K = 15, N = 16) : 138.998945
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,16) :   133.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 288 (2.6%), 10962 (97.4%) left; Finishing by Sat Oct 21  6:51:05 2000

(11,15,9) <- (0,0,9).*(11, 15+0,1): 132.784028 Mflop/s
(11,15,15) <- (1,1,15).*(11, 15+0,1): 134.336242 Mflop/s

Testing m0 = 11, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 11  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 9 11 15 15 9 11 9
<<< (M = 11, K = 15, N = 9) : 132.784028
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 15 11 15 15 15 11 15
<<< (M = 11, K = 15, N = 15) : 134.336242
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (11, 15,1) :   133.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 289 (2.6%), 10961 (97.4%) left; Finishing by Sat Oct 21  6:51:28 2000

(9,14,11) <- (9,0,0).*(1, 14+0,11): 122.774108 Mflop/s
(15,14,11) <- (15,1,1).*(1, 14+0,11): 137.645769 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 11 9 14 14 11 9 11
<<< (M = 9, K = 14, N = 11) : 122.774108
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 11 15 14 14 11 15 11
<<< (M = 15, K = 14, N = 11) : 137.645769
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,11) :   129.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 290 (2.6%), 10960 (97.4%) left; Finishing by Sat Oct 21  6:50:34 2000

(9,13,14) <- (9,0,0).*(1, 13+0,14): 61.840957 Mflop/s
(15,13,14) <- (15,1,1).*(1, 13+0,14): 66.713029 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 14 9 13 13 14 9 14
<<< (M = 9, K = 13, N = 14) : 61.840957
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 66.713029
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,14) :    64.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 291 (2.6%), 10959 (97.4%) left; Finishing by Sat Oct 21  6:50:57 2000

(12,8,9) <- (0,4,9).*(12, 2+0,1): 121.478647 Mflop/s
(12,14,15) <- (1,7,15).*(12, 2+0,1): 131.815286 Mflop/s

Testing m0 = 12, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 12  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 9 12 8 8 9 12 9
<<< (M = 12, K = 8, N = 9) : 121.478647
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 131.815286
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (12, 2,1) :   126.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 292 (2.6%), 10958 (97.4%) left; Finishing by Sat Oct 21  6:50:42 2000

(9,15,16) <- (9,0,0).*(1, 15+0,16): 136.144213 Mflop/s
(15,15,16) <- (15,1,0).*(1, 15+0,16): 134.328958 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 16 9 15 15 16 9 16
<<< (M = 9, K = 15, N = 16) : 136.144213
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 16 15 15 15 16 15 16
<<< (M = 15, K = 15, N = 16) : 134.328958
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,16) :   135.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 293 (2.6%), 10957 (97.4%) left; Finishing by Sat Oct 21  6:51:05 2000

(7,15,9) <- (1,0,9).*(7, 15+0,1): 114.902198 Mflop/s
(14,15,15) <- (2,1,15).*(7, 15+0,1): 117.269641 Mflop/s

Testing m0 = 7, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 15 9 7 15 15 9 7 9
<<< (M = 7, K = 15, N = 9) : 114.902198
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 117.269641
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 15,1) :   116.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 294 (2.6%), 10956 (97.4%) left; Finishing by Sat Oct 21  6:50:50 2000

(15,7,9) <- (0,1,9).*(15, 7+0,1): 49.572597 Mflop/s
(15,14,15) <- (1,2,15).*(15, 7+0,1): 54.199791 Mflop/s

Testing m0 = 15, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 15  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 7 9 15 7 7 9 15 9
<<< (M = 15, K = 7, N = 9) : 49.572597
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 54.199791
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (15, 7,1) :    51.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 295 (2.6%), 10955 (97.4%) left; Finishing by Sat Oct 21  6:50:34 2000

(5,14,8) <- (1,0,4).*(5, 14+0,2): 141.552157 Mflop/s
(15,14,14) <- (3,1,7).*(5, 14+0,2): 143.611381 Mflop/s

Testing m0 = 5, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 14 8 5 14 14 8 5 8
<<< (M = 5, K = 14, N = 8) : 141.552157
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 143.611381
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 14,2) :   142.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 296 (2.6%), 10954 (97.4%) left; Finishing by Sat Oct 21  6:50:19 2000

(9,5,15) <- (9,1,0).*(1, 5+0,15): 103.227117 Mflop/s
(15,15,15) <- (15,3,1).*(1, 5+0,15): 135.801396 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 15 9 5 5 15 9 15
<<< (M = 9, K = 5, N = 15) : 103.227117
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 135.801396
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,15) :   117.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 297 (2.6%), 10953 (97.4%) left; Finishing by Sat Oct 21  6:50:42 2000

(5,11,8) <- (1,0,4).*(5, 11+0,2): 125.848941 Mflop/s
(15,11,14) <- (3,1,7).*(5, 11+0,2): 130.600490 Mflop/s

Testing m0 = 5, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 11 8 5 11 11 8 5 8
<<< (M = 5, K = 11, N = 8) : 125.848941
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 130.600490
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 11,2) :   128.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 298 (2.6%), 10952 (97.4%) left; Finishing by Sat Oct 21  6:51:05 2000

(10,7,9) <- (0,1,9).*(10, 7+0,1): 124.825706 Mflop/s
(10,14,15) <- (1,2,15).*(10, 7+0,1): 102.719195 Mflop/s

Testing m0 = 10, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 10  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 7 9 10 7 7 9 10 9
<<< (M = 10, K = 7, N = 9) : 124.825706
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 15 10 14 14 15 10 15
<<< (M = 10, K = 14, N = 15) : 102.719195
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (10, 7,1) :   112.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 299 (2.7%), 10951 (97.3%) left; Finishing by Sat Oct 21  6:51:28 2000

(9,11,11) <- (9,0,0).*(1, 11+0,11): 131.777931 Mflop/s
(15,11,11) <- (15,1,1).*(1, 11+0,11): 132.900356 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 11 9 11 11 11 9 11
<<< (M = 9, K = 11, N = 11) : 131.777931
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 11 15 11 11 11 15 11
<<< (M = 15, K = 11, N = 11) : 132.900356
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,11) :   132.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 300 (2.7%), 10950 (97.3%) left; Finishing by Sat Oct 21  6:51:13 2000

(8,14,6) <- (4,0,1).*(2, 14+0,6): 68.390501 Mflop/s
(14,14,12) <- (7,1,2).*(2, 14+0,6): 72.354769 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  14 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 6 8 14 14 6 8 6
<<< (M = 8, K = 14, N = 6) : 68.390501
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 72.354769
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 14,6) :    70.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 301 (2.7%), 10949 (97.3%) left; Finishing by Sat Oct 21  6:50:58 2000

(8,6,9) <- (2,1,3).*(4, 6+0,3): 54.398322 Mflop/s
(12,12,15) <- (3,2,5).*(4, 6+0,3): 73.140244 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 54.398322
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 73.140244
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 6,3) :    62.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 302 (2.7%), 10948 (97.3%) left; Finishing by Sat Oct 21  6:50:43 2000

(6,6,8) <- (1,1,4).*(6, 6+0,2): 51.034064 Mflop/s
(12,12,14) <- (2,2,7).*(6, 6+0,2): 56.722008 Mflop/s

Testing m0 = 6, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 6 8 6 6 6 8 6 8
<<< (M = 6, K = 6, N = 8) : 51.034064
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 56.722008
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 6,2) :    53.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 303 (2.7%), 10947 (97.3%) left; Finishing by Sat Oct 21  6:50:28 2000

(6,13,9) <- (1,0,9).*(6, 13+0,1): 153.023709 Mflop/s
(12,13,15) <- (2,1,15).*(6, 13+0,1): 148.950462 Mflop/s

Testing m0 = 6, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 13 9 6 13 13 9 6 9
<<< (M = 6, K = 13, N = 9) : 153.023709
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 148.950462
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 13,1) :   151.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 304 (2.7%), 10946 (97.3%) left; Finishing by Sat Oct 21  6:50:50 2000

(8,9,8) <- (4,9,2).*(2,1+0,4): 72.301967 Mflop/s
(14,15,12) <- (7,15,3).*(2,1+0,4): 69.279382 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 72.301967
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 69.279382
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2,1,4) :    70.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 305 (2.7%), 10945 (97.3%) left; Finishing by Sat Oct 21  6:50:36 2000

(15,8,9) <- (0,1,9).*(15, 8+0,1): 53.534177 Mflop/s
(15,8,15) <- (1,1,15).*(15, 8+0,1): 53.824405 Mflop/s

Testing m0 = 15, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 15  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 9 15 8 8 9 15 9
<<< (M = 15, K = 8, N = 9) : 53.534177
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 53.824405
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (15, 8,1) :    53.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 306 (2.7%), 10944 (97.3%) left; Finishing by Sat Oct 21  6:50:21 2000

(9,12,9) <- (3,0,3).*(3, 12+0,3): 111.536886 Mflop/s
(15,12,15) <- (5,1,5).*(3, 12+0,3): 146.354984 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 111.536886
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 146.354984
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 12,3) :   126.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 307 (2.7%), 10943 (97.3%) left; Finishing by Sat Oct 21  6:49:30 2000

(8,15,9) <- (2,0,9).*(4, 15+0,1): 179.738836 Mflop/s
(12,15,15) <- (3,1,15).*(4, 15+0,1): 183.913720 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 179.738836
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 183.913720
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 15,1) :   181.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 308 (2.7%), 10942 (97.3%) left; Finishing by Sat Oct 21  6:49:52 2000

(8,15,9) <- (4,0,9).*(2, 15+0,1): 160.856336 Mflop/s
(14,15,15) <- (7,1,15).*(2, 15+0,1): 170.490409 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 160.856336
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 170.490409
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 15,1) :   165.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 309 (2.7%), 10941 (97.3%) left; Finishing by Sat Oct 21  6:49:38 2000

(9,7,5) <- (9,1,1).*(1, 7+0,5): 122.957711 Mflop/s
(15,14,15) <- (15,2,3).*(1, 7+0,5): 148.434759 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 5 9 7 7 5 9 5
<<< (M = 9, K = 7, N = 5) : 122.957711
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 148.434759
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,5) :   134.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 310 (2.8%), 10940 (97.2%) left; Finishing by Sat Oct 21  6:49:24 2000

(9,12,16) <- (9,0,0).*(1, 12+0,16): 61.268661 Mflop/s
(15,12,16) <- (15,1,0).*(1, 12+0,16): 54.901556 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 16 9 12 12 16 9 16
<<< (M = 9, K = 12, N = 16) : 61.268661
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 16 15 12 12 16 15 16
<<< (M = 15, K = 12, N = 16) : 54.901556
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,16) :    57.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 311 (2.8%), 10939 (97.2%) left; Finishing by Sat Oct 21  6:49:10 2000

(9,5,8) <- (3,1,2).*(3, 5+0,4): 104.975046 Mflop/s
(15,15,12) <- (5,3,3).*(3, 5+0,4): 140.115894 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 8 9 5 5 8 9 8
<<< (M = 9, K = 5, N = 8) : 104.975046
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 140.115894
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 5,4) :   120.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 312 (2.8%), 10938 (97.2%) left; Finishing by Sat Oct 21  6:49:32 2000

(8,6,5) <- (4,1,1).*(2, 6+0,5): 61.286786 Mflop/s
(14,12,15) <- (7,2,3).*(2, 6+0,5): 65.439659 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  6 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 5 8 6 6 5 8 5
<<< (M = 8, K = 6, N = 5) : 61.286786
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 65.439659
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 6,5) :    63.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 313 (2.8%), 10937 (97.2%) left; Finishing by Sat Oct 21  6:49:53 2000

(8,5,7) <- (4,1,1).*(2, 5+0,7): 50.341604 Mflop/s
(14,15,14) <- (7,3,2).*(2, 5+0,7): 68.853011 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  5 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 7 8 5 5 7 8 7
<<< (M = 8, K = 5, N = 7) : 50.341604
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 68.853011
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 5,7) :    58.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 314 (2.8%), 10936 (97.2%) left; Finishing by Sat Oct 21  6:49:39 2000

(14,7,9) <- (0,1,9).*(14, 7+0,1): 112.092391 Mflop/s
(14,14,15) <- (1,2,15).*(14, 7+0,1): 129.553958 Mflop/s

Testing m0 = 14, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 14  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 7 9 14 7 7 9 14 9
<<< (M = 14, K = 7, N = 9) : 112.092391
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 129.553958
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (14, 7,1) :   120.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 315 (2.8%), 10935 (97.2%) left; Finishing by Sat Oct 21  6:48:50 2000

(8,5,5) <- (4,1,1).*(2, 5+0,5): 58.447336 Mflop/s
(14,15,15) <- (7,3,3).*(2, 5+0,5): 67.859375 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  5 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 5 8 5 5 5 8 5
<<< (M = 8, K = 5, N = 5) : 58.447336
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 67.859375
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 5,5) :    62.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 316 (2.8%), 10934 (97.2%) left; Finishing by Sat Oct 21  6:49:11 2000

(8,9,8) <- (2,1,2).*(4, 9+0,4): 58.153547 Mflop/s
(12,9,12) <- (3,1,3).*(4, 9+0,4): 58.735100 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 58.153547
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 12 12 9 9 12 12 12
<<< (M = 12, K = 9, N = 12) : 58.735100
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 9,4) :    58.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 317 (2.8%), 10933 (97.2%) left; Finishing by Sat Oct 21  6:48:58 2000

(14,14,9) <- (0,0,9).*(14, 14+0,1): 146.891579 Mflop/s
(14,14,15) <- (1,1,15).*(14, 14+0,1): 148.076923 Mflop/s

Testing m0 = 14, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 14  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 9 14 14 14 9 14 9
<<< (M = 14, K = 14, N = 9) : 146.891579
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 148.076923
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (14, 14,1) :   147.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 318 (2.8%), 10932 (97.2%) left; Finishing by Sat Oct 21  6:48:44 2000

(7,9,9) <- (1,9,9).*(7,1+0,1): 93.513522 Mflop/s
(14,15,15) <- (2,15,15).*(7,1+0,1): 104.056470 Mflop/s

Testing m0 = 7, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 9 7 9 9 9 7 9
<<< (M = 7, K = 9, N = 9) : 93.513522
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 104.056470
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7,1,1) :    98.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 319 (2.8%), 10931 (97.2%) left; Finishing by Sat Oct 21  6:49:06 2000

(16,14,9) <- (0,0,9).*(16, 14+0,1): 146.831916 Mflop/s
(16,14,15) <- (0,1,15).*(16, 14+0,1): 146.816724 Mflop/s

Testing m0 = 16, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 16  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 9 16 14 14 9 16 9
<<< (M = 16, K = 14, N = 9) : 146.831916
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 15 16 14 14 15 16 15
<<< (M = 16, K = 14, N = 15) : 146.816724
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (16, 14,1) :   146.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 320 (2.8%), 10930 (97.2%) left; Finishing by Sat Oct 21  6:48:52 2000

(6,9,9) <- (1,9,9).*(6,1+0,1): 116.225032 Mflop/s
(12,15,15) <- (2,15,15).*(6,1+0,1): 132.203668 Mflop/s

Testing m0 = 6, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 9 6 9 9 9 6 9
<<< (M = 6, K = 9, N = 9) : 116.225032
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 132.203668
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6,1,1) :   123.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 321 (2.9%), 10929 (97.1%) left; Finishing by Sat Oct 21  6:49:13 2000

(8,6,9) <- (1,1,9).*(8, 6+0,1): 102.220024 Mflop/s
(8,12,15) <- (1,2,15).*(8, 6+0,1): 117.308398 Mflop/s

Testing m0 = 8, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 102.220024
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 15 8 12 12 15 8 15
<<< (M = 8, K = 12, N = 15) : 117.308398
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 6,1) :   109.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 322 (2.9%), 10928 (97.1%) left; Finishing by Sat Oct 21  6:49:00 2000

(5,8,9) <- (1,4,9).*(5, 2+0,1): 121.528087 Mflop/s
(15,14,15) <- (3,7,15).*(5, 2+0,1): 137.299562 Mflop/s

Testing m0 = 5, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 121.528087
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 137.299562
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 2,1) :   128.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 323 (2.9%), 10927 (97.1%) left; Finishing by Sat Oct 21  6:49:21 2000

(8,6,9) <- (4,1,3).*(2, 6+0,3): 95.079743 Mflop/s
(14,12,15) <- (7,2,5).*(2, 6+0,3): 83.091406 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 95.079743
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 83.091406
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 6,3) :    88.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 324 (2.9%), 10926 (97.1%) left; Finishing by Sat Oct 21  6:49:42 2000

(8,9,6) <- (4,9,1).*(2,1+0,6): 57.934947 Mflop/s
(14,15,12) <- (7,15,2).*(2,1+0,6): 70.249172 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2 1 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 6 8 9 9 6 8 6
<<< (M = 8, K = 9, N = 6) : 57.934947
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 70.249172
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2,1,6) :    63.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 325 (2.9%), 10925 (97.1%) left; Finishing by Sat Oct 21  6:49:29 2000

(9,5,14) <- (9,1,0).*(1, 5+0,14): 105.548941 Mflop/s
(15,15,14) <- (15,3,1).*(1, 5+0,14): 132.527059 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 14 9 5 5 14 9 14
<<< (M = 9, K = 5, N = 14) : 105.548941
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 132.527059
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,14) :   117.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 326 (2.9%), 10924 (97.1%) left; Finishing by Sat Oct 21  6:49:50 2000

(9,15,8) <- (9,0,4).*(1, 15+0,2): 139.289145 Mflop/s
(15,15,14) <- (15,1,7).*(1, 15+0,2): 141.882636 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 139.289145
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 141.882636
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,2) :   140.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 327 (2.9%), 10923 (97.1%) left; Finishing by Sat Oct 21  6:49:36 2000

(9,9,5) <- (3,1,1).*(3, 9+0,5): 124.823743 Mflop/s
(15,9,15) <- (5,1,3).*(3, 9+0,5): 129.823632 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  9 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 124.823743
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 129.823632
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 9,5) :   127.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 328 (2.9%), 10922 (97.1%) left; Finishing by Sat Oct 21  6:49:57 2000

(8,14,5) <- (4,0,1).*(2, 14+0,5): 78.391321 Mflop/s
(14,14,15) <- (7,1,3).*(2, 14+0,5): 67.580204 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  14 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 5 8 14 14 5 8 5
<<< (M = 8, K = 14, N = 5) : 78.391321
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 67.580204
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 14,5) :    72.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 329 (2.9%), 10921 (97.1%) left; Finishing by Sat Oct 21  6:49:44 2000

(9,9,6) <- (9,3,1).*(1, 3+0,6): 131.410642 Mflop/s
(15,15,12) <- (15,5,2).*(1, 3+0,6): 146.780100 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 6 9 9 9 6 9 6
<<< (M = 9, K = 9, N = 6) : 131.410642
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 146.780100
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,6) :   138.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 330 (2.9%), 10920 (97.1%) left; Finishing by Sat Oct 21  6:50:04 2000

(15,6,9) <- (0,1,9).*(15, 6+0,1): 50.677426 Mflop/s
(15,12,15) <- (1,2,15).*(15, 6+0,1): 55.014780 Mflop/s

Testing m0 = 15, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 15  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 6 9 15 6 6 9 15 9
<<< (M = 15, K = 6, N = 9) : 50.677426
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 55.014780
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (15, 6,1) :    52.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 331 (2.9%), 10919 (97.1%) left; Finishing by Sat Oct 21  6:49:17 2000

(9,7,5) <- (3,1,1).*(3, 7+0,5): 116.704788 Mflop/s
(15,14,15) <- (5,2,3).*(3, 7+0,5): 133.156297 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  7 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 5 9 7 7 5 9 5
<<< (M = 9, K = 7, N = 5) : 116.704788
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 133.156297
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 7,5) :   124.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 332 (3.0%), 10918 (97.0%) left; Finishing by Sat Oct 21  6:49:38 2000

(9,8,5) <- (3,1,1).*(3, 8+0,5): 121.625368 Mflop/s
(15,8,15) <- (5,1,3).*(3, 8+0,5): 126.348248 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  8 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 121.625368
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 126.348248
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 8,5) :   123.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 333 (3.0%), 10917 (97.0%) left; Finishing by Sat Oct 21  6:49:58 2000

(9,9,5) <- (9,3,1).*(1, 3+0,5): 127.411572 Mflop/s
(15,15,15) <- (15,5,3).*(1, 3+0,5): 147.744943 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 127.411572
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 147.744943
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,5) :   136.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 334 (3.0%), 10916 (97.0%) left; Finishing by Sat Oct 21  6:50:19 2000

(9,5,7) <- (9,1,1).*(1, 5+0,7): 109.678580 Mflop/s
(15,15,14) <- (15,3,2).*(1, 5+0,7): 141.045357 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 7 9 5 5 7 9 7
<<< (M = 9, K = 5, N = 7) : 109.678580
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 141.045357
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,7) :   123.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 335 (3.0%), 10915 (97.0%) left; Finishing by Sat Oct 21  6:50:05 2000

(9,15,6) <- (9,0,1).*(1, 15+0,6): 146.983746 Mflop/s
(15,15,12) <- (15,1,2).*(1, 15+0,6): 151.668299 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 6 9 15 15 6 9 6
<<< (M = 9, K = 15, N = 6) : 146.983746
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 151.668299
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,6) :   149.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 336 (3.0%), 10914 (97.0%) left; Finishing by Sat Oct 21  6:50:26 2000

(8,9,5) <- (4,3,1).*(2, 3+0,5): 68.193479 Mflop/s
(14,15,15) <- (7,5,3).*(2, 3+0,5): 64.210245 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  3 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 5 8 9 9 5 8 5
<<< (M = 8, K = 9, N = 5) : 68.193479
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 64.210245
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 3,5) :    66.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 337 (3.0%), 10913 (97.0%) left; Finishing by Sat Oct 21  6:50:46 2000

(5,8,9) <- (1,1,9).*(5, 8+0,1): 145.326179 Mflop/s
(15,8,15) <- (3,1,15).*(5, 8+0,1): 149.438433 Mflop/s

Testing m0 = 5, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 145.326179
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 149.438433
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 8,1) :   147.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 338 (3.0%), 10912 (97.0%) left; Finishing by Sat Oct 21  6:50:33 2000

(13,9,9) <- (0,9,9).*(13,1+0,1): 102.446330 Mflop/s
(13,15,15) <- (1,15,15).*(13,1+0,1): 110.486848 Mflop/s

Testing m0 = 13, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 13 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 9 9 13 9 9 9 13 9
<<< (M = 13, K = 9, N = 9) : 102.446330
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 15 13 15 15 15 13 15
<<< (M = 13, K = 15, N = 15) : 110.486848
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (13,1,1) :   106.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 339 (3.0%), 10911 (97.0%) left; Finishing by Sat Oct 21  6:50:19 2000

(9,14,9) <- (3,0,3).*(3, 14+0,3): 114.100740 Mflop/s
(15,14,15) <- (5,1,5).*(3, 14+0,3): 150.016265 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 114.100740
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 150.016265
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 14,3) :   129.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 340 (3.0%), 10910 (97.0%) left; Finishing by Sat Oct 21  6:50:06 2000

(8,8,9) <- (4,2,3).*(2, 4+0,3): 96.640734 Mflop/s
(14,12,15) <- (7,3,5).*(2, 4+0,3): 77.834919 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 96.640734
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 77.834919
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 4,3) :    86.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 341 (3.0%), 10909 (97.0%) left; Finishing by Sat Oct 21  6:49:53 2000

(8,7,8) <- (1,1,4).*(8, 7+0,2): 110.530836 Mflop/s
(8,14,14) <- (1,2,7).*(8, 7+0,2): 123.664186 Mflop/s

Testing m0 = 8, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 110.530836
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 14 8 14 14 14 8 14
<<< (M = 8, K = 14, N = 14) : 123.664186
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 7,2) :   116.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 342 (3.0%), 10908 (97.0%) left; Finishing by Sat Oct 21  6:49:40 2000

(9,11,9) <- (9,0,3).*(1, 11+0,3): 137.673116 Mflop/s
(15,11,15) <- (15,1,5).*(1, 11+0,3): 143.827158 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 137.673116
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 143.827158
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,3) :   140.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 343 (3.0%), 10907 (97.0%) left; Finishing by Sat Oct 21  6:49:28 2000

(9,12,8) <- (9,0,2).*(1, 12+0,4): 141.212920 Mflop/s
(15,12,12) <- (15,1,3).*(1, 12+0,4): 145.507505 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 141.212920
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 145.507505
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,4) :   143.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 344 (3.1%), 10906 (96.9%) left; Finishing by Sat Oct 21  6:49:47 2000

(7,11,9) <- (1,0,9).*(7, 11+0,1): 107.383109 Mflop/s
(14,11,15) <- (2,1,15).*(7, 11+0,1): 110.306531 Mflop/s

Testing m0 = 7, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 11 9 7 11 11 9 7 9
<<< (M = 7, K = 11, N = 9) : 107.383109
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 110.306531
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 11,1) :   108.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 345 (3.1%), 10905 (96.9%) left; Finishing by Sat Oct 21  6:49:35 2000

(9,9,6) <- (9,1,1).*(1, 9+0,6): 130.591872 Mflop/s
(15,9,12) <- (15,1,2).*(1, 9+0,6): 134.495915 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 6 9 9 9 6 9 6
<<< (M = 9, K = 9, N = 6) : 130.591872
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 134.495915
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,6) :   132.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 346 (3.1%), 10904 (96.9%) left; Finishing by Sat Oct 21  6:49:54 2000

(9,10,9) <- (3,0,9).*(3, 10+0,1): 157.091134 Mflop/s
(15,10,15) <- (5,1,15).*(3, 10+0,1): 162.773891 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 157.091134
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 162.773891
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 10,1) :   159.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 347 (3.1%), 10903 (96.9%) left; Finishing by Sat Oct 21  6:49:42 2000

(9,11,9) <- (9,0,9).*(1, 11+0,1): 116.810586 Mflop/s
(15,11,15) <- (15,1,15).*(1, 11+0,1): 119.707793 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 116.810586
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 119.707793
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,1) :   118.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 348 (3.1%), 10902 (96.9%) left; Finishing by Sat Oct 21  6:49:29 2000

(9,11,14) <- (9,0,0).*(1, 11+0,14): 123.566632 Mflop/s
(15,11,14) <- (15,1,1).*(1, 11+0,14): 123.143168 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 14 9 11 11 14 9 14
<<< (M = 9, K = 11, N = 14) : 123.566632
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 123.143168
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,14) :   123.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 349 (3.1%), 10901 (96.9%) left; Finishing by Sat Oct 21  6:49:16 2000

(9,9,12) <- (9,3,0).*(1, 3+0,12): 125.240609 Mflop/s
(15,15,12) <- (15,5,1).*(1, 3+0,12): 134.906538 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 12 9 9 9 12 9 12
<<< (M = 9, K = 9, N = 12) : 125.240609
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 134.906538
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,12) :   129.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 350 (3.1%), 10900 (96.9%) left; Finishing by Sat Oct 21  6:48:32 2000

(8,12,6) <- (4,0,1).*(2, 12+0,6): 66.230246 Mflop/s
(14,12,12) <- (7,1,2).*(2, 12+0,6): 70.807132 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  12 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 6 8 12 12 6 8 6
<<< (M = 8, K = 12, N = 6) : 66.230246
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 70.807132
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 12,6) :    68.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 351 (3.1%), 10899 (96.9%) left; Finishing by Sat Oct 21  6:48:19 2000

(15,8,9) <- (0,2,9).*(15, 4+0,1): 53.349692 Mflop/s
(15,12,15) <- (1,3,15).*(15, 4+0,1): 53.962262 Mflop/s

Testing m0 = 15, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 15  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 9 15 8 8 9 15 9
<<< (M = 15, K = 8, N = 9) : 53.349692
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 53.962262
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (15, 4,1) :    53.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 352 (3.1%), 10898 (96.9%) left; Finishing by Sat Oct 21  6:48:07 2000

(8,10,8) <- (1,0,4).*(8, 10+0,2): 50.952308 Mflop/s
(8,10,14) <- (1,1,7).*(8, 10+0,2): 50.621434 Mflop/s

Testing m0 = 8, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 50.952308
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 14 8 10 10 14 8 14
<<< (M = 8, K = 10, N = 14) : 50.621434
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 10,2) :    50.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 353 (3.1%), 10897 (96.9%) left; Finishing by Sat Oct 21  6:47:55 2000

(9,9,9) <- (3,3,3).*(3, 3+0,3): 102.054215 Mflop/s
(15,15,15) <- (5,5,5).*(3, 3+0,3): 145.376971 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 102.054215
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 145.376971
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 3,3) :   119.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 354 (3.1%), 10896 (96.9%) left; Finishing by Sat Oct 21  6:48:15 2000

(9,7,8) <- (9,1,4).*(1, 7+0,2): 109.085554 Mflop/s
(15,14,14) <- (15,2,7).*(1, 7+0,2): 140.357943 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 109.085554
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 140.357943
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,2) :   122.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 355 (3.2%), 10895 (96.8%) left; Finishing by Sat Oct 21  6:48:34 2000

(8,13,8) <- (4,0,2).*(2, 13+0,4): 80.134629 Mflop/s
(14,13,12) <- (7,1,3).*(2, 13+0,4): 70.465077 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 80.134629
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 12 14 13 13 12 14 12
<<< (M = 14, K = 13, N = 12) : 70.465077
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 13,4) :    75.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 356 (3.2%), 10894 (96.8%) left; Finishing by Sat Oct 21  6:48:22 2000

(9,8,7) <- (9,4,1).*(1, 2+0,7): 124.790665 Mflop/s
(15,14,14) <- (15,7,2).*(1, 2+0,7): 134.159598 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 7 9 8 8 7 9 7
<<< (M = 9, K = 8, N = 7) : 124.790665
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 134.159598
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,7) :   129.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 357 (3.2%), 10893 (96.8%) left; Finishing by Sat Oct 21  6:48:10 2000

(9,8,12) <- (9,1,0).*(1, 8+0,12): 125.174214 Mflop/s
(15,8,12) <- (15,1,1).*(1, 8+0,12): 127.545407 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 12 9 8 8 12 9 12
<<< (M = 9, K = 8, N = 12) : 125.174214
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 12 15 8 8 12 15 12
<<< (M = 15, K = 8, N = 12) : 127.545407
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,12) :   126.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 358 (3.2%), 10892 (96.8%) left; Finishing by Sat Oct 21  6:47:58 2000

(8,9,9) <- (2,3,9).*(4, 3+0,1): 151.258094 Mflop/s
(12,15,15) <- (3,5,15).*(4, 3+0,1): 176.716156 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 151.258094
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 176.716156
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 3,1) :   163.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 359 (3.2%), 10891 (96.8%) left; Finishing by Sat Oct 21  6:47:14 2000

(9,10,8) <- (3,0,4).*(3, 10+0,2): 139.386764 Mflop/s
(15,10,14) <- (5,1,7).*(3, 10+0,2): 141.397619 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 139.386764
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 141.397619
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 10,2) :   140.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 360 (3.2%), 10890 (96.8%) left; Finishing by Sat Oct 21  6:48:05 2000

(8,10,8) <- (2,0,4).*(4, 10+0,2): 60.626962 Mflop/s
(12,10,14) <- (3,1,7).*(4, 10+0,2): 78.146949 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 60.626962
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 14 12 10 10 14 12 14
<<< (M = 12, K = 10, N = 14) : 78.146949
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 10,2) :    68.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 361 (3.2%), 10889 (96.8%) left; Finishing by Sat Oct 21  6:47:53 2000

(9,12,5) <- (9,0,1).*(1, 12+0,5): 136.292552 Mflop/s
(15,12,15) <- (15,1,3).*(1, 12+0,5): 142.863103 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 136.292552
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 142.863103
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,5) :   139.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 362 (3.2%), 10888 (96.8%) left; Finishing by Sat Oct 21  6:47:41 2000

(9,10,8) <- (9,0,2).*(1, 10+0,4): 138.456554 Mflop/s
(15,10,12) <- (15,1,3).*(1, 10+0,4): 141.258636 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 138.456554
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 141.258636
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,4) :   139.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 363 (3.2%), 10887 (96.8%) left; Finishing by Sat Oct 21  6:48:00 2000

(8,10,9) <- (4,0,9).*(2, 10+0,1): 140.221422 Mflop/s
(14,10,15) <- (7,1,15).*(2, 10+0,1): 145.571694 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 140.221422
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 145.571694
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 10,1) :   142.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 364 (3.2%), 10886 (96.8%) left; Finishing by Sat Oct 21  6:48:19 2000

(8,8,7) <- (4,1,1).*(2, 8+0,7): 56.873018 Mflop/s
(14,8,14) <- (7,1,2).*(2, 8+0,7): 58.771663 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  8 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 7 8 8 8 7 8 7
<<< (M = 8, K = 8, N = 7) : 56.873018
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 14 14 8 8 14 14 14
<<< (M = 14, K = 8, N = 14) : 58.771663
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 8,7) :    57.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 365 (3.2%), 10885 (96.8%) left; Finishing by Sat Oct 21  6:48:08 2000

(9,12,14) <- (9,0,0).*(1, 12+0,14): 125.479236 Mflop/s
(15,12,14) <- (15,1,1).*(1, 12+0,14): 124.041613 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 14 9 12 12 14 9 14
<<< (M = 9, K = 12, N = 14) : 125.479236
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 124.041613
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,14) :   124.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 366 (3.3%), 10884 (96.7%) left; Finishing by Sat Oct 21  6:47:56 2000

(8,5,8) <- (4,1,1).*(2, 5+0,8): 52.902020 Mflop/s
(14,15,8) <- (7,3,1).*(2, 5+0,8): 64.741494 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  5 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 8 8 5 5 8 8 8
<<< (M = 8, K = 5, N = 8) : 52.902020
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 8 14 15 15 8 14 8
<<< (M = 14, K = 15, N = 8) : 64.741494
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 5,8) :    58.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 367 (3.3%), 10883 (96.7%) left; Finishing by Sat Oct 21  6:48:15 2000

(8,11,8) <- (4,0,4).*(2, 11+0,2): 146.739454 Mflop/s
(14,11,14) <- (7,1,7).*(2, 11+0,2): 148.373310 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 146.739454
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 14 14 11 11 14 14 14
<<< (M = 14, K = 11, N = 14) : 148.373310
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 11,2) :   147.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 368 (3.3%), 10882 (96.7%) left; Finishing by Sat Oct 21  6:47:32 2000

(8,7,9) <- (4,1,3).*(2, 7+0,3): 98.907874 Mflop/s
(14,14,15) <- (7,2,5).*(2, 7+0,3): 82.493540 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 98.907874
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 82.493540
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 7,3) :    90.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 369 (3.3%), 10881 (96.7%) left; Finishing by Sat Oct 21  6:47:51 2000

(8,14,9) <- (2,0,3).*(4, 14+0,3): 65.533901 Mflop/s
(12,14,15) <- (3,1,5).*(4, 14+0,3): 74.191575 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 65.533901
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 74.191575
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 14,3) :    69.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 370 (3.3%), 10880 (96.7%) left; Finishing by Sat Oct 21  6:47:40 2000

(9,13,8) <- (9,0,1).*(1, 13+0,8): 135.383866 Mflop/s
(15,13,8) <- (15,1,1).*(1, 13+0,8): 136.454411 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 135.383866
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 8 15 13 13 8 15 8
<<< (M = 15, K = 13, N = 8) : 136.454411
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,8) :   135.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 371 (3.3%), 10879 (96.7%) left; Finishing by Sat Oct 21  6:47:58 2000

(11,8,9) <- (0,1,9).*(11, 8+0,1): 59.939469 Mflop/s
(11,8,15) <- (1,1,15).*(11, 8+0,1): 60.000417 Mflop/s

Testing m0 = 11, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 11  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 8 9 11 8 8 9 11 9
<<< (M = 11, K = 8, N = 9) : 59.939469
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 8 15 11 8 8 15 11 15
<<< (M = 11, K = 8, N = 15) : 60.000417
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (11, 8,1) :    60.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 372 (3.3%), 10878 (96.7%) left; Finishing by Sat Oct 21  6:47:47 2000

(9,9,15) <- (9,3,0).*(1, 3+0,15): 125.574524 Mflop/s
(15,15,15) <- (15,5,1).*(1, 3+0,15): 135.497410 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 15 9 9 9 15 9 15
<<< (M = 9, K = 9, N = 15) : 125.574524
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 135.497410
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,15) :   130.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 373 (3.3%), 10877 (96.7%) left; Finishing by Sat Oct 21  6:47:05 2000

(16,9,9) <- (0,3,9).*(16, 3+0,1): 125.609788 Mflop/s
(16,15,15) <- (0,5,15).*(16, 3+0,1): 138.843397 Mflop/s

Testing m0 = 16, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 16  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 9 9 16 9 9 9 16 9
<<< (M = 16, K = 9, N = 9) : 125.609788
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 15 16 15 15 15 16 15
<<< (M = 16, K = 15, N = 15) : 138.843397
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (16, 3,1) :   131.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 374 (3.3%), 10876 (96.7%) left; Finishing by Sat Oct 21  6:46:54 2000

(5,10,8) <- (1,0,4).*(5, 10+0,2): 119.309458 Mflop/s
(15,10,14) <- (3,1,7).*(5, 10+0,2): 127.699612 Mflop/s

Testing m0 = 5, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 8 5 10 10 8 5 8
<<< (M = 5, K = 10, N = 8) : 119.309458
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 127.699612
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 10,2) :   123.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 375 (3.3%), 10875 (96.7%) left; Finishing by Sat Oct 21  6:47:43 2000

(16,10,9) <- (0,0,9).*(16, 10+0,1): 123.745064 Mflop/s
(16,10,15) <- (0,1,15).*(16, 10+0,1): 124.489122 Mflop/s

Testing m0 = 16, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 16  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 10 9 16 10 10 9 16 9
<<< (M = 16, K = 10, N = 9) : 123.745064
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 10 15 16 10 10 15 16 15
<<< (M = 16, K = 10, N = 15) : 124.489122
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (16, 10,1) :   124.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 376 (3.3%), 10874 (96.7%) left; Finishing by Sat Oct 21  6:47:31 2000

(9,9,5) <- (9,1,1).*(1, 9+0,5): 129.893557 Mflop/s
(15,9,15) <- (15,1,3).*(1, 9+0,5): 136.991530 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 129.893557
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 136.991530
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,5) :   133.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 377 (3.4%), 10873 (96.6%) left; Finishing by Sat Oct 21  6:47:20 2000

(9,7,11) <- (9,1,0).*(1, 7+0,11): 122.494580 Mflop/s
(15,14,11) <- (15,2,1).*(1, 7+0,11): 135.618672 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 11 9 7 7 11 9 11
<<< (M = 9, K = 7, N = 11) : 122.494580
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 11 15 14 14 11 15 11
<<< (M = 15, K = 14, N = 11) : 135.618672
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,11) :   128.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 378 (3.4%), 10872 (96.6%) left; Finishing by Sat Oct 21  6:47:38 2000

(9,9,13) <- (9,3,0).*(1, 3+0,13): 127.802073 Mflop/s
(15,15,13) <- (15,5,1).*(1, 3+0,13): 134.513897 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 13 9 9 9 13 9 13
<<< (M = 9, K = 9, N = 13) : 127.802073
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 13 15 15 15 13 15 13
<<< (M = 15, K = 15, N = 13) : 134.513897
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,13) :   131.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 379 (3.4%), 10871 (96.6%) left; Finishing by Sat Oct 21  6:47:27 2000

(9,15,8) <- (9,0,2).*(1, 15+0,4): 146.924577 Mflop/s
(15,15,12) <- (15,1,3).*(1, 15+0,4): 150.042043 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 146.924577
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 150.042043
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,4) :   148.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 380 (3.4%), 10870 (96.6%) left; Finishing by Sat Oct 21  6:47:16 2000

(8,9,9) <- (2,9,3).*(4,1+0,3): 122.500145 Mflop/s
(12,15,15) <- (3,15,5).*(4,1+0,3): 134.658499 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 122.500145
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 134.658499
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4,1,3) :   128.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 381 (3.4%), 10869 (96.6%) left; Finishing by Sat Oct 21  6:47:34 2000

(9,6,5) <- (9,1,1).*(1, 6+0,5): 114.931447 Mflop/s
(15,12,15) <- (15,2,3).*(1, 6+0,5): 142.961258 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 5 9 6 6 5 9 5
<<< (M = 9, K = 6, N = 5) : 114.931447
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 142.961258
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,5) :   127.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 382 (3.4%), 10868 (96.6%) left; Finishing by Sat Oct 21  6:47:52 2000

(8,5,8) <- (2,1,4).*(4, 5+0,2): 48.816786 Mflop/s
(12,15,14) <- (3,3,7).*(4, 5+0,2): 79.856307 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 8 8 5 5 8 8 8
<<< (M = 8, K = 5, N = 8) : 48.816786
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 79.856307
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 5,2) :    60.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 383 (3.4%), 10867 (96.6%) left; Finishing by Sat Oct 21  6:47:12 2000

(9,9,8) <- (9,3,4).*(1, 3+0,2): 125.700229 Mflop/s
(15,15,14) <- (15,5,7).*(1, 3+0,2): 141.220741 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 125.700229
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 141.220741
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,2) :   133.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 384 (3.4%), 10866 (96.6%) left; Finishing by Sat Oct 21  6:47:30 2000

(5,15,9) <- (1,0,3).*(5, 15+0,3): 136.687248 Mflop/s
(15,15,15) <- (3,1,5).*(5, 15+0,3): 120.466357 Mflop/s

Testing m0 = 5, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 9 5 15 15 9 5 9
<<< (M = 5, K = 15, N = 9) : 136.687248
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 120.466357
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 15,3) :   128.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 385 (3.4%), 10865 (96.6%) left; Finishing by Sat Oct 21  6:48:17 2000

(9,7,10) <- (9,1,0).*(1, 7+0,10): 106.893668 Mflop/s
(15,14,10) <- (15,2,1).*(1, 7+0,10): 139.600038 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 10 9 7 7 10 9 10
<<< (M = 9, K = 7, N = 10) : 106.893668
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 10 15 14 14 10 15 10
<<< (M = 15, K = 14, N = 10) : 139.600038
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,10) :   121.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 386 (3.4%), 10864 (96.6%) left; Finishing by Sat Oct 21  6:48:06 2000

(9,15,15) <- (9,0,0).*(1, 15+0,15): 65.329110 Mflop/s
(15,15,15) <- (15,1,1).*(1, 15+0,15): 64.999769 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 65.329110
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 64.999769
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,15) :    65.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 387 (3.4%), 10863 (96.6%) left; Finishing by Sat Oct 21  6:47:55 2000

(9,9,9) <- (9,1,1).*(1, 9+0,9): 129.250775 Mflop/s
(15,9,9) <- (15,1,1).*(1, 9+0,9): 130.728706 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 129.250775
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 9 15 9 9 9 15 9
<<< (M = 15, K = 9, N = 9) : 130.728706
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,9) :   130.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 388 (3.4%), 10862 (96.6%) left; Finishing by Sat Oct 21  6:48:13 2000

(9,15,14) <- (9,0,0).*(1, 15+0,14): 63.033816 Mflop/s
(15,15,14) <- (15,1,1).*(1, 15+0,14): 67.659827 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 14 9 15 15 14 9 14
<<< (M = 9, K = 15, N = 14) : 63.033816
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 67.659827
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,14) :    65.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 389 (3.5%), 10861 (96.5%) left; Finishing by Sat Oct 21  6:48:02 2000

(9,10,11) <- (9,0,0).*(1, 10+0,11): 128.902395 Mflop/s
(15,10,11) <- (15,1,1).*(1, 10+0,11): 129.174798 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 11 9 10 10 11 9 11
<<< (M = 9, K = 10, N = 11) : 128.902395
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 11 15 10 10 11 15 11
<<< (M = 15, K = 10, N = 11) : 129.174798
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,11) :   129.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 390 (3.5%), 10860 (96.5%) left; Finishing by Sat Oct 21  6:47:51 2000

(11,8,9) <- (0,4,9).*(11, 2+0,1): 61.981237 Mflop/s
(11,14,15) <- (1,7,15).*(11, 2+0,1): 69.049538 Mflop/s

Testing m0 = 11, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 11  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 8 9 11 8 8 9 11 9
<<< (M = 11, K = 8, N = 9) : 61.981237
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 15 11 14 14 15 11 15
<<< (M = 11, K = 14, N = 15) : 69.049538
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (11, 2,1) :    65.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 391 (3.5%), 10859 (96.5%) left; Finishing by Sat Oct 21  6:47:40 2000

(7,12,9) <- (1,0,9).*(7, 12+0,1): 107.952463 Mflop/s
(14,12,15) <- (2,1,15).*(7, 12+0,1): 110.784391 Mflop/s

Testing m0 = 7, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 9 7 12 12 9 7 9
<<< (M = 7, K = 12, N = 9) : 107.952463
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 110.784391
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 12,1) :   109.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 392 (3.5%), 10858 (96.5%) left; Finishing by Sat Oct 21  6:47:57 2000

(7,9,8) <- (1,9,4).*(7,1+0,2): 55.367379 Mflop/s
(14,15,14) <- (2,15,7).*(7,1+0,2): 50.688138 Mflop/s

Testing m0 = 7, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 8 7 9 9 8 7 8
<<< (M = 7, K = 9, N = 8) : 55.367379
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 50.688138
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7,1,2) :    52.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 393 (3.5%), 10857 (96.5%) left; Finishing by Sat Oct 21  6:47:46 2000

(8,9,9) <- (1,1,9).*(8, 9+0,1): 93.639540 Mflop/s
(8,9,15) <- (1,1,15).*(8, 9+0,1): 94.115400 Mflop/s

Testing m0 = 8, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 93.639540
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 15 8 9 9 15 8 15
<<< (M = 8, K = 9, N = 15) : 94.115400
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 9,1) :    93.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 394 (3.5%), 10856 (96.5%) left; Finishing by Sat Oct 21  6:47:07 2000

(8,8,5) <- (4,2,1).*(2, 4+0,5): 71.513928 Mflop/s
(14,12,15) <- (7,3,3).*(2, 4+0,5): 65.148445 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  4 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 5 8 8 8 5 8 5
<<< (M = 8, K = 8, N = 5) : 71.513928
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 65.148445
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 4,5) :    68.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 395 (3.5%), 10855 (96.5%) left; Finishing by Sat Oct 21  6:47:25 2000

(9,10,10) <- (9,0,0).*(1, 10+0,10): 132.410908 Mflop/s
(15,10,10) <- (15,1,1).*(1, 10+0,10): 133.481684 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 10 9 10 10 10 9 10
<<< (M = 9, K = 10, N = 10) : 132.410908
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 10 15 10 10 10 15 10
<<< (M = 15, K = 10, N = 10) : 133.481684
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,10) :   132.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 396 (3.5%), 10854 (96.5%) left; Finishing by Sat Oct 21  6:47:14 2000

(9,8,6) <- (9,4,1).*(1, 2+0,6): 126.685432 Mflop/s
(15,14,12) <- (15,7,2).*(1, 2+0,6): 137.759620 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 6 9 8 8 6 9 6
<<< (M = 9, K = 8, N = 6) : 126.685432
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 137.759620
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,6) :   132.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 397 (3.5%), 10853 (96.5%) left; Finishing by Sat Oct 21  6:47:03 2000

(12,12,9) <- (0,0,9).*(12, 12+0,1): 125.246109 Mflop/s
(12,12,15) <- (1,1,15).*(12, 12+0,1): 128.609296 Mflop/s

Testing m0 = 12, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 12  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 9 12 12 12 9 12 9
<<< (M = 12, K = 12, N = 9) : 125.246109
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 128.609296
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (12, 12,1) :   126.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 398 (3.5%), 10852 (96.5%) left; Finishing by Sat Oct 21  6:46:52 2000

(5,6,8) <- (1,1,4).*(5, 6+0,2): 101.962749 Mflop/s
(15,12,14) <- (3,2,7).*(5, 6+0,2): 129.242874 Mflop/s

Testing m0 = 5, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 6 8 5 6 6 8 5 8
<<< (M = 5, K = 6, N = 8) : 101.962749
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 129.242874
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 6,2) :   114.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 399 (3.5%), 10851 (96.5%) left; Finishing by Sat Oct 21  6:47:10 2000

(9,10,9) <- (9,0,3).*(1, 10+0,3): 134.851440 Mflop/s
(15,10,15) <- (15,1,5).*(1, 10+0,3): 138.403190 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 134.851440
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 138.403190
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,3) :   136.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 400 (3.6%), 10850 (96.4%) left; Finishing by Sat Oct 21  6:46:59 2000

(12,14,9) <- (0,0,9).*(12, 14+0,1): 61.157490 Mflop/s
(12,14,15) <- (1,1,15).*(12, 14+0,1): 70.559108 Mflop/s

Testing m0 = 12, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 12  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 9 12 14 14 9 12 9
<<< (M = 12, K = 14, N = 9) : 61.157490
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 70.559108
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (12, 14,1) :    65.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 401 (3.6%), 10849 (96.4%) left; Finishing by Sat Oct 21  6:46:49 2000

(8,7,9) <- (4,1,9).*(2, 7+0,1): 121.225712 Mflop/s
(14,14,15) <- (7,2,15).*(2, 7+0,1): 159.617737 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 121.225712
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 159.617737
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 7,1) :   137.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 402 (3.6%), 10848 (96.4%) left; Finishing by Sat Oct 21  6:47:06 2000

(9,8,8) <- (9,4,2).*(1, 2+0,4): 135.532220 Mflop/s
(15,14,12) <- (15,7,3).*(1, 2+0,4): 138.996191 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 135.532220
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 138.996191
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,4) :   137.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 403 (3.6%), 10847 (96.4%) left; Finishing by Sat Oct 21  6:47:24 2000

(7,5,8) <- (1,1,4).*(7, 5+0,2): 45.909238 Mflop/s
(14,15,14) <- (2,3,7).*(7, 5+0,2): 46.859712 Mflop/s

Testing m0 = 7, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 5 8 7 5 5 8 7 8
<<< (M = 7, K = 5, N = 8) : 45.909238
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 46.859712
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 5,2) :    46.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 404 (3.6%), 10846 (96.4%) left; Finishing by Sat Oct 21  6:46:45 2000

(8,7,8) <- (4,1,4).*(2, 7+0,2): 127.004482 Mflop/s
(14,14,14) <- (7,2,7).*(2, 7+0,2): 148.160053 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 127.004482
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 148.160053
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 7,2) :   136.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 405 (3.6%), 10845 (96.4%) left; Finishing by Sat Oct 21  6:47:03 2000

(14,8,9) <- (0,1,9).*(14, 8+0,1): 128.689215 Mflop/s
(14,8,15) <- (1,1,15).*(14, 8+0,1): 130.690605 Mflop/s

Testing m0 = 14, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 14  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 9 14 8 8 9 14 9
<<< (M = 14, K = 8, N = 9) : 128.689215
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 15 14 8 8 15 14 15
<<< (M = 14, K = 8, N = 15) : 130.690605
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (14, 8,1) :   129.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 406 (3.6%), 10844 (96.4%) left; Finishing by Sat Oct 21  6:46:52 2000

(9,5,5) <- (9,1,1).*(1, 5+0,5): 107.834351 Mflop/s
(15,15,15) <- (15,3,3).*(1, 5+0,5): 148.713095 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 5 9 5 5 5 9 5
<<< (M = 9, K = 5, N = 5) : 107.834351
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 148.713095
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,5) :   125.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 407 (3.6%), 10843 (96.4%) left; Finishing by Sat Oct 21  6:46:42 2000

(8,8,8) <- (2,1,2).*(4, 8+0,4): 56.628667 Mflop/s
(12,8,12) <- (3,1,3).*(4, 8+0,4): 57.209276 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 56.628667
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 12 12 8 8 12 12 12
<<< (M = 12, K = 8, N = 12) : 57.209276
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 8,4) :    56.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 408 (3.6%), 10842 (96.4%) left; Finishing by Sat Oct 21  6:46:31 2000

(6,8,8) <- (1,2,4).*(6, 4+0,2): 115.573091 Mflop/s
(12,12,14) <- (2,3,7).*(6, 4+0,2): 126.412454 Mflop/s

Testing m0 = 6, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 8 6 8 8 8 6 8
<<< (M = 6, K = 8, N = 8) : 115.573091
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 126.412454
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 4,2) :   120.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 409 (3.6%), 10841 (96.4%) left; Finishing by Sat Oct 21  6:46:48 2000

(9,8,13) <- (9,2,0).*(1, 4+0,13): 121.971860 Mflop/s
(15,12,13) <- (15,3,1).*(1, 4+0,13): 131.084985 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 13 9 8 8 13 9 13
<<< (M = 9, K = 8, N = 13) : 121.971860
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 13 15 12 12 13 15 13
<<< (M = 15, K = 12, N = 13) : 131.084985
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,13) :   126.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 410 (3.6%), 10840 (96.4%) left; Finishing by Sat Oct 21  6:47:06 2000

(8,8,6) <- (4,1,1).*(2, 8+0,6): 62.043013 Mflop/s
(14,8,12) <- (7,1,2).*(2, 8+0,6): 63.779113 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  8 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 6 8 8 8 6 8 6
<<< (M = 8, K = 8, N = 6) : 62.043013
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 12 14 8 8 12 14 12
<<< (M = 14, K = 8, N = 12) : 63.779113
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 8,6) :    62.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 411 (3.7%), 10839 (96.3%) left; Finishing by Sat Oct 21  6:46:55 2000

(9,5,9) <- (9,1,1).*(1, 5+0,9): 111.912184 Mflop/s
(15,15,9) <- (15,3,1).*(1, 5+0,9): 140.750453 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 9 9 5 5 9 9 9
<<< (M = 9, K = 5, N = 9) : 111.912184
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 140.750453
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,9) :   124.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 412 (3.7%), 10838 (96.3%) left; Finishing by Sat Oct 21  6:47:12 2000

(8,7,8) <- (2,1,4).*(4, 7+0,2): 53.232929 Mflop/s
(12,14,14) <- (3,2,7).*(4, 7+0,2): 80.514934 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 53.232929
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 80.514934
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 7,2) :    64.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 413 (3.7%), 10837 (96.3%) left; Finishing by Sat Oct 21  6:47:02 2000

(5,10,9) <- (1,0,9).*(5, 10+0,1): 158.264067 Mflop/s
(15,10,15) <- (3,1,15).*(5, 10+0,1): 165.069804 Mflop/s

Testing m0 = 5, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 9 5 10 10 9 5 9
<<< (M = 5, K = 10, N = 9) : 158.264067
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 165.069804
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 10,1) :   161.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 414 (3.7%), 10836 (96.3%) left; Finishing by Sat Oct 21  6:46:52 2000

(9,5,9) <- (9,1,9).*(1, 5+0,1): 83.050381 Mflop/s
(15,15,15) <- (15,3,15).*(1, 5+0,1): 124.905716 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 9 9 5 5 9 9 9
<<< (M = 9, K = 5, N = 9) : 83.050381
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 124.905716
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,1) :    99.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 415 (3.7%), 10835 (96.3%) left; Finishing by Sat Oct 21  6:47:09 2000

(8,8,9) <- (4,2,9).*(2, 4+0,1): 137.317091 Mflop/s
(14,12,15) <- (7,3,15).*(2, 4+0,1): 159.372895 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 137.317091
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 159.372895
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 4,1) :   147.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 416 (3.7%), 10834 (96.3%) left; Finishing by Sat Oct 21  6:47:25 2000

(9,8,13) <- (9,1,0).*(1, 8+0,13): 123.380166 Mflop/s
(15,8,13) <- (15,1,1).*(1, 8+0,13): 124.751611 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 13 9 8 8 13 9 13
<<< (M = 9, K = 8, N = 13) : 123.380166
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 13 15 8 8 13 15 13
<<< (M = 15, K = 8, N = 13) : 124.751611
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,13) :   124.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 417 (3.7%), 10833 (96.3%) left; Finishing by Sat Oct 21  6:46:48 2000

(9,7,16) <- (9,1,0).*(1, 7+0,16): 122.419247 Mflop/s
(15,14,16) <- (15,2,0).*(1, 7+0,16): 137.347044 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 16 9 7 7 16 9 16
<<< (M = 9, K = 7, N = 16) : 122.419247
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 16 15 14 14 16 15 16
<<< (M = 15, K = 14, N = 16) : 137.347044
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,16) :   129.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 418 (3.7%), 10832 (96.3%) left; Finishing by Sat Oct 21  6:47:05 2000

(8,10,8) <- (4,0,2).*(2, 10+0,4): 76.907715 Mflop/s
(14,10,12) <- (7,1,3).*(2, 10+0,4): 68.719311 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 76.907715
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 12 14 10 10 12 14 12
<<< (M = 14, K = 10, N = 12) : 68.719311
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 10,4) :    72.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 419 (3.7%), 10831 (96.3%) left; Finishing by Sat Oct 21  6:46:55 2000

(6,15,8) <- (1,0,4).*(6, 15+0,2): 54.959333 Mflop/s
(12,15,14) <- (2,1,7).*(6, 15+0,2): 59.859240 Mflop/s

Testing m0 = 6, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 15 8 6 15 15 8 6 8
<<< (M = 6, K = 15, N = 8) : 54.959333
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 59.859240
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 15,2) :    57.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 420 (3.7%), 10830 (96.3%) left; Finishing by Sat Oct 21  6:46:45 2000

(9,8,9) <- (9,2,9).*(1, 4+0,1): 117.205238 Mflop/s
(15,12,15) <- (15,3,15).*(1, 4+0,1): 136.800590 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 117.205238
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 136.800590
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,1) :   126.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 421 (3.7%), 10829 (96.3%) left; Finishing by Sat Oct 21  6:47:01 2000

(8,12,8) <- (4,0,1).*(2, 12+0,8): 63.659986 Mflop/s
(14,12,8) <- (7,1,1).*(2, 12+0,8): 64.181119 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  12 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 63.659986
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 8 14 12 12 8 14 8
<<< (M = 14, K = 12, N = 8) : 64.181119
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 12,8) :    63.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 422 (3.8%), 10828 (96.2%) left; Finishing by Sat Oct 21  6:46:51 2000

(6,10,8) <- (1,0,4).*(6, 10+0,2): 59.284474 Mflop/s
(12,10,14) <- (2,1,7).*(6, 10+0,2): 56.883160 Mflop/s

Testing m0 = 6, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 10 8 6 10 10 8 6 8
<<< (M = 6, K = 10, N = 8) : 59.284474
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 14 12 10 10 14 12 14
<<< (M = 12, K = 10, N = 14) : 56.883160
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 10,2) :    58.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 423 (3.8%), 10827 (96.2%) left; Finishing by Sat Oct 21  6:47:08 2000

(8,11,9) <- (1,0,9).*(8, 11+0,1): 96.612608 Mflop/s
(8,11,15) <- (1,1,15).*(8, 11+0,1): 98.112385 Mflop/s

Testing m0 = 8, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 96.612608
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 15 8 11 11 15 8 15
<<< (M = 8, K = 11, N = 15) : 98.112385
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 11,1) :    97.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 424 (3.8%), 10826 (96.2%) left; Finishing by Sat Oct 21  6:46:58 2000

(8,15,8) <- (2,0,4).*(4, 15+0,2): 60.526906 Mflop/s
(12,15,14) <- (3,1,7).*(4, 15+0,2): 84.758904 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 60.526906
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 84.758904
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 15,2) :    70.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 425 (3.8%), 10825 (96.2%) left; Finishing by Sat Oct 21  6:46:48 2000

(5,9,8) <- (1,9,4).*(5,1+0,2): 47.825249 Mflop/s
(15,15,14) <- (3,15,7).*(5,1+0,2): 56.547678 Mflop/s

Testing m0 = 5, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 8 5 9 9 8 5 8
<<< (M = 5, K = 9, N = 8) : 47.825249
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 56.547678
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5,1,2) :    51.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 426 (3.8%), 10824 (96.2%) left; Finishing by Sat Oct 21  6:47:04 2000

(8,11,8) <- (2,0,4).*(4, 11+0,2): 60.277479 Mflop/s
(12,11,14) <- (3,1,7).*(4, 11+0,2): 75.630405 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 60.277479
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 14 12 11 11 14 12 14
<<< (M = 12, K = 11, N = 14) : 75.630405
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 11,2) :    67.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 427 (3.8%), 10823 (96.2%) left; Finishing by Sat Oct 21  6:46:28 2000

(5,11,9) <- (1,0,9).*(5, 11+0,1): 162.416607 Mflop/s
(15,11,15) <- (3,1,15).*(5, 11+0,1): 170.831427 Mflop/s

Testing m0 = 5, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 11 9 5 11 11 9 5 9
<<< (M = 5, K = 11, N = 9) : 162.416607
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 170.831427
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 11,1) :   166.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 428 (3.8%), 10822 (96.2%) left; Finishing by Sat Oct 21  6:46:44 2000

(6,5,9) <- (1,1,9).*(6, 5+0,1): 110.268835 Mflop/s
(12,15,15) <- (2,3,15).*(6, 5+0,1): 155.925299 Mflop/s

Testing m0 = 6, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 5 9 6 5 5 9 6 9
<<< (M = 6, K = 5, N = 9) : 110.268835
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 155.925299
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 5,1) :   129.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 429 (3.8%), 10821 (96.2%) left; Finishing by Sat Oct 21  6:47:01 2000

(7,14,8) <- (1,0,4).*(7, 14+0,2): 129.854490 Mflop/s
(14,14,14) <- (2,1,7).*(7, 14+0,2): 130.759741 Mflop/s

Testing m0 = 7, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 14 8 7 14 14 8 7 8
<<< (M = 7, K = 14, N = 8) : 129.854490
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 130.759741
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 14,2) :   130.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 430 (3.8%), 10820 (96.2%) left; Finishing by Sat Oct 21  6:47:17 2000

(8,8,5) <- (4,1,1).*(2, 8+0,5): 71.516395 Mflop/s
(14,8,15) <- (7,1,3).*(2, 8+0,5): 74.773111 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  8 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 5 8 8 8 5 8 5
<<< (M = 8, K = 8, N = 5) : 71.516395
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 15 14 8 8 15 14 15
<<< (M = 14, K = 8, N = 15) : 74.773111
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 8,5) :    73.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 431 (3.8%), 10819 (96.2%) left; Finishing by Sat Oct 21  6:47:33 2000

(8,9,9) <- (2,3,3).*(4, 3+0,3): 59.546976 Mflop/s
(12,15,15) <- (3,5,5).*(4, 3+0,3): 72.397246 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 59.546976
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 72.397246
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 3,3) :    65.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 432 (3.8%), 10818 (96.2%) left; Finishing by Sat Oct 21  6:46:57 2000

(9,6,9) <- (9,1,1).*(1, 6+0,9): 118.422000 Mflop/s
(15,12,9) <- (15,2,1).*(1, 6+0,9): 135.941450 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 118.422000
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 135.941450
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,9) :   126.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 433 (3.8%), 10817 (96.2%) left; Finishing by Sat Oct 21  6:47:13 2000

(8,7,7) <- (4,1,1).*(2, 7+0,7): 107.929123 Mflop/s
(14,14,14) <- (7,2,2).*(2, 7+0,7): 137.545485 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  7 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 7 8 7 7 7 8 7
<<< (M = 8, K = 7, N = 7) : 107.929123
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 137.545485
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 7,7) :   121.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 434 (3.9%), 10816 (96.1%) left; Finishing by Sat Oct 21  6:47:30 2000

(8,9,9) <- (4,1,9).*(2, 9+0,1): 137.865656 Mflop/s
(14,9,15) <- (7,1,15).*(2, 9+0,1): 142.712302 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 137.865656
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 142.712302
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 9,1) :   140.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 435 (3.9%), 10815 (96.1%) left; Finishing by Sat Oct 21  6:47:46 2000

(9,13,7) <- (9,0,1).*(1, 13+0,7): 139.323947 Mflop/s
(15,13,14) <- (15,1,2).*(1, 13+0,7): 141.512728 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 7 9 13 13 7 9 7
<<< (M = 9, K = 13, N = 7) : 139.323947
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 141.512728
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,7) :   140.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 436 (3.9%), 10814 (96.1%) left; Finishing by Sat Oct 21  6:48:02 2000

(8,8,8) <- (1,1,4).*(8, 8+0,2): 50.708770 Mflop/s
(8,8,14) <- (1,1,7).*(8, 8+0,2): 51.307517 Mflop/s

Testing m0 = 8, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 50.708770
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 14 8 8 8 14 8 14
<<< (M = 8, K = 8, N = 14) : 51.307517
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 8,2) :    51.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 437 (3.9%), 10813 (96.1%) left; Finishing by Sat Oct 21  6:47:52 2000

(12,15,9) <- (0,0,9).*(12, 15+0,1): 63.491856 Mflop/s
(12,15,15) <- (1,1,15).*(12, 15+0,1): 62.525965 Mflop/s

Testing m0 = 12, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 12  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 9 12 15 15 9 12 9
<<< (M = 12, K = 15, N = 9) : 63.491856
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 62.525965
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (12, 15,1) :    63.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 438 (3.9%), 10812 (96.1%) left; Finishing by Sat Oct 21  6:47:42 2000

(9,8,14) <- (9,4,0).*(1, 2+0,14): 121.777041 Mflop/s
(15,14,14) <- (15,7,1).*(1, 2+0,14): 135.051539 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 14 9 8 8 14 9 14
<<< (M = 9, K = 8, N = 14) : 121.777041
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 135.051539
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,14) :   128.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 439 (3.9%), 10811 (96.1%) left; Finishing by Sat Oct 21  6:47:32 2000

(8,6,8) <- (1,1,4).*(8, 6+0,2): 102.939091 Mflop/s
(8,12,14) <- (1,2,7).*(8, 6+0,2): 117.328407 Mflop/s

Testing m0 = 8, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 102.939091
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 14 8 12 12 14 8 14
<<< (M = 8, K = 12, N = 14) : 117.328407
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 6,2) :   109.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 440 (3.9%), 10810 (96.1%) left; Finishing by Sat Oct 21  6:47:48 2000

(9,10,16) <- (9,0,0).*(1, 10+0,16): 131.608062 Mflop/s
(15,10,16) <- (15,1,0).*(1, 10+0,16): 131.515930 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 16 9 10 10 16 9 16
<<< (M = 9, K = 10, N = 16) : 131.608062
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 16 15 10 10 16 15 16
<<< (M = 15, K = 10, N = 16) : 131.515930
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,16) :   131.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 441 (3.9%), 10809 (96.1%) left; Finishing by Sat Oct 21  6:47:38 2000

(8,15,8) <- (4,0,4).*(2, 15+0,2): 150.254368 Mflop/s
(14,15,14) <- (7,1,7).*(2, 15+0,2): 150.181365 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 150.254368
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 150.181365
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 15,2) :   150.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 442 (3.9%), 10808 (96.1%) left; Finishing by Sat Oct 21  6:47:54 2000

(9,8,16) <- (9,4,0).*(1, 2+0,16): 128.469819 Mflop/s
(15,14,16) <- (15,7,0).*(1, 2+0,16): 137.287374 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 16 9 8 8 16 9 16
<<< (M = 9, K = 8, N = 16) : 128.469819
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 16 15 14 14 16 15 16
<<< (M = 15, K = 14, N = 16) : 137.287374
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,16) :   132.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 443 (3.9%), 10807 (96.1%) left; Finishing by Sat Oct 21  6:47:19 2000

(9,9,8) <- (9,9,1).*(1,1+0,8): 115.216799 Mflop/s
(15,15,8) <- (15,15,1).*(1,1+0,8): 130.036235 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 115.216799
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 8 15 15 15 8 15 8
<<< (M = 15, K = 15, N = 8) : 130.036235
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,8) :   122.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 444 (3.9%), 10806 (96.1%) left; Finishing by Sat Oct 21  6:47:35 2000

(9,9,8) <- (9,9,4).*(1,1+0,2): 99.202647 Mflop/s
(15,15,14) <- (15,15,7).*(1,1+0,2): 121.496962 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 99.202647
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 121.496962
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,2) :   109.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 445 (4.0%), 10805 (96.0%) left; Finishing by Sat Oct 21  6:47:50 2000

(10,9,9) <- (0,1,9).*(10, 9+0,1): 116.602099 Mflop/s
(10,9,15) <- (1,1,15).*(10, 9+0,1): 118.027909 Mflop/s

Testing m0 = 10, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 10  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 9 9 10 9 9 9 10 9
<<< (M = 10, K = 9, N = 9) : 116.602099
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 9 15 10 9 9 15 10 15
<<< (M = 10, K = 9, N = 15) : 118.027909
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (10, 9,1) :   117.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 446 (4.0%), 10804 (96.0%) left; Finishing by Sat Oct 21  6:47:41 2000

(9,5,8) <- (9,1,1).*(1, 5+0,8): 109.680670 Mflop/s
(15,15,8) <- (15,3,1).*(1, 5+0,8): 142.894798 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 8 9 5 5 8 9 8
<<< (M = 9, K = 5, N = 8) : 109.680670
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 8 15 15 15 8 15 8
<<< (M = 15, K = 15, N = 8) : 142.894798
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,8) :   124.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 447 (4.0%), 10803 (96.0%) left; Finishing by Sat Oct 21  6:47:31 2000

(9,7,12) <- (9,1,0).*(1, 7+0,12): 114.751914 Mflop/s
(15,14,12) <- (15,2,1).*(1, 7+0,12): 126.518171 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 12 9 7 7 12 9 12
<<< (M = 9, K = 7, N = 12) : 114.751914
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 126.518171
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,12) :   120.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 448 (4.0%), 10802 (96.0%) left; Finishing by Sat Oct 21  6:47:47 2000

(9,8,6) <- (9,1,1).*(1, 8+0,6): 124.720069 Mflop/s
(15,8,12) <- (15,1,2).*(1, 8+0,6): 133.042938 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 6 9 8 8 6 9 6
<<< (M = 9, K = 8, N = 6) : 124.720069
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 12 15 8 8 12 15 12
<<< (M = 15, K = 8, N = 12) : 133.042938
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,6) :   128.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 449 (4.0%), 10801 (96.0%) left; Finishing by Sat Oct 21  6:48:02 2000

(8,6,9) <- (2,1,9).*(4, 6+0,1): 124.329600 Mflop/s
(12,12,15) <- (3,2,15).*(4, 6+0,1): 171.119378 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 124.329600
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 171.119378
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 6,1) :   144.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 450 (4.0%), 10800 (96.0%) left; Finishing by Sat Oct 21  6:47:53 2000

(9,6,9) <- (1,1,9).*(9, 6+0,1): 63.456189 Mflop/s
(9,12,15) <- (1,2,15).*(9, 6+0,1): 74.118981 Mflop/s

Testing m0 = 9, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 9  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 63.456189
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 74.118981
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (9, 6,1) :    68.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 451 (4.0%), 10799 (96.0%) left; Finishing by Sat Oct 21  6:48:08 2000

(9,11,16) <- (9,0,0).*(1, 11+0,16): 132.775673 Mflop/s
(15,11,16) <- (15,1,0).*(1, 11+0,16): 133.655207 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 16 9 11 11 16 9 16
<<< (M = 9, K = 11, N = 16) : 132.775673
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 16 15 11 11 16 15 16
<<< (M = 15, K = 11, N = 16) : 133.655207
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,16) :   133.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 452 (4.0%), 10798 (96.0%) left; Finishing by Sat Oct 21  6:48:23 2000

(9,8,9) <- (3,2,3).*(3, 4+0,3): 99.501878 Mflop/s
(15,12,15) <- (5,3,5).*(3, 4+0,3): 141.613969 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 99.501878
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 141.613969
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 4,3) :   116.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 453 (4.0%), 10797 (96.0%) left; Finishing by Sat Oct 21  6:47:49 2000

(14,9,9) <- (0,3,9).*(14, 3+0,1): 119.991292 Mflop/s
(14,15,15) <- (1,5,15).*(14, 3+0,1): 128.592188 Mflop/s

Testing m0 = 14, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 14  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 9 14 9 9 9 14 9
<<< (M = 14, K = 9, N = 9) : 119.991292
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 128.592188
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (14, 3,1) :   124.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 454 (4.0%), 10796 (96.0%) left; Finishing by Sat Oct 21  6:47:39 2000

(8,13,8) <- (2,0,4).*(4, 13+0,2): 62.179487 Mflop/s
(12,13,14) <- (3,1,7).*(4, 13+0,2): 80.558789 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 62.179487
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 14 12 13 13 14 12 14
<<< (M = 12, K = 13, N = 14) : 80.558789
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 13,2) :    70.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 455 (4.0%), 10795 (96.0%) left; Finishing by Sat Oct 21  6:47:30 2000

(9,8,15) <- (9,2,0).*(1, 4+0,15): 125.453393 Mflop/s
(15,12,15) <- (15,3,1).*(1, 4+0,15): 132.883114 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 15 9 8 8 15 9 15
<<< (M = 9, K = 8, N = 15) : 125.453393
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 132.883114
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,15) :   129.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 456 (4.1%), 10794 (95.9%) left; Finishing by Sat Oct 21  6:47:45 2000

(16,12,9) <- (0,0,9).*(16, 12+0,1): 128.100558 Mflop/s
(16,12,15) <- (0,1,15).*(16, 12+0,1): 128.499995 Mflop/s

Testing m0 = 16, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 16  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 9 16 12 12 9 16 9
<<< (M = 16, K = 12, N = 9) : 128.100558
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 15 16 12 12 15 16 15
<<< (M = 16, K = 12, N = 15) : 128.499995
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (16, 12,1) :   128.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 457 (4.1%), 10793 (95.9%) left; Finishing by Sat Oct 21  6:47:36 2000

(8,9,8) <- (4,9,4).*(2,1+0,2): 127.833364 Mflop/s
(14,15,14) <- (7,15,7).*(2,1+0,2): 149.225366 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 127.833364
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 149.225366
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2,1,2) :   137.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 458 (4.1%), 10792 (95.9%) left; Finishing by Sat Oct 21  6:47:51 2000

(9,15,7) <- (9,0,1).*(1, 15+0,7): 139.952023 Mflop/s
(15,15,14) <- (15,1,2).*(1, 15+0,7): 145.039150 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 7 9 15 15 7 9 7
<<< (M = 9, K = 15, N = 7) : 139.952023
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 145.039150
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,7) :   142.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 459 (4.1%), 10791 (95.9%) left; Finishing by Sat Oct 21  6:47:17 2000

(9,8,8) <- (9,2,2).*(1, 4+0,4): 130.077089 Mflop/s
(15,12,12) <- (15,3,3).*(1, 4+0,4): 145.298610 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 130.077089
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 145.298610
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,4) :   137.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 460 (4.1%), 10790 (95.9%) left; Finishing by Sat Oct 21  6:47:32 2000

(5,6,9) <- (1,1,3).*(5, 6+0,3): 106.804028 Mflop/s
(15,12,15) <- (3,2,5).*(5, 6+0,3): 115.585474 Mflop/s

Testing m0 = 5, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 6 9 5 6 6 9 5 9
<<< (M = 5, K = 6, N = 9) : 106.804028
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 115.585474
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 6,3) :   111.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 461 (4.1%), 10789 (95.9%) left; Finishing by Sat Oct 21  6:47:48 2000

(11,9,9) <- (0,3,9).*(11, 3+0,1): 66.180921 Mflop/s
(11,15,15) <- (1,5,15).*(11, 3+0,1): 70.602790 Mflop/s

Testing m0 = 11, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 11  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 9 9 11 9 9 9 11 9
<<< (M = 11, K = 9, N = 9) : 66.180921
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 15 11 15 15 15 11 15
<<< (M = 11, K = 15, N = 15) : 70.602790
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (11, 3,1) :    68.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 462 (4.1%), 10788 (95.9%) left; Finishing by Sat Oct 21  6:47:38 2000

(8,8,9) <- (2,2,9).*(4, 4+0,1): 139.693447 Mflop/s
(12,12,15) <- (3,3,15).*(4, 4+0,1): 161.691464 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 139.693447
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 161.691464
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 4,1) :   149.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 463 (4.1%), 10787 (95.9%) left; Finishing by Sat Oct 21  6:47:29 2000

(7,8,8) <- (1,2,4).*(7, 4+0,2): 53.085014 Mflop/s
(14,12,14) <- (2,3,7).*(7, 4+0,2): 45.684278 Mflop/s

Testing m0 = 7, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 8 7 8 8 8 7 8
<<< (M = 7, K = 8, N = 8) : 53.085014
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 45.684278
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 4,2) :    49.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 464 (4.1%), 10786 (95.9%) left; Finishing by Sat Oct 21  6:47:20 2000

(9,8,9) <- (1,1,9).*(9, 8+0,1): 69.512954 Mflop/s
(9,8,15) <- (1,1,15).*(9, 8+0,1): 70.074031 Mflop/s

Testing m0 = 9, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 9  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 69.512954
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 15 9 8 8 15 9 15
<<< (M = 9, K = 8, N = 15) : 70.074031
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (9, 8,1) :    69.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 465 (4.1%), 10785 (95.9%) left; Finishing by Sat Oct 21  6:47:11 2000

(7,5,9) <- (1,1,9).*(7, 5+0,1): 111.847494 Mflop/s
(14,15,15) <- (2,3,15).*(7, 5+0,1): 155.676294 Mflop/s

Testing m0 = 7, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 5 9 7 5 5 9 7 9
<<< (M = 7, K = 5, N = 9) : 111.847494
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 155.676294
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 5,1) :   130.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 466 (4.1%), 10784 (95.9%) left; Finishing by Sat Oct 21  6:47:01 2000

(8,10,7) <- (4,0,1).*(2, 10+0,7): 59.264646 Mflop/s
(14,10,14) <- (7,1,2).*(2, 10+0,7): 64.914295 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  10 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 7 8 10 10 7 8 7
<<< (M = 8, K = 10, N = 7) : 59.264646
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 14 14 10 10 14 14 14
<<< (M = 14, K = 10, N = 14) : 64.914295
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 10,7) :    62.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 467 (4.2%), 10783 (95.8%) left; Finishing by Sat Oct 21  6:46:52 2000

(9,9,13) <- (9,1,0).*(1, 9+0,13): 125.039054 Mflop/s
(15,9,13) <- (15,1,1).*(1, 9+0,13): 127.903305 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 13 9 9 9 13 9 13
<<< (M = 9, K = 9, N = 13) : 125.039054
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 13 15 9 9 13 15 13
<<< (M = 15, K = 9, N = 13) : 127.903305
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,13) :   126.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 468 (4.2%), 10782 (95.8%) left; Finishing by Sat Oct 21  6:47:07 2000

(8,10,9) <- (1,0,9).*(8, 10+0,1): 95.717470 Mflop/s
(8,10,15) <- (1,1,15).*(8, 10+0,1): 96.880734 Mflop/s

Testing m0 = 8, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 95.717470
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 15 8 10 10 15 8 15
<<< (M = 8, K = 10, N = 15) : 96.880734
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 10,1) :    96.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 469 (4.2%), 10781 (95.8%) left; Finishing by Sat Oct 21  6:47:22 2000

(9,9,8) <- (9,9,2).*(1,1+0,4): 125.185617 Mflop/s
(15,15,12) <- (15,15,3).*(1,1+0,4): 142.229647 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 125.185617
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 142.229647
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,4) :   133.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 470 (4.2%), 10780 (95.8%) left; Finishing by Sat Oct 21  6:47:37 2000

(11,13,9) <- (0,0,9).*(11, 13+0,1): 132.098634 Mflop/s
(11,13,15) <- (1,1,15).*(11, 13+0,1): 133.150720 Mflop/s

Testing m0 = 11, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 11  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 13 9 11 13 13 9 11 9
<<< (M = 11, K = 13, N = 9) : 132.098634
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 13 15 11 13 13 15 11 15
<<< (M = 11, K = 13, N = 15) : 133.150720
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (11, 13,1) :   132.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 471 (4.2%), 10779 (95.8%) left; Finishing by Sat Oct 21  6:47:28 2000

(9,8,14) <- (9,1,0).*(1, 8+0,14): 119.158499 Mflop/s
(15,8,14) <- (15,1,1).*(1, 8+0,14): 120.279491 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 14 9 8 8 14 9 14
<<< (M = 9, K = 8, N = 14) : 119.158499
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 14 15 8 8 14 15 14
<<< (M = 15, K = 8, N = 14) : 120.279491
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,14) :   119.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 472 (4.2%), 10778 (95.8%) left; Finishing by Sat Oct 21  6:47:19 2000

(9,6,15) <- (9,1,0).*(1, 6+0,15): 119.056954 Mflop/s
(15,12,15) <- (15,2,1).*(1, 6+0,15): 135.482811 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 15 9 6 6 15 9 15
<<< (M = 9, K = 6, N = 15) : 119.056954
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 135.482811
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,15) :   126.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 473 (4.2%), 10777 (95.8%) left; Finishing by Sat Oct 21  6:47:10 2000

(9,14,8) <- (9,0,1).*(1, 14+0,8): 139.966931 Mflop/s
(15,14,8) <- (15,1,1).*(1, 14+0,8): 142.321008 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 139.966931
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 8 15 14 14 8 15 8
<<< (M = 15, K = 14, N = 8) : 142.321008
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,8) :   141.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 474 (4.2%), 10776 (95.8%) left; Finishing by Sat Oct 21  6:47:01 2000

(9,12,5) <- (3,0,1).*(3, 12+0,5): 133.671240 Mflop/s
(15,12,15) <- (5,1,3).*(3, 12+0,5): 130.181660 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  12 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 133.671240
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 130.181660
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 12,5) :   131.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 475 (4.2%), 10775 (95.8%) left; Finishing by Sat Oct 21  6:47:16 2000

(8,6,8) <- (2,1,2).*(4, 6+0,4): 49.653006 Mflop/s
(12,12,12) <- (3,2,3).*(4, 6+0,4): 69.256434 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 49.653006
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 12 12 12 12 12 12 12
<<< (M = 12, K = 12, N = 12) : 69.256434
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 6,4) :    57.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 476 (4.2%), 10774 (95.8%) left; Finishing by Sat Oct 21  6:47:30 2000

(16,11,9) <- (0,0,9).*(16, 11+0,1): 127.028498 Mflop/s
(16,11,15) <- (0,1,15).*(16, 11+0,1): 127.573871 Mflop/s

Testing m0 = 16, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 16  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 11 9 16 11 11 9 16 9
<<< (M = 16, K = 11, N = 9) : 127.028498
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 11 15 16 11 11 15 16 15
<<< (M = 16, K = 11, N = 15) : 127.573871
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (16, 11,1) :   127.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 477 (4.2%), 10773 (95.8%) left; Finishing by Sat Oct 21  6:47:21 2000

(8,11,9) <- (2,0,3).*(4, 11+0,3): 62.237537 Mflop/s
(12,11,15) <- (3,1,5).*(4, 11+0,3): 71.861911 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 62.237537
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 71.861911
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 11,3) :    66.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 478 (4.2%), 10772 (95.8%) left; Finishing by Sat Oct 21  6:47:12 2000

(13,10,9) <- (0,0,9).*(13, 10+0,1): 53.061427 Mflop/s
(13,10,15) <- (1,1,15).*(13, 10+0,1): 53.358669 Mflop/s

Testing m0 = 13, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 13  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 10 9 13 10 10 9 13 9
<<< (M = 13, K = 10, N = 9) : 53.061427
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 10 15 13 10 10 15 13 15
<<< (M = 13, K = 10, N = 15) : 53.358669
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (13, 10,1) :    53.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 479 (4.3%), 10771 (95.7%) left; Finishing by Sat Oct 21  6:47:04 2000

(8,8,8) <- (2,4,4).*(4, 2+0,2): 55.912470 Mflop/s
(12,14,14) <- (3,7,7).*(4, 2+0,2): 73.162642 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 55.912470
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 73.162642
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 2,2) :    63.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 480 (4.3%), 10770 (95.7%) left; Finishing by Sat Oct 21  6:46:55 2000

(6,15,9) <- (1,0,9).*(6, 15+0,1): 179.284614 Mflop/s
(12,15,15) <- (2,1,15).*(6, 15+0,1): 183.627904 Mflop/s

Testing m0 = 6, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 15 9 6 15 15 9 6 9
<<< (M = 6, K = 15, N = 9) : 179.284614
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 183.627904
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 15,1) :   181.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 481 (4.3%), 10769 (95.7%) left; Finishing by Sat Oct 21  6:47:09 2000

(9,14,8) <- (3,0,2).*(3, 14+0,4): 134.421152 Mflop/s
(15,14,12) <- (5,1,3).*(3, 14+0,4): 139.026116 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 134.421152
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 139.026116
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 14,4) :   136.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 482 (4.3%), 10768 (95.7%) left; Finishing by Sat Oct 21  6:47:24 2000

(9,10,9) <- (3,0,3).*(3, 10+0,3): 107.606242 Mflop/s
(15,10,15) <- (5,1,5).*(3, 10+0,3): 142.316823 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 107.606242
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 142.316823
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 10,3) :   122.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 483 (4.3%), 10767 (95.7%) left; Finishing by Sat Oct 21  6:47:38 2000

(9,9,16) <- (9,1,0).*(1, 9+0,16): 130.073132 Mflop/s
(15,9,16) <- (15,1,0).*(1, 9+0,16): 129.377783 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 16 9 9 9 16 9 16
<<< (M = 9, K = 9, N = 16) : 130.073132
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 16 15 9 9 16 15 16
<<< (M = 15, K = 9, N = 16) : 129.377783
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,16) :   129.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 484 (4.3%), 10766 (95.7%) left; Finishing by Sat Oct 21  6:47:29 2000

(12,7,9) <- (0,1,9).*(12, 7+0,1): 120.546485 Mflop/s
(12,14,15) <- (1,2,15).*(12, 7+0,1): 146.535622 Mflop/s

Testing m0 = 12, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 12  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 7 9 12 7 7 9 12 9
<<< (M = 12, K = 7, N = 9) : 120.546485
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 146.535622
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (12, 7,1) :   132.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 485 (4.3%), 10765 (95.7%) left; Finishing by Sat Oct 21  6:47:21 2000

(9,7,13) <- (9,1,0).*(1, 7+0,13): 119.031226 Mflop/s
(15,14,13) <- (15,2,1).*(1, 7+0,13): 135.288869 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 13 9 7 7 13 9 13
<<< (M = 9, K = 7, N = 13) : 119.031226
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 13 15 14 14 13 15 13
<<< (M = 15, K = 14, N = 13) : 135.288869
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,13) :   126.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 486 (4.3%), 10764 (95.7%) left; Finishing by Sat Oct 21  6:47:12 2000

(8,10,5) <- (4,0,1).*(2, 10+0,5): 74.444847 Mflop/s
(14,10,15) <- (7,1,3).*(2, 10+0,5): 64.411961 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  10 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 5 8 10 10 5 8 5
<<< (M = 8, K = 10, N = 5) : 74.444847
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 64.411961
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 10,5) :    69.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 487 (4.3%), 10763 (95.7%) left; Finishing by Sat Oct 21  6:47:03 2000

(8,15,9) <- (4,0,3).*(2, 15+0,3): 113.696216 Mflop/s
(14,15,15) <- (7,1,5).*(2, 15+0,3): 85.627053 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 113.696216
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 85.627053
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 15,3) :    97.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 488 (4.3%), 10762 (95.7%) left; Finishing by Sat Oct 21  6:46:54 2000

(15,10,9) <- (0,0,9).*(15, 10+0,1): 52.636979 Mflop/s
(15,10,15) <- (1,1,15).*(15, 10+0,1): 52.320990 Mflop/s

Testing m0 = 15, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 15  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 9 15 10 10 9 15 9
<<< (M = 15, K = 10, N = 9) : 52.636979
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 52.320990
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (15, 10,1) :    52.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 489 (4.3%), 10761 (95.7%) left; Finishing by Sat Oct 21  6:46:46 2000

(9,9,9) <- (3,3,9).*(3, 3+0,1): 151.004691 Mflop/s
(15,15,15) <- (5,5,15).*(3, 3+0,1): 180.123150 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 151.004691
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 180.123150
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 3,1) :   164.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 490 (4.4%), 10760 (95.6%) left; Finishing by Sat Oct 21  6:47:00 2000

(8,10,9) <- (2,0,3).*(4, 10+0,3): 62.191275 Mflop/s
(12,10,15) <- (3,1,5).*(4, 10+0,3): 70.394731 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 62.191275
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 70.394731
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 10,3) :    66.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 491 (4.4%), 10759 (95.6%) left; Finishing by Sat Oct 21  6:46:51 2000

(14,8,9) <- (0,4,9).*(14, 2+0,1): 111.198949 Mflop/s
(14,14,15) <- (1,7,15).*(14, 2+0,1): 120.163107 Mflop/s

Testing m0 = 14, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 14  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 9 14 8 8 9 14 9
<<< (M = 14, K = 8, N = 9) : 111.198949
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 120.163107
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (14, 2,1) :   115.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (6, 14,1) :   184.1 MFLOPS.
Done 492 (4.4%), 10758 (95.6%) left; Finishing by Sat Oct 21  6:46:20 2000

(5,15,9) <- (1,0,9).*(5, 15+0,1): 183.862800 Mflop/s
(15,15,15) <- (3,1,15).*(5, 15+0,1): 189.378312 Mflop/s

Testing m0 = 5, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 9 5 15 15 9 5 9
<<< (M = 5, K = 15, N = 9) : 183.862800
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 189.378312
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 15,1) :   186.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 493 (4.4%), 10757 (95.6%) left; Finishing by Sat Oct 21  6:46:34 2000

(8,8,9) <- (2,4,3).*(4, 2+0,3): 57.933133 Mflop/s
(12,14,15) <- (3,7,5).*(4, 2+0,3): 71.402079 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 57.933133
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 71.402079
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 2,3) :    64.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 494 (4.4%), 10756 (95.6%) left; Finishing by Sat Oct 21  6:46:26 2000

(9,14,16) <- (9,0,0).*(1, 14+0,16): 136.291294 Mflop/s
(15,14,16) <- (15,1,0).*(1, 14+0,16): 138.535930 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 16 9 14 14 16 9 16
<<< (M = 9, K = 14, N = 16) : 136.291294
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 16 15 14 14 16 15 16
<<< (M = 15, K = 14, N = 16) : 138.535930
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,16) :   137.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 495 (4.4%), 10755 (95.6%) left; Finishing by Sat Oct 21  6:46:17 2000

(8,9,5) <- (4,9,1).*(2,1+0,5): 67.837867 Mflop/s
(14,15,15) <- (7,15,3).*(2,1+0,5): 66.326067 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2 1 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 5 8 9 9 5 8 5
<<< (M = 8, K = 9, N = 5) : 67.837867
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 66.326067
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2,1,5) :    67.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 496 (4.4%), 10754 (95.6%) left; Finishing by Sat Oct 21  6:45:46 2000

(9,5,5) <- (3,1,1).*(3, 5+0,5): 103.169677 Mflop/s
(15,15,15) <- (5,3,3).*(3, 5+0,5): 134.212814 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  5 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 5 9 5 5 5 9 5
<<< (M = 9, K = 5, N = 5) : 103.169677
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 134.212814
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 5,5) :   116.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 497 (4.4%), 10753 (95.6%) left; Finishing by Sat Oct 21  6:46:00 2000

(9,7,6) <- (9,1,1).*(1, 7+0,6): 126.122767 Mflop/s
(15,14,12) <- (15,2,2).*(1, 7+0,6): 144.258731 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 6 9 7 7 6 9 6
<<< (M = 9, K = 7, N = 6) : 126.122767
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 144.258731
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,6) :   134.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 498 (4.4%), 10752 (95.6%) left; Finishing by Sat Oct 21  6:46:14 2000

(14,9,9) <- (0,1,9).*(14, 9+0,1): 121.204996 Mflop/s
(14,9,15) <- (1,1,15).*(14, 9+0,1): 122.912739 Mflop/s

Testing m0 = 14, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 14  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 9 14 9 9 9 14 9
<<< (M = 14, K = 9, N = 9) : 121.204996
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 122.912739
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (14, 9,1) :   122.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 499 (4.4%), 10751 (95.6%) left; Finishing by Sat Oct 21  6:46:06 2000

(9,6,8) <- (9,1,1).*(1, 6+0,8): 117.952849 Mflop/s
(15,12,8) <- (15,2,1).*(1, 6+0,8): 138.696395 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 117.952849
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 8 15 12 12 8 15 8
<<< (M = 15, K = 12, N = 8) : 138.696395
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,8) :   127.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 500 (4.4%), 10750 (95.6%) left; Finishing by Sat Oct 21  6:45:58 2000

(15,15,9) <- (0,0,9).*(15, 15+0,1): 55.247278 Mflop/s
(15,15,15) <- (1,1,15).*(15, 15+0,1): 54.378490 Mflop/s

Testing m0 = 15, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 15  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 55.247278
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 54.378490
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (15, 15,1) :    54.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 501 (4.5%), 10749 (95.5%) left; Finishing by Sat Oct 21  6:46:12 2000

(9,9,16) <- (9,9,0).*(1,1+0,16): 57.339342 Mflop/s
(15,15,16) <- (15,15,0).*(1,1+0,16): 58.750127 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 16 9 9 9 16 9 16
<<< (M = 9, K = 9, N = 16) : 57.339342
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 16 15 15 15 16 15 16
<<< (M = 15, K = 15, N = 16) : 58.750127
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,16) :    58.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 502 (4.5%), 10748 (95.5%) left; Finishing by Sat Oct 21  6:45:41 2000

(6,8,9) <- (1,1,9).*(6, 8+0,1): 124.925227 Mflop/s
(12,8,15) <- (2,1,15).*(6, 8+0,1): 129.465356 Mflop/s

Testing m0 = 6, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 9 6 8 8 9 6 9
<<< (M = 6, K = 8, N = 9) : 124.925227
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 15 12 8 8 15 12 15
<<< (M = 12, K = 8, N = 15) : 129.465356
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 8,1) :   127.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 503 (4.5%), 10747 (95.5%) left; Finishing by Sat Oct 21  6:45:55 2000

(9,8,9) <- (9,4,3).*(1, 2+0,3): 128.386884 Mflop/s
(15,14,15) <- (15,7,5).*(1, 2+0,3): 121.594705 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 128.386884
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 121.594705
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,3) :   124.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 504 (4.5%), 10746 (95.5%) left; Finishing by Sat Oct 21  6:46:09 2000

(16,8,9) <- (0,4,9).*(16, 2+0,1): 48.932104 Mflop/s
(16,14,15) <- (0,7,15).*(16, 2+0,1): 49.688769 Mflop/s

Testing m0 = 16, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 16  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 8 9 16 8 8 9 16 9
<<< (M = 16, K = 8, N = 9) : 48.932104
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 15 16 14 14 15 16 15
<<< (M = 16, K = 14, N = 15) : 49.688769
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (16, 2,1) :    49.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 505 (4.5%), 10745 (95.5%) left; Finishing by Sat Oct 21  6:45:38 2000

(13,9,9) <- (0,1,9).*(13, 9+0,1): 51.987112 Mflop/s
(13,9,15) <- (1,1,15).*(13, 9+0,1): 52.286969 Mflop/s

Testing m0 = 13, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 13  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 9 9 13 9 9 9 13 9
<<< (M = 13, K = 9, N = 9) : 51.987112
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 9 15 13 9 9 15 13 15
<<< (M = 13, K = 9, N = 15) : 52.286969
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (13, 9,1) :    52.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 506 (4.5%), 10744 (95.5%) left; Finishing by Sat Oct 21  6:45:30 2000

(5,8,9) <- (1,4,3).*(5, 2+0,3): 50.085455 Mflop/s
(15,14,15) <- (3,7,5).*(5, 2+0,3): 59.139048 Mflop/s

Testing m0 = 5, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 50.085455
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 59.139048
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 2,3) :    54.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 507 (4.5%), 10743 (95.5%) left; Finishing by Sat Oct 21  6:45:44 2000

(8,8,8) <- (4,4,4).*(2, 2+0,2): 134.845091 Mflop/s
(14,14,14) <- (7,7,7).*(2, 2+0,2): 141.461661 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 134.845091
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 141.461661
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 2,2) :   138.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 508 (4.5%), 10742 (95.5%) left; Finishing by Sat Oct 21  6:45:58 2000

(8,15,7) <- (4,0,1).*(2, 15+0,7): 122.922921 Mflop/s
(14,15,14) <- (7,1,2).*(2, 15+0,7): 135.655312 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  15 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 7 8 15 15 7 8 7
<<< (M = 8, K = 15, N = 7) : 122.922921
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 135.655312
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 15,7) :   129.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 509 (4.5%), 10741 (95.5%) left; Finishing by Sat Oct 21  6:45:50 2000

(8,9,9) <- (4,3,3).*(2, 3+0,3): 96.146796 Mflop/s
(14,15,15) <- (7,5,5).*(2, 3+0,3): 77.441506 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 96.146796
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 77.441506
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 3,3) :    85.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 510 (4.5%), 10740 (95.5%) left; Finishing by Sat Oct 21  6:45:42 2000

(9,12,13) <- (9,0,0).*(1, 12+0,13): 130.302150 Mflop/s
(15,12,13) <- (15,1,1).*(1, 12+0,13): 129.259135 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 13 9 12 12 13 9 13
<<< (M = 9, K = 12, N = 13) : 130.302150
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 13 15 12 12 13 15 13
<<< (M = 15, K = 12, N = 13) : 129.259135
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,13) :   129.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 511 (4.5%), 10739 (95.5%) left; Finishing by Sat Oct 21  6:45:33 2000

(12,13,9) <- (0,0,9).*(12, 13+0,1): 126.822681 Mflop/s
(12,13,15) <- (1,1,15).*(12, 13+0,1): 127.991065 Mflop/s

Testing m0 = 12, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 12  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 9 12 13 13 9 12 9
<<< (M = 12, K = 13, N = 9) : 126.822681
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 127.991065
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (12, 13,1) :   127.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 512 (4.6%), 10738 (95.4%) left; Finishing by Sat Oct 21  6:45:25 2000

(8,13,9) <- (2,0,9).*(4, 13+0,1): 172.744376 Mflop/s
(12,13,15) <- (3,1,15).*(4, 13+0,1): 174.706488 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 172.744376
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 174.706488
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 13,1) :   173.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 513 (4.6%), 10737 (95.4%) left; Finishing by Sat Oct 21  6:45:17 2000

(9,10,13) <- (9,0,0).*(1, 10+0,13): 125.883107 Mflop/s
(15,10,13) <- (15,1,1).*(1, 10+0,13): 126.268472 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 13 9 10 10 13 9 13
<<< (M = 9, K = 10, N = 13) : 125.883107
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 13 15 10 10 13 15 13
<<< (M = 15, K = 10, N = 13) : 126.268472
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,13) :   126.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 514 (4.6%), 10736 (95.4%) left; Finishing by Sat Oct 21  6:45:09 2000

(12,5,9) <- (0,1,9).*(12, 5+0,1): 106.473874 Mflop/s
(12,15,15) <- (1,3,15).*(12, 5+0,1): 147.320727 Mflop/s

Testing m0 = 12, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 12  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 5 9 12 5 5 9 12 9
<<< (M = 12, K = 5, N = 9) : 106.473874
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 147.320727
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (12, 5,1) :   123.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 515 (4.6%), 10735 (95.4%) left; Finishing by Sat Oct 21  6:45:01 2000

(13,6,9) <- (0,1,9).*(13, 6+0,1): 50.768690 Mflop/s
(13,12,15) <- (1,2,15).*(13, 6+0,1): 56.242139 Mflop/s

Testing m0 = 13, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 13  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 6 9 13 6 6 9 13 9
<<< (M = 13, K = 6, N = 9) : 50.768690
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 15 13 12 12 15 13 15
<<< (M = 13, K = 12, N = 15) : 56.242139
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (13, 6,1) :    53.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 516 (4.6%), 10734 (95.4%) left; Finishing by Sat Oct 21  6:44:53 2000

(8,12,9) <- (2,0,9).*(4, 12+0,1): 171.533050 Mflop/s
(12,12,15) <- (3,1,15).*(4, 12+0,1): 174.695271 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 171.533050
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 174.695271
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 12,1) :   173.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 517 (4.6%), 10733 (95.4%) left; Finishing by Sat Oct 21  6:44:45 2000

(8,9,8) <- (4,3,2).*(2, 3+0,4): 71.762990 Mflop/s
(14,15,12) <- (7,5,3).*(2, 3+0,4): 65.182229 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 71.762990
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 65.182229
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 3,4) :    68.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 518 (4.6%), 10732 (95.4%) left; Finishing by Sat Oct 21  6:44:37 2000

(8,5,8) <- (2,1,2).*(4, 5+0,4): 47.348138 Mflop/s
(12,15,12) <- (3,3,3).*(4, 5+0,4): 71.388943 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 8 8 5 5 8 8 8
<<< (M = 8, K = 5, N = 8) : 47.348138
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 12 12 15 15 12 12 12
<<< (M = 12, K = 15, N = 12) : 71.388943
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 5,4) :    56.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 519 (4.6%), 10731 (95.4%) left; Finishing by Sat Oct 21  6:44:29 2000

(5,7,8) <- (1,1,4).*(5, 7+0,2): 112.358460 Mflop/s
(15,14,14) <- (3,2,7).*(5, 7+0,2): 107.718472 Mflop/s

Testing m0 = 5, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 7 8 5 7 7 8 5 8
<<< (M = 5, K = 7, N = 8) : 112.358460
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 107.718472
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 7,2) :   110.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 520 (4.6%), 10730 (95.4%) left; Finishing by Sat Oct 21  6:44:21 2000

(9,8,9) <- (3,2,9).*(3, 4+0,1): 145.394146 Mflop/s
(15,12,15) <- (5,3,15).*(3, 4+0,1): 169.424923 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 145.394146
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 169.424923
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 4,1) :   156.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 521 (4.6%), 10729 (95.4%) left; Finishing by Sat Oct 21  6:44:35 2000

(13,8,9) <- (0,4,9).*(13, 2+0,1): 52.393782 Mflop/s
(13,14,15) <- (1,7,15).*(13, 2+0,1): 56.136472 Mflop/s

Testing m0 = 13, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 13  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 8 9 13 8 8 9 13 9
<<< (M = 13, K = 8, N = 9) : 52.393782
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 15 13 14 14 15 13 15
<<< (M = 13, K = 14, N = 15) : 56.136472
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (13, 2,1) :    54.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 522 (4.6%), 10728 (95.4%) left; Finishing by Sat Oct 21  6:44:27 2000

(9,8,11) <- (9,2,0).*(1, 4+0,11): 124.597650 Mflop/s
(15,12,11) <- (15,3,1).*(1, 4+0,11): 132.829347 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 11 9 8 8 11 9 11
<<< (M = 9, K = 8, N = 11) : 124.597650
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 11 15 12 12 11 15 11
<<< (M = 15, K = 12, N = 11) : 132.829347
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,11) :   128.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 523 (4.6%), 10727 (95.4%) left; Finishing by Sat Oct 21  6:44:19 2000

(9,7,14) <- (9,1,0).*(1, 7+0,14): 112.257765 Mflop/s
(15,14,14) <- (15,2,1).*(1, 7+0,14): 130.036597 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 14 9 7 7 14 9 14
<<< (M = 9, K = 7, N = 14) : 112.257765
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 130.036597
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,14) :   120.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 524 (4.7%), 10726 (95.3%) left; Finishing by Sat Oct 21  6:44:12 2000

(9,13,5) <- (3,0,1).*(3, 13+0,5): 136.386560 Mflop/s
(15,13,15) <- (5,1,3).*(3, 13+0,5): 131.571561 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  13 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 5 9 13 13 5 9 5
<<< (M = 9, K = 13, N = 5) : 136.386560
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 131.571561
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 13,5) :   133.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 525 (4.7%), 10725 (95.3%) left; Finishing by Sat Oct 21  6:44:25 2000

(16,9,9) <- (0,9,9).*(16,1+0,1): 46.943423 Mflop/s
(16,15,15) <- (0,15,15).*(16,1+0,1): 46.371549 Mflop/s

Testing m0 = 16, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 16 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 9 9 16 9 9 9 16 9
<<< (M = 16, K = 9, N = 9) : 46.943423
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 15 16 15 15 15 16 15
<<< (M = 16, K = 15, N = 15) : 46.371549
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (16,1,1) :    46.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 526 (4.7%), 10724 (95.3%) left; Finishing by Sat Oct 21  6:44:18 2000

(7,8,9) <- (1,4,9).*(7, 2+0,1): 116.066062 Mflop/s
(14,14,15) <- (2,7,15).*(7, 2+0,1): 126.784782 Mflop/s

Testing m0 = 7, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 9 7 8 8 9 7 9
<<< (M = 7, K = 8, N = 9) : 116.066062
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 126.784782
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 2,1) :   121.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 527 (4.7%), 10723 (95.3%) left; Finishing by Sat Oct 21  6:44:31 2000

(6,11,8) <- (1,0,4).*(6, 11+0,2): 54.908486 Mflop/s
(12,11,14) <- (2,1,7).*(6, 11+0,2): 56.428304 Mflop/s

Testing m0 = 6, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 11 8 6 11 11 8 6 8
<<< (M = 6, K = 11, N = 8) : 54.908486
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 14 12 11 11 14 12 14
<<< (M = 12, K = 11, N = 14) : 56.428304
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 11,2) :    55.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 528 (4.7%), 10722 (95.3%) left; Finishing by Sat Oct 21  6:44:45 2000

(12,8,9) <- (0,2,9).*(12, 4+0,1): 129.051246 Mflop/s
(12,12,15) <- (1,3,15).*(12, 4+0,1): 140.258580 Mflop/s

Testing m0 = 12, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 12  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 9 12 8 8 9 12 9
<<< (M = 12, K = 8, N = 9) : 129.051246
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 140.258580
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (12, 4,1) :   134.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 529 (4.7%), 10721 (95.3%) left; Finishing by Sat Oct 21  6:44:58 2000

(9,8,5) <- (9,4,1).*(1, 2+0,5): 128.162306 Mflop/s
(15,14,15) <- (15,7,3).*(1, 2+0,5): 139.392944 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 128.162306
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 139.392944
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,5) :   133.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 530 (4.7%), 10720 (95.3%) left; Finishing by Sat Oct 21  6:44:50 2000

(8,8,9) <- (2,2,3).*(4, 4+0,3): 58.372068 Mflop/s
(12,12,15) <- (3,3,5).*(4, 4+0,3): 68.280882 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 58.372068
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 68.280882
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 4,3) :    62.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 531 (4.7%), 10719 (95.3%) left; Finishing by Sat Oct 21  6:44:43 2000

(8,11,6) <- (4,0,1).*(2, 11+0,6): 66.142364 Mflop/s
(14,11,12) <- (7,1,2).*(2, 11+0,6): 70.210772 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  11 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 6 8 11 11 6 8 6
<<< (M = 8, K = 11, N = 6) : 66.142364
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 12 14 11 11 12 14 12
<<< (M = 14, K = 11, N = 12) : 70.210772
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 11,6) :    68.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 532 (4.7%), 10718 (95.3%) left; Finishing by Sat Oct 21  6:44:35 2000

(8,5,8) <- (4,1,2).*(2, 5+0,4): 63.956952 Mflop/s
(14,15,12) <- (7,3,3).*(2, 5+0,4): 69.197598 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 8 8 5 5 8 8 8
<<< (M = 8, K = 5, N = 8) : 63.956952
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 69.197598
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 5,4) :    66.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 533 (4.7%), 10717 (95.3%) left; Finishing by Sat Oct 21  6:44:48 2000

(9,14,9) <- (9,0,3).*(1, 14+0,3): 148.140074 Mflop/s
(15,14,15) <- (15,1,5).*(1, 14+0,3): 150.040315 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 148.140074
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 150.040315
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,3) :   149.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 534 (4.7%), 10716 (95.3%) left; Finishing by Sat Oct 21  6:44:41 2000

(8,9,9) <- (4,1,3).*(2, 9+0,3): 103.429045 Mflop/s
(14,9,15) <- (7,1,5).*(2, 9+0,3): 106.669994 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 103.429045
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 106.669994
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 9,3) :   105.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 535 (4.8%), 10715 (95.2%) left; Finishing by Sat Oct 21  6:44:12 2000

(10,15,9) <- (0,0,9).*(10, 15+0,1): 78.505067 Mflop/s
(10,15,15) <- (1,1,15).*(10, 15+0,1): 61.915023 Mflop/s

Testing m0 = 10, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 10  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 9 10 15 15 9 10 9
<<< (M = 10, K = 15, N = 9) : 78.505067
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 15 10 15 15 15 10 15
<<< (M = 10, K = 15, N = 15) : 61.915023
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (10, 15,1) :    69.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 536 (4.8%), 10714 (95.2%) left; Finishing by Sat Oct 21  6:44:04 2000

(9,6,8) <- (3,1,4).*(3, 6+0,2): 118.940752 Mflop/s
(15,12,14) <- (5,2,7).*(3, 6+0,2): 144.945194 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 118.940752
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 144.945194
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 6,2) :   130.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 537 (4.8%), 10713 (95.2%) left; Finishing by Sat Oct 21  6:44:18 2000

(9,9,5) <- (3,9,1).*(3,1+0,5): 124.197383 Mflop/s
(15,15,15) <- (5,15,3).*(3,1+0,5): 139.739121 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3 1 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 124.197383
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 139.739121
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3,1,5) :   131.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 538 (4.8%), 10712 (95.2%) left; Finishing by Sat Oct 21  6:44:31 2000

(5,13,9) <- (1,0,9).*(5, 13+0,1): 170.431302 Mflop/s
(15,13,15) <- (3,1,15).*(5, 13+0,1): 174.176111 Mflop/s

Testing m0 = 5, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 13 9 5 13 13 9 5 9
<<< (M = 5, K = 13, N = 9) : 170.431302
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 174.176111
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 13,1) :   172.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 539 (4.8%), 10711 (95.2%) left; Finishing by Sat Oct 21  6:44:44 2000

(9,9,7) <- (9,1,1).*(1, 9+0,7): 130.616777 Mflop/s
(15,9,14) <- (15,1,2).*(1, 9+0,7): 133.104289 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 7 9 9 9 7 9 7
<<< (M = 9, K = 9, N = 7) : 130.616777
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 133.104289
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,7) :   131.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 540 (4.8%), 10710 (95.2%) left; Finishing by Sat Oct 21  6:44:58 2000

(5,13,8) <- (1,0,4).*(5, 13+0,2): 130.872113 Mflop/s
(15,13,14) <- (3,1,7).*(5, 13+0,2): 133.061431 Mflop/s

Testing m0 = 5, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 13 8 5 13 13 8 5 8
<<< (M = 5, K = 13, N = 8) : 130.872113
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 133.061431
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 13,2) :   132.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 541 (4.8%), 10709 (95.2%) left; Finishing by Sat Oct 21  6:45:31 2000

(9,9,9) <- (3,1,3).*(3, 9+0,3): 104.489859 Mflop/s
(15,9,15) <- (5,1,5).*(3, 9+0,3): 107.244002 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 104.489859
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 107.244002
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 9,3) :   105.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 542 (4.8%), 10708 (95.2%) left; Finishing by Sat Oct 21  6:45:24 2000

(9,8,10) <- (9,1,0).*(1, 8+0,10): 125.800168 Mflop/s
(15,8,10) <- (15,1,1).*(1, 8+0,10): 127.678029 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 10 9 8 8 10 9 10
<<< (M = 9, K = 8, N = 10) : 125.800168
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 10 15 8 8 10 15 10
<<< (M = 15, K = 8, N = 10) : 127.678029
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,10) :   126.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 543 (4.8%), 10707 (95.2%) left; Finishing by Sat Oct 21  6:45:37 2000

(9,11,13) <- (9,0,0).*(1, 11+0,13): 130.575310 Mflop/s
(15,11,13) <- (15,1,1).*(1, 11+0,13): 129.905345 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 13 9 11 11 13 9 13
<<< (M = 9, K = 11, N = 13) : 130.575310
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 13 15 11 11 13 15 13
<<< (M = 15, K = 11, N = 13) : 129.905345
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,13) :   130.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 544 (4.8%), 10706 (95.2%) left; Finishing by Sat Oct 21  6:45:29 2000

(9,13,8) <- (3,0,4).*(3, 13+0,2): 146.193720 Mflop/s
(15,13,14) <- (5,1,7).*(3, 13+0,2): 149.571646 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 146.193720
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 149.571646
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 13,2) :   147.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 545 (4.8%), 10705 (95.2%) left; Finishing by Sat Oct 21  6:45:42 2000

(8,7,8) <- (4,1,1).*(2, 7+0,8): 58.227143 Mflop/s
(14,14,8) <- (7,2,1).*(2, 7+0,8): 65.706167 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  7 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 58.227143
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 8 14 14 14 8 14 8
<<< (M = 14, K = 14, N = 8) : 65.706167
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 7,8) :    61.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 546 (4.9%), 10704 (95.1%) left; Finishing by Sat Oct 21  6:45:55 2000

(9,14,9) <- (1,0,9).*(9, 14+0,1): 136.191593 Mflop/s
(9,14,15) <- (1,1,15).*(9, 14+0,1): 137.719785 Mflop/s

Testing m0 = 9, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 9  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 136.191593
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 137.719785
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (9, 14,1) :   137.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 547 (4.9%), 10703 (95.1%) left; Finishing by Sat Oct 21  6:45:27 2000

(9,9,9) <- (9,9,9).*(1,1+0,1): 61.990014 Mflop/s
(15,15,15) <- (15,15,15).*(1,1+0,1): 74.954510 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 61.990014
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 74.954510
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,1) :    67.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 548 (4.9%), 10702 (95.1%) left; Finishing by Sat Oct 21  6:45:19 2000

(9,13,10) <- (9,0,0).*(1, 13+0,10): 119.730642 Mflop/s
(15,13,10) <- (15,1,1).*(1, 13+0,10): 138.210105 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 10 9 13 13 10 9 10
<<< (M = 9, K = 13, N = 10) : 119.730642
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 10 15 13 13 10 15 10
<<< (M = 15, K = 13, N = 10) : 138.210105
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,10) :   128.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 549 (4.9%), 10701 (95.1%) left; Finishing by Sat Oct 21  6:45:12 2000

(8,12,8) <- (4,0,4).*(2, 12+0,2): 151.734742 Mflop/s
(14,12,14) <- (7,1,7).*(2, 12+0,2): 150.695648 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 151.734742
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 150.695648
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 12,2) :   151.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 550 (4.9%), 10700 (95.1%) left; Finishing by Sat Oct 21  6:45:25 2000

(8,14,8) <- (4,0,4).*(2, 14+0,2): 150.788048 Mflop/s
(14,14,14) <- (7,1,7).*(2, 14+0,2): 150.570745 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 150.788048
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 150.570745
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 14,2) :   150.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 551 (4.9%), 10699 (95.1%) left; Finishing by Sat Oct 21  6:45:17 2000

(9,8,16) <- (9,1,0).*(1, 8+0,16): 127.131024 Mflop/s
(15,8,16) <- (15,1,0).*(1, 8+0,16): 128.089002 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 16 9 8 8 16 9 16
<<< (M = 9, K = 8, N = 16) : 127.131024
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 16 15 8 8 16 15 16
<<< (M = 15, K = 8, N = 16) : 128.089002
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,16) :   127.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 552 (4.9%), 10698 (95.1%) left; Finishing by Sat Oct 21  6:45:10 2000

(8,8,8) <- (4,2,2).*(2, 4+0,4): 70.762657 Mflop/s
(14,12,12) <- (7,3,3).*(2, 4+0,4): 66.108309 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 70.762657
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 66.108309
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 4,4) :    68.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 553 (4.9%), 10697 (95.1%) left; Finishing by Sat Oct 21  6:45:23 2000

(9,8,11) <- (9,4,0).*(1, 2+0,11): 120.883493 Mflop/s
(15,14,11) <- (15,7,1).*(1, 2+0,11): 132.067543 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 11 9 8 8 11 9 11
<<< (M = 9, K = 8, N = 11) : 120.883493
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 11 15 14 14 11 15 11
<<< (M = 15, K = 14, N = 11) : 132.067543
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,11) :   126.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 554 (4.9%), 10696 (95.1%) left; Finishing by Sat Oct 21  6:45:35 2000

(9,10,8) <- (3,0,2).*(3, 10+0,4): 131.666176 Mflop/s
(15,10,12) <- (5,1,3).*(3, 10+0,4): 132.372004 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 131.666176
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 132.372004
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 10,4) :   132.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 555 (4.9%), 10695 (95.1%) left; Finishing by Sat Oct 21  6:45:48 2000

(8,13,8) <- (2,0,2).*(4, 13+0,4): 61.724350 Mflop/s
(12,13,12) <- (3,1,3).*(4, 13+0,4): 72.243155 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 61.724350
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 12 12 13 13 12 12 12
<<< (M = 12, K = 13, N = 12) : 72.243155
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 13,4) :    66.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 556 (4.9%), 10694 (95.1%) left; Finishing by Sat Oct 21  6:45:41 2000

(8,11,9) <- (4,0,3).*(2, 11+0,3): 109.411040 Mflop/s
(14,11,15) <- (7,1,5).*(2, 11+0,3): 83.499126 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 109.411040
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 83.499126
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 11,3) :    94.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 557 (5.0%), 10693 (95.0%) left; Finishing by Sat Oct 21  6:45:13 2000

(9,14,6) <- (9,0,1).*(1, 14+0,6): 144.994769 Mflop/s
(15,14,12) <- (15,1,2).*(1, 14+0,6): 149.543440 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 6 9 14 14 6 9 6
<<< (M = 9, K = 14, N = 6) : 144.994769
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 149.543440
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,6) :   147.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 558 (5.0%), 10692 (95.0%) left; Finishing by Sat Oct 21  6:45:26 2000

(9,11,7) <- (9,0,1).*(1, 11+0,7): 134.893505 Mflop/s
(15,11,14) <- (15,1,2).*(1, 11+0,7): 138.819913 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 7 9 11 11 7 9 7
<<< (M = 9, K = 11, N = 7) : 134.893505
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 138.819913
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,7) :   136.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 559 (5.0%), 10691 (95.0%) left; Finishing by Sat Oct 21  6:45:38 2000

(6,8,8) <- (1,1,4).*(6, 8+0,2): 50.704031 Mflop/s
(12,8,14) <- (2,1,7).*(6, 8+0,2): 51.897964 Mflop/s

Testing m0 = 6, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 8 6 8 8 8 6 8
<<< (M = 6, K = 8, N = 8) : 50.704031
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 14 12 8 8 14 12 14
<<< (M = 12, K = 8, N = 14) : 51.897964
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 8,2) :    51.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 560 (5.0%), 10690 (95.0%) left; Finishing by Sat Oct 21  6:45:31 2000

(8,9,7) <- (4,1,1).*(2, 9+0,7): 58.675751 Mflop/s
(14,9,14) <- (7,1,2).*(2, 9+0,7): 60.225515 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  9 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 7 8 9 9 7 8 7
<<< (M = 8, K = 9, N = 7) : 58.675751
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 14 14 9 9 14 14 14
<<< (M = 14, K = 9, N = 14) : 60.225515
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 9,7) :    59.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 561 (5.0%), 10689 (95.0%) left; Finishing by Sat Oct 21  6:45:44 2000

(5,9,9) <- (1,1,9).*(5, 9+0,1): 149.294465 Mflop/s
(15,9,15) <- (3,1,15).*(5, 9+0,1): 153.166525 Mflop/s

Testing m0 = 5, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 149.294465
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 153.166525
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 9,1) :   151.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 562 (5.0%), 10688 (95.0%) left; Finishing by Sat Oct 21  6:45:56 2000

(9,15,9) <- (9,0,1).*(1, 15+0,9): 142.026288 Mflop/s
(15,15,9) <- (15,1,1).*(1, 15+0,9): 143.353847 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 142.026288
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 143.353847
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,9) :   142.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 563 (5.0%), 10687 (95.0%) left; Finishing by Sat Oct 21  6:45:29 2000

(15,8,9) <- (0,4,9).*(15, 2+0,1): 109.825364 Mflop/s
(15,14,15) <- (1,7,15).*(15, 2+0,1): 119.146366 Mflop/s

Testing m0 = 15, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 15  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 9 15 8 8 9 15 9
<<< (M = 15, K = 8, N = 9) : 109.825364
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 119.146366
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (15, 2,1) :   114.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 564 (5.0%), 10686 (95.0%) left; Finishing by Sat Oct 21  6:45:21 2000

(9,7,9) <- (3,1,9).*(3, 7+0,1): 135.398859 Mflop/s
(15,14,15) <- (5,2,15).*(3, 7+0,1): 180.768994 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 135.398859
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 180.768994
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 7,1) :   154.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 565 (5.0%), 10685 (95.0%) left; Finishing by Sat Oct 21  6:45:34 2000

(10,6,9) <- (0,1,9).*(10, 6+0,1): 106.573383 Mflop/s
(10,12,15) <- (1,2,15).*(10, 6+0,1): 131.363932 Mflop/s

Testing m0 = 10, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 10  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 6 9 10 6 6 9 10 9
<<< (M = 10, K = 6, N = 9) : 106.573383
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 15 10 12 12 15 10 15
<<< (M = 10, K = 12, N = 15) : 131.363932
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (10, 6,1) :   117.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 566 (5.0%), 10684 (95.0%) left; Finishing by Sat Oct 21  6:45:27 2000

(9,9,11) <- (9,1,0).*(1, 9+0,11): 128.619113 Mflop/s
(15,9,11) <- (15,1,1).*(1, 9+0,11): 127.388816 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 11 9 9 9 11 9 11
<<< (M = 9, K = 9, N = 11) : 128.619113
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 11 15 9 9 11 15 11
<<< (M = 15, K = 9, N = 11) : 127.388816
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,11) :   128.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 567 (5.0%), 10683 (95.0%) left; Finishing by Sat Oct 21  6:45:19 2000

(9,9,9) <- (3,9,9).*(3,1+0,1): 100.559095 Mflop/s
(15,15,15) <- (5,15,15).*(3,1+0,1): 121.720314 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 100.559095
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 121.720314
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3,1,1) :   110.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 568 (5.0%), 10682 (95.0%) left; Finishing by Sat Oct 21  6:45:12 2000

(16,15,9) <- (0,0,9).*(16, 15+0,1): 135.567004 Mflop/s
(16,15,15) <- (0,1,15).*(16, 15+0,1): 134.348942 Mflop/s

Testing m0 = 16, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 16  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 9 16 15 15 9 16 9
<<< (M = 16, K = 15, N = 9) : 135.567004
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 15 16 15 15 15 16 15
<<< (M = 16, K = 15, N = 15) : 134.348942
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (16, 15,1) :   135.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 569 (5.1%), 10681 (94.9%) left; Finishing by Sat Oct 21  6:45:05 2000

(9,9,8) <- (3,3,4).*(3, 3+0,2): 126.876763 Mflop/s
(15,15,14) <- (5,5,7).*(3, 3+0,2): 144.975711 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 126.876763
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 144.975711
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 3,2) :   135.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 570 (5.1%), 10680 (94.9%) left; Finishing by Sat Oct 21  6:45:17 2000

(9,6,8) <- (3,1,2).*(3, 6+0,4): 115.346152 Mflop/s
(15,12,12) <- (5,2,3).*(3, 6+0,4): 136.814118 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 115.346152
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 136.814118
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 6,4) :   125.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 571 (5.1%), 10679 (94.9%) left; Finishing by Sat Oct 21  6:45:30 2000

(9,9,9) <- (1,1,9).*(9, 9+0,1): 119.672067 Mflop/s
(9,9,15) <- (1,1,15).*(9, 9+0,1): 120.386266 Mflop/s

Testing m0 = 9, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 9  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 119.672067
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 15 9 9 9 15 9 15
<<< (M = 9, K = 9, N = 15) : 120.386266
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (9, 9,1) :   120.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 572 (5.1%), 10678 (94.9%) left; Finishing by Sat Oct 21  6:45:42 2000

(9,9,9) <- (9,3,9).*(1, 3+0,1): 92.640842 Mflop/s
(15,15,15) <- (15,5,15).*(1, 3+0,1): 98.218888 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 92.640842
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 98.218888
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,1) :    95.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 573 (5.1%), 10677 (94.9%) left; Finishing by Sat Oct 21  6:45:15 2000

(8,7,6) <- (4,1,1).*(2, 7+0,6): 60.983095 Mflop/s
(14,14,12) <- (7,2,2).*(2, 7+0,6): 72.323897 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  7 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 6 8 7 7 6 8 6
<<< (M = 8, K = 7, N = 6) : 60.983095
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 72.323897
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 7,6) :    66.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 574 (5.1%), 10676 (94.9%) left; Finishing by Sat Oct 21  6:45:28 2000

(9,9,8) <- (9,3,1).*(1, 3+0,8): 128.073479 Mflop/s
(15,15,8) <- (15,5,1).*(1, 3+0,8): 142.110048 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 128.073479
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 8 15 15 15 8 15 8
<<< (M = 15, K = 15, N = 8) : 142.110048
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,8) :   134.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 575 (5.1%), 10675 (94.9%) left; Finishing by Sat Oct 21  6:45:40 2000

(9,10,9) <- (1,0,9).*(9, 10+0,1): 122.175945 Mflop/s
(9,10,15) <- (1,1,15).*(9, 10+0,1): 123.838860 Mflop/s

Testing m0 = 9, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 9  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 122.175945
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 15 9 10 10 15 9 15
<<< (M = 9, K = 10, N = 15) : 123.838860
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (9, 10,1) :   123.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 576 (5.1%), 10674 (94.9%) left; Finishing by Sat Oct 21  6:45:52 2000

(6,8,9) <- (1,2,9).*(6, 4+0,1): 129.465315 Mflop/s
(12,12,15) <- (2,3,15).*(6, 4+0,1): 148.754961 Mflop/s

Testing m0 = 6, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 9 6 8 8 9 6 9
<<< (M = 6, K = 8, N = 9) : 129.465315
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 148.754961
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 4,1) :   138.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 577 (5.1%), 10673 (94.9%) left; Finishing by Sat Oct 21  6:46:04 2000

(8,9,9) <- (1,3,9).*(8, 3+0,1): 126.522004 Mflop/s
(8,15,15) <- (1,5,15).*(8, 3+0,1): 136.423313 Mflop/s

Testing m0 = 8, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 126.522004
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 15 8 15 15 15 8 15
<<< (M = 8, K = 15, N = 15) : 136.423313
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 3,1) :   131.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 578 (5.1%), 10672 (94.9%) left; Finishing by Sat Oct 21  6:45:57 2000

(14,8,9) <- (0,2,9).*(14, 4+0,1): 118.941794 Mflop/s
(14,12,15) <- (1,3,15).*(14, 4+0,1): 128.698416 Mflop/s

Testing m0 = 14, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 14  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 9 14 8 8 9 14 9
<<< (M = 14, K = 8, N = 9) : 118.941794
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 128.698416
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (14, 4,1) :   123.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 579 (5.1%), 10671 (94.9%) left; Finishing by Sat Oct 21  6:45:50 2000

(9,10,6) <- (9,0,1).*(1, 10+0,6): 135.423223 Mflop/s
(15,10,12) <- (15,1,2).*(1, 10+0,6): 141.226819 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 6 9 10 10 6 9 6
<<< (M = 9, K = 10, N = 6) : 135.423223
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 141.226819
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,6) :   138.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 580 (5.2%), 10670 (94.8%) left; Finishing by Sat Oct 21  6:46:02 2000

(9,6,10) <- (9,1,0).*(1, 6+0,10): 118.659012 Mflop/s
(15,12,10) <- (15,2,1).*(1, 6+0,10): 136.763289 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 10 9 6 6 10 9 10
<<< (M = 9, K = 6, N = 10) : 118.659012
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 10 15 12 12 10 15 10
<<< (M = 15, K = 12, N = 10) : 136.763289
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,10) :   127.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 581 (5.2%), 10669 (94.8%) left; Finishing by Sat Oct 21  6:45:55 2000

(9,8,12) <- (9,2,0).*(1, 4+0,12): 121.726178 Mflop/s
(15,12,12) <- (15,3,1).*(1, 4+0,12): 132.128925 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 12 9 8 8 12 9 12
<<< (M = 9, K = 8, N = 12) : 121.726178
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 132.128925
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,12) :   126.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 582 (5.2%), 10668 (94.8%) left; Finishing by Sat Oct 21  6:46:07 2000

(9,8,9) <- (9,1,3).*(1, 8+0,3): 130.795637 Mflop/s
(15,8,15) <- (15,1,5).*(1, 8+0,3): 134.782971 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 130.795637
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 134.782971
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,3) :   132.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 583 (5.2%), 10667 (94.8%) left; Finishing by Sat Oct 21  6:46:19 2000

(9,9,5) <- (9,9,1).*(1,1+0,5): 119.586943 Mflop/s
(15,15,15) <- (15,15,3).*(1,1+0,5): 143.331206 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 119.586943
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 143.331206
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,5) :   130.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 584 (5.2%), 10666 (94.8%) left; Finishing by Sat Oct 21  6:46:12 2000

(5,8,9) <- (1,1,3).*(5, 8+0,3): 121.601002 Mflop/s
(15,8,15) <- (3,1,5).*(5, 8+0,3): 125.392431 Mflop/s

Testing m0 = 5, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 121.601002
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 125.392431
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 8,3) :   123.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 585 (5.2%), 10665 (94.8%) left; Finishing by Sat Oct 21  6:46:24 2000

(9,15,5) <- (3,0,1).*(3, 15+0,5): 136.428324 Mflop/s
(15,15,15) <- (5,1,3).*(3, 15+0,5): 134.765955 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  15 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 5 9 15 15 5 9 5
<<< (M = 9, K = 15, N = 5) : 136.428324
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 134.765955
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 15,5) :   135.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 586 (5.2%), 10664 (94.8%) left; Finishing by Sat Oct 21  6:46:17 2000

(5,9,9) <- (1,1,3).*(5, 9+0,3): 124.874243 Mflop/s
(15,9,15) <- (3,1,5).*(5, 9+0,3): 129.217805 Mflop/s

Testing m0 = 5, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 124.874243
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 129.217805
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 9,3) :   127.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 587 (5.2%), 10663 (94.8%) left; Finishing by Sat Oct 21  6:46:48 2000

(9,13,11) <- (9,0,0).*(1, 13+0,11): 83.200371 Mflop/s
(15,13,11) <- (15,1,1).*(1, 13+0,11): 83.486981 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 11 9 13 13 11 9 11
<<< (M = 9, K = 13, N = 11) : 83.200371
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 11 15 13 13 11 15 11
<<< (M = 15, K = 13, N = 11) : 83.486981
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,11) :    83.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 588 (5.2%), 10662 (94.8%) left; Finishing by Sat Oct 21  6:46:41 2000

(9,14,14) <- (9,0,0).*(1, 14+0,14): 120.574720 Mflop/s
(15,14,14) <- (15,1,1).*(1, 14+0,14): 121.143890 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 14 9 14 14 14 9 14
<<< (M = 9, K = 14, N = 14) : 120.574720
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 121.143890
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,14) :   120.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 589 (5.2%), 10661 (94.8%) left; Finishing by Sat Oct 21  6:46:34 2000

(9,11,8) <- (9,0,4).*(1, 11+0,2): 127.448481 Mflop/s
(15,11,14) <- (15,1,7).*(1, 11+0,2): 130.810023 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 127.448481
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 130.810023
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,2) :   129.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 590 (5.2%), 10660 (94.8%) left; Finishing by Sat Oct 21  6:46:46 2000

(9,14,8) <- (9,0,2).*(1, 14+0,4): 146.586504 Mflop/s
(15,14,12) <- (15,1,3).*(1, 14+0,4): 149.098134 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 146.586504
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 149.098134
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,4) :   147.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 591 (5.3%), 10659 (94.7%) left; Finishing by Sat Oct 21  6:46:57 2000

(9,7,9) <- (9,1,9).*(1, 7+0,1): 100.158043 Mflop/s
(15,14,15) <- (15,2,15).*(1, 7+0,1): 126.622427 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 100.158043
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 126.622427
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,1) :   111.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 592 (5.3%), 10658 (94.7%) left; Finishing by Sat Oct 21  6:46:50 2000

(8,8,9) <- (1,1,9).*(8, 8+0,1): 90.798502 Mflop/s
(8,8,15) <- (1,1,15).*(8, 8+0,1): 91.748976 Mflop/s

Testing m0 = 8, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 90.798502
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 15 8 8 8 15 8 15
<<< (M = 8, K = 8, N = 15) : 91.748976
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 8,1) :    91.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 593 (5.3%), 10657 (94.7%) left; Finishing by Sat Oct 21  6:46:43 2000

(9,9,11) <- (9,9,0).*(1,1+0,11): 61.876621 Mflop/s
(15,15,11) <- (15,15,1).*(1,1+0,11): 74.374540 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 11 9 9 9 11 9 11
<<< (M = 9, K = 9, N = 11) : 61.876621
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 11 15 15 15 11 15 11
<<< (M = 15, K = 15, N = 11) : 74.374540
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,11) :    67.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 594 (5.3%), 10656 (94.7%) left; Finishing by Sat Oct 21  6:46:36 2000

(9,15,8) <- (3,0,4).*(3, 15+0,2): 148.152947 Mflop/s
(15,15,14) <- (5,1,7).*(3, 15+0,2): 151.218580 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 148.152947
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 151.218580
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 15,2) :   149.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 595 (5.3%), 10655 (94.7%) left; Finishing by Sat Oct 21  6:46:48 2000

(15,13,9) <- (0,0,9).*(15, 13+0,1): 54.713977 Mflop/s
(15,13,15) <- (1,1,15).*(15, 13+0,1): 53.991922 Mflop/s

Testing m0 = 15, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 15  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 9 15 13 13 9 15 9
<<< (M = 15, K = 13, N = 9) : 54.713977
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 53.991922
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (15, 13,1) :    54.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 596 (5.3%), 10654 (94.7%) left; Finishing by Sat Oct 21  6:46:41 2000

(9,13,9) <- (9,0,1).*(1, 13+0,9): 138.100139 Mflop/s
(15,13,9) <- (15,1,1).*(1, 13+0,9): 139.481149 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 138.100139
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 9 15 13 13 9 15 9
<<< (M = 15, K = 13, N = 9) : 139.481149
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,9) :   138.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 597 (5.3%), 10653 (94.7%) left; Finishing by Sat Oct 21  6:46:34 2000

(8,9,9) <- (4,9,9).*(2,1+0,1): 103.137577 Mflop/s
(14,15,15) <- (7,15,15).*(2,1+0,1): 126.381919 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 103.137577
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 126.381919
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2,1,1) :   113.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 598 (5.3%), 10652 (94.7%) left; Finishing by Sat Oct 21  6:46:08 2000

(5,12,9) <- (1,0,3).*(5, 12+0,3): 131.375650 Mflop/s
(15,12,15) <- (3,1,5).*(5, 12+0,3): 116.797638 Mflop/s

Testing m0 = 5, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 131.375650
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 116.797638
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 12,3) :   123.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 599 (5.3%), 10651 (94.7%) left; Finishing by Sat Oct 21  6:46:20 2000

(9,9,9) <- (9,3,3).*(1, 3+0,3): 131.854251 Mflop/s
(15,15,15) <- (15,5,5).*(1, 3+0,3): 149.059214 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 131.854251
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 149.059214
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,3) :   139.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 600 (5.3%), 10650 (94.7%) left; Finishing by Sat Oct 21  6:46:31 2000

(9,8,7) <- (9,1,1).*(1, 8+0,7): 124.548966 Mflop/s
(15,8,14) <- (15,1,2).*(1, 8+0,7): 131.247514 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 7 9 8 8 7 9 7
<<< (M = 9, K = 8, N = 7) : 124.548966
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 14 15 8 8 14 15 14
<<< (M = 15, K = 8, N = 14) : 131.247514
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,7) :   127.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 601 (5.3%), 10649 (94.7%) left; Finishing by Sat Oct 21  6:46:43 2000

(9,15,8) <- (9,0,1).*(1, 15+0,8): 141.718991 Mflop/s
(15,15,8) <- (15,1,1).*(1, 15+0,8): 143.071138 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 141.718991
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 8 15 15 15 8 15 8
<<< (M = 15, K = 15, N = 8) : 143.071138
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,8) :   142.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 602 (5.4%), 10648 (94.6%) left; Finishing by Sat Oct 21  6:46:17 2000

(5,9,8) <- (1,3,4).*(5, 3+0,2): 117.833347 Mflop/s
(15,15,14) <- (3,5,7).*(5, 3+0,2): 132.110245 Mflop/s

Testing m0 = 5, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 8 5 9 9 8 5 8
<<< (M = 5, K = 9, N = 8) : 117.833347
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 132.110245
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 3,2) :   124.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 603 (5.4%), 10647 (94.6%) left; Finishing by Sat Oct 21  6:46:29 2000

(9,9,8) <- (3,3,2).*(3, 3+0,4): 126.432670 Mflop/s
(15,15,12) <- (5,5,3).*(3, 3+0,4): 137.519798 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 126.432670
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 137.519798
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 3,4) :   131.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 604 (5.4%), 10646 (94.6%) left; Finishing by Sat Oct 21  6:46:41 2000

(10,14,9) <- (0,0,9).*(10, 14+0,1): 79.450129 Mflop/s
(10,14,15) <- (1,1,15).*(10, 14+0,1): 71.917943 Mflop/s

Testing m0 = 10, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 10  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 9 10 14 14 9 10 9
<<< (M = 10, K = 14, N = 9) : 79.450129
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 15 10 14 14 15 10 15
<<< (M = 10, K = 14, N = 15) : 71.917943
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (10, 14,1) :    75.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 605 (5.4%), 10645 (94.6%) left; Finishing by Sat Oct 21  6:46:34 2000

(9,14,9) <- (9,0,1).*(1, 14+0,9): 139.956061 Mflop/s
(15,14,9) <- (15,1,1).*(1, 14+0,9): 141.409839 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  14 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 139.956061
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 141.409839
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 14,9) :   140.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 606 (5.4%), 10644 (94.6%) left; Finishing by Sat Oct 21  6:46:27 2000

(9,6,9) <- (9,1,3).*(1, 6+0,3): 118.763250 Mflop/s
(15,12,15) <- (15,2,5).*(1, 6+0,3): 143.385601 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 118.763250
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 143.385601
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,3) :   129.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 607 (5.4%), 10643 (94.6%) left; Finishing by Sat Oct 21  6:46:38 2000

(15,5,9) <- (0,1,9).*(15, 5+0,1): 46.849303 Mflop/s
(15,15,15) <- (1,3,15).*(15, 5+0,1): 56.393777 Mflop/s

Testing m0 = 15, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 15  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 5 9 15 5 5 9 15 9
<<< (M = 15, K = 5, N = 9) : 46.849303
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 56.393777
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (15, 5,1) :    51.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 608 (5.4%), 10642 (94.6%) left; Finishing by Sat Oct 21  6:46:31 2000

(5,8,9) <- (1,2,9).*(5, 4+0,1): 139.981704 Mflop/s
(15,12,15) <- (3,3,15).*(5, 4+0,1): 165.512959 Mflop/s

Testing m0 = 5, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 139.981704
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 165.512959
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 4,1) :   151.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 609 (5.4%), 10641 (94.6%) left; Finishing by Sat Oct 21  6:46:43 2000

(8,14,8) <- (1,0,4).*(8, 14+0,2): 55.263767 Mflop/s
(8,14,14) <- (1,1,7).*(8, 14+0,2): 55.351271 Mflop/s

Testing m0 = 8, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 55.263767
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 14 8 14 14 14 8 14
<<< (M = 8, K = 14, N = 14) : 55.351271
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 14,2) :    55.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 610 (5.4%), 10640 (94.6%) left; Finishing by Sat Oct 21  6:46:36 2000

(8,6,7) <- (4,1,1).*(2, 6+0,7): 59.214400 Mflop/s
(14,12,14) <- (7,2,2).*(2, 6+0,7): 64.855779 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  6 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 7 8 6 6 7 8 7
<<< (M = 8, K = 6, N = 7) : 59.214400
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 64.855779
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 6,7) :    61.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 611 (5.4%), 10639 (94.6%) left; Finishing by Sat Oct 21  6:46:47 2000

(6,12,9) <- (1,0,9).*(6, 12+0,1): 142.471183 Mflop/s
(12,12,15) <- (2,1,15).*(6, 12+0,1): 147.630562 Mflop/s

Testing m0 = 6, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 9 6 12 12 9 6 9
<<< (M = 6, K = 12, N = 9) : 142.471183
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 147.630562
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 12,1) :   145.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 612 (5.4%), 10638 (94.6%) left; Finishing by Sat Oct 21  6:46:59 2000

(7,10,9) <- (1,0,9).*(7, 10+0,1): 108.241748 Mflop/s
(14,10,15) <- (2,1,15).*(7, 10+0,1): 107.868049 Mflop/s

Testing m0 = 7, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 10 9 7 10 10 9 7 9
<<< (M = 7, K = 10, N = 9) : 108.241748
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 107.868049
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 10,1) :   108.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 613 (5.4%), 10637 (94.6%) left; Finishing by Sat Oct 21  6:46:52 2000

(9,8,9) <- (3,1,3).*(3, 8+0,3): 100.816132 Mflop/s
(15,8,15) <- (5,1,5).*(3, 8+0,3): 104.091191 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 100.816132
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 104.091191
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 8,3) :   102.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 614 (5.5%), 10636 (94.5%) left; Finishing by Sat Oct 21  6:46:27 2000

(9,10,9) <- (9,0,9).*(1, 10+0,1): 119.200361 Mflop/s
(15,10,15) <- (15,1,15).*(1, 10+0,1): 123.461037 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 119.200361
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 123.461037
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,1) :   121.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 615 (5.5%), 10635 (94.5%) left; Finishing by Sat Oct 21  6:46:20 2000

(9,5,9) <- (3,1,3).*(3, 5+0,3): 86.716234 Mflop/s
(15,15,15) <- (5,3,5).*(3, 5+0,3): 148.747773 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 9 9 5 5 9 9 9
<<< (M = 9, K = 5, N = 9) : 86.716234
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 148.747773
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 5,3) :   109.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 616 (5.5%), 10634 (94.5%) left; Finishing by Sat Oct 21  6:46:31 2000

(13,5,9) <- (0,1,9).*(13, 5+0,1): 49.505087 Mflop/s
(13,15,15) <- (1,3,15).*(13, 5+0,1): 58.004016 Mflop/s

Testing m0 = 13, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 13  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 5 9 13 5 5 9 13 9
<<< (M = 13, K = 5, N = 9) : 49.505087
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 15 13 15 15 15 13 15
<<< (M = 13, K = 15, N = 15) : 58.004016
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (13, 5,1) :    53.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 617 (5.5%), 10633 (94.5%) left; Finishing by Sat Oct 21  6:46:06 2000

(8,6,8) <- (4,1,4).*(2, 6+0,2): 124.793600 Mflop/s
(14,12,14) <- (7,2,7).*(2, 6+0,2): 150.041126 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 124.793600
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 150.041126
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 6,2) :   136.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 618 (5.5%), 10632 (94.5%) left; Finishing by Sat Oct 21  6:46:18 2000

(8,12,9) <- (2,0,3).*(4, 12+0,3): 63.271786 Mflop/s
(12,12,15) <- (3,1,5).*(4, 12+0,3): 72.040329 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 63.271786
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 72.040329
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 12,3) :    67.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 619 (5.5%), 10631 (94.5%) left; Finishing by Sat Oct 21  6:46:11 2000

(9,11,12) <- (9,0,0).*(1, 11+0,12): 132.132457 Mflop/s
(15,11,12) <- (15,1,1).*(1, 11+0,12): 133.019145 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 12 9 11 11 12 9 12
<<< (M = 9, K = 11, N = 12) : 132.132457
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 133.019145
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,12) :   132.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 620 (5.5%), 10630 (94.5%) left; Finishing by Sat Oct 21  6:46:04 2000

(8,14,7) <- (4,0,1).*(2, 14+0,7): 69.700991 Mflop/s
(14,14,14) <- (7,1,2).*(2, 14+0,7): 66.264670 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  14 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 7 8 14 14 7 8 7
<<< (M = 8, K = 14, N = 7) : 69.700991
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 66.264670
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 14,7) :    67.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 621 (5.5%), 10629 (94.5%) left; Finishing by Sat Oct 21  6:45:57 2000

(9,5,10) <- (9,1,0).*(1, 5+0,10): 109.904434 Mflop/s
(15,15,10) <- (15,3,1).*(1, 5+0,10): 138.015707 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 10 9 5 5 10 9 10
<<< (M = 9, K = 5, N = 10) : 109.904434
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 10 15 15 15 10 15 10
<<< (M = 15, K = 15, N = 10) : 138.015707
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,10) :   122.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 622 (5.5%), 10628 (94.5%) left; Finishing by Sat Oct 21  6:46:09 2000

(8,9,6) <- (4,1,1).*(2, 9+0,6): 63.813198 Mflop/s
(14,9,12) <- (7,1,2).*(2, 9+0,6): 65.317874 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  9 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 6 8 9 9 6 8 6
<<< (M = 8, K = 9, N = 6) : 63.813198
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 12 14 9 9 12 14 12
<<< (M = 14, K = 9, N = 12) : 65.317874
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 9,6) :    64.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 623 (5.5%), 10627 (94.5%) left; Finishing by Sat Oct 21  6:45:44 2000

(9,7,9) <- (9,1,1).*(1, 7+0,9): 119.870904 Mflop/s
(15,14,9) <- (15,2,1).*(1, 7+0,9): 140.379172 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 119.870904
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 140.379172
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,9) :   129.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 624 (5.5%), 10626 (94.5%) left; Finishing by Sat Oct 21  6:45:55 2000

(8,15,9) <- (1,0,9).*(8, 15+0,1): 100.727476 Mflop/s
(8,15,15) <- (1,1,15).*(8, 15+0,1): 101.847156 Mflop/s

Testing m0 = 8, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 100.727476
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 15 8 15 15 15 8 15
<<< (M = 8, K = 15, N = 15) : 101.847156
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 15,1) :   101.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 625 (5.6%), 10625 (94.4%) left; Finishing by Sat Oct 21  6:45:49 2000

(6,9,8) <- (1,9,4).*(6,1+0,2): 107.028058 Mflop/s
(12,15,14) <- (2,15,7).*(6,1+0,2): 117.709169 Mflop/s

Testing m0 = 6, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 8 6 9 9 8 6 8
<<< (M = 6, K = 9, N = 8) : 107.028058
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 117.709169
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6,1,2) :   112.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 626 (5.6%), 10624 (94.4%) left; Finishing by Sat Oct 21  6:46:00 2000

(9,8,5) <- (9,1,1).*(1, 8+0,5): 125.260892 Mflop/s
(15,8,15) <- (15,1,3).*(1, 8+0,5): 133.381351 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 125.260892
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 133.381351
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,5) :   129.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 627 (5.6%), 10623 (94.4%) left; Finishing by Sat Oct 21  6:45:53 2000

(8,10,9) <- (4,0,3).*(2, 10+0,3): 108.341529 Mflop/s
(14,10,15) <- (7,1,5).*(2, 10+0,3): 81.299608 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 108.341529
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 81.299608
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 10,3) :    92.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 628 (5.6%), 10622 (94.4%) left; Finishing by Sat Oct 21  6:46:04 2000

(8,11,8) <- (4,0,1).*(2, 11+0,8): 62.977369 Mflop/s
(14,11,8) <- (7,1,1).*(2, 11+0,8): 62.773108 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  11 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 62.977369
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 8 14 11 11 8 14 8
<<< (M = 14, K = 11, N = 8) : 62.773108
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 11,8) :    62.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 629 (5.6%), 10621 (94.4%) left; Finishing by Sat Oct 21  6:45:58 2000

(8,8,9) <- (4,1,3).*(2, 8+0,3): 102.269083 Mflop/s
(14,8,15) <- (7,1,5).*(2, 8+0,3): 105.005919 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 102.269083
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 15 14 8 8 15 14 15
<<< (M = 14, K = 8, N = 15) : 105.005919
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 8,3) :   103.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 630 (5.6%), 10620 (94.4%) left; Finishing by Sat Oct 21  6:46:27 2000

(8,9,8) <- (4,1,4).*(2, 9+0,2): 139.104391 Mflop/s
(14,9,14) <- (7,1,7).*(2, 9+0,2): 138.164752 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 139.104391
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 14 14 9 9 14 14 14
<<< (M = 14, K = 9, N = 14) : 138.164752
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 9,2) :   138.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 631 (5.6%), 10619 (94.4%) left; Finishing by Sat Oct 21  6:46:38 2000

(6,5,8) <- (1,1,4).*(6, 5+0,2): 95.985483 Mflop/s
(12,15,14) <- (2,3,7).*(6, 5+0,2): 131.212637 Mflop/s

Testing m0 = 6, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 5 8 6 5 5 8 6 8
<<< (M = 6, K = 5, N = 8) : 95.985483
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 131.212637
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 5,2) :   110.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 632 (5.6%), 10618 (94.4%) left; Finishing by Sat Oct 21  6:46:31 2000

(5,12,9) <- (1,0,9).*(5, 12+0,1): 168.769736 Mflop/s
(15,12,15) <- (3,1,15).*(5, 12+0,1): 173.127841 Mflop/s

Testing m0 = 5, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 168.769736
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 173.127841
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 12,1) :   170.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 633 (5.6%), 10617 (94.4%) left; Finishing by Sat Oct 21  6:46:42 2000

(9,10,12) <- (9,0,0).*(1, 10+0,12): 125.059966 Mflop/s
(15,10,12) <- (15,1,1).*(1, 10+0,12): 130.372879 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 12 9 10 10 12 9 12
<<< (M = 9, K = 10, N = 12) : 125.059966
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 130.372879
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,12) :   127.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 634 (5.6%), 10616 (94.4%) left; Finishing by Sat Oct 21  6:46:36 2000

(15,9,9) <- (0,1,9).*(15, 9+0,1): 52.249951 Mflop/s
(15,9,15) <- (1,1,15).*(15, 9+0,1): 52.726586 Mflop/s

Testing m0 = 15, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 15  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 9 15 9 9 9 15 9
<<< (M = 15, K = 9, N = 9) : 52.249951
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 52.726586
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (15, 9,1) :    52.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 635 (5.6%), 10615 (94.4%) left; Finishing by Sat Oct 21  6:46:29 2000

(9,8,8) <- (9,1,1).*(1, 8+0,8): 127.005166 Mflop/s
(15,8,8) <- (15,1,1).*(1, 8+0,8): 129.833569 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 127.005166
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 8 15 8 8 8 15 8
<<< (M = 15, K = 8, N = 8) : 129.833569
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,8) :   128.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 636 (5.7%), 10614 (94.3%) left; Finishing by Sat Oct 21  6:46:40 2000

(8,9,8) <- (1,9,4).*(8,1+0,2): 101.548772 Mflop/s
(8,15,14) <- (1,15,7).*(8,1+0,2): 108.200592 Mflop/s

Testing m0 = 8, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 101.548772
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 14 8 15 15 14 8 14
<<< (M = 8, K = 15, N = 14) : 108.200592
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8,1,2) :   104.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 637 (5.7%), 10613 (94.3%) left; Finishing by Sat Oct 21  6:46:51 2000

(9,11,15) <- (9,0,0).*(1, 11+0,15): 62.916380 Mflop/s
(15,11,15) <- (15,1,1).*(1, 11+0,15): 62.904940 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 15 9 11 11 15 9 15
<<< (M = 9, K = 11, N = 15) : 62.916380
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 62.904940
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,15) :    62.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 638 (5.7%), 10612 (94.3%) left; Finishing by Sat Oct 21  6:46:44 2000

(6,10,9) <- (1,0,9).*(6, 10+0,1): 141.358451 Mflop/s
(12,10,15) <- (2,1,15).*(6, 10+0,1): 139.510413 Mflop/s

Testing m0 = 6, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 10 9 6 10 10 9 6 9
<<< (M = 6, K = 10, N = 9) : 141.358451
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 139.510413
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 10,1) :   140.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 639 (5.7%), 10611 (94.3%) left; Finishing by Sat Oct 21  6:46:38 2000

(9,7,9) <- (1,1,9).*(9, 7+0,1): 58.557310 Mflop/s
(9,14,15) <- (1,2,15).*(9, 7+0,1): 68.423078 Mflop/s

Testing m0 = 9, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 9  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 58.557310
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 68.423078
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (9, 7,1) :    63.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 640 (5.7%), 10610 (94.3%) left; Finishing by Sat Oct 21  6:46:31 2000

(16,7,9) <- (0,1,9).*(16, 7+0,1): 112.845170 Mflop/s
(16,14,15) <- (0,2,15).*(16, 7+0,1): 128.519585 Mflop/s

Testing m0 = 16, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 16  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 7 9 16 7 7 9 16 9
<<< (M = 16, K = 7, N = 9) : 112.845170
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 15 16 14 14 15 16 15
<<< (M = 16, K = 14, N = 15) : 128.519585
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (16, 7,1) :   120.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 641 (5.7%), 10609 (94.3%) left; Finishing by Sat Oct 21  6:46:25 2000

(8,12,9) <- (4,0,3).*(2, 12+0,3): 110.689806 Mflop/s
(14,12,15) <- (7,1,5).*(2, 12+0,3): 84.306770 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 110.689806
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 84.306770
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 12,3) :    95.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 642 (5.7%), 10608 (94.3%) left; Finishing by Sat Oct 21  6:46:18 2000

(9,9,9) <- (9,3,1).*(1, 3+0,9): 127.246173 Mflop/s
(15,15,9) <- (15,5,1).*(1, 3+0,9): 140.798496 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 127.246173
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 140.798496
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,9) :   133.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 643 (5.7%), 10607 (94.3%) left; Finishing by Sat Oct 21  6:46:29 2000

(9,11,8) <- (3,0,4).*(3, 11+0,2): 142.415057 Mflop/s
(15,11,14) <- (5,1,7).*(3, 11+0,2): 145.116052 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 142.415057
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 145.116052
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 11,2) :   143.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 644 (5.7%), 10606 (94.3%) left; Finishing by Sat Oct 21  6:46:40 2000

(9,9,5) <- (3,3,1).*(3, 3+0,5): 122.550451 Mflop/s
(15,15,15) <- (5,5,3).*(3, 3+0,5): 132.238659 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  3 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 122.550451
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 132.238659
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 3,5) :   127.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 645 (5.7%), 10605 (94.3%) left; Finishing by Sat Oct 21  6:46:33 2000

(9,8,15) <- (9,4,0).*(1, 2+0,15): 123.134540 Mflop/s
(15,14,15) <- (15,7,1).*(1, 2+0,15): 134.218651 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 15 9 8 8 15 9 15
<<< (M = 9, K = 8, N = 15) : 123.134540
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 134.218651
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,15) :   128.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 646 (5.7%), 10604 (94.3%) left; Finishing by Sat Oct 21  6:46:27 2000

(9,9,9) <- (1,3,9).*(9, 3+0,1): 76.741520 Mflop/s
(9,15,15) <- (1,5,15).*(9, 3+0,1): 82.076621 Mflop/s

Testing m0 = 9, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 9  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 76.741520
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 82.076621
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (9, 3,1) :    79.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 647 (5.8%), 10603 (94.2%) left; Finishing by Sat Oct 21  6:46:03 2000

(9,14,8) <- (3,0,4).*(3, 14+0,2): 144.570068 Mflop/s
(15,14,14) <- (5,1,7).*(3, 14+0,2): 147.303336 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 144.570068
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 147.303336
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 14,2) :   145.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 648 (5.8%), 10602 (94.2%) left; Finishing by Sat Oct 21  6:46:14 2000

(8,13,5) <- (4,0,1).*(2, 13+0,5): 77.917828 Mflop/s
(14,13,15) <- (7,1,3).*(2, 13+0,5): 67.040779 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  13 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 5 8 13 13 5 8 5
<<< (M = 8, K = 13, N = 5) : 77.917828
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 67.040779
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 13,5) :    72.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 649 (5.8%), 10601 (94.2%) left; Finishing by Sat Oct 21  6:46:07 2000

(7,8,8) <- (1,1,4).*(7, 8+0,2): 113.873078 Mflop/s
(14,8,14) <- (2,1,7).*(7, 8+0,2): 117.134893 Mflop/s

Testing m0 = 7, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 8 7 8 8 8 7 8
<<< (M = 7, K = 8, N = 8) : 113.873078
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 14 14 8 8 14 14 14
<<< (M = 14, K = 8, N = 14) : 117.134893
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 8,2) :   115.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 650 (5.8%), 10600 (94.2%) left; Finishing by Sat Oct 21  6:46:18 2000

(9,11,10) <- (9,0,0).*(1, 11+0,10): 135.200176 Mflop/s
(15,11,10) <- (15,1,1).*(1, 11+0,10): 135.376832 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 10 9 11 11 10 9 10
<<< (M = 9, K = 11, N = 10) : 135.200176
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 10 15 11 11 10 15 10
<<< (M = 15, K = 11, N = 10) : 135.376832
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,10) :   135.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 651 (5.8%), 10599 (94.2%) left; Finishing by Sat Oct 21  6:46:12 2000

(8,9,5) <- (4,1,1).*(2, 9+0,5): 73.572656 Mflop/s
(14,9,15) <- (7,1,3).*(2, 9+0,5): 75.943347 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  9 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 5 8 9 9 5 8 5
<<< (M = 8, K = 9, N = 5) : 73.572656
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 75.943347
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 9,5) :    74.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 652 (5.8%), 10598 (94.2%) left; Finishing by Sat Oct 21  6:46:23 2000

(9,9,6) <- (9,9,1).*(1,1+0,6): 124.417335 Mflop/s
(15,15,12) <- (15,15,2).*(1,1+0,6): 140.812615 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 6 9 9 9 6 9 6
<<< (M = 9, K = 9, N = 6) : 124.417335
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 140.812615
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,6) :   132.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 653 (5.8%), 10597 (94.2%) left; Finishing by Sat Oct 21  6:46:33 2000

(8,15,6) <- (4,0,1).*(2, 15+0,6): 68.908162 Mflop/s
(14,15,12) <- (7,1,2).*(2, 15+0,6): 73.127230 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  15 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 6 8 15 15 6 8 6
<<< (M = 8, K = 15, N = 6) : 68.908162
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 73.127230
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 15,6) :    71.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 654 (5.8%), 10596 (94.2%) left; Finishing by Sat Oct 21  6:46:27 2000

(8,14,9) <- (4,0,3).*(2, 14+0,3): 111.624420 Mflop/s
(14,14,15) <- (7,1,5).*(2, 14+0,3): 83.656340 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 111.624420
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 83.656340
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 14,3) :    95.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 655 (5.8%), 10595 (94.2%) left; Finishing by Sat Oct 21  6:46:21 2000

(5,7,9) <- (1,1,9).*(5, 7+0,1): 140.970327 Mflop/s
(15,14,15) <- (3,2,15).*(5, 7+0,1): 185.663102 Mflop/s

Testing m0 = 5, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 7 9 5 7 7 9 5 9
<<< (M = 5, K = 7, N = 9) : 140.970327
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 185.663102
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 7,1) :   160.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 656 (5.8%), 10594 (94.2%) left; Finishing by Sat Oct 21  6:46:31 2000

(8,8,8) <- (4,1,2).*(2, 8+0,4): 74.335216 Mflop/s
(14,8,12) <- (7,1,3).*(2, 8+0,4): 76.099883 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 74.335216
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 12 14 8 8 12 14 12
<<< (M = 14, K = 8, N = 12) : 76.099883
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 8,4) :    75.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 657 (5.8%), 10593 (94.2%) left; Finishing by Sat Oct 21  6:46:25 2000

(10,8,9) <- (0,2,9).*(10, 4+0,1): 118.358812 Mflop/s
(10,12,15) <- (1,3,15).*(10, 4+0,1): 129.954653 Mflop/s

Testing m0 = 10, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 10  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 8 9 10 8 8 9 10 9
<<< (M = 10, K = 8, N = 9) : 118.358812
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 15 10 12 12 15 10 15
<<< (M = 10, K = 12, N = 15) : 129.954653
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (10, 4,1) :   123.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 658 (5.8%), 10592 (94.2%) left; Finishing by Sat Oct 21  6:46:36 2000

(9,12,9) <- (9,0,9).*(1, 12+0,1): 120.019443 Mflop/s
(15,12,15) <- (15,1,15).*(1, 12+0,1): 124.013059 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 120.019443
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 124.013059
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,1) :   122.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 659 (5.9%), 10591 (94.1%) left; Finishing by Sat Oct 21  6:46:29 2000

(8,9,8) <- (4,3,4).*(2, 3+0,2): 130.985987 Mflop/s
(14,15,14) <- (7,5,7).*(2, 3+0,2): 151.168218 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 130.985987
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 151.168218
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 3,2) :   140.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 660 (5.9%), 10590 (94.1%) left; Finishing by Sat Oct 21  6:46:23 2000

(13,8,9) <- (0,2,9).*(13, 4+0,1): 54.111427 Mflop/s
(13,12,15) <- (1,3,15).*(13, 4+0,1): 56.724631 Mflop/s

Testing m0 = 13, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 13  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 8 9 13 8 8 9 13 9
<<< (M = 13, K = 8, N = 9) : 54.111427
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 15 13 12 12 15 13 15
<<< (M = 13, K = 12, N = 15) : 56.724631
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (13, 4,1) :    55.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 661 (5.9%), 10589 (94.1%) left; Finishing by Sat Oct 21  6:46:16 2000

(8,8,8) <- (4,4,1).*(2, 2+0,8): 59.022545 Mflop/s
(14,14,8) <- (7,7,1).*(2, 2+0,8): 64.946336 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  2 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 59.022545
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 8 14 14 14 8 14 8
<<< (M = 14, K = 14, N = 8) : 64.946336
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 2,8) :    61.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 662 (5.9%), 10588 (94.1%) left; Finishing by Sat Oct 21  6:46:27 2000

(16,8,9) <- (0,2,9).*(16, 4+0,1): 124.772033 Mflop/s
(16,12,15) <- (0,3,15).*(16, 4+0,1): 134.465093 Mflop/s

Testing m0 = 16, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 16  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 8 9 16 8 8 9 16 9
<<< (M = 16, K = 8, N = 9) : 124.772033
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 15 16 12 12 15 16 15
<<< (M = 16, K = 12, N = 15) : 134.465093
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (16, 4,1) :   129.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 663 (5.9%), 10587 (94.1%) left; Finishing by Sat Oct 21  6:46:04 2000

(8,8,9) <- (2,1,9).*(4, 8+0,1): 145.581750 Mflop/s
(12,8,15) <- (3,1,15).*(4, 8+0,1): 149.884947 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 145.581750
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 15 12 8 8 15 12 15
<<< (M = 12, K = 8, N = 15) : 149.884947
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 8,1) :   147.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 664 (5.9%), 10586 (94.1%) left; Finishing by Sat Oct 21  6:46:14 2000

(11,8,9) <- (0,2,9).*(11, 4+0,1): 64.394775 Mflop/s
(11,12,15) <- (1,3,15).*(11, 4+0,1): 70.609249 Mflop/s

Testing m0 = 11, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 11  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 8 9 11 8 8 9 11 9
<<< (M = 11, K = 8, N = 9) : 64.394775
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 15 11 12 12 15 11 15
<<< (M = 11, K = 12, N = 15) : 70.609249
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (11, 4,1) :    67.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 665 (5.9%), 10585 (94.1%) left; Finishing by Sat Oct 21  6:46:08 2000

(9,7,8) <- (9,1,2).*(1, 7+0,4): 122.766099 Mflop/s
(15,14,12) <- (15,2,3).*(1, 7+0,4): 148.092574 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 122.766099
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 148.092574
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 7,4) :   134.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 666 (5.9%), 10584 (94.1%) left; Finishing by Sat Oct 21  6:46:19 2000

(16,5,9) <- (0,1,9).*(16, 5+0,1): 105.756030 Mflop/s
(16,15,15) <- (0,3,15).*(16, 5+0,1): 144.313962 Mflop/s

Testing m0 = 16, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 16  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 5 9 16 5 5 9 16 9
<<< (M = 16, K = 5, N = 9) : 105.756030
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 15 16 15 15 15 16 15
<<< (M = 16, K = 15, N = 15) : 144.313962
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (16, 5,1) :   122.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 667 (5.9%), 10583 (94.1%) left; Finishing by Sat Oct 21  6:46:12 2000

(8,14,8) <- (2,0,2).*(4, 14+0,4): 65.445460 Mflop/s
(12,14,12) <- (3,1,3).*(4, 14+0,4): 72.657958 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 65.445460
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 12 12 14 14 12 12 12
<<< (M = 12, K = 14, N = 12) : 72.657958
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 14,4) :    68.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 668 (5.9%), 10582 (94.1%) left; Finishing by Sat Oct 21  6:46:23 2000

(5,9,9) <- (1,3,9).*(5, 3+0,1): 142.361949 Mflop/s
(15,15,15) <- (3,5,15).*(5, 3+0,1): 167.769155 Mflop/s

Testing m0 = 5, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 142.361949
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 167.769155
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 3,1) :   154.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 669 (5.9%), 10581 (94.1%) left; Finishing by Sat Oct 21  6:46:17 2000

(8,8,8) <- (2,4,2).*(4, 2+0,4): 56.335020 Mflop/s
(12,14,12) <- (3,7,3).*(4, 2+0,4): 70.598756 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 56.335020
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 12 12 14 14 12 12 12
<<< (M = 12, K = 14, N = 12) : 70.598756
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 2,4) :    62.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 670 (6.0%), 10580 (94.0%) left; Finishing by Sat Oct 21  6:46:10 2000

(9,15,11) <- (9,0,0).*(1, 15+0,11): 84.407212 Mflop/s
(15,15,11) <- (15,1,1).*(1, 15+0,11): 85.274428 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  15 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 11 9 15 15 11 9 11
<<< (M = 9, K = 15, N = 11) : 84.407212
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 11 15 15 15 11 15 11
<<< (M = 15, K = 15, N = 11) : 85.274428
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 15,11) :    84.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 671 (6.0%), 10579 (94.0%) left; Finishing by Sat Oct 21  6:46:04 2000

(9,12,8) <- (3,0,4).*(3, 12+0,2): 144.966452 Mflop/s
(15,12,14) <- (5,1,7).*(3, 12+0,2): 146.509109 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 144.966452
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 146.509109
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 12,2) :   145.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 672 (6.0%), 10578 (94.0%) left; Finishing by Sat Oct 21  6:46:15 2000

(9,8,8) <- (9,2,4).*(1, 4+0,2): 130.024618 Mflop/s
(15,12,14) <- (15,3,7).*(1, 4+0,2): 149.082608 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 130.024618
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 149.082608
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 4,2) :   138.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 673 (6.0%), 10577 (94.0%) left; Finishing by Sat Oct 21  6:46:25 2000

(12,8,9) <- (0,1,9).*(12, 8+0,1): 114.393868 Mflop/s
(12,8,15) <- (1,1,15).*(12, 8+0,1): 117.511705 Mflop/s

Testing m0 = 12, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 12  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 9 12 8 8 9 12 9
<<< (M = 12, K = 8, N = 9) : 114.393868
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 15 12 8 8 15 12 15
<<< (M = 12, K = 8, N = 15) : 117.511705
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (12, 8,1) :   115.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 674 (6.0%), 10576 (94.0%) left; Finishing by Sat Oct 21  6:46:02 2000

(9,9,9) <- (3,1,9).*(3, 9+0,1): 149.659212 Mflop/s
(15,9,15) <- (5,1,15).*(3, 9+0,1): 153.965056 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 149.659212
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 153.965056
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 9,1) :   151.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 675 (6.0%), 10575 (94.0%) left; Finishing by Sat Oct 21  6:46:13 2000

(9,10,8) <- (9,0,1).*(1, 10+0,8): 132.523134 Mflop/s
(15,10,8) <- (15,1,1).*(1, 10+0,8): 134.244284 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  10 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 132.523134
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 8 15 10 10 8 15 8
<<< (M = 15, K = 10, N = 8) : 134.244284
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 10,8) :   133.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 676 (6.0%), 10574 (94.0%) left; Finishing by Sat Oct 21  6:46:23 2000

(9,15,9) <- (3,0,3).*(3, 15+0,3): 114.905982 Mflop/s
(15,15,15) <- (5,1,5).*(3, 15+0,3): 151.728660 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 114.905982
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 151.728660
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 15,3) :   130.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 677 (6.0%), 10573 (94.0%) left; Finishing by Sat Oct 21  6:46:17 2000

(15,11,9) <- (0,0,9).*(15, 11+0,1): 53.405976 Mflop/s
(15,11,15) <- (1,1,15).*(15, 11+0,1): 52.709268 Mflop/s

Testing m0 = 15, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 15  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 9 15 11 11 9 15 9
<<< (M = 15, K = 11, N = 9) : 53.405976
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 52.709268
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (15, 11,1) :    53.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 678 (6.0%), 10572 (94.0%) left; Finishing by Sat Oct 21  6:46:11 2000

(9,8,10) <- (9,4,0).*(1, 2+0,10): 124.599495 Mflop/s
(15,14,10) <- (15,7,1).*(1, 2+0,10): 135.287250 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  2 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 10 9 8 8 10 9 10
<<< (M = 9, K = 8, N = 10) : 124.599495
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 10 15 14 14 10 15 10
<<< (M = 15, K = 14, N = 10) : 135.287250
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 2,10) :   129.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 679 (6.0%), 10571 (94.0%) left; Finishing by Sat Oct 21  6:46:21 2000

(12,9,9) <- (0,1,9).*(12, 9+0,1): 117.469581 Mflop/s
(12,9,15) <- (1,1,15).*(12, 9+0,1): 119.151271 Mflop/s

Testing m0 = 12, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 12  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 9 12 9 9 9 12 9
<<< (M = 12, K = 9, N = 9) : 117.469581
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 119.151271
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (12, 9,1) :   118.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 680 (6.0%), 10570 (94.0%) left; Finishing by Sat Oct 21  6:45:58 2000

(9,8,8) <- (3,4,4).*(3, 2+0,2): 119.840727 Mflop/s
(15,14,14) <- (5,7,7).*(3, 2+0,2): 134.286364 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 119.840727
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 134.286364
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 2,2) :   126.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 681 (6.1%), 10569 (93.9%) left; Finishing by Sat Oct 21  6:46:09 2000

(8,12,8) <- (4,0,2).*(2, 12+0,4): 79.358545 Mflop/s
(14,12,12) <- (7,1,3).*(2, 12+0,4): 69.929563 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 79.358545
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 69.929563
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 12,4) :    74.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 682 (6.1%), 10568 (93.9%) left; Finishing by Sat Oct 21  6:46:02 2000

(8,6,8) <- (4,1,2).*(2, 6+0,4): 66.856545 Mflop/s
(14,12,12) <- (7,2,3).*(2, 6+0,4): 69.159974 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 66.856545
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 69.159974
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 6,4) :    68.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 683 (6.1%), 10567 (93.9%) left; Finishing by Sat Oct 21  6:46:13 2000

(9,9,8) <- (3,9,2).*(3,1+0,4): 124.860262 Mflop/s
(15,15,12) <- (5,15,3).*(3,1+0,4): 139.453762 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 124.860262
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 139.453762
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3,1,4) :   131.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 684 (6.1%), 10566 (93.9%) left; Finishing by Sat Oct 21  6:46:23 2000

(5,8,8) <- (1,4,4).*(5, 2+0,2): 47.606407 Mflop/s
(15,14,14) <- (3,7,7).*(5, 2+0,2): 55.016233 Mflop/s

Testing m0 = 5, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 8 5 8 8 8 5 8
<<< (M = 5, K = 8, N = 8) : 47.606407
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 55.016233
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 2,2) :    51.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 685 (6.1%), 10565 (93.9%) left; Finishing by Sat Oct 21  6:46:33 2000

(9,6,9) <- (9,1,9).*(1, 6+0,1): 90.877043 Mflop/s
(15,12,15) <- (15,2,15).*(1, 6+0,1): 122.444634 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 90.877043
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 122.444634
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,1) :   104.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 686 (6.1%), 10564 (93.9%) left; Finishing by Sat Oct 21  6:46:27 2000

(15,14,9) <- (0,0,9).*(15, 14+0,1): 58.337647 Mflop/s
(15,14,15) <- (1,1,15).*(15, 14+0,1): 56.907750 Mflop/s

Testing m0 = 15, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 15  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 58.337647
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 56.907750
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (15, 14,1) :    57.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 687 (6.1%), 10563 (93.9%) left; Finishing by Sat Oct 21  6:46:37 2000

(9,5,8) <- (9,1,4).*(1, 5+0,2): 104.577506 Mflop/s
(15,15,14) <- (15,3,7).*(1, 5+0,2): 144.537205 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 8 9 5 5 8 9 8
<<< (M = 9, K = 5, N = 8) : 104.577506
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 144.537205
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,2) :   121.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 688 (6.1%), 10562 (93.9%) left; Finishing by Sat Oct 21  6:46:31 2000

(9,9,10) <- (9,9,0).*(1,1+0,10): 70.261922 Mflop/s
(15,15,10) <- (15,15,1).*(1,1+0,10): 80.029601 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 10 9 9 9 10 9 10
<<< (M = 9, K = 9, N = 10) : 70.261922
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 10 15 15 15 10 15 10
<<< (M = 15, K = 15, N = 10) : 80.029601
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,10) :    74.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 689 (6.1%), 10561 (93.9%) left; Finishing by Sat Oct 21  6:46:25 2000

(9,8,9) <- (3,1,9).*(3, 8+0,1): 148.860944 Mflop/s
(15,8,15) <- (5,1,15).*(3, 8+0,1): 154.912192 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 148.860944
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 154.912192
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 8,1) :   151.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 690 (6.1%), 10560 (93.9%) left; Finishing by Sat Oct 21  6:46:35 2000

(7,8,9) <- (1,1,9).*(7, 8+0,1): 114.366341 Mflop/s
(14,8,15) <- (2,1,15).*(7, 8+0,1): 116.961046 Mflop/s

Testing m0 = 7, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 9 7 8 8 9 7 9
<<< (M = 7, K = 8, N = 9) : 114.366341
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 15 14 8 8 15 14 15
<<< (M = 14, K = 8, N = 15) : 116.961046
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 8,1) :   115.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 691 (6.1%), 10559 (93.9%) left; Finishing by Sat Oct 21  6:46:45 2000

(13,8,9) <- (0,1,9).*(13, 8+0,1): 51.179426 Mflop/s
(13,8,15) <- (1,1,15).*(13, 8+0,1): 51.475745 Mflop/s

Testing m0 = 13, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 13  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 8 9 13 8 8 9 13 9
<<< (M = 13, K = 8, N = 9) : 51.179426
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 8 15 13 8 8 15 13 15
<<< (M = 13, K = 8, N = 15) : 51.475745
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (13, 8,1) :    51.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 692 (6.2%), 10558 (93.8%) left; Finishing by Sat Oct 21  6:46:39 2000

(9,6,12) <- (9,1,0).*(1, 6+0,12): 113.546854 Mflop/s
(15,12,12) <- (15,2,1).*(1, 6+0,12): 131.937819 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 12 9 6 6 12 9 12
<<< (M = 9, K = 6, N = 12) : 113.546854
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 131.937819
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,12) :   122.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 693 (6.2%), 10557 (93.8%) left; Finishing by Sat Oct 21  6:46:50 2000

(5,14,9) <- (1,0,3).*(5, 14+0,3): 134.200552 Mflop/s
(15,14,15) <- (3,1,5).*(5, 14+0,3): 118.603057 Mflop/s

Testing m0 = 5, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 14 9 5 14 14 9 5 9
<<< (M = 5, K = 14, N = 9) : 134.200552
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 118.603057
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 14,3) :   125.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 694 (6.2%), 10556 (93.8%) left; Finishing by Sat Oct 21  6:47:00 2000

(8,11,8) <- (1,0,4).*(8, 11+0,2): 51.391500 Mflop/s
(8,11,14) <- (1,1,7).*(8, 11+0,2): 51.476673 Mflop/s

Testing m0 = 8, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 51.391500
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 14 8 11 11 14 8 14
<<< (M = 8, K = 11, N = 14) : 51.476673
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 11,2) :    51.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 695 (6.2%), 10555 (93.8%) left; Finishing by Sat Oct 21  6:46:54 2000

(9,14,9) <- (3,0,9).*(3, 14+0,1): 171.209388 Mflop/s
(15,14,15) <- (5,1,15).*(3, 14+0,1): 173.198992 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 171.209388
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 173.198992
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 14,1) :   172.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 696 (6.2%), 10554 (93.8%) left; Finishing by Sat Oct 21  6:46:47 2000

(9,6,9) <- (3,1,9).*(3, 6+0,1): 114.223236 Mflop/s
(15,12,15) <- (5,2,15).*(3, 6+0,1): 160.072341 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 114.223236
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 160.072341
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 6,1) :   133.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 697 (6.2%), 10553 (93.8%) left; Finishing by Sat Oct 21  6:46:41 2000

(7,15,8) <- (1,0,4).*(7, 15+0,2): 115.951434 Mflop/s
(14,15,14) <- (2,1,7).*(7, 15+0,2): 116.815978 Mflop/s

Testing m0 = 7, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 15 8 7 15 15 8 7 8
<<< (M = 7, K = 15, N = 8) : 115.951434
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 116.815978
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 15,2) :   116.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 698 (6.2%), 10552 (93.8%) left; Finishing by Sat Oct 21  6:46:51 2000

(8,8,8) <- (1,2,4).*(8, 4+0,2): 114.786688 Mflop/s
(8,12,14) <- (1,3,7).*(8, 4+0,2): 122.116561 Mflop/s

Testing m0 = 8, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 114.786688
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 14 8 12 12 14 8 14
<<< (M = 8, K = 12, N = 14) : 122.116561
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 4,2) :   118.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 699 (6.2%), 10551 (93.8%) left; Finishing by Sat Oct 21  6:46:45 2000

(8,8,7) <- (4,2,1).*(2, 4+0,7): 64.576187 Mflop/s
(14,12,14) <- (7,3,2).*(2, 4+0,7): 64.507085 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  4 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 7 8 8 8 7 8 7
<<< (M = 8, K = 8, N = 7) : 64.576187
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 64.507085
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 4,7) :    64.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 700 (6.2%), 10550 (93.8%) left; Finishing by Sat Oct 21  6:46:39 2000

(16,13,9) <- (0,0,9).*(16, 13+0,1): 131.066787 Mflop/s
(16,13,15) <- (0,1,15).*(16, 13+0,1): 130.774963 Mflop/s

Testing m0 = 16, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 16  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 13 9 16 13 13 9 16 9
<<< (M = 16, K = 13, N = 9) : 131.066787
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 13 15 16 13 13 15 16 15
<<< (M = 16, K = 13, N = 15) : 130.774963
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (16, 13,1) :   130.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 701 (6.2%), 10549 (93.8%) left; Finishing by Sat Oct 21  6:46:33 2000

(8,12,9) <- (1,0,9).*(8, 12+0,1): 98.728949 Mflop/s
(8,12,15) <- (1,1,15).*(8, 12+0,1): 99.154946 Mflop/s

Testing m0 = 8, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 98.728949
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 15 8 12 12 15 8 15
<<< (M = 8, K = 12, N = 15) : 99.154946
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8, 12,1) :    98.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 702 (6.2%), 10548 (93.8%) left; Finishing by Sat Oct 21  6:46:27 2000

(8,12,8) <- (2,0,4).*(4, 12+0,2): 58.930141 Mflop/s
(12,12,14) <- (3,1,7).*(4, 12+0,2): 76.250350 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 58.930141
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 76.250350
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 12,2) :    66.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 703 (6.2%), 10547 (93.8%) left; Finishing by Sat Oct 21  6:46:21 2000

(9,8,5) <- (3,2,1).*(3, 4+0,5): 119.391017 Mflop/s
(15,12,15) <- (5,3,3).*(3, 4+0,5): 128.567559 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  4 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 119.391017
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 128.567559
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 4,5) :   123.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 704 (6.3%), 10546 (93.7%) left; Finishing by Sat Oct 21  6:46:31 2000

(9,12,9) <- (9,0,3).*(1, 12+0,3): 141.513506 Mflop/s
(15,12,15) <- (15,1,5).*(1, 12+0,3): 142.572420 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 141.513506
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 142.572420
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,3) :   142.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 705 (6.3%), 10545 (93.7%) left; Finishing by Sat Oct 21  6:46:09 2000

(7,14,9) <- (1,0,9).*(7, 14+0,1): 129.170520 Mflop/s
(14,14,15) <- (2,1,15).*(7, 14+0,1): 132.666336 Mflop/s

Testing m0 = 7, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 14 9 7 14 14 9 7 9
<<< (M = 7, K = 14, N = 9) : 129.170520
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 132.666336
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 14,1) :   130.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 706 (6.3%), 10544 (93.7%) left; Finishing by Sat Oct 21  6:46:03 2000

(9,5,12) <- (9,1,0).*(1, 5+0,12): 109.019987 Mflop/s
(15,15,12) <- (15,3,1).*(1, 5+0,12): 136.402509 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  5 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 12 9 5 5 12 9 12
<<< (M = 9, K = 5, N = 12) : 109.019987
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 136.402509
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 5,12) :   121.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 707 (6.3%), 10543 (93.7%) left; Finishing by Sat Oct 21  6:46:13 2000

(9,12,7) <- (9,0,1).*(1, 12+0,7): 131.470426 Mflop/s
(15,12,14) <- (15,1,2).*(1, 12+0,7): 133.972645 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 7 9 12 12 7 9 7
<<< (M = 9, K = 12, N = 7) : 131.470426
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 133.972645
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,7) :   132.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 708 (6.3%), 10542 (93.7%) left; Finishing by Sat Oct 21  6:46:07 2000

(8,7,9) <- (2,1,9).*(4, 7+0,1): 134.120291 Mflop/s
(12,14,15) <- (3,2,15).*(4, 7+0,1): 178.529129 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 134.120291
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 178.529129
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 7,1) :   153.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 709 (6.3%), 10541 (93.7%) left; Finishing by Sat Oct 21  6:46:01 2000

(7,9,8) <- (1,3,4).*(7, 3+0,2): 52.800230 Mflop/s
(14,15,14) <- (2,5,7).*(7, 3+0,2): 46.286475 Mflop/s

Testing m0 = 7, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 8 7 9 9 8 7 8
<<< (M = 7, K = 9, N = 8) : 52.800230
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 46.286475
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 3,2) :    49.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 710 (6.3%), 10540 (93.7%) left; Finishing by Sat Oct 21  6:45:56 2000

(9,9,14) <- (9,9,0).*(1,1+0,14): 60.584576 Mflop/s
(15,15,14) <- (15,15,1).*(1,1+0,14): 63.529120 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1 1 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 14 9 9 9 14 9 14
<<< (M = 9, K = 9, N = 14) : 60.584576
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 63.529120
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1,1,14) :    62.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 711 (6.3%), 10539 (93.7%) left; Finishing by Sat Oct 21  6:45:50 2000

(8,15,5) <- (4,0,1).*(2, 15+0,5): 78.894781 Mflop/s
(14,15,15) <- (7,1,3).*(2, 15+0,5): 67.910698 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  15 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 5 8 15 15 5 8 5
<<< (M = 8, K = 15, N = 5) : 78.894781
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 67.910698
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 15,5) :    73.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 712 (6.3%), 10538 (93.7%) left; Finishing by Sat Oct 21  6:45:44 2000

(8,11,5) <- (4,0,1).*(2, 11+0,5): 75.775241 Mflop/s
(14,11,15) <- (7,1,3).*(2, 11+0,5): 65.502465 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  11 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 5 8 11 11 5 8 5
<<< (M = 8, K = 11, N = 5) : 75.775241
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 65.502465
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 11,5) :    70.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 713 (6.3%), 10537 (93.7%) left; Finishing by Sat Oct 21  6:45:38 2000

(8,10,8) <- (4,0,1).*(2, 10+0,8): 62.353480 Mflop/s
(14,10,8) <- (7,1,1).*(2, 10+0,8): 62.981346 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  10 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 62.353480
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 8 14 10 10 8 14 8
<<< (M = 14, K = 10, N = 8) : 62.981346
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 10,8) :    62.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 714 (6.3%), 10536 (93.7%) left; Finishing by Sat Oct 21  6:45:32 2000

(9,9,14) <- (9,1,0).*(1, 9+0,14): 123.182924 Mflop/s
(15,9,14) <- (15,1,1).*(1, 9+0,14): 123.607909 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 14 9 9 9 14 9 14
<<< (M = 9, K = 9, N = 14) : 123.182924
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 123.607909
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,14) :   123.4 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 715 (6.4%), 10535 (93.6%) left; Finishing by Sat Oct 21  6:45:26 2000

(9,8,8) <- (3,4,2).*(3, 2+0,4): 120.064362 Mflop/s
(15,14,12) <- (5,7,3).*(3, 2+0,4): 131.567529 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 120.064362
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 131.567529
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 2,4) :   125.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 716 (6.4%), 10534 (93.6%) left; Finishing by Sat Oct 21  6:45:21 2000

(9,11,8) <- (3,0,2).*(3, 11+0,4): 131.014242 Mflop/s
(15,11,12) <- (5,1,3).*(3, 11+0,4): 134.100131 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 131.014242
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 134.100131
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 11,4) :   132.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 717 (6.4%), 10533 (93.6%) left; Finishing by Sat Oct 21  6:45:30 2000

(9,6,6) <- (9,1,1).*(1, 6+0,6): 117.297955 Mflop/s
(15,12,12) <- (15,2,2).*(1, 6+0,6): 142.781446 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 6 9 6 6 6 9 6
<<< (M = 9, K = 6, N = 6) : 117.297955
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 142.781446
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,6) :   128.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 718 (6.4%), 10532 (93.6%) left; Finishing by Sat Oct 21  6:45:40 2000

(8,7,8) <- (4,1,2).*(2, 7+0,4): 69.277390 Mflop/s
(14,14,12) <- (7,2,3).*(2, 7+0,4): 71.073871 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 69.277390
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 71.073871
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 7,4) :    70.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 719 (6.4%), 10531 (93.6%) left; Finishing by Sat Oct 21  6:45:35 2000

(11,10,9) <- (0,0,9).*(11, 10+0,1): 62.640561 Mflop/s
(11,10,15) <- (1,1,15).*(11, 10+0,1): 64.712561 Mflop/s

Testing m0 = 11, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 11  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 10 9 11 10 10 9 11 9
<<< (M = 11, K = 10, N = 9) : 62.640561
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 10 15 11 10 10 15 11 15
<<< (M = 11, K = 10, N = 15) : 64.712561
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (11, 10,1) :    63.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 720 (6.4%), 10530 (93.6%) left; Finishing by Sat Oct 21  6:45:29 2000

(8,14,8) <- (4,0,1).*(2, 14+0,8): 65.661293 Mflop/s
(14,14,8) <- (7,1,1).*(2, 14+0,8): 66.213401 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  14 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 65.661293
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 8 14 14 14 8 14 8
<<< (M = 14, K = 14, N = 8) : 66.213401
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 14,8) :    65.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 721 (6.4%), 10529 (93.6%) left; Finishing by Sat Oct 21  6:45:23 2000

(6,13,8) <- (1,0,4).*(6, 13+0,2): 55.906647 Mflop/s
(12,13,14) <- (2,1,7).*(6, 13+0,2): 57.635659 Mflop/s

Testing m0 = 6, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 13 8 6 13 13 8 6 8
<<< (M = 6, K = 13, N = 8) : 55.906647
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 14 12 13 13 14 12 14
<<< (M = 12, K = 13, N = 14) : 57.635659
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 13,2) :    56.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 722 (6.4%), 10528 (93.6%) left; Finishing by Sat Oct 21  6:45:17 2000

(5,7,9) <- (1,1,3).*(5, 7+0,3): 114.132431 Mflop/s
(15,14,15) <- (3,2,5).*(5, 7+0,3): 118.254273 Mflop/s

Testing m0 = 5, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 5  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 7 9 5 7 7 9 5 9
<<< (M = 5, K = 7, N = 9) : 114.132431
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 118.254273
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (5, 7,3) :   116.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 723 (6.4%), 10527 (93.6%) left; Finishing by Sat Oct 21  6:45:27 2000

(9,11,9) <- (9,0,1).*(1, 11+0,9): 134.749379 Mflop/s
(15,11,9) <- (15,1,1).*(1, 11+0,9): 135.326071 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 134.749379
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 9 15 11 11 9 15 9
<<< (M = 15, K = 11, N = 9) : 135.326071
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,9) :   135.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 724 (6.4%), 10526 (93.6%) left; Finishing by Sat Oct 21  6:45:37 2000

(8,9,9) <- (2,1,9).*(4, 9+0,1): 153.089018 Mflop/s
(12,9,15) <- (3,1,15).*(4, 9+0,1): 157.366793 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 153.089018
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 157.366793
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 9,1) :   155.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 725 (6.4%), 10525 (93.6%) left; Finishing by Sat Oct 21  6:45:31 2000

(8,11,9) <- (4,0,9).*(2, 11+0,1): 150.384914 Mflop/s
(14,11,15) <- (7,1,15).*(2, 11+0,1): 151.958936 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 150.384914
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 151.958936
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 11,1) :   151.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 726 (6.5%), 10524 (93.5%) left; Finishing by Sat Oct 21  6:45:25 2000

(9,11,5) <- (9,0,1).*(1, 11+0,5): 134.252152 Mflop/s
(15,11,15) <- (15,1,3).*(1, 11+0,5): 139.929096 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  11 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 5 9 11 11 5 9 5
<<< (M = 9, K = 11, N = 5) : 134.252152
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 139.929096
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 11,5) :   137.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 727 (6.5%), 10523 (93.5%) left; Finishing by Sat Oct 21  6:45:35 2000

(8,8,9) <- (2,4,9).*(4, 2+0,1): 138.629210 Mflop/s
(12,14,15) <- (3,7,15).*(4, 2+0,1): 151.181856 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 138.629210
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 151.181856
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 2,1) :   144.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 728 (6.5%), 10522 (93.5%) left; Finishing by Sat Oct 21  6:45:29 2000

(9,12,15) <- (9,0,0).*(1, 12+0,15): 134.039929 Mflop/s
(15,12,15) <- (15,1,1).*(1, 12+0,15): 134.571923 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 134.039929
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 134.571923
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,15) :   134.3 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 729 (6.5%), 10521 (93.5%) left; Finishing by Sat Oct 21  6:45:24 2000

(9,12,8) <- (9,0,4).*(1, 12+0,2): 130.027402 Mflop/s
(15,12,14) <- (15,1,7).*(1, 12+0,2): 137.377077 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 130.027402
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 137.377077
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 12,2) :   133.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 730 (6.5%), 10520 (93.5%) left; Finishing by Sat Oct 21  6:45:18 2000

(9,13,9) <- (9,0,9).*(1, 13+0,1): 120.585985 Mflop/s
(15,13,15) <- (15,1,15).*(1, 13+0,1): 122.992179 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 120.585985
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 122.992179
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 13,1) :   121.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 731 (6.5%), 10519 (93.5%) left; Finishing by Sat Oct 21  6:45:12 2000

(8,7,9) <- (2,1,3).*(4, 7+0,3): 58.069816 Mflop/s
(12,14,15) <- (3,2,5).*(4, 7+0,3): 76.357761 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 58.069816
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 76.357761
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 7,3) :    66.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 732 (6.5%), 10518 (93.5%) left; Finishing by Sat Oct 21  6:45:07 2000

(9,8,8) <- (9,1,2).*(1, 8+0,4): 134.682609 Mflop/s
(15,8,12) <- (15,1,3).*(1, 8+0,4): 137.745442 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 134.682609
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 12 15 8 8 12 15 12
<<< (M = 15, K = 8, N = 12) : 137.745442
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 8,4) :   136.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 733 (6.5%), 10517 (93.5%) left; Finishing by Sat Oct 21  6:45:16 2000

(8,12,9) <- (4,0,9).*(2, 12+0,1): 160.677164 Mflop/s
(14,12,15) <- (7,1,15).*(2, 12+0,1): 160.573072 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 2  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 160.677164
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 160.573072
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (2, 12,1) :   160.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 734 (6.5%), 10516 (93.5%) left; Finishing by Sat Oct 21  6:45:11 2000

(7,9,9) <- (1,3,9).*(7, 3+0,1): 136.246784 Mflop/s
(14,15,15) <- (2,5,15).*(7, 3+0,1): 152.646836 Mflop/s

Testing m0 = 7, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 9 7 9 9 9 7 9
<<< (M = 7, K = 9, N = 9) : 136.246784
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 152.646836
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 3,1) :   144.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 735 (6.5%), 10515 (93.5%) left; Finishing by Sat Oct 21  6:45:20 2000

(8,9,9) <- (1,9,9).*(8,1+0,1): 97.483870 Mflop/s
(8,15,15) <- (1,15,15).*(8,1+0,1): 104.581684 Mflop/s

Testing m0 = 8, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 8 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 97.483870
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 15 8 15 15 15 8 15
<<< (M = 8, K = 15, N = 15) : 104.581684
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (8,1,1) :   100.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 736 (6.5%), 10514 (93.5%) left; Finishing by Sat Oct 21  6:45:30 2000

(8,15,9) <- (2,0,3).*(4, 15+0,3): 66.150565 Mflop/s
(12,15,15) <- (3,1,5).*(4, 15+0,3): 75.694770 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 4  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 66.150565
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 75.694770
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (4, 15,3) :    70.6 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 737 (6.6%), 10513 (93.4%) left; Finishing by Sat Oct 21  6:45:24 2000

(11,6,9) <- (0,1,9).*(11, 6+0,1): 59.066882 Mflop/s
(11,12,15) <- (1,2,15).*(11, 6+0,1): 67.289624 Mflop/s

Testing m0 = 11, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 11  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 6 9 11 6 6 9 11 9
<<< (M = 11, K = 6, N = 9) : 59.066882
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 15 11 12 12 15 11 15
<<< (M = 11, K = 12, N = 15) : 67.289624
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (11, 6,1) :    62.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 738 (6.6%), 10512 (93.4%) left; Finishing by Sat Oct 21  6:45:19 2000

(7,7,8) <- (1,1,4).*(7, 7+0,2): 100.603015 Mflop/s
(14,14,14) <- (2,2,7).*(7, 7+0,2): 114.506265 Mflop/s

Testing m0 = 7, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 7 8 7 7 7 8 7 8
<<< (M = 7, K = 7, N = 8) : 100.603015
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 114.506265
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 7,2) :   107.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 739 (6.6%), 10511 (93.4%) left; Finishing by Sat Oct 21  6:44:58 2000

(9,14,5) <- (3,0,1).*(3, 14+0,5): 132.553975 Mflop/s
(15,14,15) <- (5,1,3).*(3, 14+0,5): 132.397318 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  14 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 5 9 14 14 5 9 5
<<< (M = 9, K = 14, N = 5) : 132.553975
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 132.397318
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 14,5) :   132.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 740 (6.6%), 10510 (93.4%) left; Finishing by Sat Oct 21  6:45:23 2000

(9,9,8) <- (9,1,1).*(1, 9+0,8): 129.638178 Mflop/s
(15,9,8) <- (15,1,1).*(1, 9+0,8): 130.564358 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 129.638178
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 8 15 9 9 8 15 8
<<< (M = 15, K = 9, N = 8) : 130.564358
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,8) :   130.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 741 (6.6%), 10509 (93.4%) left; Finishing by Sat Oct 21  6:45:17 2000

(9,9,11) <- (9,3,0).*(1, 3+0,11): 125.607497 Mflop/s
(15,15,11) <- (15,5,1).*(1, 3+0,11): 136.225220 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  3 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 11 9 9 9 11 9 11
<<< (M = 9, K = 9, N = 11) : 125.607497
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 11 15 15 15 11 15 11
<<< (M = 15, K = 15, N = 11) : 136.225220
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 3,11) :   130.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 742 (6.6%), 10508 (93.4%) left; Finishing by Sat Oct 21  6:45:12 2000

(9,12,9) <- (3,0,9).*(3, 12+0,1): 168.716125 Mflop/s
(15,12,15) <- (5,1,15).*(3, 12+0,1): 170.224074 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 3  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 168.716125
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 170.224074
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (3, 12,1) :   169.5 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 743 (6.6%), 10507 (93.4%) left; Finishing by Sat Oct 21  6:45:06 2000

(9,9,10) <- (9,1,0).*(1, 9+0,10): 128.830887 Mflop/s
(15,9,10) <- (15,1,1).*(1, 9+0,10): 129.383446 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  9 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 10 9 9 9 10 9 10
<<< (M = 9, K = 9, N = 10) : 128.830887
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 10 15 9 9 10 15 10
<<< (M = 15, K = 9, N = 10) : 129.383446
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 9,10) :   129.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 744 (6.6%), 10506 (93.4%) left; Finishing by Sat Oct 21  6:44:45 2000

(10,13,9) <- (0,0,9).*(10, 13+0,1): 74.672379 Mflop/s
(10,13,15) <- (1,1,15).*(10, 13+0,1): 66.165802 Mflop/s

Testing m0 = 10, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 10  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 13 9 10 13 13 9 10 9
<<< (M = 10, K = 13, N = 9) : 74.672379
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 13 15 10 13 13 15 10 15
<<< (M = 10, K = 13, N = 15) : 66.165802
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (10, 13,1) :    70.2 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 745 (6.6%), 10505 (93.4%) left; Finishing by Sat Oct 21  6:44:40 2000

(7,8,8) <- (1,4,4).*(7, 2+0,2): 51.406131 Mflop/s
(14,14,14) <- (2,7,7).*(7, 2+0,2): 48.537100 Mflop/s

Testing m0 = 7, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 8 7 8 8 8 7 8
<<< (M = 7, K = 8, N = 8) : 51.406131
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 48.537100
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 2,2) :    49.9 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 746 (6.6%), 10504 (93.4%) left; Finishing by Sat Oct 21  6:44:49 2000

(7,9,8) <- (1,1,4).*(7, 9+0,2): 106.300199 Mflop/s
(14,9,14) <- (2,1,7).*(7, 9+0,2): 109.378375 Mflop/s

Testing m0 = 7, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 7  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 8 7 9 9 8 7 8
<<< (M = 7, K = 9, N = 8) : 106.300199
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 14 14 9 9 14 14 14
<<< (M = 14, K = 9, N = 14) : 109.378375
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (7, 9,2) :   107.8 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 747 (6.6%), 10503 (93.4%) left; Finishing by Sat Oct 21  6:44:59 2000

(14,11,9) <- (0,0,9).*(14, 11+0,1): 126.871182 Mflop/s
(14,11,15) <- (1,1,15).*(14, 11+0,1): 127.335740 Mflop/s

Testing m0 = 14, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 14  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 9 14 11 11 9 14 9
<<< (M = 14, K = 11, N = 9) : 126.871182
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 127.335740
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (14, 11,1) :   127.1 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 748 (6.6%), 10502 (93.4%) left; Finishing by Sat Oct 21  6:44:53 2000

(6,9,9) <- (1,1,9).*(6, 9+0,1): 136.919749 Mflop/s
(12,9,15) <- (2,1,15).*(6, 9+0,1): 139.144731 Mflop/s

Testing m0 = 6, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 6  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 9 6 9 9 9 6 9
<<< (M = 6, K = 9, N = 9) : 136.919749
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 139.144731
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (6, 9,1) :   138.0 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 749 (6.7%), 10501 (93.3%) left; Finishing by Sat Oct 21  6:45:03 2000

(9,6,14) <- (9,1,0).*(1, 6+0,14): 109.192491 Mflop/s
(15,12,14) <- (15,2,1).*(1, 6+0,14): 125.227977 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe A -l0 1  6 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 14 9 6 6 14 9 14
<<< (M = 9, K = 6, N = 14) : 109.192491
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 125.227977
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1A.CC (1, 6,14) :   116.7 MFLOPS.
Best Blocking for double.NN.1.1A.CC so far : (5, 15,1) :   186.6 MFLOPS.
Done 750 (6.7%), 10500 (93.3%) left; Finishing by Sat Oct 21  6:45:13 2000

(6,6,8) <- (1,1,4).*(6, 6+0,2): 43.970555 Mflop/s
(12,12,14) <- (2,2,7).*(6, 6+0,2): 51.517152 Mflop/s
Testing double.NN.1.1B.CC (-O1)...

Testing m0 = 6, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 6 8 6 6 6 8 6 8
<<< (M = 6, K = 6, N = 8) : 43.970555
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 51.517152
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 6,2) :    47.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (6, 6,2) :    47.4 MFLOPS.
Done 751 (6.7%), 10499 (93.3%) left; Finishing by Sat Oct 21  6:45:07 2000

(9,6,13) <- (9,1,0).*(1, 6+0,13): 107.960209 Mflop/s
(15,12,13) <- (15,2,1).*(1, 6+0,13): 124.708009 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 13 9 6 6 13 9 13
<<< (M = 9, K = 6, N = 13) : 107.960209
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 13 15 12 12 13 15 13
<<< (M = 15, K = 12, N = 13) : 124.708009
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,13) :   115.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (1, 6,13) :   115.7 MFLOPS.
Done 752 (6.7%), 10498 (93.3%) left; Finishing by Sat Oct 21  6:44:47 2000

(9,6,8) <- (9,1,1).*(1, 6+0,8): 107.101203 Mflop/s
(15,12,8) <- (15,2,1).*(1, 6+0,8): 127.294537 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 107.101203
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 8 15 12 12 8 15 8
<<< (M = 15, K = 12, N = 8) : 127.294537
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,8) :   116.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (1, 6,8) :   116.3 MFLOPS.
Done 753 (6.7%), 10497 (93.3%) left; Finishing by Sat Oct 21  6:44:56 2000

(7,8,8) <- (1,4,4).*(7, 2+0,2): 49.200541 Mflop/s
(14,14,14) <- (2,7,7).*(7, 2+0,2): 48.495734 Mflop/s

Testing m0 = 7, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 8 7 8 8 8 7 8
<<< (M = 7, K = 8, N = 8) : 49.200541
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 48.495734
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 2,2) :    48.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (1, 6,8) :   116.3 MFLOPS.
Done 754 (6.7%), 10496 (93.3%) left; Finishing by Sat Oct 21  6:44:51 2000

(8,5,8) <- (1,1,4).*(8, 5+0,2): 107.658658 Mflop/s
(8,15,14) <- (1,3,7).*(8, 5+0,2): 133.769631 Mflop/s

Testing m0 = 8, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 8 8 5 5 8 8 8
<<< (M = 8, K = 5, N = 8) : 107.658658
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 14 8 15 15 14 8 14
<<< (M = 8, K = 15, N = 14) : 133.769631
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 5,2) :   119.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (8, 5,2) :   119.3 MFLOPS.
Done 755 (6.7%), 10495 (93.3%) left; Finishing by Sat Oct 21  6:44:45 2000

(5,9,9) <- (1,1,3).*(5, 9+0,3): 113.873649 Mflop/s
(15,9,15) <- (3,1,5).*(5, 9+0,3): 115.728054 Mflop/s

Testing m0 = 5, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 113.873649
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 115.728054
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 9,3) :   114.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (8, 5,2) :   119.3 MFLOPS.
Done 756 (6.7%), 10494 (93.3%) left; Finishing by Sat Oct 21  6:44:55 2000

(9,12,5) <- (9,0,1).*(1, 12+0,5): 131.192131 Mflop/s
(15,12,15) <- (15,1,3).*(1, 12+0,5): 134.926617 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 131.192131
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 134.926617
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,5) :   133.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (1, 12,5) :   133.0 MFLOPS.
Done 757 (6.7%), 10493 (93.3%) left; Finishing by Sat Oct 21  6:45:04 2000

(5,8,9) <- (1,4,9).*(5, 2+0,1): 135.928958 Mflop/s
(15,14,15) <- (3,7,15).*(5, 2+0,1): 151.911803 Mflop/s

Testing m0 = 5, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 135.928958
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 151.911803
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 2,1) :   143.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 758 (6.7%), 10492 (93.3%) left; Finishing by Sat Oct 21  6:45:13 2000

(9,8,8) <- (3,2,2).*(3, 4+0,4): 105.065319 Mflop/s
(15,12,12) <- (5,3,3).*(3, 4+0,4): 135.452227 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 105.065319
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 135.452227
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 4,4) :   118.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 759 (6.7%), 10491 (93.3%) left; Finishing by Sat Oct 21  6:45:08 2000

(9,8,12) <- (9,1,0).*(1, 8+0,12): 111.408423 Mflop/s
(15,8,12) <- (15,1,1).*(1, 8+0,12): 111.992006 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 12 9 8 8 12 9 12
<<< (M = 9, K = 8, N = 12) : 111.408423
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 12 15 8 8 12 15 12
<<< (M = 15, K = 8, N = 12) : 111.992006
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,12) :   111.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 760 (6.8%), 10490 (93.2%) left; Finishing by Sat Oct 21  6:45:02 2000

(5,10,8) <- (1,0,4).*(5, 10+0,2): 127.808659 Mflop/s
(15,10,14) <- (3,1,7).*(5, 10+0,2): 111.785876 Mflop/s

Testing m0 = 5, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 8 5 10 10 8 5 8
<<< (M = 5, K = 10, N = 8) : 127.808659
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 111.785876
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 10,2) :   119.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 761 (6.8%), 10489 (93.2%) left; Finishing by Sat Oct 21  6:45:12 2000

(9,13,5) <- (3,0,1).*(3, 13+0,5): 113.988136 Mflop/s
(15,13,15) <- (5,1,3).*(3, 13+0,5): 136.809002 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  13 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 5 9 13 13 5 9 5
<<< (M = 9, K = 13, N = 5) : 113.988136
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 136.809002
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 13,5) :   124.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 762 (6.8%), 10488 (93.2%) left; Finishing by Sat Oct 21  6:45:21 2000

(8,8,8) <- (2,2,2).*(4, 4+0,4): 39.852064 Mflop/s
(12,12,12) <- (3,3,3).*(4, 4+0,4): 44.899863 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 39.852064
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 12 12 12 12 12 12 12
<<< (M = 12, K = 12, N = 12) : 44.899863
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 4,4) :    42.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 763 (6.8%), 10487 (93.2%) left; Finishing by Sat Oct 21  6:45:16 2000

(9,8,8) <- (3,2,4).*(3, 4+0,2): 90.065635 Mflop/s
(15,12,14) <- (5,3,7).*(3, 4+0,2): 134.639669 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 90.065635
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 134.639669
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 4,2) :   107.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 764 (6.8%), 10486 (93.2%) left; Finishing by Sat Oct 21  6:45:10 2000

(8,9,8) <- (1,1,4).*(8, 9+0,2): 44.879860 Mflop/s
(8,9,14) <- (1,1,7).*(8, 9+0,2): 45.215912 Mflop/s

Testing m0 = 8, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 44.879860
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 14 8 9 9 14 8 14
<<< (M = 8, K = 9, N = 14) : 45.215912
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 9,2) :    45.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 765 (6.8%), 10485 (93.2%) left; Finishing by Sat Oct 21  6:45:05 2000

(9,11,7) <- (9,0,1).*(1, 11+0,7): 40.369226 Mflop/s
(15,11,14) <- (15,1,2).*(1, 11+0,7): 42.908853 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 7 9 11 11 7 9 7
<<< (M = 9, K = 11, N = 7) : 40.369226
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 42.908853
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,7) :    41.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 766 (6.8%), 10484 (93.2%) left; Finishing by Sat Oct 21  6:44:59 2000

(15,9,9) <- (0,9,9).*(15,1+0,1): 94.585476 Mflop/s
(15,15,15) <- (1,15,15).*(15,1+0,1): 103.037854 Mflop/s

Testing m0 = 15, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 15 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 9 15 9 9 9 15 9
<<< (M = 15, K = 9, N = 9) : 94.585476
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 103.037854
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (15,1,1) :    98.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 767 (6.8%), 10483 (93.2%) left; Finishing by Sat Oct 21  6:44:54 2000

(5,5,8) <- (1,1,4).*(5, 5+0,2): 101.412143 Mflop/s
(15,15,14) <- (3,3,7).*(5, 5+0,2): 116.865312 Mflop/s

Testing m0 = 5, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 5 8 5 5 5 8 5 8
<<< (M = 5, K = 5, N = 8) : 101.412143
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 116.865312
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 5,2) :   108.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 768 (6.8%), 10482 (93.2%) left; Finishing by Sat Oct 21  6:44:49 2000

(9,9,9) <- (9,9,3).*(1,1+0,3): 112.301451 Mflop/s
(15,15,15) <- (15,15,5).*(1,1+0,3): 130.209037 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 112.301451
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 130.209037
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,3) :   120.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 769 (6.8%), 10481 (93.2%) left; Finishing by Sat Oct 21  6:44:43 2000

(9,8,9) <- (3,2,3).*(3, 4+0,3): 98.520083 Mflop/s
(15,12,15) <- (5,3,5).*(3, 4+0,3): 136.104222 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 98.520083
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 136.104222
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 4,3) :   114.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 770 (6.8%), 10480 (93.2%) left; Finishing by Sat Oct 21  6:44:53 2000

(8,7,8) <- (2,1,4).*(4, 7+0,2): 62.405294 Mflop/s
(12,14,14) <- (3,2,7).*(4, 7+0,2): 69.349274 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 62.405294
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 69.349274
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 7,2) :    65.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 771 (6.9%), 10479 (93.1%) left; Finishing by Sat Oct 21  6:44:47 2000

(9,9,8) <- (9,1,1).*(1, 9+0,8): 118.882061 Mflop/s
(15,9,8) <- (15,1,1).*(1, 9+0,8): 119.927273 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 118.882061
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 8 15 9 9 8 15 8
<<< (M = 15, K = 9, N = 8) : 119.927273
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,8) :   119.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 772 (6.9%), 10478 (93.1%) left; Finishing by Sat Oct 21  6:44:57 2000

(8,14,9) <- (1,0,9).*(8, 14+0,1): 97.854794 Mflop/s
(8,14,15) <- (1,1,15).*(8, 14+0,1): 97.933212 Mflop/s

Testing m0 = 8, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 97.854794
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 15 8 14 14 15 8 15
<<< (M = 8, K = 14, N = 15) : 97.933212
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 14,1) :    97.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 773 (6.9%), 10477 (93.1%) left; Finishing by Sat Oct 21  6:44:51 2000

(13,11,9) <- (0,0,9).*(13, 11+0,1): 54.940586 Mflop/s
(13,11,15) <- (1,1,15).*(13, 11+0,1): 53.052327 Mflop/s

Testing m0 = 13, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 13  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 11 9 13 11 11 9 13 9
<<< (M = 13, K = 11, N = 9) : 54.940586
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 11 15 13 11 11 15 13 15
<<< (M = 13, K = 11, N = 15) : 53.052327
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (13, 11,1) :    54.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 774 (6.9%), 10476 (93.1%) left; Finishing by Sat Oct 21  6:44:46 2000

(8,8,7) <- (4,1,1).*(2, 8+0,7): 36.165604 Mflop/s
(14,8,14) <- (7,1,2).*(2, 8+0,7): 36.440554 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  8 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 7 8 8 8 7 8 7
<<< (M = 8, K = 8, N = 7) : 36.165604
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 14 14 8 8 14 14 14
<<< (M = 14, K = 8, N = 14) : 36.440554
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 8,7) :    36.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 775 (6.9%), 10475 (93.1%) left; Finishing by Sat Oct 21  6:44:41 2000

(8,8,9) <- (4,4,9).*(2, 2+0,1): 132.416614 Mflop/s
(14,14,15) <- (7,7,15).*(2, 2+0,1): 136.076595 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 132.416614
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 136.076595
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 2,1) :   134.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 2,1) :   143.5 MFLOPS.
Done 776 (6.9%), 10474 (93.1%) left; Finishing by Sat Oct 21  6:44:50 2000

(8,9,9) <- (2,3,9).*(4, 3+0,1): 148.854993 Mflop/s
(12,15,15) <- (3,5,15).*(4, 3+0,1): 181.791538 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 148.854993
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 181.791538
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 3,1) :   163.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 3,1) :   163.7 MFLOPS.
Done 777 (6.9%), 10473 (93.1%) left; Finishing by Sat Oct 21  6:44:44 2000

(8,14,9) <- (4,0,9).*(2, 14+0,1): 171.687424 Mflop/s
(14,14,15) <- (7,1,15).*(2, 14+0,1): 171.998631 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 171.687424
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 171.998631
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 14,1) :   171.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 778 (6.9%), 10472 (93.1%) left; Finishing by Sat Oct 21  6:44:54 2000

(7,8,9) <- (1,2,9).*(7, 4+0,1): 123.193268 Mflop/s
(14,12,15) <- (2,3,15).*(7, 4+0,1): 143.532265 Mflop/s

Testing m0 = 7, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 9 7 8 8 9 7 9
<<< (M = 7, K = 8, N = 9) : 123.193268
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 143.532265
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 4,1) :   132.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 779 (6.9%), 10471 (93.1%) left; Finishing by Sat Oct 21  6:45:03 2000

(9,12,8) <- (9,0,2).*(1, 12+0,4): 142.637137 Mflop/s
(15,12,12) <- (15,1,3).*(1, 12+0,4): 145.380704 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 142.637137
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 145.380704
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,4) :   144.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 780 (6.9%), 10470 (93.1%) left; Finishing by Sat Oct 21  6:44:58 2000

(12,12,9) <- (0,0,9).*(12, 12+0,1): 127.025207 Mflop/s
(12,12,15) <- (1,1,15).*(12, 12+0,1): 129.459967 Mflop/s

Testing m0 = 12, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 12  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 9 12 12 12 9 12 9
<<< (M = 12, K = 12, N = 9) : 127.025207
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 129.459967
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (12, 12,1) :   128.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 781 (6.9%), 10469 (93.1%) left; Finishing by Sat Oct 21  6:44:52 2000

(9,9,9) <- (1,9,9).*(9,1+0,1): 64.295668 Mflop/s
(9,15,15) <- (1,15,15).*(9,1+0,1): 70.201706 Mflop/s

Testing m0 = 9, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 9 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 64.295668
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 70.201706
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (9,1,1) :    67.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 782 (7.0%), 10468 (93.0%) left; Finishing by Sat Oct 21  6:44:47 2000

(8,5,7) <- (4,1,1).*(2, 5+0,7): 32.678544 Mflop/s
(14,15,14) <- (7,3,2).*(2, 5+0,7): 40.377089 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  5 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 7 8 5 5 7 8 7
<<< (M = 8, K = 5, N = 7) : 32.678544
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 40.377089
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 5,7) :    36.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 783 (7.0%), 10467 (93.0%) left; Finishing by Sat Oct 21  6:44:42 2000

(8,11,8) <- (4,0,4).*(2, 11+0,2): 143.024381 Mflop/s
(14,11,14) <- (7,1,7).*(2, 11+0,2): 142.977047 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 143.024381
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 14 14 11 11 14 14 14
<<< (M = 14, K = 11, N = 14) : 142.977047
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 11,2) :   143.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 784 (7.0%), 10466 (93.0%) left; Finishing by Sat Oct 21  6:44:36 2000

(7,15,8) <- (1,0,4).*(7, 15+0,2): 122.084845 Mflop/s
(14,15,14) <- (2,1,7).*(7, 15+0,2): 143.055749 Mflop/s

Testing m0 = 7, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 15 8 7 15 15 8 7 8
<<< (M = 7, K = 15, N = 8) : 122.084845
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 143.055749
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 15,2) :   131.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 785 (7.0%), 10465 (93.0%) left; Finishing by Sat Oct 21  6:45:00 2000

(9,5,9) <- (3,1,9).*(3, 5+0,1): 106.549361 Mflop/s
(15,15,15) <- (5,3,15).*(3, 5+0,1): 180.504559 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 9 9 5 5 9 9 9
<<< (M = 9, K = 5, N = 9) : 106.549361
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 180.504559
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 5,1) :   134.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 786 (7.0%), 10464 (93.0%) left; Finishing by Sat Oct 21  6:45:09 2000

(8,5,9) <- (2,1,3).*(4, 5+0,3): 38.139307 Mflop/s
(12,15,15) <- (3,3,5).*(4, 5+0,3): 49.488255 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 9 8 5 5 9 8 9
<<< (M = 8, K = 5, N = 9) : 38.139307
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 49.488255
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 5,3) :    43.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 787 (7.0%), 10463 (93.0%) left; Finishing by Sat Oct 21  6:44:49 2000

(9,9,16) <- (9,9,0).*(1,1+0,16): 29.766371 Mflop/s
(15,15,16) <- (15,15,0).*(1,1+0,16): 28.917560 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 16 9 9 9 16 9 16
<<< (M = 9, K = 9, N = 16) : 29.766371
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 16 15 15 15 16 15 16
<<< (M = 15, K = 15, N = 16) : 28.917560
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,16) :    29.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 788 (7.0%), 10462 (93.0%) left; Finishing by Sat Oct 21  6:44:44 2000

(15,6,9) <- (0,1,9).*(15, 6+0,1): 50.825552 Mflop/s
(15,12,15) <- (1,2,15).*(15, 6+0,1): 56.454893 Mflop/s

Testing m0 = 15, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 15  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 6 9 15 6 6 9 15 9
<<< (M = 15, K = 6, N = 9) : 50.825552
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 56.454893
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (15, 6,1) :    53.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 789 (7.0%), 10461 (93.0%) left; Finishing by Sat Oct 21  6:44:39 2000

(8,15,8) <- (1,0,4).*(8, 15+0,2): 47.300428 Mflop/s
(8,15,14) <- (1,1,7).*(8, 15+0,2): 47.563903 Mflop/s

Testing m0 = 8, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 47.300428
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 14 8 15 15 14 8 14
<<< (M = 8, K = 15, N = 14) : 47.563903
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 15,2) :    47.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 790 (7.0%), 10460 (93.0%) left; Finishing by Sat Oct 21  6:44:34 2000

(9,7,9) <- (9,1,9).*(1, 7+0,1): 101.513954 Mflop/s
(15,14,15) <- (15,2,15).*(1, 7+0,1): 129.689930 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 101.513954
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 129.689930
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,1) :   113.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 791 (7.0%), 10459 (93.0%) left; Finishing by Sat Oct 21  6:44:43 2000

(7,6,8) <- (1,1,4).*(7, 6+0,2): 103.040545 Mflop/s
(14,12,14) <- (2,2,7).*(7, 6+0,2): 136.892014 Mflop/s

Testing m0 = 7, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 6 8 7 6 6 8 7 8
<<< (M = 7, K = 6, N = 8) : 103.040545
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 136.892014
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 6,2) :   117.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 792 (7.0%), 10458 (93.0%) left; Finishing by Sat Oct 21  6:44:52 2000

(14,13,9) <- (0,0,9).*(14, 13+0,1): 132.753534 Mflop/s
(14,13,15) <- (1,1,15).*(14, 13+0,1): 131.377313 Mflop/s

Testing m0 = 14, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 14  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 9 14 13 13 9 14 9
<<< (M = 14, K = 13, N = 9) : 132.753534
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 131.377313
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (14, 13,1) :   132.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 793 (7.0%), 10457 (93.0%) left; Finishing by Sat Oct 21  6:44:47 2000

(8,13,8) <- (4,0,4).*(2, 13+0,2): 147.350813 Mflop/s
(14,13,14) <- (7,1,7).*(2, 13+0,2): 152.491620 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 147.350813
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 14 14 13 13 14 14 14
<<< (M = 14, K = 13, N = 14) : 152.491620
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 13,2) :   149.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 794 (7.1%), 10456 (92.9%) left; Finishing by Sat Oct 21  6:45:10 2000

(8,9,9) <- (1,1,9).*(8, 9+0,1): 90.872626 Mflop/s
(8,9,15) <- (1,1,15).*(8, 9+0,1): 91.819773 Mflop/s

Testing m0 = 8, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 90.872626
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 15 8 9 9 15 8 15
<<< (M = 8, K = 9, N = 15) : 91.819773
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 9,1) :    91.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (2, 14,1) :   171.8 MFLOPS.
Done 795 (7.1%), 10455 (92.9%) left; Finishing by Sat Oct 21  6:45:19 2000

(5,14,9) <- (1,0,9).*(5, 14+0,1): 177.948130 Mflop/s
(15,14,15) <- (3,1,15).*(5, 14+0,1): 188.781746 Mflop/s

Testing m0 = 5, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 14 9 5 14 14 9 5 9
<<< (M = 5, K = 14, N = 9) : 177.948130
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 188.781746
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 14,1) :   183.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 796 (7.1%), 10454 (92.9%) left; Finishing by Sat Oct 21  6:45:28 2000

(9,6,9) <- (9,1,1).*(1, 6+0,9): 106.110735 Mflop/s
(15,12,9) <- (15,2,1).*(1, 6+0,9): 120.492361 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 106.110735
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 120.492361
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,9) :   112.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 797 (7.1%), 10453 (92.9%) left; Finishing by Sat Oct 21  6:45:37 2000

(9,8,9) <- (1,1,9).*(9, 8+0,1): 69.193658 Mflop/s
(9,8,15) <- (1,1,15).*(9, 8+0,1): 69.958500 Mflop/s

Testing m0 = 9, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 9  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 69.193658
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 15 9 8 8 15 9 15
<<< (M = 9, K = 8, N = 15) : 69.958500
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (9, 8,1) :    69.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 798 (7.1%), 10452 (92.9%) left; Finishing by Sat Oct 21  6:45:31 2000

(9,15,9) <- (1,0,9).*(9, 15+0,1): 112.115542 Mflop/s
(9,15,15) <- (1,1,15).*(9, 15+0,1): 112.988507 Mflop/s

Testing m0 = 9, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 9  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 112.115542
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 112.988507
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (9, 15,1) :   112.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 799 (7.1%), 10451 (92.9%) left; Finishing by Sat Oct 21  6:45:26 2000

(9,5,8) <- (9,1,4).*(1, 5+0,2): 115.692615 Mflop/s
(15,15,14) <- (15,3,7).*(1, 5+0,2): 161.360490 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 8 9 5 5 8 9 8
<<< (M = 9, K = 5, N = 8) : 115.692615
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 161.360490
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,2) :   134.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 800 (7.1%), 10450 (92.9%) left; Finishing by Sat Oct 21  6:45:21 2000

(9,14,8) <- (3,0,2).*(3, 14+0,4): 116.999557 Mflop/s
(15,14,12) <- (5,1,3).*(3, 14+0,4): 141.793498 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 116.999557
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 141.793498
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 14,4) :   128.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 801 (7.1%), 10449 (92.9%) left; Finishing by Sat Oct 21  6:45:16 2000

(6,5,9) <- (1,1,9).*(6, 5+0,1): 123.070051 Mflop/s
(12,15,15) <- (2,3,15).*(6, 5+0,1): 172.992341 Mflop/s

Testing m0 = 6, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 5 9 6 5 5 9 6 9
<<< (M = 6, K = 5, N = 9) : 123.070051
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 172.992341
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 5,1) :   143.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 802 (7.1%), 10448 (92.9%) left; Finishing by Sat Oct 21  6:45:25 2000

(9,12,8) <- (9,0,4).*(1, 12+0,2): 173.915677 Mflop/s
(15,12,14) <- (15,1,7).*(1, 12+0,2): 173.936313 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 173.915677
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 173.936313
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,2) :   173.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 803 (7.1%), 10447 (92.9%) left; Finishing by Sat Oct 21  6:45:19 2000

(8,13,8) <- (1,0,4).*(8, 13+0,2): 46.577822 Mflop/s
(8,13,14) <- (1,1,7).*(8, 13+0,2): 46.859424 Mflop/s

Testing m0 = 8, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 46.577822
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 14 8 13 13 14 8 14
<<< (M = 8, K = 13, N = 14) : 46.859424
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 13,2) :    46.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 804 (7.1%), 10446 (92.9%) left; Finishing by Sat Oct 21  6:45:28 2000

(8,9,8) <- (2,3,2).*(4, 3+0,4): 39.426240 Mflop/s
(12,15,12) <- (3,5,3).*(4, 3+0,4): 43.568436 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 39.426240
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 12 12 15 15 12 12 12
<<< (M = 12, K = 15, N = 12) : 43.568436
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 3,4) :    41.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 805 (7.2%), 10445 (92.8%) left; Finishing by Sat Oct 21  6:45:09 2000

(9,14,8) <- (3,0,4).*(3, 14+0,2): 104.187171 Mflop/s
(15,14,14) <- (5,1,7).*(3, 14+0,2): 148.205001 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 104.187171
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 148.205001
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 14,2) :   122.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 806 (7.2%), 10444 (92.8%) left; Finishing by Sat Oct 21  6:45:04 2000

(9,8,8) <- (9,4,1).*(1, 2+0,8): 71.109111 Mflop/s
(15,14,8) <- (15,7,1).*(1, 2+0,8): 74.960438 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 71.109111
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 8 15 14 14 8 15 8
<<< (M = 15, K = 14, N = 8) : 74.960438
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,8) :    73.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 807 (7.2%), 10443 (92.8%) left; Finishing by Sat Oct 21  6:44:59 2000

(9,8,7) <- (9,4,1).*(1, 2+0,7): 111.348355 Mflop/s
(15,14,14) <- (15,7,2).*(1, 2+0,7): 117.099272 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 7 9 8 8 7 9 7
<<< (M = 9, K = 8, N = 7) : 111.348355
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 117.099272
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,7) :   114.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 808 (7.2%), 10442 (92.8%) left; Finishing by Sat Oct 21  6:44:54 2000

(8,13,8) <- (4,0,2).*(2, 13+0,4): 54.489782 Mflop/s
(14,13,12) <- (7,1,3).*(2, 13+0,4): 47.129044 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 54.489782
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 12 14 13 13 12 14 12
<<< (M = 14, K = 13, N = 12) : 47.129044
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 13,4) :    50.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 809 (7.2%), 10441 (92.8%) left; Finishing by Sat Oct 21  6:44:49 2000

(9,8,5) <- (9,4,1).*(1, 2+0,5): 115.063455 Mflop/s
(15,14,15) <- (15,7,3).*(1, 2+0,5): 124.381119 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 115.063455
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 124.381119
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,5) :   119.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 810 (7.2%), 10440 (92.8%) left; Finishing by Sat Oct 21  6:44:58 2000

(9,11,9) <- (9,0,1).*(1, 11+0,9): 120.367910 Mflop/s
(15,11,9) <- (15,1,1).*(1, 11+0,9): 123.496360 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 120.367910
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 9 15 11 11 9 15 9
<<< (M = 15, K = 11, N = 9) : 123.496360
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,9) :   121.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 811 (7.2%), 10439 (92.8%) left; Finishing by Sat Oct 21  6:45:06 2000

(8,15,8) <- (2,0,2).*(4, 15+0,4): 43.167208 Mflop/s
(12,15,12) <- (3,1,3).*(4, 15+0,4): 46.981826 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 43.167208
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 12 12 15 15 12 12 12
<<< (M = 12, K = 15, N = 12) : 46.981826
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 15,4) :    45.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 812 (7.2%), 10438 (92.8%) left; Finishing by Sat Oct 21  6:45:01 2000

(13,8,9) <- (0,1,9).*(13, 8+0,1): 51.460658 Mflop/s
(13,8,15) <- (1,1,15).*(13, 8+0,1): 52.067385 Mflop/s

Testing m0 = 13, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 13  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 8 9 13 8 8 9 13 9
<<< (M = 13, K = 8, N = 9) : 51.460658
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 8 15 13 8 8 15 13 15
<<< (M = 13, K = 8, N = 15) : 52.067385
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (13, 8,1) :    51.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 813 (7.2%), 10437 (92.8%) left; Finishing by Sat Oct 21  6:44:56 2000

(8,12,8) <- (4,0,4).*(2, 12+0,2): 146.683673 Mflop/s
(14,12,14) <- (7,1,7).*(2, 12+0,2): 150.189061 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 146.683673
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 150.189061
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 12,2) :   148.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 814 (7.2%), 10436 (92.8%) left; Finishing by Sat Oct 21  6:44:51 2000

(9,11,8) <- (3,0,4).*(3, 11+0,2): 96.506831 Mflop/s
(15,11,14) <- (5,1,7).*(3, 11+0,2): 142.039497 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 96.506831
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 142.039497
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 11,2) :   114.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 815 (7.2%), 10435 (92.8%) left; Finishing by Sat Oct 21  6:44:32 2000

(8,10,8) <- (1,0,4).*(8, 10+0,2): 45.529313 Mflop/s
(8,10,14) <- (1,1,7).*(8, 10+0,2): 45.866296 Mflop/s

Testing m0 = 8, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 45.529313
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 14 8 10 10 14 8 14
<<< (M = 8, K = 10, N = 14) : 45.866296
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 10,2) :    45.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 816 (7.3%), 10434 (92.7%) left; Finishing by Sat Oct 21  6:44:27 2000

(8,8,8) <- (1,2,4).*(8, 4+0,2): 124.765123 Mflop/s
(8,12,14) <- (1,3,7).*(8, 4+0,2): 136.561669 Mflop/s

Testing m0 = 8, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 124.765123
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 14 8 12 12 14 8 14
<<< (M = 8, K = 12, N = 14) : 136.561669
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 4,2) :   130.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 817 (7.3%), 10433 (92.7%) left; Finishing by Sat Oct 21  6:44:36 2000

(8,7,7) <- (4,1,1).*(2, 7+0,7): 107.083117 Mflop/s
(14,14,14) <- (7,2,2).*(2, 7+0,7): 127.390870 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  7 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 7 8 7 7 7 8 7
<<< (M = 8, K = 7, N = 7) : 107.083117
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 127.390870
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 7,7) :   116.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 818 (7.3%), 10432 (92.7%) left; Finishing by Sat Oct 21  6:44:45 2000

(8,12,9) <- (2,0,9).*(4, 12+0,1): 166.629675 Mflop/s
(12,12,15) <- (3,1,15).*(4, 12+0,1): 172.815847 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 166.629675
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 172.815847
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 12,1) :   169.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 819 (7.3%), 10431 (92.7%) left; Finishing by Sat Oct 21  6:44:53 2000

(16,12,9) <- (0,0,9).*(16, 12+0,1): 130.331482 Mflop/s
(16,12,15) <- (0,1,15).*(16, 12+0,1): 130.803208 Mflop/s

Testing m0 = 16, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 16  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 9 16 12 12 9 16 9
<<< (M = 16, K = 12, N = 9) : 130.331482
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 15 16 12 12 15 16 15
<<< (M = 16, K = 12, N = 15) : 130.803208
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (16, 12,1) :   130.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 820 (7.3%), 10430 (92.7%) left; Finishing by Sat Oct 21  6:44:48 2000

(9,9,7) <- (9,1,1).*(1, 9+0,7): 121.034952 Mflop/s
(15,9,14) <- (15,1,2).*(1, 9+0,7): 124.142414 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 7 9 9 9 7 9 7
<<< (M = 9, K = 9, N = 7) : 121.034952
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 124.142414
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,7) :   122.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 821 (7.3%), 10429 (92.7%) left; Finishing by Sat Oct 21  6:44:57 2000

(16,9,9) <- (0,9,9).*(16,1+0,1): 47.396553 Mflop/s
(16,15,15) <- (0,15,15).*(16,1+0,1): 46.619865 Mflop/s

Testing m0 = 16, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 16 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 9 9 16 9 9 9 16 9
<<< (M = 16, K = 9, N = 9) : 47.396553
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 15 16 15 15 15 16 15
<<< (M = 16, K = 15, N = 15) : 46.619865
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (16,1,1) :    47.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 822 (7.3%), 10428 (92.7%) left; Finishing by Sat Oct 21  6:44:52 2000

(9,9,9) <- (3,3,3).*(3, 3+0,3): 101.713569 Mflop/s
(15,15,15) <- (5,5,5).*(3, 3+0,3): 135.200045 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 101.713569
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 135.200045
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 3,3) :   116.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 823 (7.3%), 10427 (92.7%) left; Finishing by Sat Oct 21  6:45:01 2000

(11,13,9) <- (0,0,9).*(11, 13+0,1): 131.443000 Mflop/s
(11,13,15) <- (1,1,15).*(11, 13+0,1): 133.190736 Mflop/s

Testing m0 = 11, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 11  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 13 9 11 13 13 9 11 9
<<< (M = 11, K = 13, N = 9) : 131.443000
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 13 15 11 13 13 15 11 15
<<< (M = 11, K = 13, N = 15) : 133.190736
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (11, 13,1) :   132.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 824 (7.3%), 10426 (92.7%) left; Finishing by Sat Oct 21  6:44:56 2000

(14,9,9) <- (0,9,9).*(14,1+0,1): 46.106479 Mflop/s
(14,15,15) <- (1,15,15).*(14,1+0,1): 50.684020 Mflop/s

Testing m0 = 14, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 14 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 9 14 9 9 9 14 9
<<< (M = 14, K = 9, N = 9) : 46.106479
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 50.684020
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (14,1,1) :    48.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 825 (7.3%), 10425 (92.7%) left; Finishing by Sat Oct 21  6:44:51 2000

(9,10,9) <- (3,0,3).*(3, 10+0,3): 102.962428 Mflop/s
(15,10,15) <- (5,1,5).*(3, 10+0,3): 134.717915 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 102.962428
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 134.717915
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 10,3) :   116.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 826 (7.3%), 10424 (92.7%) left; Finishing by Sat Oct 21  6:44:32 2000

(6,15,8) <- (1,0,4).*(6, 15+0,2): 53.786259 Mflop/s
(12,15,14) <- (2,1,7).*(6, 15+0,2): 50.235112 Mflop/s

Testing m0 = 6, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 15 8 6 15 15 8 6 8
<<< (M = 6, K = 15, N = 8) : 53.786259
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 50.235112
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 15,2) :    52.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 827 (7.4%), 10423 (92.6%) left; Finishing by Sat Oct 21  6:44:27 2000

(7,7,8) <- (1,1,4).*(7, 7+0,2): 105.990304 Mflop/s
(14,14,14) <- (2,2,7).*(7, 7+0,2): 140.549366 Mflop/s

Testing m0 = 7, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 7 8 7 7 7 8 7 8
<<< (M = 7, K = 7, N = 8) : 105.990304
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 140.549366
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 7,2) :   120.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 828 (7.4%), 10422 (92.6%) left; Finishing by Sat Oct 21  6:44:36 2000

(9,10,7) <- (9,0,1).*(1, 10+0,7): 122.253808 Mflop/s
(15,10,14) <- (15,1,2).*(1, 10+0,7): 127.962873 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 7 9 10 10 7 9 7
<<< (M = 9, K = 10, N = 7) : 122.253808
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 127.962873
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,7) :   125.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 829 (7.4%), 10421 (92.6%) left; Finishing by Sat Oct 21  6:44:44 2000

(9,6,16) <- (9,1,0).*(1, 6+0,16): 110.008404 Mflop/s
(15,12,16) <- (15,2,0).*(1, 6+0,16): 125.773846 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 16 9 6 6 16 9 16
<<< (M = 9, K = 6, N = 16) : 110.008404
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 16 15 12 12 16 15 16
<<< (M = 15, K = 12, N = 16) : 125.773846
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,16) :   117.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 830 (7.4%), 10420 (92.6%) left; Finishing by Sat Oct 21  6:44:53 2000

(8,9,9) <- (2,9,3).*(4,1+0,3): 103.459006 Mflop/s
(12,15,15) <- (3,15,5).*(4,1+0,3): 129.946649 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 103.459006
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 129.946649
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4,1,3) :   115.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 831 (7.4%), 10419 (92.6%) left; Finishing by Sat Oct 21  6:44:48 2000

(8,6,9) <- (4,1,3).*(2, 6+0,3): 60.605633 Mflop/s
(14,12,15) <- (7,2,5).*(2, 6+0,3): 62.984268 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 60.605633
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 62.984268
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 6,3) :    61.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 832 (7.4%), 10418 (92.6%) left; Finishing by Sat Oct 21  6:44:43 2000

(9,5,14) <- (9,1,0).*(1, 5+0,14): 104.412149 Mflop/s
(15,15,14) <- (15,3,1).*(1, 5+0,14): 128.959146 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 14 9 5 5 14 9 14
<<< (M = 9, K = 5, N = 14) : 104.412149
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 128.959146
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,14) :   115.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 833 (7.4%), 10417 (92.6%) left; Finishing by Sat Oct 21  6:44:38 2000

(9,6,10) <- (9,1,0).*(1, 6+0,10): 104.208636 Mflop/s
(15,12,10) <- (15,2,1).*(1, 6+0,10): 118.897316 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 10 9 6 6 10 9 10
<<< (M = 9, K = 6, N = 10) : 104.208636
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 10 15 12 12 10 15 10
<<< (M = 15, K = 12, N = 10) : 118.897316
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,10) :   111.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 834 (7.4%), 10416 (92.6%) left; Finishing by Sat Oct 21  6:44:33 2000

(9,10,10) <- (9,0,0).*(1, 10+0,10): 115.388579 Mflop/s
(15,10,10) <- (15,1,1).*(1, 10+0,10): 116.466412 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 10 9 10 10 10 9 10
<<< (M = 9, K = 10, N = 10) : 115.388579
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 10 15 10 10 10 15 10
<<< (M = 15, K = 10, N = 10) : 116.466412
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,10) :   115.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 835 (7.4%), 10415 (92.6%) left; Finishing by Sat Oct 21  6:44:28 2000

(15,8,9) <- (0,1,9).*(15, 8+0,1): 53.426032 Mflop/s
(15,8,15) <- (1,1,15).*(15, 8+0,1): 53.663099 Mflop/s

Testing m0 = 15, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 15  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 9 15 8 8 9 15 9
<<< (M = 15, K = 8, N = 9) : 53.426032
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 53.663099
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (15, 8,1) :    53.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 836 (7.4%), 10414 (92.6%) left; Finishing by Sat Oct 21  6:44:23 2000

(9,9,9) <- (3,1,9).*(3, 9+0,1): 155.567688 Mflop/s
(15,9,15) <- (5,1,15).*(3, 9+0,1): 160.504306 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 155.567688
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 160.504306
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 9,1) :   158.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 837 (7.4%), 10413 (92.6%) left; Finishing by Sat Oct 21  6:44:32 2000

(9,9,8) <- (3,9,4).*(3,1+0,2): 81.397148 Mflop/s
(15,15,14) <- (5,15,7).*(3,1+0,2): 106.941997 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 81.397148
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 106.941997
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3,1,2) :    92.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 838 (7.4%), 10412 (92.6%) left; Finishing by Sat Oct 21  6:44:27 2000

(8,13,9) <- (2,0,3).*(4, 13+0,3): 46.296729 Mflop/s
(12,13,15) <- (3,1,5).*(4, 13+0,3): 52.779026 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 46.296729
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 52.779026
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 13,3) :    49.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 839 (7.5%), 10411 (92.5%) left; Finishing by Sat Oct 21  6:44:22 2000

(9,12,8) <- (9,0,1).*(1, 12+0,8): 39.739650 Mflop/s
(15,12,8) <- (15,1,1).*(1, 12+0,8): 39.802257 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 39.739650
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 8 15 12 12 8 15 8
<<< (M = 15, K = 12, N = 8) : 39.802257
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,8) :    39.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 840 (7.5%), 10410 (92.5%) left; Finishing by Sat Oct 21  6:44:17 2000

(5,10,9) <- (1,0,3).*(5, 10+0,3): 113.538103 Mflop/s
(15,10,15) <- (3,1,5).*(5, 10+0,3): 130.373455 Mflop/s

Testing m0 = 5, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 9 5 10 10 9 5 9
<<< (M = 5, K = 10, N = 9) : 113.538103
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 130.373455
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 10,3) :   121.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 841 (7.5%), 10409 (92.5%) left; Finishing by Sat Oct 21  6:44:26 2000

(9,13,16) <- (9,0,0).*(1, 13+0,16): 123.124379 Mflop/s
(15,13,16) <- (15,1,0).*(1, 13+0,16): 124.558451 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 16 9 13 13 16 9 16
<<< (M = 9, K = 13, N = 16) : 123.124379
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 16 15 13 13 16 15 16
<<< (M = 15, K = 13, N = 16) : 124.558451
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,16) :   123.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 842 (7.5%), 10408 (92.5%) left; Finishing by Sat Oct 21  6:44:21 2000

(9,15,8) <- (9,0,2).*(1, 15+0,4): 149.776030 Mflop/s
(15,15,12) <- (15,1,3).*(1, 15+0,4): 151.733217 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 149.776030
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 151.733217
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,4) :   150.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 843 (7.5%), 10407 (92.5%) left; Finishing by Sat Oct 21  6:44:16 2000

(9,12,9) <- (1,0,9).*(9, 12+0,1): 132.022063 Mflop/s
(9,12,15) <- (1,1,15).*(9, 12+0,1): 132.424783 Mflop/s

Testing m0 = 9, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 9  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 132.022063
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 132.424783
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (9, 12,1) :   132.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 844 (7.5%), 10406 (92.5%) left; Finishing by Sat Oct 21  6:44:11 2000

(9,8,9) <- (3,4,3).*(3, 2+0,3): 98.531422 Mflop/s
(15,14,15) <- (5,7,5).*(3, 2+0,3): 126.014054 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 98.531422
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 126.014054
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 2,3) :   110.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 845 (7.5%), 10405 (92.5%) left; Finishing by Sat Oct 21  6:44:20 2000

(9,7,9) <- (1,1,9).*(9, 7+0,1): 59.946021 Mflop/s
(9,14,15) <- (1,2,15).*(9, 7+0,1): 71.072519 Mflop/s

Testing m0 = 9, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 9  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 59.946021
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 71.072519
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (9, 7,1) :    65.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 846 (7.5%), 10404 (92.5%) left; Finishing by Sat Oct 21  6:44:15 2000

(9,5,15) <- (9,1,0).*(1, 5+0,15): 101.578110 Mflop/s
(15,15,15) <- (15,3,1).*(1, 5+0,15): 125.912327 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 15 9 5 5 15 9 15
<<< (M = 9, K = 5, N = 15) : 101.578110
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 125.912327
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,15) :   112.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 847 (7.5%), 10403 (92.5%) left; Finishing by Sat Oct 21  6:44:23 2000

(9,10,6) <- (9,0,1).*(1, 10+0,6): 122.338864 Mflop/s
(15,10,12) <- (15,1,2).*(1, 10+0,6): 127.780863 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 6 9 10 10 6 9 6
<<< (M = 9, K = 10, N = 6) : 122.338864
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 127.780863
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,6) :   125.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 848 (7.5%), 10402 (92.5%) left; Finishing by Sat Oct 21  6:44:32 2000

(10,10,9) <- (0,0,9).*(10, 10+0,1): 125.604108 Mflop/s
(10,10,15) <- (1,1,15).*(10, 10+0,1): 126.623074 Mflop/s

Testing m0 = 10, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 10  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 10 9 10 10 10 9 10 9
<<< (M = 10, K = 10, N = 9) : 125.604108
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 10 15 10 10 10 15 10 15
<<< (M = 10, K = 10, N = 15) : 126.623074
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (10, 10,1) :   126.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 849 (7.5%), 10401 (92.5%) left; Finishing by Sat Oct 21  6:44:40 2000

(8,10,9) <- (1,0,9).*(8, 10+0,1): 91.665773 Mflop/s
(8,10,15) <- (1,1,15).*(8, 10+0,1): 92.327747 Mflop/s

Testing m0 = 8, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 91.665773
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 15 8 10 10 15 8 15
<<< (M = 8, K = 10, N = 15) : 92.327747
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 10,1) :    92.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 850 (7.6%), 10400 (92.4%) left; Finishing by Sat Oct 21  6:44:22 2000

(9,13,10) <- (9,0,0).*(1, 13+0,10): 120.675196 Mflop/s
(15,13,10) <- (15,1,1).*(1, 13+0,10): 121.788211 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 10 9 13 13 10 9 10
<<< (M = 9, K = 13, N = 10) : 120.675196
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 10 15 13 13 10 15 10
<<< (M = 15, K = 13, N = 10) : 121.788211
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,10) :   121.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 851 (7.6%), 10399 (92.4%) left; Finishing by Sat Oct 21  6:44:17 2000

(9,11,10) <- (9,0,0).*(1, 11+0,10): 114.321531 Mflop/s
(15,11,10) <- (15,1,1).*(1, 11+0,10): 114.979214 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 10 9 11 11 10 9 10
<<< (M = 9, K = 11, N = 10) : 114.321531
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 10 15 11 11 10 15 10
<<< (M = 15, K = 11, N = 10) : 114.979214
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,10) :   114.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 852 (7.6%), 10398 (92.4%) left; Finishing by Sat Oct 21  6:44:13 2000

(9,9,7) <- (9,9,1).*(1,1+0,7): 38.151930 Mflop/s
(15,15,14) <- (15,15,2).*(1,1+0,7): 38.940551 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 7 9 9 9 7 9 7
<<< (M = 9, K = 9, N = 7) : 38.151930
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 38.940551
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,7) :    38.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 853 (7.6%), 10397 (92.4%) left; Finishing by Sat Oct 21  6:44:08 2000

(12,9,9) <- (0,1,9).*(12, 9+0,1): 120.648621 Mflop/s
(12,9,15) <- (1,1,15).*(12, 9+0,1): 122.045776 Mflop/s

Testing m0 = 12, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 12  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 9 12 9 9 9 12 9
<<< (M = 12, K = 9, N = 9) : 120.648621
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 122.045776
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (12, 9,1) :   121.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 854 (7.6%), 10396 (92.4%) left; Finishing by Sat Oct 21  6:44:03 2000

(9,13,8) <- (9,0,1).*(1, 13+0,8): 126.649278 Mflop/s
(15,13,8) <- (15,1,1).*(1, 13+0,8): 129.200496 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 126.649278
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 8 15 13 13 8 15 8
<<< (M = 15, K = 13, N = 8) : 129.200496
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,8) :   127.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 855 (7.6%), 10395 (92.4%) left; Finishing by Sat Oct 21  6:44:25 2000

(15,11,9) <- (0,0,9).*(15, 11+0,1): 52.648684 Mflop/s
(15,11,15) <- (1,1,15).*(15, 11+0,1): 52.537178 Mflop/s

Testing m0 = 15, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 15  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 9 15 11 11 9 15 9
<<< (M = 15, K = 11, N = 9) : 52.648684
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 52.537178
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (15, 11,1) :    52.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 856 (7.6%), 10394 (92.4%) left; Finishing by Sat Oct 21  6:44:20 2000

(8,10,8) <- (4,0,2).*(2, 10+0,4): 52.854523 Mflop/s
(14,10,12) <- (7,1,3).*(2, 10+0,4): 45.467075 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 52.854523
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 12 14 10 10 12 14 12
<<< (M = 14, K = 10, N = 12) : 45.467075
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 10,4) :    48.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 857 (7.6%), 10393 (92.4%) left; Finishing by Sat Oct 21  6:44:15 2000

(9,8,8) <- (3,4,2).*(3, 2+0,4): 102.048713 Mflop/s
(15,14,12) <- (5,7,3).*(3, 2+0,4): 133.878565 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 102.048713
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 133.878565
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 2,4) :   115.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 858 (7.6%), 10392 (92.4%) left; Finishing by Sat Oct 21  6:44:10 2000

(7,6,9) <- (1,1,9).*(7, 6+0,1): 100.797810 Mflop/s
(14,12,15) <- (2,2,15).*(7, 6+0,1): 116.392121 Mflop/s

Testing m0 = 7, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 6 9 7 6 6 9 7 9
<<< (M = 7, K = 6, N = 9) : 100.797810
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 116.392121
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 6,1) :   108.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 859 (7.6%), 10391 (92.4%) left; Finishing by Sat Oct 21  6:44:19 2000

(9,8,11) <- (9,1,0).*(1, 8+0,11): 114.339354 Mflop/s
(15,8,11) <- (15,1,1).*(1, 8+0,11): 115.823036 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 11 9 8 8 11 9 11
<<< (M = 9, K = 8, N = 11) : 114.339354
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 11 15 8 8 11 15 11
<<< (M = 15, K = 8, N = 11) : 115.823036
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,11) :   115.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 860 (7.6%), 10390 (92.4%) left; Finishing by Sat Oct 21  6:44:14 2000

(14,8,9) <- (0,1,9).*(14, 8+0,1): 130.600565 Mflop/s
(14,8,15) <- (1,1,15).*(14, 8+0,1): 132.603662 Mflop/s

Testing m0 = 14, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 14  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 9 14 8 8 9 14 9
<<< (M = 14, K = 8, N = 9) : 130.600565
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 15 14 8 8 15 14 15
<<< (M = 14, K = 8, N = 15) : 132.603662
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (14, 8,1) :   131.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 861 (7.7%), 10389 (92.3%) left; Finishing by Sat Oct 21  6:44:22 2000

(16,9,9) <- (0,1,9).*(16, 9+0,1): 123.866151 Mflop/s
(16,9,15) <- (0,1,15).*(16, 9+0,1): 124.758259 Mflop/s

Testing m0 = 16, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 16  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 9 9 16 9 9 9 16 9
<<< (M = 16, K = 9, N = 9) : 123.866151
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 9 15 16 9 9 15 16 15
<<< (M = 16, K = 9, N = 15) : 124.758259
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (16, 9,1) :   124.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 862 (7.7%), 10388 (92.3%) left; Finishing by Sat Oct 21  6:44:17 2000

(9,7,9) <- (9,1,1).*(1, 7+0,9): 107.435119 Mflop/s
(15,14,9) <- (15,2,1).*(1, 7+0,9): 119.994542 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 107.435119
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 119.994542
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,9) :   113.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 863 (7.7%), 10387 (92.3%) left; Finishing by Sat Oct 21  6:44:26 2000

(8,6,9) <- (2,1,3).*(4, 6+0,3): 40.906542 Mflop/s
(12,12,15) <- (3,2,5).*(4, 6+0,3): 51.898089 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 40.906542
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 51.898089
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 6,3) :    45.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 864 (7.7%), 10386 (92.3%) left; Finishing by Sat Oct 21  6:44:21 2000

(10,14,9) <- (0,0,9).*(10, 14+0,1): 80.188321 Mflop/s
(10,14,15) <- (1,1,15).*(10, 14+0,1): 72.921914 Mflop/s

Testing m0 = 10, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 10  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 9 10 14 14 9 10 9
<<< (M = 10, K = 14, N = 9) : 80.188321
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 15 10 14 14 15 10 15
<<< (M = 10, K = 14, N = 15) : 72.921914
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (10, 14,1) :    76.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 865 (7.7%), 10385 (92.3%) left; Finishing by Sat Oct 21  6:44:29 2000

(9,5,8) <- (3,1,4).*(3, 5+0,2): 77.886743 Mflop/s
(15,15,14) <- (5,3,7).*(3, 5+0,2): 143.755488 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 8 9 5 5 8 9 8
<<< (M = 9, K = 5, N = 8) : 77.886743
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 143.755488
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 5,2) :   101.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 866 (7.7%), 10384 (92.3%) left; Finishing by Sat Oct 21  6:44:38 2000

(5,6,8) <- (1,1,4).*(5, 6+0,2): 112.425074 Mflop/s
(15,12,14) <- (3,2,7).*(5, 6+0,2): 110.964552 Mflop/s

Testing m0 = 5, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 6 8 5 6 6 8 5 8
<<< (M = 5, K = 6, N = 8) : 112.425074
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 110.964552
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 6,2) :   111.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 867 (7.7%), 10383 (92.3%) left; Finishing by Sat Oct 21  6:44:46 2000

(8,15,7) <- (4,0,1).*(2, 15+0,7): 125.429012 Mflop/s
(14,15,14) <- (7,1,2).*(2, 15+0,7): 129.199840 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  15 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 7 8 15 15 7 8 7
<<< (M = 8, K = 15, N = 7) : 125.429012
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 129.199840
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 15,7) :   127.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 868 (7.7%), 10382 (92.3%) left; Finishing by Sat Oct 21  6:44:41 2000

(9,7,5) <- (3,1,1).*(3, 7+0,5): 97.353751 Mflop/s
(15,14,15) <- (5,2,3).*(3, 7+0,5): 139.020965 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  7 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 5 9 7 7 5 9 5
<<< (M = 9, K = 7, N = 5) : 97.353751
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 139.020965
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 7,5) :   114.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 869 (7.7%), 10381 (92.3%) left; Finishing by Sat Oct 21  6:44:49 2000

(9,8,8) <- (9,4,4).*(1, 2+0,2): 141.990618 Mflop/s
(15,14,14) <- (15,7,7).*(1, 2+0,2): 140.376518 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 141.990618
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 140.376518
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,2) :   141.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 870 (7.7%), 10380 (92.3%) left; Finishing by Sat Oct 21  6:44:45 2000

(9,9,9) <- (9,1,3).*(1, 9+0,3): 139.889999 Mflop/s
(15,9,15) <- (15,1,5).*(1, 9+0,3): 146.176973 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 139.889999
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 146.176973
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,3) :   143.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 871 (7.7%), 10379 (92.3%) left; Finishing by Sat Oct 21  6:44:53 2000

(9,15,8) <- (9,0,4).*(1, 15+0,2): 178.253165 Mflop/s
(15,15,14) <- (15,1,7).*(1, 15+0,2): 180.521451 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 178.253165
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 180.521451
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,2) :   179.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 872 (7.8%), 10378 (92.2%) left; Finishing by Sat Oct 21  6:45:01 2000

(9,9,10) <- (9,3,0).*(1, 3+0,10): 112.947039 Mflop/s
(15,15,10) <- (15,5,1).*(1, 3+0,10): 122.148079 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 10 9 9 9 10 9 10
<<< (M = 9, K = 9, N = 10) : 112.947039
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 10 15 15 15 10 15 10
<<< (M = 15, K = 15, N = 10) : 122.148079
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,10) :   117.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 873 (7.8%), 10377 (92.2%) left; Finishing by Sat Oct 21  6:45:09 2000

(8,8,6) <- (4,4,1).*(2, 2+0,6): 37.371888 Mflop/s
(14,14,12) <- (7,7,2).*(2, 2+0,6): 38.178524 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  2 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 6 8 8 8 6 8 6
<<< (M = 8, K = 8, N = 6) : 37.371888
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 38.178524
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 2,6) :    37.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 874 (7.8%), 10376 (92.2%) left; Finishing by Sat Oct 21  6:44:51 2000

(9,8,9) <- (3,1,3).*(3, 8+0,3): 100.048948 Mflop/s
(15,8,15) <- (5,1,5).*(3, 8+0,3): 103.411900 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 100.048948
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 103.411900
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 8,3) :   101.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 875 (7.8%), 10375 (92.2%) left; Finishing by Sat Oct 21  6:44:47 2000

(9,5,12) <- (9,1,0).*(1, 5+0,12): 102.894378 Mflop/s
(15,15,12) <- (15,3,1).*(1, 5+0,12): 125.874434 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 12 9 5 5 12 9 12
<<< (M = 9, K = 5, N = 12) : 102.894378
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 125.874434
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,12) :   113.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 876 (7.8%), 10374 (92.2%) left; Finishing by Sat Oct 21  6:44:55 2000

(6,9,9) <- (1,9,9).*(6,1+0,1): 115.358328 Mflop/s
(12,15,15) <- (2,15,15).*(6,1+0,1): 134.363563 Mflop/s

Testing m0 = 6, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 9 6 9 9 9 6 9
<<< (M = 6, K = 9, N = 9) : 115.358328
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 134.363563
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6,1,1) :   124.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 877 (7.8%), 10373 (92.2%) left; Finishing by Sat Oct 21  6:45:03 2000

(9,10,8) <- (9,0,4).*(1, 10+0,2): 162.462831 Mflop/s
(15,10,14) <- (15,1,7).*(1, 10+0,2): 157.940731 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 162.462831
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 157.940731
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,2) :   160.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 878 (7.8%), 10372 (92.2%) left; Finishing by Sat Oct 21  6:45:11 2000

(9,15,9) <- (3,0,3).*(3, 15+0,3): 114.409009 Mflop/s
(15,15,15) <- (5,1,5).*(3, 15+0,3): 146.168314 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 114.409009
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 146.168314
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 15,3) :   128.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 879 (7.8%), 10371 (92.2%) left; Finishing by Sat Oct 21  6:44:54 2000

(10,9,9) <- (0,9,9).*(10,1+0,1): 105.838829 Mflop/s
(10,15,15) <- (1,15,15).*(10,1+0,1): 115.881148 Mflop/s

Testing m0 = 10, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 10 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 9 9 10 9 9 9 10 9
<<< (M = 10, K = 9, N = 9) : 105.838829
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 15 10 15 15 15 10 15
<<< (M = 10, K = 15, N = 15) : 115.881148
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (10,1,1) :   110.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 880 (7.8%), 10370 (92.2%) left; Finishing by Sat Oct 21  6:45:02 2000

(8,9,8) <- (4,9,2).*(2,1+0,4): 48.949817 Mflop/s
(14,15,12) <- (7,15,3).*(2,1+0,4): 43.387724 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 48.949817
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 43.387724
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2,1,4) :    46.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 881 (7.8%), 10369 (92.2%) left; Finishing by Sat Oct 21  6:44:57 2000

(8,10,9) <- (4,0,9).*(2, 10+0,1): 146.357833 Mflop/s
(14,10,15) <- (7,1,15).*(2, 10+0,1): 152.140130 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 146.357833
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 152.140130
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 10,1) :   149.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 882 (7.8%), 10368 (92.2%) left; Finishing by Sat Oct 21  6:45:05 2000

(8,9,9) <- (1,9,9).*(8,1+0,1): 101.798496 Mflop/s
(8,15,15) <- (1,15,15).*(8,1+0,1): 110.991560 Mflop/s

Testing m0 = 8, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 101.798496
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 15 8 15 15 15 8 15
<<< (M = 8, K = 15, N = 15) : 110.991560
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8,1,1) :   106.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 883 (7.8%), 10367 (92.2%) left; Finishing by Sat Oct 21  6:44:48 2000

(15,12,9) <- (0,0,9).*(15, 12+0,1): 52.876965 Mflop/s
(15,12,15) <- (1,1,15).*(15, 12+0,1): 52.958366 Mflop/s

Testing m0 = 15, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 15  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 52.876965
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 52.958366
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (15, 12,1) :    52.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 884 (7.9%), 10366 (92.1%) left; Finishing by Sat Oct 21  6:44:43 2000

(8,6,7) <- (4,1,1).*(2, 6+0,7): 35.453326 Mflop/s
(14,12,14) <- (7,2,2).*(2, 6+0,7): 37.535697 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  6 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 7 8 6 6 7 8 7
<<< (M = 8, K = 6, N = 7) : 35.453326
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 37.535697
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 6,7) :    36.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 885 (7.9%), 10365 (92.1%) left; Finishing by Sat Oct 21  6:44:38 2000

(9,11,8) <- (9,0,4).*(1, 11+0,2): 165.023000 Mflop/s
(15,11,14) <- (15,1,7).*(1, 11+0,2): 164.502559 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 165.023000
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 164.502559
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,2) :   164.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 886 (7.9%), 10364 (92.1%) left; Finishing by Sat Oct 21  6:44:46 2000

(9,8,15) <- (9,1,0).*(1, 8+0,15): 115.984430 Mflop/s
(15,8,15) <- (15,1,1).*(1, 8+0,15): 116.831947 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 15 9 8 8 15 9 15
<<< (M = 9, K = 8, N = 15) : 115.984430
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 116.831947
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,15) :   116.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 887 (7.9%), 10363 (92.1%) left; Finishing by Sat Oct 21  6:44:42 2000

(5,7,9) <- (1,1,9).*(5, 7+0,1): 140.850663 Mflop/s
(15,14,15) <- (3,2,15).*(5, 7+0,1): 182.839298 Mflop/s

Testing m0 = 5, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 7 9 5 7 7 9 5 9
<<< (M = 5, K = 7, N = 9) : 140.850663
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 182.839298
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 7,1) :   159.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 888 (7.9%), 10362 (92.1%) left; Finishing by Sat Oct 21  6:44:37 2000

(9,14,7) <- (9,0,1).*(1, 14+0,7): 132.260161 Mflop/s
(15,14,14) <- (15,1,2).*(1, 14+0,7): 134.899550 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 7 9 14 14 7 9 7
<<< (M = 9, K = 14, N = 7) : 132.260161
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 134.899550
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,7) :   133.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 889 (7.9%), 10361 (92.1%) left; Finishing by Sat Oct 21  6:44:33 2000

(9,8,8) <- (9,2,4).*(1, 4+0,2): 157.546317 Mflop/s
(15,12,14) <- (15,3,7).*(1, 4+0,2): 178.103162 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 157.546317
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 178.103162
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,2) :   167.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 890 (7.9%), 10360 (92.1%) left; Finishing by Sat Oct 21  6:44:41 2000

(8,8,9) <- (2,1,3).*(4, 8+0,3): 42.976938 Mflop/s
(12,8,15) <- (3,1,5).*(4, 8+0,3): 43.431635 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 42.976938
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 15 12 8 8 15 12 15
<<< (M = 12, K = 8, N = 15) : 43.431635
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 8,3) :    43.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 891 (7.9%), 10359 (92.1%) left; Finishing by Sat Oct 21  6:44:36 2000

(13,12,9) <- (0,0,9).*(13, 12+0,1): 55.586123 Mflop/s
(13,12,15) <- (1,1,15).*(13, 12+0,1): 53.593037 Mflop/s

Testing m0 = 13, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 13  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 9 13 12 12 9 13 9
<<< (M = 13, K = 12, N = 9) : 55.586123
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 15 13 12 12 15 13 15
<<< (M = 13, K = 12, N = 15) : 53.593037
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (13, 12,1) :    54.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 14,1) :   183.2 MFLOPS.
Done 892 (7.9%), 10358 (92.1%) left; Finishing by Sat Oct 21  6:44:31 2000

(5,15,9) <- (1,0,9).*(5, 15+0,1): 191.765562 Mflop/s
(15,15,15) <- (3,1,15).*(5, 15+0,1): 189.787469 Mflop/s

Testing m0 = 5, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 9 5 15 15 9 5 9
<<< (M = 5, K = 15, N = 9) : 191.765562
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 189.787469
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 15,1) :   190.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 893 (7.9%), 10357 (92.1%) left; Finishing by Sat Oct 21  6:44:39 2000

(16,10,9) <- (0,0,9).*(16, 10+0,1): 126.460780 Mflop/s
(16,10,15) <- (0,1,15).*(16, 10+0,1): 127.396326 Mflop/s

Testing m0 = 16, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 16  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 10 9 16 10 10 9 16 9
<<< (M = 16, K = 10, N = 9) : 126.460780
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 10 15 16 10 10 15 16 15
<<< (M = 16, K = 10, N = 15) : 127.396326
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (16, 10,1) :   126.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 894 (7.9%), 10356 (92.1%) left; Finishing by Sat Oct 21  6:44:35 2000

(8,6,8) <- (4,1,2).*(2, 6+0,4): 47.502674 Mflop/s
(14,12,12) <- (7,2,3).*(2, 6+0,4): 45.938296 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 47.502674
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 45.938296
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 6,4) :    46.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 895 (8.0%), 10355 (92.0%) left; Finishing by Sat Oct 21  6:44:30 2000

(9,13,9) <- (9,0,1).*(1, 13+0,9): 122.618434 Mflop/s
(15,13,9) <- (15,1,1).*(1, 13+0,9): 123.674028 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 122.618434
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 9 15 13 13 9 15 9
<<< (M = 15, K = 13, N = 9) : 123.674028
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,9) :   123.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 896 (8.0%), 10354 (92.0%) left; Finishing by Sat Oct 21  6:44:26 2000

(13,8,9) <- (0,4,9).*(13, 2+0,1): 52.524496 Mflop/s
(13,14,15) <- (1,7,15).*(13, 2+0,1): 56.676971 Mflop/s

Testing m0 = 13, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 13  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 8 9 13 8 8 9 13 9
<<< (M = 13, K = 8, N = 9) : 52.524496
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 15 13 14 14 15 13 15
<<< (M = 13, K = 14, N = 15) : 56.676971
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (13, 2,1) :    54.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 897 (8.0%), 10353 (92.0%) left; Finishing by Sat Oct 21  6:44:09 2000

(15,15,9) <- (0,0,9).*(15, 15+0,1): 54.683433 Mflop/s
(15,15,15) <- (1,1,15).*(15, 15+0,1): 54.595725 Mflop/s

Testing m0 = 15, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 15  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 54.683433
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 54.595725
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (15, 15,1) :    54.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 898 (8.0%), 10352 (92.0%) left; Finishing by Sat Oct 21  6:44:17 2000

(9,9,16) <- (9,3,0).*(1, 3+0,16): 118.995538 Mflop/s
(15,15,16) <- (15,5,0).*(1, 3+0,16): 129.439005 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 16 9 9 9 16 9 16
<<< (M = 9, K = 9, N = 16) : 118.995538
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 16 15 15 15 16 15 16
<<< (M = 15, K = 15, N = 16) : 129.439005
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,16) :   124.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 899 (8.0%), 10351 (92.0%) left; Finishing by Sat Oct 21  6:44:00 2000

(15,7,9) <- (0,1,9).*(15, 7+0,1): 48.260083 Mflop/s
(15,14,15) <- (1,2,15).*(15, 7+0,1): 54.198300 Mflop/s

Testing m0 = 15, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 15  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 7 9 15 7 7 9 15 9
<<< (M = 15, K = 7, N = 9) : 48.260083
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 54.198300
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (15, 7,1) :    51.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 900 (8.0%), 10350 (92.0%) left; Finishing by Sat Oct 21  6:43:55 2000

(16,11,9) <- (0,0,9).*(16, 11+0,1): 129.592006 Mflop/s
(16,11,15) <- (0,1,15).*(16, 11+0,1): 129.698773 Mflop/s

Testing m0 = 16, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 16  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 11 9 16 11 11 9 16 9
<<< (M = 16, K = 11, N = 9) : 129.592006
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 11 15 16 11 11 15 16 15
<<< (M = 16, K = 11, N = 15) : 129.698773
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (16, 11,1) :   129.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 901 (8.0%), 10349 (92.0%) left; Finishing by Sat Oct 21  6:43:50 2000

(6,8,9) <- (1,2,9).*(6, 4+0,1): 145.935004 Mflop/s
(12,12,15) <- (2,3,15).*(6, 4+0,1): 164.267534 Mflop/s

Testing m0 = 6, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 9 6 8 8 9 6 9
<<< (M = 6, K = 8, N = 9) : 145.935004
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 164.267534
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 4,1) :   154.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 902 (8.0%), 10348 (92.0%) left; Finishing by Sat Oct 21  6:43:58 2000

(13,14,9) <- (0,0,9).*(13, 14+0,1): 59.794854 Mflop/s
(13,14,15) <- (1,1,15).*(13, 14+0,1): 59.708775 Mflop/s

Testing m0 = 13, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 13  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 9 13 14 14 9 13 9
<<< (M = 13, K = 14, N = 9) : 59.794854
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 15 13 14 14 15 13 15
<<< (M = 13, K = 14, N = 15) : 59.708775
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (13, 14,1) :    59.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 903 (8.0%), 10347 (92.0%) left; Finishing by Sat Oct 21  6:43:54 2000

(9,13,8) <- (9,0,2).*(1, 13+0,4): 147.891098 Mflop/s
(15,13,12) <- (15,1,3).*(1, 13+0,4): 152.624032 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 147.891098
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 152.624032
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,4) :   150.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 904 (8.0%), 10346 (92.0%) left; Finishing by Sat Oct 21  6:43:49 2000

(9,9,8) <- (9,9,2).*(1,1+0,4): 129.295383 Mflop/s
(15,15,12) <- (15,15,3).*(1,1+0,4): 152.190683 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 129.295383
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 152.190683
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,4) :   139.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 905 (8.0%), 10345 (92.0%) left; Finishing by Sat Oct 21  6:43:57 2000

(9,12,16) <- (9,0,0).*(1, 12+0,16): 30.999614 Mflop/s
(15,12,16) <- (15,1,0).*(1, 12+0,16): 30.267098 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 16 9 12 12 16 9 16
<<< (M = 9, K = 12, N = 16) : 30.999614
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 16 15 12 12 16 15 16
<<< (M = 15, K = 12, N = 16) : 30.267098
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,16) :    30.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 906 (8.1%), 10344 (91.9%) left; Finishing by Sat Oct 21  6:43:53 2000

(7,8,9) <- (1,1,9).*(7, 8+0,1): 113.086615 Mflop/s
(14,8,15) <- (2,1,15).*(7, 8+0,1): 115.956171 Mflop/s

Testing m0 = 7, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 9 7 8 8 9 7 9
<<< (M = 7, K = 8, N = 9) : 113.086615
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 15 14 8 8 15 14 15
<<< (M = 14, K = 8, N = 15) : 115.956171
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 8,1) :   114.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 907 (8.1%), 10343 (91.9%) left; Finishing by Sat Oct 21  6:44:01 2000

(8,8,9) <- (2,2,9).*(4, 4+0,1): 135.589295 Mflop/s
(12,12,15) <- (3,3,15).*(4, 4+0,1): 157.015879 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 135.589295
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 157.015879
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 4,1) :   145.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 908 (8.1%), 10342 (91.9%) left; Finishing by Sat Oct 21  6:43:56 2000

(6,9,8) <- (1,3,4).*(6, 3+0,2): 112.590733 Mflop/s
(12,15,14) <- (2,5,7).*(6, 3+0,2): 130.926820 Mflop/s

Testing m0 = 6, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 8 6 9 9 8 6 8
<<< (M = 6, K = 9, N = 8) : 112.590733
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 130.926820
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 3,2) :   121.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 909 (8.1%), 10341 (91.9%) left; Finishing by Sat Oct 21  6:44:04 2000

(5,13,9) <- (1,0,9).*(5, 13+0,1): 170.685078 Mflop/s
(15,13,15) <- (3,1,15).*(5, 13+0,1): 178.168388 Mflop/s

Testing m0 = 5, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 13 9 5 13 13 9 5 9
<<< (M = 5, K = 13, N = 9) : 170.685078
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 178.168388
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 13,1) :   174.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 910 (8.1%), 10340 (91.9%) left; Finishing by Sat Oct 21  6:44:12 2000

(8,9,8) <- (4,9,4).*(2,1+0,2): 125.622659 Mflop/s
(14,15,14) <- (7,15,7).*(2,1+0,2): 147.587574 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 125.622659
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 147.587574
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2,1,2) :   135.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 911 (8.1%), 10339 (91.9%) left; Finishing by Sat Oct 21  6:44:08 2000

(9,7,11) <- (9,1,0).*(1, 7+0,11): 109.288074 Mflop/s
(15,14,11) <- (15,2,1).*(1, 7+0,11): 123.471972 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 11 9 7 7 11 9 11
<<< (M = 9, K = 7, N = 11) : 109.288074
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 11 15 14 14 11 15 11
<<< (M = 15, K = 14, N = 11) : 123.471972
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,11) :   115.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 912 (8.1%), 10338 (91.9%) left; Finishing by Sat Oct 21  6:44:16 2000

(9,11,8) <- (3,0,2).*(3, 11+0,4): 115.761418 Mflop/s
(15,11,12) <- (5,1,3).*(3, 11+0,4): 140.891170 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 115.761418
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 140.891170
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 11,4) :   127.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 913 (8.1%), 10337 (91.9%) left; Finishing by Sat Oct 21  6:44:11 2000

(8,15,8) <- (4,0,4).*(2, 15+0,2): 152.354581 Mflop/s
(14,15,14) <- (7,1,7).*(2, 15+0,2): 152.376887 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 152.354581
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 152.376887
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 15,2) :   152.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 914 (8.1%), 10336 (91.9%) left; Finishing by Sat Oct 21  6:44:07 2000

(8,14,6) <- (4,0,1).*(2, 14+0,6): 40.228806 Mflop/s
(14,14,12) <- (7,1,2).*(2, 14+0,6): 38.098794 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  14 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 6 8 14 14 6 8 6
<<< (M = 8, K = 14, N = 6) : 40.228806
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 38.098794
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 14,6) :    39.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 915 (8.1%), 10335 (91.9%) left; Finishing by Sat Oct 21  6:44:02 2000

(8,14,9) <- (2,0,3).*(4, 14+0,3): 46.627710 Mflop/s
(12,14,15) <- (3,1,5).*(4, 14+0,3): 53.333578 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 46.627710
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 53.333578
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 14,3) :    49.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 916 (8.1%), 10334 (91.9%) left; Finishing by Sat Oct 21  6:43:58 2000

(9,9,5) <- (3,3,1).*(3, 3+0,5): 106.753243 Mflop/s
(15,15,15) <- (5,5,3).*(3, 3+0,5): 139.366689 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  3 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 106.753243
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 139.366689
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 3,5) :   120.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 917 (8.2%), 10333 (91.8%) left; Finishing by Sat Oct 21  6:43:53 2000

(9,15,13) <- (9,0,0).*(1, 15+0,13): 34.349691 Mflop/s
(15,15,13) <- (15,1,1).*(1, 15+0,13): 35.681833 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 13 9 15 15 13 9 13
<<< (M = 9, K = 15, N = 13) : 34.349691
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 13 15 15 15 13 15 13
<<< (M = 15, K = 15, N = 13) : 35.681833
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,13) :    35.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 918 (8.2%), 10332 (91.8%) left; Finishing by Sat Oct 21  6:44:01 2000

(9,8,9) <- (9,2,9).*(1, 4+0,1): 115.274954 Mflop/s
(15,12,15) <- (15,3,15).*(1, 4+0,1): 134.904357 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 115.274954
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 134.904357
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,1) :   124.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 919 (8.2%), 10331 (91.8%) left; Finishing by Sat Oct 21  6:43:57 2000

(9,9,9) <- (9,9,9).*(1,1+0,1): 60.104489 Mflop/s
(15,15,15) <- (15,15,15).*(1,1+0,1): 73.658661 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 60.104489
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 73.658661
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,1) :    66.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 920 (8.2%), 10330 (91.8%) left; Finishing by Sat Oct 21  6:43:52 2000

(7,14,8) <- (1,0,4).*(7, 14+0,2): 123.437502 Mflop/s
(14,14,14) <- (2,1,7).*(7, 14+0,2): 143.261081 Mflop/s

Testing m0 = 7, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 14 8 7 14 14 8 7 8
<<< (M = 7, K = 14, N = 8) : 123.437502
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 143.261081
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 14,2) :   132.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 921 (8.2%), 10329 (91.8%) left; Finishing by Sat Oct 21  6:43:48 2000

(9,7,12) <- (9,1,0).*(1, 7+0,12): 111.962394 Mflop/s
(15,14,12) <- (15,2,1).*(1, 7+0,12): 121.881590 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 12 9 7 7 12 9 12
<<< (M = 9, K = 7, N = 12) : 111.962394
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 121.881590
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,12) :   116.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 922 (8.2%), 10328 (91.8%) left; Finishing by Sat Oct 21  6:43:56 2000

(7,11,9) <- (1,0,9).*(7, 11+0,1): 113.477163 Mflop/s
(14,11,15) <- (2,1,15).*(7, 11+0,1): 117.198398 Mflop/s

Testing m0 = 7, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 11 9 7 11 11 9 7 9
<<< (M = 7, K = 11, N = 9) : 113.477163
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 117.198398
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 11,1) :   115.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 923 (8.2%), 10327 (91.8%) left; Finishing by Sat Oct 21  6:44:03 2000

(9,7,8) <- (9,1,4).*(1, 7+0,2): 139.117657 Mflop/s
(15,14,14) <- (15,2,7).*(1, 7+0,2): 164.036656 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 139.117657
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 164.036656
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,2) :   150.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 924 (8.2%), 10326 (91.8%) left; Finishing by Sat Oct 21  6:44:11 2000

(7,8,9) <- (1,4,9).*(7, 2+0,1): 119.057351 Mflop/s
(14,14,15) <- (2,7,15).*(7, 2+0,1): 131.679177 Mflop/s

Testing m0 = 7, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 9 7 8 8 9 7 9
<<< (M = 7, K = 8, N = 9) : 119.057351
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 131.679177
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 2,1) :   125.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 925 (8.2%), 10325 (91.8%) left; Finishing by Sat Oct 21  6:44:07 2000

(9,13,8) <- (3,0,4).*(3, 13+0,2): 101.929641 Mflop/s
(15,13,14) <- (5,1,7).*(3, 13+0,2): 149.437035 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 101.929641
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 149.437035
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 13,2) :   121.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 926 (8.2%), 10324 (91.8%) left; Finishing by Sat Oct 21  6:44:02 2000

(9,11,9) <- (3,0,9).*(3, 11+0,1): 162.319852 Mflop/s
(15,11,15) <- (5,1,15).*(3, 11+0,1): 170.732155 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 162.319852
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 170.732155
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 11,1) :   166.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 927 (8.2%), 10323 (91.8%) left; Finishing by Sat Oct 21  6:44:10 2000

(9,8,9) <- (3,2,9).*(3, 4+0,1): 146.629365 Mflop/s
(15,12,15) <- (5,3,15).*(3, 4+0,1): 171.765751 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 146.629365
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 171.765751
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 4,1) :   158.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 928 (8.2%), 10322 (91.8%) left; Finishing by Sat Oct 21  6:44:06 2000

(8,8,5) <- (4,4,1).*(2, 2+0,5): 39.210945 Mflop/s
(14,14,15) <- (7,7,3).*(2, 2+0,5): 33.471013 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  2 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 5 8 8 8 5 8 5
<<< (M = 8, K = 8, N = 5) : 39.210945
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 33.471013
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 2,5) :    36.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 929 (8.3%), 10321 (91.7%) left; Finishing by Sat Oct 21  6:44:14 2000

(9,8,8) <- (9,1,4).*(1, 8+0,2): 164.357320 Mflop/s
(15,8,14) <- (15,1,7).*(1, 8+0,2): 165.174613 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 164.357320
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 14 15 8 8 14 15 14
<<< (M = 15, K = 8, N = 14) : 165.174613
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,2) :   164.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 930 (8.3%), 10320 (91.7%) left; Finishing by Sat Oct 21  6:44:21 2000

(10,9,9) <- (0,1,9).*(10, 9+0,1): 123.727399 Mflop/s
(10,9,15) <- (1,1,15).*(10, 9+0,1): 124.674868 Mflop/s

Testing m0 = 10, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 10  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 9 9 10 9 9 9 10 9
<<< (M = 10, K = 9, N = 9) : 123.727399
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 9 15 10 9 9 15 10 15
<<< (M = 10, K = 9, N = 15) : 124.674868
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (10, 9,1) :   124.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 931 (8.3%), 10319 (91.7%) left; Finishing by Sat Oct 21  6:44:17 2000

(8,8,9) <- (4,2,9).*(2, 4+0,1): 135.302057 Mflop/s
(14,12,15) <- (7,3,15).*(2, 4+0,1): 157.689948 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 135.302057
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 157.689948
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 4,1) :   145.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 932 (8.3%), 10318 (91.7%) left; Finishing by Sat Oct 21  6:44:25 2000

(6,9,8) <- (1,1,4).*(6, 9+0,2): 46.766112 Mflop/s
(12,9,14) <- (2,1,7).*(6, 9+0,2): 47.525316 Mflop/s

Testing m0 = 6, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 8 6 9 9 8 6 8
<<< (M = 6, K = 9, N = 8) : 46.766112
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 14 12 9 9 14 12 14
<<< (M = 12, K = 9, N = 14) : 47.525316
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 9,2) :    47.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 933 (8.3%), 10317 (91.7%) left; Finishing by Sat Oct 21  6:44:20 2000

(6,10,9) <- (1,0,9).*(6, 10+0,1): 160.724858 Mflop/s
(12,10,15) <- (2,1,15).*(6, 10+0,1): 167.091725 Mflop/s

Testing m0 = 6, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 10 9 6 10 10 9 6 9
<<< (M = 6, K = 10, N = 9) : 160.724858
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 167.091725
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 10,1) :   163.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 934 (8.3%), 10316 (91.7%) left; Finishing by Sat Oct 21  6:44:16 2000

(9,9,5) <- (3,1,1).*(3, 9+0,5): 105.571590 Mflop/s
(15,9,15) <- (5,1,3).*(3, 9+0,5): 111.937495 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  9 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 105.571590
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 111.937495
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 9,5) :   108.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 935 (8.3%), 10315 (91.7%) left; Finishing by Sat Oct 21  6:44:23 2000

(14,9,9) <- (0,1,9).*(14, 9+0,1): 124.574492 Mflop/s
(14,9,15) <- (1,1,15).*(14, 9+0,1): 125.939797 Mflop/s

Testing m0 = 14, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 14  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 9 14 9 9 9 14 9
<<< (M = 14, K = 9, N = 9) : 124.574492
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 125.939797
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (14, 9,1) :   125.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 936 (8.3%), 10314 (91.7%) left; Finishing by Sat Oct 21  6:44:31 2000

(9,15,7) <- (9,0,1).*(1, 15+0,7): 41.915628 Mflop/s
(15,15,14) <- (15,1,2).*(1, 15+0,7): 44.205759 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 7 9 15 15 7 9 7
<<< (M = 9, K = 15, N = 7) : 41.915628
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 44.205759
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,7) :    43.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 937 (8.3%), 10313 (91.7%) left; Finishing by Sat Oct 21  6:44:27 2000

(9,9,9) <- (9,3,3).*(1, 3+0,3): 133.741445 Mflop/s
(15,15,15) <- (15,5,5).*(1, 3+0,3): 152.205759 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 133.741445
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 152.205759
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,3) :   142.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 938 (8.3%), 10312 (91.7%) left; Finishing by Sat Oct 21  6:44:34 2000

(12,14,9) <- (0,0,9).*(12, 14+0,1): 63.068282 Mflop/s
(12,14,15) <- (1,1,15).*(12, 14+0,1): 69.289264 Mflop/s

Testing m0 = 12, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 12  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 9 12 14 14 9 12 9
<<< (M = 12, K = 14, N = 9) : 63.068282
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 69.289264
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (12, 14,1) :    66.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 939 (8.3%), 10311 (91.7%) left; Finishing by Sat Oct 21  6:44:30 2000

(9,6,8) <- (3,1,4).*(3, 6+0,2): 79.054540 Mflop/s
(15,12,14) <- (5,2,7).*(3, 6+0,2): 138.741963 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 79.054540
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 138.741963
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 6,2) :   100.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 940 (8.4%), 10310 (91.6%) left; Finishing by Sat Oct 21  6:44:26 2000

(8,5,9) <- (4,1,9).*(2, 5+0,1): 105.488920 Mflop/s
(14,15,15) <- (7,3,15).*(2, 5+0,1): 164.871651 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 9 8 5 5 9 8 9
<<< (M = 8, K = 5, N = 9) : 105.488920
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 164.871651
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 5,1) :   128.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 941 (8.4%), 10309 (91.6%) left; Finishing by Sat Oct 21  6:44:21 2000

(7,12,9) <- (1,0,9).*(7, 12+0,1): 113.493829 Mflop/s
(14,12,15) <- (2,1,15).*(7, 12+0,1): 117.107982 Mflop/s

Testing m0 = 7, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 9 7 12 12 9 7 9
<<< (M = 7, K = 12, N = 9) : 113.493829
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 117.107982
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 12,1) :   115.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 942 (8.4%), 10308 (91.6%) left; Finishing by Sat Oct 21  6:44:17 2000

(11,5,9) <- (0,1,9).*(11, 5+0,1): 58.963172 Mflop/s
(11,15,15) <- (1,3,15).*(11, 5+0,1): 72.365115 Mflop/s

Testing m0 = 11, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 11  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 5 9 11 5 5 9 11 9
<<< (M = 11, K = 5, N = 9) : 58.963172
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 15 11 15 15 15 11 15
<<< (M = 11, K = 15, N = 15) : 72.365115
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (11, 5,1) :    65.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 943 (8.4%), 10307 (91.6%) left; Finishing by Sat Oct 21  6:44:13 2000

(8,9,8) <- (4,9,1).*(2,1+0,8): 34.742699 Mflop/s
(14,15,8) <- (7,15,1).*(2,1+0,8): 36.874172 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2 1 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 34.742699
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 8 14 15 15 8 14 8
<<< (M = 14, K = 15, N = 8) : 36.874172
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2,1,8) :    35.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 944 (8.4%), 10306 (91.6%) left; Finishing by Sat Oct 21  6:44:08 2000

(11,7,9) <- (0,1,9).*(11, 7+0,1): 56.600336 Mflop/s
(11,14,15) <- (1,2,15).*(11, 7+0,1): 66.886802 Mflop/s

Testing m0 = 11, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 11  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 7 9 11 7 7 9 11 9
<<< (M = 11, K = 7, N = 9) : 56.600336
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 15 11 14 14 15 11 15
<<< (M = 11, K = 14, N = 15) : 66.886802
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (11, 7,1) :    61.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 945 (8.4%), 10305 (91.6%) left; Finishing by Sat Oct 21  6:43:52 2000

(8,8,8) <- (4,2,2).*(2, 4+0,4): 49.209089 Mflop/s
(14,12,12) <- (7,3,3).*(2, 4+0,4): 44.832076 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 49.209089
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 44.832076
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 4,4) :    46.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 946 (8.4%), 10304 (91.6%) left; Finishing by Sat Oct 21  6:43:48 2000

(9,10,11) <- (9,0,0).*(1, 10+0,11): 117.289486 Mflop/s
(15,10,11) <- (15,1,1).*(1, 10+0,11): 118.391148 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 11 9 10 10 11 9 11
<<< (M = 9, K = 10, N = 11) : 117.289486
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 11 15 10 10 11 15 11
<<< (M = 15, K = 10, N = 11) : 118.391148
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,11) :   117.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 947 (8.4%), 10303 (91.6%) left; Finishing by Sat Oct 21  6:43:43 2000

(9,6,14) <- (9,1,0).*(1, 6+0,14): 107.967342 Mflop/s
(15,12,14) <- (15,2,1).*(1, 6+0,14): 122.575150 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 14 9 6 6 14 9 14
<<< (M = 9, K = 6, N = 14) : 107.967342
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 122.575150
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,14) :   114.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 948 (8.4%), 10302 (91.6%) left; Finishing by Sat Oct 21  6:43:39 2000

(9,8,8) <- (9,4,2).*(1, 2+0,4): 129.499475 Mflop/s
(15,14,12) <- (15,7,3).*(1, 2+0,4): 137.497431 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 129.499475
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 137.497431
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,4) :   133.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 949 (8.4%), 10301 (91.6%) left; Finishing by Sat Oct 21  6:43:35 2000

(8,5,8) <- (4,1,4).*(2, 5+0,2): 114.603055 Mflop/s
(14,15,14) <- (7,3,7).*(2, 5+0,2): 152.964722 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 8 8 5 5 8 8 8
<<< (M = 8, K = 5, N = 8) : 114.603055
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 152.964722
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 5,2) :   131.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 950 (8.4%), 10300 (91.6%) left; Finishing by Sat Oct 21  6:43:43 2000

(7,13,9) <- (1,0,9).*(7, 13+0,1): 117.398851 Mflop/s
(14,13,15) <- (2,1,15).*(7, 13+0,1): 122.160069 Mflop/s

Testing m0 = 7, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 13 9 7 13 13 9 7 9
<<< (M = 7, K = 13, N = 9) : 117.398851
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 122.160069
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 13,1) :   119.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 951 (8.5%), 10299 (91.5%) left; Finishing by Sat Oct 21  6:43:50 2000

(14,10,9) <- (0,0,9).*(14, 10+0,1): 125.664494 Mflop/s
(14,10,15) <- (1,1,15).*(14, 10+0,1): 125.652371 Mflop/s

Testing m0 = 14, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 14  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 9 14 10 10 9 14 9
<<< (M = 14, K = 10, N = 9) : 125.664494
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 125.652371
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (14, 10,1) :   125.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 952 (8.5%), 10298 (91.5%) left; Finishing by Sat Oct 21  6:43:46 2000

(5,10,9) <- (1,0,9).*(5, 10+0,1): 158.322847 Mflop/s
(15,10,15) <- (3,1,15).*(5, 10+0,1): 165.127712 Mflop/s

Testing m0 = 5, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 9 5 10 10 9 5 9
<<< (M = 5, K = 10, N = 9) : 158.322847
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 165.127712
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 10,1) :   161.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 953 (8.5%), 10297 (91.5%) left; Finishing by Sat Oct 21  6:43:42 2000

(16,14,9) <- (0,0,9).*(16, 14+0,1): 144.989531 Mflop/s
(16,14,15) <- (0,1,15).*(16, 14+0,1): 147.126334 Mflop/s

Testing m0 = 16, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 16  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 9 16 14 14 9 16 9
<<< (M = 16, K = 14, N = 9) : 144.989531
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 15 16 14 14 15 16 15
<<< (M = 16, K = 14, N = 15) : 147.126334
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (16, 14,1) :   146.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 954 (8.5%), 10296 (91.5%) left; Finishing by Sat Oct 21  6:43:49 2000

(7,9,8) <- (1,3,4).*(7, 3+0,2): 44.700057 Mflop/s
(14,15,14) <- (2,5,7).*(7, 3+0,2): 46.787493 Mflop/s

Testing m0 = 7, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 8 7 9 9 8 7 8
<<< (M = 7, K = 9, N = 8) : 44.700057
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 46.787493
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 3,2) :    45.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 955 (8.5%), 10295 (91.5%) left; Finishing by Sat Oct 21  6:43:33 2000

(10,11,9) <- (0,0,9).*(10, 11+0,1): 72.304586 Mflop/s
(10,11,15) <- (1,1,15).*(10, 11+0,1): 65.273291 Mflop/s

Testing m0 = 10, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 10  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 11 9 10 11 11 9 10 9
<<< (M = 10, K = 11, N = 9) : 72.304586
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 11 15 10 11 11 15 10 15
<<< (M = 10, K = 11, N = 15) : 65.273291
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (10, 11,1) :    68.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 956 (8.5%), 10294 (91.5%) left; Finishing by Sat Oct 21  6:43:29 2000

(8,8,7) <- (4,2,1).*(2, 4+0,7): 37.888334 Mflop/s
(14,12,14) <- (7,3,2).*(2, 4+0,7): 37.395994 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  4 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 7 8 8 8 7 8 7
<<< (M = 8, K = 8, N = 7) : 37.888334
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 37.395994
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 4,7) :    37.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 957 (8.5%), 10293 (91.5%) left; Finishing by Sat Oct 21  6:43:25 2000

(9,15,16) <- (9,0,0).*(1, 15+0,16): 130.116930 Mflop/s
(15,15,16) <- (15,1,0).*(1, 15+0,16): 125.291945 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 16 9 15 15 16 9 16
<<< (M = 9, K = 15, N = 16) : 130.116930
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 16 15 15 15 16 15 16
<<< (M = 15, K = 15, N = 16) : 125.291945
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,16) :   127.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 958 (8.5%), 10292 (91.5%) left; Finishing by Sat Oct 21  6:43:20 2000

(6,11,9) <- (1,0,9).*(6, 11+0,1): 164.943033 Mflop/s
(12,11,15) <- (2,1,15).*(6, 11+0,1): 169.887241 Mflop/s

Testing m0 = 6, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 11 9 6 11 11 9 6 9
<<< (M = 6, K = 11, N = 9) : 164.943033
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 169.887241
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 11,1) :   167.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 959 (8.5%), 10291 (91.5%) left; Finishing by Sat Oct 21  6:43:28 2000

(5,13,9) <- (1,0,3).*(5, 13+0,3): 120.196152 Mflop/s
(15,13,15) <- (3,1,5).*(5, 13+0,3): 135.774947 Mflop/s

Testing m0 = 5, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 13 9 5 13 13 9 5 9
<<< (M = 5, K = 13, N = 9) : 120.196152
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 135.774947
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 13,3) :   127.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 960 (8.5%), 10290 (91.5%) left; Finishing by Sat Oct 21  6:43:35 2000

(9,8,9) <- (9,2,3).*(1, 4+0,3): 126.927217 Mflop/s
(15,12,15) <- (15,3,5).*(1, 4+0,3): 137.553354 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 126.927217
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 137.553354
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,3) :   132.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 961 (8.5%), 10289 (91.5%) left; Finishing by Sat Oct 21  6:43:43 2000

(7,15,9) <- (1,0,9).*(7, 15+0,1): 120.959005 Mflop/s
(14,15,15) <- (2,1,15).*(7, 15+0,1): 125.476460 Mflop/s

Testing m0 = 7, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 15 9 7 15 15 9 7 9
<<< (M = 7, K = 15, N = 9) : 120.959005
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 125.476460
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 15,1) :   123.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 962 (8.6%), 10288 (91.4%) left; Finishing by Sat Oct 21  6:43:39 2000

(5,9,9) <- (1,9,9).*(5,1+0,1): 115.716682 Mflop/s
(15,15,15) <- (3,15,15).*(5,1+0,1): 138.566094 Mflop/s

Testing m0 = 5, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 115.716682
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 138.566094
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5,1,1) :   126.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 963 (8.6%), 10287 (91.4%) left; Finishing by Sat Oct 21  6:43:35 2000

(8,8,8) <- (4,2,4).*(2, 4+0,2): 128.772711 Mflop/s
(14,12,14) <- (7,3,7).*(2, 4+0,2): 141.241824 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 128.772711
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 141.241824
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 4,2) :   134.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 964 (8.6%), 10286 (91.4%) left; Finishing by Sat Oct 21  6:43:42 2000

(9,14,9) <- (1,0,9).*(9, 14+0,1): 138.710495 Mflop/s
(9,14,15) <- (1,1,15).*(9, 14+0,1): 139.498267 Mflop/s

Testing m0 = 9, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 9  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 138.710495
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 139.498267
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (9, 14,1) :   139.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 965 (8.6%), 10285 (91.4%) left; Finishing by Sat Oct 21  6:43:38 2000

(8,8,5) <- (4,2,1).*(2, 4+0,5): 41.333418 Mflop/s
(14,12,15) <- (7,3,3).*(2, 4+0,5): 38.471896 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  4 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 5 8 8 8 5 8 5
<<< (M = 8, K = 8, N = 5) : 41.333418
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 38.471896
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 4,5) :    39.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 966 (8.6%), 10284 (91.4%) left; Finishing by Sat Oct 21  6:43:22 2000

(8,5,8) <- (4,1,1).*(2, 5+0,8): 33.709082 Mflop/s
(14,15,8) <- (7,3,1).*(2, 5+0,8): 40.174216 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  5 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 8 8 5 5 8 8 8
<<< (M = 8, K = 5, N = 8) : 33.709082
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 8 14 15 15 8 14 8
<<< (M = 14, K = 15, N = 8) : 40.174216
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 5,8) :    36.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 967 (8.6%), 10283 (91.4%) left; Finishing by Sat Oct 21  6:43:18 2000

(8,8,8) <- (2,1,2).*(4, 8+0,4): 39.835152 Mflop/s
(12,8,12) <- (3,1,3).*(4, 8+0,4): 40.153177 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 39.835152
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 12 12 8 8 12 12 12
<<< (M = 12, K = 8, N = 12) : 40.153177
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 8,4) :    40.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 968 (8.6%), 10282 (91.4%) left; Finishing by Sat Oct 21  6:43:14 2000

(9,6,8) <- (9,1,4).*(1, 6+0,2): 128.023417 Mflop/s
(15,12,14) <- (15,2,7).*(1, 6+0,2): 157.913386 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 128.023417
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 157.913386
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,2) :   141.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 969 (8.6%), 10281 (91.4%) left; Finishing by Sat Oct 21  6:43:21 2000

(14,5,9) <- (0,1,9).*(14, 5+0,1): 108.482564 Mflop/s
(14,15,15) <- (1,3,15).*(14, 5+0,1): 142.213961 Mflop/s

Testing m0 = 14, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 14  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 5 9 14 5 5 9 14 9
<<< (M = 14, K = 5, N = 9) : 108.482564
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 142.213961
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (14, 5,1) :   123.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 970 (8.6%), 10280 (91.4%) left; Finishing by Sat Oct 21  6:43:29 2000

(8,6,5) <- (4,1,1).*(2, 6+0,5): 39.503256 Mflop/s
(14,12,15) <- (7,2,3).*(2, 6+0,5): 38.649563 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  6 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 5 8 6 6 5 8 5
<<< (M = 8, K = 6, N = 5) : 39.503256
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 38.649563
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 6,5) :    39.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 971 (8.6%), 10279 (91.4%) left; Finishing by Sat Oct 21  6:43:13 2000

(8,8,9) <- (1,1,9).*(8, 8+0,1): 89.268579 Mflop/s
(8,8,15) <- (1,1,15).*(8, 8+0,1): 90.849875 Mflop/s

Testing m0 = 8, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 89.268579
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 15 8 8 8 15 8 15
<<< (M = 8, K = 8, N = 15) : 90.849875
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 8,1) :    90.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 972 (8.6%), 10278 (91.4%) left; Finishing by Sat Oct 21  6:43:09 2000

(8,8,8) <- (4,1,4).*(2, 8+0,2): 134.629510 Mflop/s
(14,8,14) <- (7,1,7).*(2, 8+0,2): 136.077919 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 134.629510
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 14 14 8 8 14 14 14
<<< (M = 14, K = 8, N = 14) : 136.077919
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 8,2) :   135.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 973 (8.6%), 10277 (91.4%) left; Finishing by Sat Oct 21  6:43:16 2000

(9,5,11) <- (9,1,0).*(1, 5+0,11): 100.929879 Mflop/s
(15,15,11) <- (15,3,1).*(1, 5+0,11): 122.827447 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 11 9 5 5 11 9 11
<<< (M = 9, K = 5, N = 11) : 100.929879
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 11 15 15 15 11 15 11
<<< (M = 15, K = 15, N = 11) : 122.827447
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,11) :   110.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 974 (8.7%), 10276 (91.3%) left; Finishing by Sat Oct 21  6:43:12 2000

(9,9,13) <- (9,3,0).*(1, 3+0,13): 117.810830 Mflop/s
(15,15,13) <- (15,5,1).*(1, 3+0,13): 128.006826 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 13 9 9 9 13 9 13
<<< (M = 9, K = 9, N = 13) : 117.810830
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 13 15 15 15 13 15 13
<<< (M = 15, K = 15, N = 13) : 128.006826
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,13) :   122.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 975 (8.7%), 10275 (91.3%) left; Finishing by Sat Oct 21  6:43:08 2000

(9,14,5) <- (3,0,1).*(3, 14+0,5): 115.973056 Mflop/s
(15,14,15) <- (5,1,3).*(3, 14+0,5): 139.056120 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  14 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 5 9 14 14 5 9 5
<<< (M = 9, K = 14, N = 5) : 115.973056
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 139.056120
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 14,5) :   126.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 976 (8.7%), 10274 (91.3%) left; Finishing by Sat Oct 21  6:43:15 2000

(8,9,8) <- (2,1,2).*(4, 9+0,4): 40.649981 Mflop/s
(12,9,12) <- (3,1,3).*(4, 9+0,4): 41.026789 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 40.649981
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 12 12 9 9 12 12 12
<<< (M = 12, K = 9, N = 12) : 41.026789
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 9,4) :    40.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 977 (8.7%), 10273 (91.3%) left; Finishing by Sat Oct 21  6:43:11 2000

(9,14,16) <- (9,0,0).*(1, 14+0,16): 111.615827 Mflop/s
(15,14,16) <- (15,1,0).*(1, 14+0,16): 128.614865 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 16 9 14 14 16 9 16
<<< (M = 9, K = 14, N = 16) : 111.615827
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 16 15 14 14 16 15 16
<<< (M = 15, K = 14, N = 16) : 128.614865
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,16) :   119.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 978 (8.7%), 10272 (91.3%) left; Finishing by Sat Oct 21  6:43:07 2000

(8,7,9) <- (2,1,9).*(4, 7+0,1): 134.700134 Mflop/s
(12,14,15) <- (3,2,15).*(4, 7+0,1): 173.460366 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 134.700134
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 173.460366
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 7,1) :   151.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 979 (8.7%), 10271 (91.3%) left; Finishing by Sat Oct 21  6:43:26 2000

(7,14,9) <- (1,0,9).*(7, 14+0,1): 128.943704 Mflop/s
(14,14,15) <- (2,1,15).*(7, 14+0,1): 131.739143 Mflop/s

Testing m0 = 7, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 14 9 7 14 14 9 7 9
<<< (M = 7, K = 14, N = 9) : 128.943704
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 131.739143
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 14,1) :   130.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 980 (8.7%), 10270 (91.3%) left; Finishing by Sat Oct 21  6:43:22 2000

(9,13,8) <- (3,0,2).*(3, 13+0,4): 116.739000 Mflop/s
(15,13,12) <- (5,1,3).*(3, 13+0,4): 140.626319 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 116.739000
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 140.626319
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 13,4) :   127.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 981 (8.7%), 10269 (91.3%) left; Finishing by Sat Oct 21  6:43:29 2000

(9,9,12) <- (9,3,0).*(1, 3+0,12): 113.937856 Mflop/s
(15,15,12) <- (15,5,1).*(1, 3+0,12): 122.542115 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 12 9 9 9 12 9 12
<<< (M = 9, K = 9, N = 12) : 113.937856
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 122.542115
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,12) :   118.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 982 (8.7%), 10268 (91.3%) left; Finishing by Sat Oct 21  6:43:14 2000

(9,6,9) <- (3,1,9).*(3, 6+0,1): 127.594252 Mflop/s
(15,12,15) <- (5,2,15).*(3, 6+0,1): 167.405132 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 127.594252
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 167.405132
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 6,1) :   144.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 983 (8.7%), 10267 (91.3%) left; Finishing by Sat Oct 21  6:43:21 2000

(10,8,9) <- (0,4,9).*(10, 2+0,1): 118.831770 Mflop/s
(10,14,15) <- (1,7,15).*(10, 2+0,1): 130.038758 Mflop/s

Testing m0 = 10, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 10  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 8 9 10 8 8 9 10 9
<<< (M = 10, K = 8, N = 9) : 118.831770
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 15 10 14 14 15 10 15
<<< (M = 10, K = 14, N = 15) : 130.038758
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (10, 2,1) :   124.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 984 (8.7%), 10266 (91.3%) left; Finishing by Sat Oct 21  6:43:28 2000

(14,9,9) <- (0,3,9).*(14, 3+0,1): 124.927342 Mflop/s
(14,15,15) <- (1,5,15).*(14, 3+0,1): 136.943384 Mflop/s

Testing m0 = 14, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 14  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 9 14 9 9 9 14 9
<<< (M = 14, K = 9, N = 9) : 124.927342
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 136.943384
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (14, 3,1) :   130.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 985 (8.8%), 10265 (91.2%) left; Finishing by Sat Oct 21  6:43:24 2000

(9,12,14) <- (9,0,0).*(1, 12+0,14): 125.363273 Mflop/s
(15,12,14) <- (15,1,1).*(1, 12+0,14): 98.788617 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 14 9 12 12 14 9 14
<<< (M = 9, K = 12, N = 14) : 125.363273
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 98.788617
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,14) :   110.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 986 (8.8%), 10264 (91.2%) left; Finishing by Sat Oct 21  6:43:20 2000

(15,5,9) <- (0,1,9).*(15, 5+0,1): 46.912797 Mflop/s
(15,15,15) <- (1,3,15).*(15, 5+0,1): 56.826178 Mflop/s

Testing m0 = 15, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 15  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 5 9 15 5 5 9 15 9
<<< (M = 15, K = 5, N = 9) : 46.912797
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 56.826178
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (15, 5,1) :    51.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 987 (8.8%), 10263 (91.2%) left; Finishing by Sat Oct 21  6:43:16 2000

(9,8,9) <- (9,4,9).*(1, 2+0,1): 93.692695 Mflop/s
(15,14,15) <- (15,7,15).*(1, 2+0,1): 91.079123 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 93.692695
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 91.079123
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,1) :    92.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 988 (8.8%), 10262 (91.2%) left; Finishing by Sat Oct 21  6:43:01 2000

(9,10,13) <- (9,0,0).*(1, 10+0,13): 122.698258 Mflop/s
(15,10,13) <- (15,1,1).*(1, 10+0,13): 122.984675 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 13 9 10 10 13 9 13
<<< (M = 9, K = 10, N = 13) : 122.698258
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 13 15 10 10 13 15 13
<<< (M = 15, K = 10, N = 13) : 122.984675
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,13) :   122.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 989 (8.8%), 10261 (91.2%) left; Finishing by Sat Oct 21  6:42:57 2000

(8,6,9) <- (4,1,9).*(2, 6+0,1): 121.569221 Mflop/s
(14,12,15) <- (7,2,15).*(2, 6+0,1): 157.313489 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 121.569221
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 157.313489
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 6,1) :   137.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 990 (8.8%), 10260 (91.2%) left; Finishing by Sat Oct 21  6:43:04 2000

(5,12,9) <- (1,0,9).*(5, 12+0,1): 166.414716 Mflop/s
(15,12,15) <- (3,1,15).*(5, 12+0,1): 174.218617 Mflop/s

Testing m0 = 5, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 166.414716
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 174.218617
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 12,1) :   170.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 991 (8.8%), 10259 (91.2%) left; Finishing by Sat Oct 21  6:43:00 2000

(8,6,9) <- (1,1,9).*(8, 6+0,1): 104.269069 Mflop/s
(8,12,15) <- (1,2,15).*(8, 6+0,1): 124.510300 Mflop/s

Testing m0 = 8, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 104.269069
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 15 8 12 12 15 8 15
<<< (M = 8, K = 12, N = 15) : 124.510300
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 6,1) :   113.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 992 (8.8%), 10258 (91.2%) left; Finishing by Sat Oct 21  6:43:07 2000

(11,11,9) <- (0,0,9).*(11, 11+0,1): 61.067626 Mflop/s
(11,11,15) <- (1,1,15).*(11, 11+0,1): 65.267935 Mflop/s

Testing m0 = 11, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 11  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 11 9 11 11 11 9 11 9
<<< (M = 11, K = 11, N = 9) : 61.067626
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 11 15 11 11 11 15 11 15
<<< (M = 11, K = 11, N = 15) : 65.267935
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (11, 11,1) :    63.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 993 (8.8%), 10257 (91.2%) left; Finishing by Sat Oct 21  6:43:03 2000

(8,11,7) <- (4,0,1).*(2, 11+0,7): 122.599729 Mflop/s
(14,11,14) <- (7,1,2).*(2, 11+0,7): 127.422414 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  11 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 7 8 11 11 7 8 7
<<< (M = 8, K = 11, N = 7) : 122.599729
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 14 14 11 11 14 14 14
<<< (M = 14, K = 11, N = 14) : 127.422414
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 11,7) :   125.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 994 (8.8%), 10256 (91.2%) left; Finishing by Sat Oct 21  6:43:10 2000

(5,15,8) <- (1,0,4).*(5, 15+0,2): 144.420283 Mflop/s
(15,15,14) <- (3,1,7).*(5, 15+0,2): 150.250674 Mflop/s

Testing m0 = 5, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 8 5 15 15 8 5 8
<<< (M = 5, K = 15, N = 8) : 144.420283
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 150.250674
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 15,2) :   147.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 995 (8.8%), 10255 (91.2%) left; Finishing by Sat Oct 21  6:43:18 2000

(8,5,8) <- (4,1,2).*(2, 5+0,4): 44.974778 Mflop/s
(14,15,12) <- (7,3,3).*(2, 5+0,4): 47.515058 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 8 8 5 5 8 8 8
<<< (M = 8, K = 5, N = 8) : 44.974778
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 47.515058
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 5,4) :    46.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 996 (8.9%), 10254 (91.1%) left; Finishing by Sat Oct 21  6:43:14 2000

(15,8,9) <- (0,4,9).*(15, 2+0,1): 111.971407 Mflop/s
(15,14,15) <- (1,7,15).*(15, 2+0,1): 119.861049 Mflop/s

Testing m0 = 15, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 15  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 9 15 8 8 9 15 9
<<< (M = 15, K = 8, N = 9) : 111.971407
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 119.861049
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (15, 2,1) :   115.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 997 (8.9%), 10253 (91.1%) left; Finishing by Sat Oct 21  6:42:58 2000

(14,8,9) <- (0,4,9).*(14, 2+0,1): 112.702869 Mflop/s
(14,14,15) <- (1,7,15).*(14, 2+0,1): 123.513312 Mflop/s

Testing m0 = 14, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 14  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 9 14 8 8 9 14 9
<<< (M = 14, K = 8, N = 9) : 112.702869
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 123.513312
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (14, 2,1) :   117.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 998 (8.9%), 10252 (91.1%) left; Finishing by Sat Oct 21  6:42:54 2000

(15,13,9) <- (0,0,9).*(15, 13+0,1): 54.091380 Mflop/s
(15,13,15) <- (1,1,15).*(15, 13+0,1): 53.846118 Mflop/s

Testing m0 = 15, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 15  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 9 15 13 13 9 15 9
<<< (M = 15, K = 13, N = 9) : 54.091380
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 53.846118
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (15, 13,1) :    54.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 999 (8.9%), 10251 (91.1%) left; Finishing by Sat Oct 21  6:42:50 2000

(8,15,9) <- (1,0,9).*(8, 15+0,1): 100.843258 Mflop/s
(8,15,15) <- (1,1,15).*(8, 15+0,1): 101.739810 Mflop/s

Testing m0 = 8, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 100.843258
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 15 8 15 15 15 8 15
<<< (M = 8, K = 15, N = 15) : 101.739810
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 15,1) :   101.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1000 (8.9%), 10250 (91.1%) left; Finishing by Sat Oct 21  6:42:46 2000

(8,8,9) <- (2,2,3).*(4, 4+0,3): 41.770731 Mflop/s
(12,12,15) <- (3,3,5).*(4, 4+0,3): 48.557642 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 41.770731
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 48.557642
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 4,3) :    44.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1001 (8.9%), 10249 (91.1%) left; Finishing by Sat Oct 21  6:42:42 2000

(16,15,9) <- (0,0,9).*(16, 15+0,1): 136.829300 Mflop/s
(16,15,15) <- (0,1,15).*(16, 15+0,1): 136.549076 Mflop/s

Testing m0 = 16, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 16  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 9 16 15 15 9 16 9
<<< (M = 16, K = 15, N = 9) : 136.829300
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 15 16 15 15 15 16 15
<<< (M = 16, K = 15, N = 15) : 136.549076
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (16, 15,1) :   136.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1002 (8.9%), 10248 (91.1%) left; Finishing by Sat Oct 21  6:42:38 2000

(9,9,8) <- (9,1,2).*(1, 9+0,4): 134.175752 Mflop/s
(15,9,12) <- (15,1,3).*(1, 9+0,4): 135.130515 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 134.175752
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 135.130515
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,4) :   134.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1003 (8.9%), 10247 (91.1%) left; Finishing by Sat Oct 21  6:42:34 2000

(9,9,10) <- (9,1,0).*(1, 9+0,10): 111.001632 Mflop/s
(15,9,10) <- (15,1,1).*(1, 9+0,10): 111.748422 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 10 9 9 9 10 9 10
<<< (M = 9, K = 9, N = 10) : 111.001632
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 10 15 9 9 10 15 10
<<< (M = 15, K = 9, N = 10) : 111.748422
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,10) :   111.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1004 (8.9%), 10246 (91.1%) left; Finishing by Sat Oct 21  6:42:30 2000

(7,5,9) <- (1,1,9).*(7, 5+0,1): 110.681454 Mflop/s
(14,15,15) <- (2,3,15).*(7, 5+0,1): 154.552738 Mflop/s

Testing m0 = 7, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 5 9 7 5 5 9 7 9
<<< (M = 7, K = 5, N = 9) : 110.681454
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 154.552738
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 5,1) :   129.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1005 (8.9%), 10245 (91.1%) left; Finishing by Sat Oct 21  6:42:26 2000

(5,6,9) <- (1,1,3).*(5, 6+0,3): 102.370937 Mflop/s
(15,12,15) <- (3,2,5).*(5, 6+0,3): 134.948368 Mflop/s

Testing m0 = 5, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 6 9 5 6 6 9 5 9
<<< (M = 5, K = 6, N = 9) : 102.370937
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 134.948368
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 6,3) :   116.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1006 (8.9%), 10244 (91.1%) left; Finishing by Sat Oct 21  6:42:34 2000

(8,11,8) <- (2,0,2).*(4, 11+0,4): 41.740733 Mflop/s
(12,11,12) <- (3,1,3).*(4, 11+0,4): 45.420917 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 41.740733
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 12 12 11 11 12 12 12
<<< (M = 12, K = 11, N = 12) : 45.420917
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 11,4) :    43.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1007 (9.0%), 10243 (91.0%) left; Finishing by Sat Oct 21  6:42:30 2000

(9,8,10) <- (9,1,0).*(1, 8+0,10): 108.993326 Mflop/s
(15,8,10) <- (15,1,1).*(1, 8+0,10): 109.801089 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 10 9 8 8 10 9 10
<<< (M = 9, K = 8, N = 10) : 108.993326
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 10 15 8 8 10 15 10
<<< (M = 15, K = 8, N = 10) : 109.801089
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,10) :   109.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1008 (9.0%), 10242 (91.0%) left; Finishing by Sat Oct 21  6:42:37 2000

(9,6,8) <- (3,1,2).*(3, 6+0,4): 97.466617 Mflop/s
(15,12,12) <- (5,2,3).*(3, 6+0,4): 136.457347 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 97.466617
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 136.457347
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 6,4) :   113.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1009 (9.0%), 10241 (91.0%) left; Finishing by Sat Oct 21  6:42:44 2000

(13,13,9) <- (0,0,9).*(13, 13+0,1): 56.178185 Mflop/s
(13,13,15) <- (1,1,15).*(13, 13+0,1): 53.800301 Mflop/s

Testing m0 = 13, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 13  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 13 9 13 13 13 9 13 9
<<< (M = 13, K = 13, N = 9) : 56.178185
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 13 15 13 13 13 15 13 15
<<< (M = 13, K = 13, N = 15) : 53.800301
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (13, 13,1) :    55.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1010 (9.0%), 10240 (91.0%) left; Finishing by Sat Oct 21  6:42:40 2000

(8,12,8) <- (4,0,2).*(2, 12+0,4): 53.716529 Mflop/s
(14,12,12) <- (7,1,3).*(2, 12+0,4): 46.484531 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 53.716529
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 46.484531
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 12,4) :    49.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1011 (9.0%), 10239 (91.0%) left; Finishing by Sat Oct 21  6:42:36 2000

(9,11,9) <- (9,0,3).*(1, 11+0,3): 144.887558 Mflop/s
(15,11,15) <- (15,1,5).*(1, 11+0,3): 148.131243 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 144.887558
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 148.131243
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,3) :   146.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1012 (9.0%), 10238 (91.0%) left; Finishing by Sat Oct 21  6:42:43 2000

(11,9,9) <- (0,3,9).*(11, 3+0,1): 64.934909 Mflop/s
(11,15,15) <- (1,5,15).*(11, 3+0,1): 71.388935 Mflop/s

Testing m0 = 11, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 11  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 9 9 11 9 9 9 11 9
<<< (M = 11, K = 9, N = 9) : 64.934909
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 15 11 15 15 15 11 15
<<< (M = 11, K = 15, N = 15) : 71.388935
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (11, 3,1) :    68.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1013 (9.0%), 10237 (91.0%) left; Finishing by Sat Oct 21  6:42:39 2000

(10,15,9) <- (0,0,9).*(10, 15+0,1): 76.303438 Mflop/s
(10,15,15) <- (1,1,15).*(10, 15+0,1): 62.669389 Mflop/s

Testing m0 = 10, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 10  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 9 10 15 15 9 10 9
<<< (M = 10, K = 15, N = 9) : 76.303438
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 15 10 15 15 15 10 15
<<< (M = 10, K = 15, N = 15) : 62.669389
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (10, 15,1) :    68.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1014 (9.0%), 10236 (91.0%) left; Finishing by Sat Oct 21  6:42:35 2000

(9,11,5) <- (9,0,1).*(1, 11+0,5): 126.554537 Mflop/s
(15,11,15) <- (15,1,3).*(1, 11+0,5): 133.627193 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 5 9 11 11 5 9 5
<<< (M = 9, K = 11, N = 5) : 126.554537
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 133.627193
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,5) :   130.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1015 (9.0%), 10235 (91.0%) left; Finishing by Sat Oct 21  6:42:32 2000

(9,9,6) <- (9,9,1).*(1,1+0,6): 45.747595 Mflop/s
(15,15,12) <- (15,15,2).*(1,1+0,6): 50.177115 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 6 9 9 9 6 9 6
<<< (M = 9, K = 9, N = 6) : 45.747595
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 50.177115
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,6) :    47.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1016 (9.0%), 10234 (91.0%) left; Finishing by Sat Oct 21  6:42:28 2000

(5,9,9) <- (1,3,3).*(5, 3+0,3): 113.477886 Mflop/s
(15,15,15) <- (3,5,5).*(5, 3+0,3): 135.140224 Mflop/s

Testing m0 = 5, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 113.477886
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 135.140224
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 3,3) :   123.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1017 (9.0%), 10233 (91.0%) left; Finishing by Sat Oct 21  6:42:35 2000

(10,8,9) <- (0,1,9).*(10, 8+0,1): 118.184215 Mflop/s
(10,8,15) <- (1,1,15).*(10, 8+0,1): 118.950353 Mflop/s

Testing m0 = 10, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 10  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 8 9 10 8 8 9 10 9
<<< (M = 10, K = 8, N = 9) : 118.184215
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 8 15 10 8 8 15 10 15
<<< (M = 10, K = 8, N = 15) : 118.950353
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (10, 8,1) :   118.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1018 (9.0%), 10232 (91.0%) left; Finishing by Sat Oct 21  6:42:31 2000

(9,12,9) <- (3,0,3).*(3, 12+0,3): 112.414643 Mflop/s
(15,12,15) <- (5,1,5).*(3, 12+0,3): 143.088223 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 112.414643
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 143.088223
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 12,3) :   125.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1019 (9.1%), 10231 (90.9%) left; Finishing by Sat Oct 21  6:42:27 2000

(9,10,9) <- (1,0,9).*(9, 10+0,1): 124.559679 Mflop/s
(9,10,15) <- (1,1,15).*(9, 10+0,1): 124.798085 Mflop/s

Testing m0 = 9, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 9  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 124.559679
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 15 9 10 10 15 9 15
<<< (M = 9, K = 10, N = 15) : 124.798085
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (9, 10,1) :   124.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1020 (9.1%), 10230 (90.9%) left; Finishing by Sat Oct 21  6:42:34 2000

(7,13,8) <- (1,0,4).*(7, 13+0,2): 117.241652 Mflop/s
(14,13,14) <- (2,1,7).*(7, 13+0,2): 141.538985 Mflop/s

Testing m0 = 7, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 13 8 7 13 13 8 7 8
<<< (M = 7, K = 13, N = 8) : 117.241652
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 14 14 13 13 14 14 14
<<< (M = 14, K = 13, N = 14) : 141.538985
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 13,2) :   128.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1021 (9.1%), 10229 (90.9%) left; Finishing by Sat Oct 21  6:42:41 2000

(9,8,9) <- (9,2,1).*(1, 4+0,9): 109.965987 Mflop/s
(15,12,9) <- (15,3,1).*(1, 4+0,9): 121.457225 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 109.965987
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 121.457225
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,9) :   115.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1022 (9.1%), 10228 (90.9%) left; Finishing by Sat Oct 21  6:42:37 2000

(8,8,9) <- (1,2,9).*(8, 4+0,1): 129.188811 Mflop/s
(8,12,15) <- (1,3,15).*(8, 4+0,1): 140.729694 Mflop/s

Testing m0 = 8, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 129.188811
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 15 8 12 12 15 8 15
<<< (M = 8, K = 12, N = 15) : 140.729694
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 4,1) :   134.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1023 (9.1%), 10227 (90.9%) left; Finishing by Sat Oct 21  6:42:44 2000

(8,15,9) <- (4,0,3).*(2, 15+0,3): 71.191167 Mflop/s
(14,15,15) <- (7,1,5).*(2, 15+0,3): 64.560077 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 71.191167
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 64.560077
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 15,3) :    67.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1024 (9.1%), 10226 (90.9%) left; Finishing by Sat Oct 21  6:42:41 2000

(8,6,8) <- (2,1,4).*(4, 6+0,2): 60.776610 Mflop/s
(12,12,14) <- (3,2,7).*(4, 6+0,2): 66.883616 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 60.776610
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 66.883616
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 6,2) :    63.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1025 (9.1%), 10225 (90.9%) left; Finishing by Sat Oct 21  6:42:48 2000

(9,13,5) <- (9,0,1).*(1, 13+0,5): 130.649442 Mflop/s
(15,13,15) <- (15,1,3).*(1, 13+0,5): 135.801857 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 5 9 13 13 5 9 5
<<< (M = 9, K = 13, N = 5) : 130.649442
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 135.801857
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,5) :   133.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1026 (9.1%), 10224 (90.9%) left; Finishing by Sat Oct 21  6:42:55 2000

(8,9,9) <- (4,3,3).*(2, 3+0,3): 46.528532 Mflop/s
(14,15,15) <- (7,5,5).*(2, 3+0,3): 58.108764 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 46.528532
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 58.108764
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 3,3) :    51.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1027 (9.1%), 10223 (90.9%) left; Finishing by Sat Oct 21  6:42:40 2000

(12,5,9) <- (0,1,9).*(12, 5+0,1): 106.619333 Mflop/s
(12,15,15) <- (1,3,15).*(12, 5+0,1): 148.895070 Mflop/s

Testing m0 = 12, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 12  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 5 9 12 5 5 9 12 9
<<< (M = 12, K = 5, N = 9) : 106.619333
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 148.895070
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (12, 5,1) :   124.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1028 (9.1%), 10222 (90.9%) left; Finishing by Sat Oct 21  6:42:36 2000

(5,13,8) <- (1,0,4).*(5, 13+0,2): 120.827273 Mflop/s
(15,13,14) <- (3,1,7).*(5, 13+0,2): 114.254625 Mflop/s

Testing m0 = 5, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 13 8 5 13 13 8 5 8
<<< (M = 5, K = 13, N = 8) : 120.827273
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 114.254625
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 13,2) :   117.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1029 (9.1%), 10221 (90.9%) left; Finishing by Sat Oct 21  6:42:43 2000

(16,6,9) <- (0,1,9).*(16, 6+0,1): 115.043401 Mflop/s
(16,12,15) <- (0,2,15).*(16, 6+0,1): 139.103025 Mflop/s

Testing m0 = 16, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 16  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 6 9 16 6 6 9 16 9
<<< (M = 16, K = 6, N = 9) : 115.043401
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 15 16 12 12 15 16 15
<<< (M = 16, K = 12, N = 15) : 139.103025
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (16, 6,1) :   125.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1030 (9.2%), 10220 (90.8%) left; Finishing by Sat Oct 21  6:42:39 2000

(7,10,9) <- (1,0,9).*(7, 10+0,1): 112.215684 Mflop/s
(14,10,15) <- (2,1,15).*(7, 10+0,1): 114.776912 Mflop/s

Testing m0 = 7, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 10 9 7 10 10 9 7 9
<<< (M = 7, K = 10, N = 9) : 112.215684
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 114.776912
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 10,1) :   113.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1031 (9.2%), 10219 (90.8%) left; Finishing by Sat Oct 21  6:42:46 2000

(13,6,9) <- (0,1,9).*(13, 6+0,1): 52.151523 Mflop/s
(13,12,15) <- (1,2,15).*(13, 6+0,1): 58.699829 Mflop/s

Testing m0 = 13, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 13  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 6 9 13 6 6 9 13 9
<<< (M = 13, K = 6, N = 9) : 52.151523
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 15 13 12 12 15 13 15
<<< (M = 13, K = 12, N = 15) : 58.699829
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (13, 6,1) :    55.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1032 (9.2%), 10218 (90.8%) left; Finishing by Sat Oct 21  6:42:42 2000

(9,8,12) <- (9,2,0).*(1, 4+0,12): 112.064447 Mflop/s
(15,12,12) <- (15,3,1).*(1, 4+0,12): 121.250711 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 12 9 8 8 12 9 12
<<< (M = 9, K = 8, N = 12) : 112.064447
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 121.250711
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,12) :   116.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1033 (9.2%), 10217 (90.8%) left; Finishing by Sat Oct 21  6:42:49 2000

(8,15,9) <- (4,0,9).*(2, 15+0,1): 170.237947 Mflop/s
(14,15,15) <- (7,1,15).*(2, 15+0,1): 175.736665 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 170.237947
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 175.736665
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 15,1) :   172.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1034 (9.2%), 10216 (90.8%) left; Finishing by Sat Oct 21  6:42:35 2000

(8,11,9) <- (1,0,9).*(8, 11+0,1): 96.241032 Mflop/s
(8,11,15) <- (1,1,15).*(8, 11+0,1): 97.754587 Mflop/s

Testing m0 = 8, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 96.241032
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 15 8 11 11 15 8 15
<<< (M = 8, K = 11, N = 15) : 97.754587
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 11,1) :    97.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1035 (9.2%), 10215 (90.8%) left; Finishing by Sat Oct 21  6:42:31 2000

(9,14,9) <- (9,0,9).*(1, 14+0,1): 135.634244 Mflop/s
(15,14,15) <- (15,1,15).*(1, 14+0,1): 138.388621 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 135.634244
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 138.388621
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,1) :   137.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1036 (9.2%), 10214 (90.8%) left; Finishing by Sat Oct 21  6:42:27 2000

(8,12,6) <- (4,0,1).*(2, 12+0,6): 39.803353 Mflop/s
(14,12,12) <- (7,1,2).*(2, 12+0,6): 37.690610 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  12 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 6 8 12 12 6 8 6
<<< (M = 8, K = 12, N = 6) : 39.803353
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 37.690610
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 12,6) :    38.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1037 (9.2%), 10213 (90.8%) left; Finishing by Sat Oct 21  6:42:23 2000

(9,15,14) <- (9,0,0).*(1, 15+0,14): 28.538511 Mflop/s
(15,15,14) <- (15,1,1).*(1, 15+0,14): 33.846013 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 14 9 15 15 14 9 14
<<< (M = 9, K = 15, N = 14) : 28.538511
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 33.846013
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,14) :    31.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1038 (9.2%), 10212 (90.8%) left; Finishing by Sat Oct 21  6:42:19 2000

(8,9,9) <- (4,1,3).*(2, 9+0,3): 64.454359 Mflop/s
(14,9,15) <- (7,1,5).*(2, 9+0,3): 66.182809 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 64.454359
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 66.182809
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 9,3) :    65.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1039 (9.2%), 10211 (90.8%) left; Finishing by Sat Oct 21  6:42:15 2000

(16,13,9) <- (0,0,9).*(16, 13+0,1): 133.952061 Mflop/s
(16,13,15) <- (0,1,15).*(16, 13+0,1): 134.304465 Mflop/s

Testing m0 = 16, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 16  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 13 9 16 13 13 9 16 9
<<< (M = 16, K = 13, N = 9) : 133.952061
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 13 15 16 13 13 15 16 15
<<< (M = 16, K = 13, N = 15) : 134.304465
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (16, 13,1) :   134.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1040 (9.2%), 10210 (90.8%) left; Finishing by Sat Oct 21  6:42:12 2000

(8,8,6) <- (4,1,1).*(2, 8+0,6): 37.459561 Mflop/s
(14,8,12) <- (7,1,2).*(2, 8+0,6): 37.953998 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  8 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 6 8 8 8 6 8 6
<<< (M = 8, K = 8, N = 6) : 37.459561
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 12 14 8 8 12 14 12
<<< (M = 14, K = 8, N = 12) : 37.953998
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 8,6) :    37.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1041 (9.3%), 10209 (90.7%) left; Finishing by Sat Oct 21  6:42:08 2000

(16,7,9) <- (0,1,9).*(16, 7+0,1): 114.442669 Mflop/s
(16,14,15) <- (0,2,15).*(16, 7+0,1): 133.302165 Mflop/s

Testing m0 = 16, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 16  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 7 9 16 7 7 9 16 9
<<< (M = 16, K = 7, N = 9) : 114.442669
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 15 16 14 14 15 16 15
<<< (M = 16, K = 14, N = 15) : 133.302165
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (16, 7,1) :   123.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1042 (9.3%), 10208 (90.7%) left; Finishing by Sat Oct 21  6:42:04 2000

(6,15,9) <- (1,0,9).*(6, 15+0,1): 178.605506 Mflop/s
(12,15,15) <- (2,1,15).*(6, 15+0,1): 182.250214 Mflop/s

Testing m0 = 6, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 15 9 6 15 15 9 6 9
<<< (M = 6, K = 15, N = 9) : 178.605506
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 182.250214
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 15,1) :   180.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1043 (9.3%), 10207 (90.7%) left; Finishing by Sat Oct 21  6:42:22 2000

(9,9,9) <- (1,1,9).*(9, 9+0,1): 123.720537 Mflop/s
(9,9,15) <- (1,1,15).*(9, 9+0,1): 125.468425 Mflop/s

Testing m0 = 9, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 9  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 123.720537
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 15 9 9 9 15 9 15
<<< (M = 9, K = 9, N = 15) : 125.468425
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (9, 9,1) :   124.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1044 (9.3%), 10206 (90.7%) left; Finishing by Sat Oct 21  6:42:07 2000

(9,12,15) <- (9,0,0).*(1, 12+0,15): 122.570540 Mflop/s
(15,12,15) <- (15,1,1).*(1, 12+0,15): 123.342868 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 122.570540
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 123.342868
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,15) :   123.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1045 (9.3%), 10205 (90.7%) left; Finishing by Sat Oct 21  6:42:03 2000

(8,8,8) <- (4,4,4).*(2, 2+0,2): 133.388114 Mflop/s
(14,14,14) <- (7,7,7).*(2, 2+0,2): 140.745477 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 133.388114
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 140.745477
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 2,2) :   137.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1046 (9.3%), 10204 (90.7%) left; Finishing by Sat Oct 21  6:42:10 2000

(9,14,8) <- (9,0,4).*(1, 14+0,2): 188.991075 Mflop/s
(15,14,14) <- (15,1,7).*(1, 14+0,2): 183.207489 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 188.991075
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 183.207489
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,2) :   186.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1047 (9.3%), 10203 (90.7%) left; Finishing by Sat Oct 21  6:42:07 2000

(8,9,8) <- (4,3,2).*(2, 3+0,4): 49.447027 Mflop/s
(14,15,12) <- (7,5,3).*(2, 3+0,4): 44.753086 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 49.447027
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 44.753086
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 3,4) :    47.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1048 (9.3%), 10202 (90.7%) left; Finishing by Sat Oct 21  6:42:03 2000

(9,9,11) <- (9,3,0).*(1, 3+0,11): 114.230393 Mflop/s
(15,15,11) <- (15,5,1).*(1, 3+0,11): 121.402141 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 11 9 9 9 11 9 11
<<< (M = 9, K = 9, N = 11) : 114.230393
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 11 15 15 15 11 15 11
<<< (M = 15, K = 15, N = 11) : 121.402141
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,11) :   117.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1049 (9.3%), 10201 (90.7%) left; Finishing by Sat Oct 21  6:41:59 2000

(9,12,6) <- (9,0,1).*(1, 12+0,6): 129.053918 Mflop/s
(15,12,12) <- (15,1,2).*(1, 12+0,6): 133.227320 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 6 9 12 12 6 9 6
<<< (M = 9, K = 12, N = 6) : 129.053918
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 133.227320
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,6) :   131.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1050 (9.3%), 10200 (90.7%) left; Finishing by Sat Oct 21  6:42:06 2000

(9,9,16) <- (9,1,0).*(1, 9+0,16): 120.666029 Mflop/s
(15,9,16) <- (15,1,0).*(1, 9+0,16): 121.584921 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 16 9 9 9 16 9 16
<<< (M = 9, K = 9, N = 16) : 120.666029
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 16 15 9 9 16 15 16
<<< (M = 15, K = 9, N = 16) : 121.584921
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,16) :   121.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1051 (9.3%), 10199 (90.7%) left; Finishing by Sat Oct 21  6:42:02 2000

(8,8,8) <- (4,2,1).*(2, 4+0,8): 37.278888 Mflop/s
(14,12,8) <- (7,3,1).*(2, 4+0,8): 39.090902 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  4 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 37.278888
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 8 14 12 12 8 14 8
<<< (M = 14, K = 12, N = 8) : 39.090902
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 4,8) :    38.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1052 (9.4%), 10198 (90.6%) left; Finishing by Sat Oct 21  6:41:59 2000

(13,9,9) <- (0,3,9).*(13, 3+0,1): 55.081710 Mflop/s
(13,15,15) <- (1,5,15).*(13, 3+0,1): 58.082306 Mflop/s

Testing m0 = 13, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 13  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 9 9 13 9 9 9 13 9
<<< (M = 13, K = 9, N = 9) : 55.081710
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 15 13 15 15 15 13 15
<<< (M = 13, K = 15, N = 15) : 58.082306
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (13, 3,1) :    56.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1053 (9.4%), 10197 (90.6%) left; Finishing by Sat Oct 21  6:42:05 2000

(5,11,9) <- (1,0,3).*(5, 11+0,3): 112.497957 Mflop/s
(15,11,15) <- (3,1,5).*(5, 11+0,3): 131.997378 Mflop/s

Testing m0 = 5, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 11 9 5 11 11 9 5 9
<<< (M = 5, K = 11, N = 9) : 112.497957
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 131.997378
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 11,3) :   121.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1054 (9.4%), 10196 (90.6%) left; Finishing by Sat Oct 21  6:42:12 2000

(8,8,9) <- (4,4,3).*(2, 2+0,3): 45.733644 Mflop/s
(14,14,15) <- (7,7,5).*(2, 2+0,3): 55.945676 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 45.733644
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 55.945676
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 2,3) :    50.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1055 (9.4%), 10195 (90.6%) left; Finishing by Sat Oct 21  6:42:09 2000

(9,9,8) <- (3,3,4).*(3, 3+0,2): 87.693372 Mflop/s
(15,15,14) <- (5,5,7).*(3, 3+0,2): 133.883878 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 87.693372
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 133.883878
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 3,2) :   106.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1056 (9.4%), 10194 (90.6%) left; Finishing by Sat Oct 21  6:42:05 2000

(5,8,9) <- (1,2,9).*(5, 4+0,1): 142.254475 Mflop/s
(15,12,15) <- (3,3,15).*(5, 4+0,1): 166.965249 Mflop/s

Testing m0 = 5, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 142.254475
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 166.965249
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 4,1) :   153.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1057 (9.4%), 10193 (90.6%) left; Finishing by Sat Oct 21  6:42:01 2000

(8,15,9) <- (2,0,3).*(4, 15+0,3): 46.885435 Mflop/s
(12,15,15) <- (3,1,5).*(4, 15+0,3): 53.514501 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 46.885435
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 53.514501
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 15,3) :    50.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1058 (9.4%), 10192 (90.6%) left; Finishing by Sat Oct 21  6:41:57 2000

(8,11,8) <- (1,0,4).*(8, 11+0,2): 46.023271 Mflop/s
(8,11,14) <- (1,1,7).*(8, 11+0,2): 46.273802 Mflop/s

Testing m0 = 8, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 46.023271
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 14 8 11 11 14 8 14
<<< (M = 8, K = 11, N = 14) : 46.273802
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 11,2) :    46.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1059 (9.4%), 10191 (90.6%) left; Finishing by Sat Oct 21  6:41:54 2000

(9,9,5) <- (9,3,1).*(1, 3+0,5): 117.623118 Mflop/s
(15,15,15) <- (15,5,3).*(1, 3+0,5): 134.765955 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 117.623118
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 134.765955
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,5) :   125.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1060 (9.4%), 10190 (90.6%) left; Finishing by Sat Oct 21  6:42:01 2000

(9,9,8) <- (9,1,4).*(1, 9+0,2): 152.895677 Mflop/s
(15,9,14) <- (15,1,7).*(1, 9+0,2): 155.576042 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 152.895677
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 155.576042
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,2) :   154.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1061 (9.4%), 10189 (90.6%) left; Finishing by Sat Oct 21  6:42:07 2000

(9,8,8) <- (9,1,2).*(1, 8+0,4): 132.437543 Mflop/s
(15,8,12) <- (15,1,3).*(1, 8+0,4): 138.806717 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 132.437543
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 12 15 8 8 12 15 12
<<< (M = 15, K = 8, N = 12) : 138.806717
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,4) :   135.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1062 (9.4%), 10188 (90.6%) left; Finishing by Sat Oct 21  6:42:04 2000

(9,10,8) <- (3,0,2).*(3, 10+0,4): 108.889955 Mflop/s
(15,10,12) <- (5,1,3).*(3, 10+0,4): 135.564508 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 108.889955
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 135.564508
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 10,4) :   120.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1063 (9.4%), 10187 (90.6%) left; Finishing by Sat Oct 21  6:42:11 2000

(9,8,9) <- (9,4,1).*(1, 2+0,9): 110.274103 Mflop/s
(15,14,9) <- (15,7,1).*(1, 2+0,9): 120.225936 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 110.274103
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 120.225936
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,9) :   115.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1064 (9.5%), 10186 (90.5%) left; Finishing by Sat Oct 21  6:42:07 2000

(5,11,8) <- (1,0,4).*(5, 11+0,2): 123.103053 Mflop/s
(15,11,14) <- (3,1,7).*(5, 11+0,2): 109.638802 Mflop/s

Testing m0 = 5, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 11 8 5 11 11 8 5 8
<<< (M = 5, K = 11, N = 8) : 123.103053
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 109.638802
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 11,2) :   116.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1065 (9.5%), 10185 (90.5%) left; Finishing by Sat Oct 21  6:42:14 2000

(9,8,11) <- (9,2,0).*(1, 4+0,11): 110.957744 Mflop/s
(15,12,11) <- (15,3,1).*(1, 4+0,11): 121.055586 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 11 9 8 8 11 9 11
<<< (M = 9, K = 8, N = 11) : 110.957744
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 11 15 12 12 11 15 11
<<< (M = 15, K = 12, N = 11) : 121.055586
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,11) :   115.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1066 (9.5%), 10184 (90.5%) left; Finishing by Sat Oct 21  6:42:10 2000

(9,8,14) <- (9,2,0).*(1, 4+0,14): 92.672498 Mflop/s
(15,12,14) <- (15,3,1).*(1, 4+0,14): 121.287953 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 14 9 8 8 14 9 14
<<< (M = 9, K = 8, N = 14) : 92.672498
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 121.287953
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,14) :   105.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1067 (9.5%), 10183 (90.5%) left; Finishing by Sat Oct 21  6:42:06 2000

(9,12,9) <- (3,0,9).*(3, 12+0,1): 173.077954 Mflop/s
(15,12,15) <- (5,1,15).*(3, 12+0,1): 173.189896 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 173.077954
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 173.189896
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 12,1) :   173.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1068 (9.5%), 10182 (90.5%) left; Finishing by Sat Oct 21  6:42:03 2000

(9,11,12) <- (9,0,0).*(1, 11+0,12): 120.900209 Mflop/s
(15,11,12) <- (15,1,1).*(1, 11+0,12): 121.729894 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 12 9 11 11 12 9 12
<<< (M = 9, K = 11, N = 12) : 120.900209
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 121.729894
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,12) :   121.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1069 (9.5%), 10181 (90.5%) left; Finishing by Sat Oct 21  6:41:59 2000

(9,5,5) <- (9,1,1).*(1, 5+0,5): 98.879989 Mflop/s
(15,15,15) <- (15,3,3).*(1, 5+0,5): 136.888965 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 5 9 5 5 5 9 5
<<< (M = 9, K = 5, N = 5) : 98.879989
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 136.888965
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,5) :   114.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1070 (9.5%), 10180 (90.5%) left; Finishing by Sat Oct 21  6:41:55 2000

(8,13,9) <- (2,0,9).*(4, 13+0,1): 170.343906 Mflop/s
(12,13,15) <- (3,1,15).*(4, 13+0,1): 171.463900 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 170.343906
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 171.463900
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 13,1) :   170.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1071 (9.5%), 10179 (90.5%) left; Finishing by Sat Oct 21  6:42:02 2000

(9,11,9) <- (3,0,3).*(3, 11+0,3): 105.574247 Mflop/s
(15,11,15) <- (5,1,5).*(3, 11+0,3): 137.544889 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 105.574247
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 137.544889
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 11,3) :   119.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1072 (9.5%), 10178 (90.5%) left; Finishing by Sat Oct 21  6:41:58 2000

(9,8,15) <- (9,4,0).*(1, 2+0,15): 115.385183 Mflop/s
(15,14,15) <- (15,7,1).*(1, 2+0,15): 123.217157 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 15 9 8 8 15 9 15
<<< (M = 9, K = 8, N = 15) : 115.385183
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 123.217157
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,15) :   119.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1073 (9.5%), 10177 (90.5%) left; Finishing by Sat Oct 21  6:41:44 2000

(12,8,9) <- (0,1,9).*(12, 8+0,1): 116.540703 Mflop/s
(12,8,15) <- (1,1,15).*(12, 8+0,1): 118.840037 Mflop/s

Testing m0 = 12, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 12  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 9 12 8 8 9 12 9
<<< (M = 12, K = 8, N = 9) : 116.540703
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 15 12 8 8 15 12 15
<<< (M = 12, K = 8, N = 15) : 118.840037
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (12, 8,1) :   117.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1074 (9.5%), 10176 (90.5%) left; Finishing by Sat Oct 21  6:41:41 2000

(7,10,8) <- (1,0,4).*(7, 10+0,2): 112.873514 Mflop/s
(14,10,14) <- (2,1,7).*(7, 10+0,2): 134.158367 Mflop/s

Testing m0 = 7, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 10 8 7 10 10 8 7 8
<<< (M = 7, K = 10, N = 8) : 112.873514
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 14 14 10 10 14 14 14
<<< (M = 14, K = 10, N = 14) : 134.158367
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 10,2) :   122.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1075 (9.6%), 10175 (90.4%) left; Finishing by Sat Oct 21  6:41:47 2000

(8,14,5) <- (4,0,1).*(2, 14+0,5): 45.483695 Mflop/s
(14,14,15) <- (7,1,3).*(2, 14+0,5): 39.549415 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  14 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 5 8 14 14 5 8 5
<<< (M = 8, K = 14, N = 5) : 45.483695
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 39.549415
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 14,5) :    42.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1076 (9.6%), 10174 (90.4%) left; Finishing by Sat Oct 21  6:41:44 2000

(9,11,5) <- (3,0,1).*(3, 11+0,5): 114.885560 Mflop/s
(15,11,15) <- (5,1,3).*(3, 11+0,5): 134.120991 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  11 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 5 9 11 11 5 9 5
<<< (M = 9, K = 11, N = 5) : 114.885560
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 134.120991
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 11,5) :   123.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1077 (9.6%), 10173 (90.4%) left; Finishing by Sat Oct 21  6:41:40 2000

(10,8,9) <- (0,2,9).*(10, 4+0,1): 130.780560 Mflop/s
(10,12,15) <- (1,3,15).*(10, 4+0,1): 142.382875 Mflop/s

Testing m0 = 10, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 10  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 8 9 10 8 8 9 10 9
<<< (M = 10, K = 8, N = 9) : 130.780560
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 15 10 12 12 15 10 15
<<< (M = 10, K = 12, N = 15) : 142.382875
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (10, 4,1) :   136.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1078 (9.6%), 10172 (90.4%) left; Finishing by Sat Oct 21  6:41:36 2000

(5,8,8) <- (1,1,4).*(5, 8+0,2): 121.564421 Mflop/s
(15,8,14) <- (3,1,7).*(5, 8+0,2): 124.245798 Mflop/s

Testing m0 = 5, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 8 5 8 8 8 5 8
<<< (M = 5, K = 8, N = 8) : 121.564421
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 14 15 8 8 14 15 14
<<< (M = 15, K = 8, N = 14) : 124.245798
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 8,2) :   122.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1079 (9.6%), 10171 (90.4%) left; Finishing by Sat Oct 21  6:41:43 2000

(9,8,8) <- (9,1,1).*(1, 8+0,8): 82.517869 Mflop/s
(15,8,8) <- (15,1,1).*(1, 8+0,8): 83.460002 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 82.517869
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 8 15 8 8 8 15 8
<<< (M = 15, K = 8, N = 8) : 83.460002
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,8) :    83.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1080 (9.6%), 10170 (90.4%) left; Finishing by Sat Oct 21  6:41:40 2000

(8,11,9) <- (4,0,9).*(2, 11+0,1): 153.956675 Mflop/s
(14,11,15) <- (7,1,15).*(2, 11+0,1): 155.824533 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 153.956675
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 155.824533
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 11,1) :   154.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1081 (9.6%), 10169 (90.4%) left; Finishing by Sat Oct 21  6:41:46 2000

(8,11,8) <- (2,0,4).*(4, 11+0,2): 71.078290 Mflop/s
(12,11,14) <- (3,1,7).*(4, 11+0,2): 66.544465 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 71.078290
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 14 12 11 11 14 12 14
<<< (M = 12, K = 11, N = 14) : 66.544465
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 11,2) :    68.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1082 (9.6%), 10168 (90.4%) left; Finishing by Sat Oct 21  6:41:32 2000

(8,9,8) <- (2,3,4).*(4, 3+0,2): 56.087552 Mflop/s
(12,15,14) <- (3,5,7).*(4, 3+0,2): 60.843435 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 56.087552
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 60.843435
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 3,2) :    58.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1083 (9.6%), 10167 (90.4%) left; Finishing by Sat Oct 21  6:41:29 2000

(10,5,9) <- (0,1,9).*(10, 5+0,1): 114.260465 Mflop/s
(10,15,15) <- (1,3,15).*(10, 5+0,1): 148.009130 Mflop/s

Testing m0 = 10, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 10  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 5 9 10 5 5 9 10 9
<<< (M = 10, K = 5, N = 9) : 114.260465
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 15 10 15 15 15 10 15
<<< (M = 10, K = 15, N = 15) : 148.009130
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (10, 5,1) :   129.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1084 (9.6%), 10166 (90.4%) left; Finishing by Sat Oct 21  6:41:35 2000

(9,5,7) <- (9,1,1).*(1, 5+0,7): 92.555931 Mflop/s
(15,15,14) <- (15,3,2).*(1, 5+0,7): 128.005861 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 7 9 5 5 7 9 7
<<< (M = 9, K = 5, N = 7) : 92.555931
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 128.005861
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,7) :   107.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1085 (9.6%), 10165 (90.4%) left; Finishing by Sat Oct 21  6:41:32 2000

(8,10,9) <- (4,0,3).*(2, 10+0,3): 66.053770 Mflop/s
(14,10,15) <- (7,1,5).*(2, 10+0,3): 61.319535 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 66.053770
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 61.319535
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 10,3) :    63.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1086 (9.7%), 10164 (90.3%) left; Finishing by Sat Oct 21  6:41:28 2000

(9,12,11) <- (9,0,0).*(1, 12+0,11): 122.281892 Mflop/s
(15,12,11) <- (15,1,1).*(1, 12+0,11): 122.415909 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 11 9 12 12 11 9 11
<<< (M = 9, K = 12, N = 11) : 122.281892
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 11 15 12 12 11 15 11
<<< (M = 15, K = 12, N = 11) : 122.415909
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,11) :   122.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1087 (9.7%), 10163 (90.3%) left; Finishing by Sat Oct 21  6:41:25 2000

(8,9,8) <- (1,9,4).*(8,1+0,2): 108.999727 Mflop/s
(8,15,14) <- (1,15,7).*(8,1+0,2): 118.369531 Mflop/s

Testing m0 = 8, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 108.999727
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 14 8 15 15 14 8 14
<<< (M = 8, K = 15, N = 14) : 118.369531
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8,1,2) :   113.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1088 (9.7%), 10162 (90.3%) left; Finishing by Sat Oct 21  6:41:31 2000

(9,15,11) <- (9,0,0).*(1, 15+0,11): 33.027029 Mflop/s
(15,15,11) <- (15,1,1).*(1, 15+0,11): 39.252262 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 11 9 15 15 11 9 11
<<< (M = 9, K = 15, N = 11) : 33.027029
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 11 15 15 15 11 15 11
<<< (M = 15, K = 15, N = 11) : 39.252262
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,11) :    35.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1089 (9.7%), 10161 (90.3%) left; Finishing by Sat Oct 21  6:41:28 2000

(9,7,5) <- (9,1,1).*(1, 7+0,5): 113.231339 Mflop/s
(15,14,15) <- (15,2,3).*(1, 7+0,5): 136.937062 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 5 9 7 7 5 9 5
<<< (M = 9, K = 7, N = 5) : 113.231339
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 136.937062
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,5) :   124.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1090 (9.7%), 10160 (90.3%) left; Finishing by Sat Oct 21  6:41:35 2000

(8,14,8) <- (4,0,2).*(2, 14+0,4): 54.782266 Mflop/s
(14,14,12) <- (7,1,3).*(2, 14+0,4): 47.528981 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 54.782266
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 47.528981
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 14,4) :    50.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1091 (9.7%), 10159 (90.3%) left; Finishing by Sat Oct 21  6:41:31 2000

(8,9,7) <- (4,3,1).*(2, 3+0,7): 37.830361 Mflop/s
(14,15,14) <- (7,5,2).*(2, 3+0,7): 38.071311 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  3 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 7 8 9 9 7 8 7
<<< (M = 8, K = 9, N = 7) : 37.830361
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 38.071311
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 3,7) :    38.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1092 (9.7%), 10158 (90.3%) left; Finishing by Sat Oct 21  6:41:27 2000

(9,12,7) <- (9,0,1).*(1, 12+0,7): 128.125463 Mflop/s
(15,12,14) <- (15,1,2).*(1, 12+0,7): 131.144135 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 7 9 12 12 7 9 7
<<< (M = 9, K = 12, N = 7) : 128.125463
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 131.144135
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,7) :   129.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1093 (9.7%), 10157 (90.3%) left; Finishing by Sat Oct 21  6:41:34 2000

(6,14,8) <- (1,0,4).*(6, 14+0,2): 53.591970 Mflop/s
(12,14,14) <- (2,1,7).*(6, 14+0,2): 55.812453 Mflop/s

Testing m0 = 6, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 14 8 6 14 14 8 6 8
<<< (M = 6, K = 14, N = 8) : 53.591970
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 55.812453
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 14,2) :    54.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1094 (9.7%), 10156 (90.3%) left; Finishing by Sat Oct 21  6:41:30 2000

(8,8,7) <- (4,4,1).*(2, 2+0,7): 32.473549 Mflop/s
(14,14,14) <- (7,7,2).*(2, 2+0,7): 35.942683 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  2 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 7 8 8 8 7 8 7
<<< (M = 8, K = 8, N = 7) : 32.473549
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 35.942683
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 2,7) :    34.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1095 (9.7%), 10155 (90.3%) left; Finishing by Sat Oct 21  6:41:17 2000

(9,14,8) <- (9,0,1).*(1, 14+0,8): 88.125789 Mflop/s
(15,14,8) <- (15,1,1).*(1, 14+0,8): 88.957806 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 88.125789
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 8 15 14 14 8 15 8
<<< (M = 15, K = 14, N = 8) : 88.957806
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,8) :    88.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1096 (9.7%), 10154 (90.3%) left; Finishing by Sat Oct 21  6:41:23 2000

(8,14,8) <- (2,0,4).*(4, 14+0,2): 68.600027 Mflop/s
(12,14,14) <- (3,1,7).*(4, 14+0,2): 70.623259 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 68.600027
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 70.623259
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 14,2) :    69.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1097 (9.8%), 10153 (90.2%) left; Finishing by Sat Oct 21  6:41:20 2000

(9,14,11) <- (9,0,0).*(1, 14+0,11): 121.852033 Mflop/s
(15,14,11) <- (15,1,1).*(1, 14+0,11): 95.558093 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 11 9 14 14 11 9 11
<<< (M = 9, K = 14, N = 11) : 121.852033
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 11 15 14 14 11 15 11
<<< (M = 15, K = 14, N = 11) : 95.558093
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,11) :   107.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1098 (9.8%), 10152 (90.2%) left; Finishing by Sat Oct 21  6:41:16 2000

(9,6,9) <- (3,1,3).*(3, 6+0,3): 93.687590 Mflop/s
(15,12,15) <- (5,2,5).*(3, 6+0,3): 139.371732 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 93.687590
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 139.371732
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 6,3) :   112.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1099 (9.8%), 10151 (90.2%) left; Finishing by Sat Oct 21  6:41:23 2000

(9,5,9) <- (3,1,3).*(3, 5+0,3): 88.298061 Mflop/s
(15,15,15) <- (5,3,5).*(3, 5+0,3): 141.789867 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 9 9 5 5 9 9 9
<<< (M = 9, K = 5, N = 9) : 88.298061
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 141.789867
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 5,3) :   108.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1100 (9.8%), 10150 (90.2%) left; Finishing by Sat Oct 21  6:41:30 2000

(9,10,8) <- (3,0,4).*(3, 10+0,2): 93.873518 Mflop/s
(15,10,14) <- (5,1,7).*(3, 10+0,2): 138.465098 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 93.873518
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 138.465098
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 10,2) :   111.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1101 (9.8%), 10149 (90.2%) left; Finishing by Sat Oct 21  6:41:16 2000

(9,7,9) <- (3,1,3).*(3, 7+0,3): 94.649713 Mflop/s
(15,14,15) <- (5,2,5).*(3, 7+0,3): 141.698233 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 94.649713
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 141.698233
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 7,3) :   113.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1102 (9.8%), 10148 (90.2%) left; Finishing by Sat Oct 21  6:41:12 2000

(9,8,9) <- (9,1,3).*(1, 8+0,3): 137.059568 Mflop/s
(15,8,15) <- (15,1,5).*(1, 8+0,3): 139.850261 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 137.059568
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 139.850261
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,3) :   138.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1103 (9.8%), 10147 (90.2%) left; Finishing by Sat Oct 21  6:41:19 2000

(9,5,9) <- (9,1,1).*(1, 5+0,9): 101.806941 Mflop/s
(15,15,9) <- (15,3,1).*(1, 5+0,9): 125.150531 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 9 9 5 5 9 9 9
<<< (M = 9, K = 5, N = 9) : 101.806941
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 125.150531
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,9) :   112.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1104 (9.8%), 10146 (90.2%) left; Finishing by Sat Oct 21  6:41:15 2000

(9,10,8) <- (9,0,2).*(1, 10+0,4): 136.141077 Mflop/s
(15,10,12) <- (15,1,3).*(1, 10+0,4): 139.459319 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 136.141077
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 139.459319
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,4) :   137.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1105 (9.8%), 10145 (90.2%) left; Finishing by Sat Oct 21  6:41:12 2000

(9,6,11) <- (9,1,0).*(1, 6+0,11): 104.621505 Mflop/s
(15,12,11) <- (15,2,1).*(1, 6+0,11): 119.904588 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 11 9 6 6 11 9 11
<<< (M = 9, K = 6, N = 11) : 104.621505
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 11 15 12 12 11 15 11
<<< (M = 15, K = 12, N = 11) : 119.904588
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,11) :   111.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1106 (9.8%), 10144 (90.2%) left; Finishing by Sat Oct 21  6:41:18 2000

(14,14,9) <- (0,0,9).*(14, 14+0,1): 146.872207 Mflop/s
(14,14,15) <- (1,1,15).*(14, 14+0,1): 149.839529 Mflop/s

Testing m0 = 14, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 14  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 9 14 14 14 9 14 9
<<< (M = 14, K = 14, N = 9) : 146.872207
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 149.839529
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (14, 14,1) :   148.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1107 (9.8%), 10143 (90.2%) left; Finishing by Sat Oct 21  6:41:15 2000

(9,6,5) <- (9,1,1).*(1, 6+0,5): 107.030225 Mflop/s
(15,12,15) <- (15,2,3).*(1, 6+0,5): 131.524591 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 5 9 6 6 5 9 5
<<< (M = 9, K = 6, N = 5) : 107.030225
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 131.524591
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,5) :   118.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1108 (9.8%), 10142 (90.2%) left; Finishing by Sat Oct 21  6:41:22 2000

(14,6,9) <- (0,1,9).*(14, 6+0,1): 112.886764 Mflop/s
(14,12,15) <- (1,2,15).*(14, 6+0,1): 140.644313 Mflop/s

Testing m0 = 14, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 14  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 6 9 14 6 6 9 14 9
<<< (M = 14, K = 6, N = 9) : 112.886764
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 140.644313
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (14, 6,1) :   125.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1109 (9.9%), 10141 (90.1%) left; Finishing by Sat Oct 21  6:41:18 2000

(6,5,8) <- (1,1,4).*(6, 5+0,2): 109.297146 Mflop/s
(12,15,14) <- (2,3,7).*(6, 5+0,2): 137.543738 Mflop/s

Testing m0 = 6, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 5 8 6 5 5 8 6 8
<<< (M = 6, K = 5, N = 8) : 109.297146
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 137.543738
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 5,2) :   121.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1110 (9.9%), 10140 (90.1%) left; Finishing by Sat Oct 21  6:41:25 2000

(9,12,12) <- (9,0,0).*(1, 12+0,12): 119.643958 Mflop/s
(15,12,12) <- (15,1,1).*(1, 12+0,12): 121.834252 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 12 9 12 12 12 9 12
<<< (M = 9, K = 12, N = 12) : 119.643958
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 121.834252
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,12) :   120.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1111 (9.9%), 10139 (90.1%) left; Finishing by Sat Oct 21  6:41:21 2000

(9,6,5) <- (3,1,1).*(3, 6+0,5): 94.165855 Mflop/s
(15,12,15) <- (5,2,3).*(3, 6+0,5): 133.694549 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  6 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 5 9 6 6 5 9 5
<<< (M = 9, K = 6, N = 5) : 94.165855
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 133.694549
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 6,5) :   110.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1112 (9.9%), 10138 (90.1%) left; Finishing by Sat Oct 21  6:41:28 2000

(8,9,9) <- (2,1,3).*(4, 9+0,3): 43.559250 Mflop/s
(12,9,15) <- (3,1,5).*(4, 9+0,3): 44.147084 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 43.559250
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 44.147084
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 9,3) :    43.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1113 (9.9%), 10137 (90.1%) left; Finishing by Sat Oct 21  6:41:24 2000

(9,9,5) <- (9,9,1).*(1,1+0,5): 62.780838 Mflop/s
(15,15,15) <- (15,15,3).*(1,1+0,5): 60.803903 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 62.780838
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 60.803903
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,5) :    61.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1114 (9.9%), 10136 (90.1%) left; Finishing by Sat Oct 21  6:41:21 2000

(9,5,16) <- (9,1,0).*(1, 5+0,16): 105.116753 Mflop/s
(15,15,16) <- (15,3,0).*(1, 5+0,16): 128.824477 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 16 9 5 5 16 9 16
<<< (M = 9, K = 5, N = 16) : 105.116753
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 16 15 15 15 16 15 16
<<< (M = 15, K = 15, N = 16) : 128.824477
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,16) :   115.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1115 (9.9%), 10135 (90.1%) left; Finishing by Sat Oct 21  6:41:27 2000

(9,9,8) <- (9,3,2).*(1, 3+0,4): 128.234614 Mflop/s
(15,15,12) <- (15,5,3).*(1, 3+0,4): 144.197019 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 128.234614
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 144.197019
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,4) :   135.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1116 (9.9%), 10134 (90.1%) left; Finishing by Sat Oct 21  6:41:34 2000

(8,9,9) <- (2,3,3).*(4, 3+0,3): 42.636295 Mflop/s
(12,15,15) <- (3,5,5).*(4, 3+0,3): 49.291875 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 42.636295
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 49.291875
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 3,3) :    45.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1117 (9.9%), 10133 (90.1%) left; Finishing by Sat Oct 21  6:41:30 2000

(11,8,9) <- (0,4,9).*(11, 2+0,1): 61.521369 Mflop/s
(11,14,15) <- (1,7,15).*(11, 2+0,1): 69.769160 Mflop/s

Testing m0 = 11, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 11  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 8 9 11 8 8 9 11 9
<<< (M = 11, K = 8, N = 9) : 61.521369
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 15 11 14 14 15 11 15
<<< (M = 11, K = 14, N = 15) : 69.769160
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (11, 2,1) :    65.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1118 (9.9%), 10132 (90.1%) left; Finishing by Sat Oct 21  6:41:17 2000

(8,8,8) <- (2,1,4).*(4, 8+0,2): 62.337549 Mflop/s
(12,8,14) <- (3,1,7).*(4, 8+0,2): 63.811618 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 62.337549
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 14 12 8 8 14 12 14
<<< (M = 12, K = 8, N = 14) : 63.811618
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 8,2) :    63.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1119 (9.9%), 10131 (90.1%) left; Finishing by Sat Oct 21  6:41:23 2000

(7,8,8) <- (1,1,4).*(7, 8+0,2): 101.545766 Mflop/s
(14,8,14) <- (2,1,7).*(7, 8+0,2): 111.149964 Mflop/s

Testing m0 = 7, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 8 7 8 8 8 7 8
<<< (M = 7, K = 8, N = 8) : 101.545766
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 14 14 8 8 14 14 14
<<< (M = 14, K = 8, N = 14) : 111.149964
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 8,2) :   106.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1120 (10.0%), 10130 (90.0%) left; Finishing by Sat Oct 21  6:41:20 2000

(9,8,16) <- (9,4,0).*(1, 2+0,16): 90.659341 Mflop/s
(15,14,16) <- (15,7,0).*(1, 2+0,16): 128.665875 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 16 9 8 8 16 9 16
<<< (M = 9, K = 8, N = 16) : 90.659341
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 16 15 14 14 16 15 16
<<< (M = 15, K = 14, N = 16) : 128.665875
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,16) :   106.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1121 (10.0%), 10129 (90.0%) left; Finishing by Sat Oct 21  6:41:16 2000

(8,11,6) <- (4,0,1).*(2, 11+0,6): 39.507355 Mflop/s
(14,11,12) <- (7,1,2).*(2, 11+0,6): 37.313694 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  11 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 6 8 11 11 6 8 6
<<< (M = 8, K = 11, N = 6) : 39.507355
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 12 14 11 11 12 14 12
<<< (M = 14, K = 11, N = 12) : 37.313694
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 11,6) :    38.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1122 (10.0%), 10128 (90.0%) left; Finishing by Sat Oct 21  6:41:03 2000

(9,10,9) <- (9,0,1).*(1, 10+0,9): 120.605655 Mflop/s
(15,10,9) <- (15,1,1).*(1, 10+0,9): 121.015683 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 120.605655
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 9 15 10 10 9 15 9
<<< (M = 15, K = 10, N = 9) : 121.015683
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,9) :   120.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1123 (10.0%), 10127 (90.0%) left; Finishing by Sat Oct 21  6:40:59 2000

(9,12,5) <- (3,0,1).*(3, 12+0,5): 113.949270 Mflop/s
(15,12,15) <- (5,1,3).*(3, 12+0,5): 135.035440 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  12 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 113.949270
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 135.035440
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 12,5) :   123.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1124 (10.0%), 10126 (90.0%) left; Finishing by Sat Oct 21  6:41:06 2000

(9,7,8) <- (9,1,2).*(1, 7+0,4): 121.508714 Mflop/s
(15,14,12) <- (15,2,3).*(1, 7+0,4): 146.264435 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 121.508714
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 146.264435
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,4) :   132.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1125 (10.0%), 10125 (90.0%) left; Finishing by Sat Oct 21  6:41:13 2000

(9,12,10) <- (9,0,0).*(1, 12+0,10): 115.839173 Mflop/s
(15,12,10) <- (15,1,1).*(1, 12+0,10): 116.029044 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 10 9 12 12 10 9 10
<<< (M = 9, K = 12, N = 10) : 115.839173
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 10 15 12 12 10 15 10
<<< (M = 15, K = 12, N = 10) : 116.029044
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,10) :   115.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1126 (10.0%), 10124 (90.0%) left; Finishing by Sat Oct 21  6:41:09 2000

(9,13,13) <- (9,0,0).*(1, 13+0,13): 33.999117 Mflop/s
(15,13,13) <- (15,1,1).*(1, 13+0,13): 35.309267 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 13 9 13 13 13 9 13
<<< (M = 9, K = 13, N = 13) : 33.999117
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 13 15 13 13 13 15 13
<<< (M = 15, K = 13, N = 13) : 35.309267
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,13) :    34.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1127 (10.0%), 10123 (90.0%) left; Finishing by Sat Oct 21  6:41:06 2000

(5,14,8) <- (1,0,4).*(5, 14+0,2): 139.538207 Mflop/s
(15,14,14) <- (3,1,7).*(5, 14+0,2): 117.979387 Mflop/s

Testing m0 = 5, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 14 8 5 14 14 8 5 8
<<< (M = 5, K = 14, N = 8) : 139.538207
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 117.979387
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 14,2) :   127.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1128 (10.0%), 10122 (90.0%) left; Finishing by Sat Oct 21  6:41:12 2000

(10,13,9) <- (0,0,9).*(10, 13+0,1): 74.415584 Mflop/s
(10,13,15) <- (1,1,15).*(10, 13+0,1): 66.714292 Mflop/s

Testing m0 = 10, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 10  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 13 9 10 13 13 9 10 9
<<< (M = 10, K = 13, N = 9) : 74.415584
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 13 15 10 13 13 15 10 15
<<< (M = 10, K = 13, N = 15) : 66.714292
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (10, 13,1) :    70.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1129 (10.0%), 10121 (90.0%) left; Finishing by Sat Oct 21  6:41:09 2000

(8,12,9) <- (2,0,3).*(4, 12+0,3): 45.590118 Mflop/s
(12,12,15) <- (3,1,5).*(4, 12+0,3): 52.422437 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 45.590118
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 52.422437
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 12,3) :    48.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1130 (10.0%), 10120 (90.0%) left; Finishing by Sat Oct 21  6:41:05 2000

(5,6,9) <- (1,1,9).*(5, 6+0,1): 126.862620 Mflop/s
(15,12,15) <- (3,2,15).*(5, 6+0,1): 172.446497 Mflop/s

Testing m0 = 5, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 6 9 5 6 6 9 5 9
<<< (M = 5, K = 6, N = 9) : 126.862620
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 172.446497
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 6,1) :   146.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1131 (10.1%), 10119 (89.9%) left; Finishing by Sat Oct 21  6:41:12 2000

(8,15,5) <- (4,0,1).*(2, 15+0,5): 46.086872 Mflop/s
(14,15,15) <- (7,1,3).*(2, 15+0,5): 39.742802 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  15 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 5 8 15 15 5 8 5
<<< (M = 8, K = 15, N = 5) : 46.086872
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 39.742802
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 15,5) :    42.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1132 (10.1%), 10118 (89.9%) left; Finishing by Sat Oct 21  6:40:58 2000

(9,14,5) <- (9,0,1).*(1, 14+0,5): 134.868485 Mflop/s
(15,14,15) <- (15,1,3).*(1, 14+0,5): 140.372125 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 5 9 14 14 5 9 5
<<< (M = 9, K = 14, N = 5) : 134.868485
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 140.372125
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,5) :   137.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1133 (10.1%), 10117 (89.9%) left; Finishing by Sat Oct 21  6:41:05 2000

(15,14,9) <- (0,0,9).*(15, 14+0,1): 58.521813 Mflop/s
(15,14,15) <- (1,1,15).*(15, 14+0,1): 57.241455 Mflop/s

Testing m0 = 15, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 15  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 58.521813
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 57.241455
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (15, 14,1) :    57.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1134 (10.1%), 10116 (89.9%) left; Finishing by Sat Oct 21  6:41:11 2000

(16,9,9) <- (0,3,9).*(16, 3+0,1): 124.438337 Mflop/s
(16,15,15) <- (0,5,15).*(16, 3+0,1): 136.163836 Mflop/s

Testing m0 = 16, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 16  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 9 9 16 9 9 9 16 9
<<< (M = 16, K = 9, N = 9) : 124.438337
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 15 16 15 15 15 16 15
<<< (M = 16, K = 15, N = 15) : 136.163836
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (16, 3,1) :   130.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1135 (10.1%), 10115 (89.9%) left; Finishing by Sat Oct 21  6:40:58 2000

(7,8,8) <- (1,2,4).*(7, 4+0,2): 44.524112 Mflop/s
(14,12,14) <- (2,3,7).*(7, 4+0,2): 49.789615 Mflop/s

Testing m0 = 7, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 8 7 8 8 8 7 8
<<< (M = 7, K = 8, N = 8) : 44.524112
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 49.789615
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 4,2) :    47.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1136 (10.1%), 10114 (89.9%) left; Finishing by Sat Oct 21  6:40:55 2000

(5,7,8) <- (1,1,4).*(5, 7+0,2): 121.062135 Mflop/s
(15,14,14) <- (3,2,7).*(5, 7+0,2): 146.049156 Mflop/s

Testing m0 = 5, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 7 8 5 7 7 8 5 8
<<< (M = 5, K = 7, N = 8) : 121.062135
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 146.049156
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 7,2) :   132.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1137 (10.1%), 10113 (89.9%) left; Finishing by Sat Oct 21  6:41:01 2000

(9,9,8) <- (9,9,1).*(1,1+0,8): 25.766609 Mflop/s
(15,15,8) <- (15,15,1).*(1,1+0,8): 26.996286 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 25.766609
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 8 15 15 15 8 15 8
<<< (M = 15, K = 15, N = 8) : 26.996286
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,8) :    26.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1138 (10.1%), 10112 (89.9%) left; Finishing by Sat Oct 21  6:40:48 2000

(9,9,8) <- (3,9,2).*(3,1+0,4): 99.684205 Mflop/s
(15,15,12) <- (5,15,3).*(3,1+0,4): 135.985146 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 99.684205
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 135.985146
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3,1,4) :   115.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1139 (10.1%), 10111 (89.9%) left; Finishing by Sat Oct 21  6:40:44 2000

(8,13,9) <- (4,0,3).*(2, 13+0,3): 70.399846 Mflop/s
(14,13,15) <- (7,1,5).*(2, 13+0,3): 63.649909 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 70.399846
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 63.649909
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 13,3) :    66.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1140 (10.1%), 10110 (89.9%) left; Finishing by Sat Oct 21  6:40:41 2000

(8,14,7) <- (4,0,1).*(2, 14+0,7): 40.334679 Mflop/s
(14,14,14) <- (7,1,2).*(2, 14+0,7): 37.460952 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  14 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 7 8 14 14 7 8 7
<<< (M = 8, K = 14, N = 7) : 40.334679
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 37.460952
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 14,7) :    38.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1141 (10.1%), 10109 (89.9%) left; Finishing by Sat Oct 21  6:40:38 2000

(9,7,8) <- (3,1,4).*(3, 7+0,2): 86.493816 Mflop/s
(15,14,14) <- (5,2,7).*(3, 7+0,2): 148.906318 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 86.493816
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 148.906318
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 7,2) :   109.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1142 (10.2%), 10108 (89.8%) left; Finishing by Sat Oct 21  6:40:44 2000

(9,9,11) <- (9,9,0).*(1,1+0,11): 30.647949 Mflop/s
(15,15,11) <- (15,15,1).*(1,1+0,11): 27.673893 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 11 9 9 9 11 9 11
<<< (M = 9, K = 9, N = 11) : 30.647949
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 11 15 15 15 11 15 11
<<< (M = 15, K = 15, N = 11) : 27.673893
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,11) :    29.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1143 (10.2%), 10107 (89.8%) left; Finishing by Sat Oct 21  6:40:41 2000

(12,7,9) <- (0,1,9).*(12, 7+0,1): 121.856604 Mflop/s
(12,14,15) <- (1,2,15).*(12, 7+0,1): 146.111935 Mflop/s

Testing m0 = 12, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 12  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 7 9 12 7 7 9 12 9
<<< (M = 12, K = 7, N = 9) : 121.856604
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 146.111935
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (12, 7,1) :   132.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1144 (10.2%), 10106 (89.8%) left; Finishing by Sat Oct 21  6:40:37 2000

(8,9,6) <- (4,1,1).*(2, 9+0,6): 38.368196 Mflop/s
(14,9,12) <- (7,1,2).*(2, 9+0,6): 38.913623 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  9 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 6 8 9 9 6 8 6
<<< (M = 8, K = 9, N = 6) : 38.368196
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 12 14 9 9 12 14 12
<<< (M = 14, K = 9, N = 12) : 38.913623
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 9,6) :    38.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1145 (10.2%), 10105 (89.8%) left; Finishing by Sat Oct 21  6:40:34 2000

(5,9,9) <- (1,1,9).*(5, 9+0,1): 151.264272 Mflop/s
(15,9,15) <- (3,1,15).*(5, 9+0,1): 155.545490 Mflop/s

Testing m0 = 5, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 151.264272
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 155.545490
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 9,1) :   153.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1146 (10.2%), 10104 (89.8%) left; Finishing by Sat Oct 21  6:40:40 2000

(9,14,15) <- (9,0,0).*(1, 14+0,15): 122.760591 Mflop/s
(15,14,15) <- (15,1,1).*(1, 14+0,15): 105.740966 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 122.760591
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 105.740966
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,15) :   113.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1147 (10.2%), 10103 (89.8%) left; Finishing by Sat Oct 21  6:40:37 2000

(8,12,8) <- (2,0,2).*(4, 12+0,4): 42.406433 Mflop/s
(12,12,12) <- (3,1,3).*(4, 12+0,4): 45.851393 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 42.406433
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 12 12 12 12 12 12 12
<<< (M = 12, K = 12, N = 12) : 45.851393
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 12,4) :    44.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1148 (10.2%), 10102 (89.8%) left; Finishing by Sat Oct 21  6:40:34 2000

(6,9,9) <- (1,1,9).*(6, 9+0,1): 153.880437 Mflop/s
(12,9,15) <- (2,1,15).*(6, 9+0,1): 158.254034 Mflop/s

Testing m0 = 6, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 9 6 9 9 9 6 9
<<< (M = 6, K = 9, N = 9) : 153.880437
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 158.254034
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 9,1) :   156.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1149 (10.2%), 10101 (89.8%) left; Finishing by Sat Oct 21  6:40:40 2000

(8,8,5) <- (4,1,1).*(2, 8+0,5): 41.721674 Mflop/s
(14,8,15) <- (7,1,3).*(2, 8+0,5): 42.768492 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  8 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 5 8 8 8 5 8 5
<<< (M = 8, K = 8, N = 5) : 41.721674
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 15 14 8 8 15 14 15
<<< (M = 14, K = 8, N = 15) : 42.768492
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 8,5) :    42.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1150 (10.2%), 10100 (89.8%) left; Finishing by Sat Oct 21  6:40:46 2000

(9,9,8) <- (3,3,2).*(3, 3+0,4): 107.625846 Mflop/s
(15,15,12) <- (5,5,3).*(3, 3+0,4): 139.037683 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 107.625846
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 139.037683
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 3,4) :   121.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1151 (10.2%), 10099 (89.8%) left; Finishing by Sat Oct 21  6:40:53 2000

(9,12,9) <- (9,0,1).*(1, 12+0,9): 122.222423 Mflop/s
(15,12,9) <- (15,1,1).*(1, 12+0,9): 122.875335 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 122.222423
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 122.875335
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,9) :   122.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1152 (10.2%), 10098 (89.8%) left; Finishing by Sat Oct 21  6:40:59 2000

(8,9,8) <- (4,3,1).*(2, 3+0,8): 37.219049 Mflop/s
(14,15,8) <- (7,5,1).*(2, 3+0,8): 39.872145 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  3 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 37.219049
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 8 14 15 15 8 14 8
<<< (M = 14, K = 15, N = 8) : 39.872145
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 3,8) :    38.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1153 (10.2%), 10097 (89.8%) left; Finishing by Sat Oct 21  6:40:46 2000

(8,11,8) <- (4,0,1).*(2, 11+0,8): 38.758377 Mflop/s
(14,11,8) <- (7,1,1).*(2, 11+0,8): 39.110341 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  11 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 38.758377
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 8 14 11 11 8 14 8
<<< (M = 14, K = 11, N = 8) : 39.110341
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 11,8) :    38.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1154 (10.3%), 10096 (89.7%) left; Finishing by Sat Oct 21  6:40:43 2000

(9,9,9) <- (9,1,9).*(1, 9+0,1): 116.934720 Mflop/s
(15,9,15) <- (15,1,15).*(1, 9+0,1): 121.805045 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 116.934720
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 121.805045
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,1) :   119.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1155 (10.3%), 10095 (89.7%) left; Finishing by Sat Oct 21  6:40:49 2000

(9,8,14) <- (9,4,0).*(1, 2+0,14): 87.764024 Mflop/s
(15,14,14) <- (15,7,1).*(1, 2+0,14): 122.050001 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 14 9 8 8 14 9 14
<<< (M = 9, K = 8, N = 14) : 87.764024
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 122.050001
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,14) :   102.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1156 (10.3%), 10094 (89.7%) left; Finishing by Sat Oct 21  6:40:46 2000

(11,10,9) <- (0,0,9).*(11, 10+0,1): 61.377125 Mflop/s
(11,10,15) <- (1,1,15).*(11, 10+0,1): 63.724556 Mflop/s

Testing m0 = 11, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 11  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 10 9 11 10 10 9 11 9
<<< (M = 11, K = 10, N = 9) : 61.377125
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 10 15 11 10 10 15 11 15
<<< (M = 11, K = 10, N = 15) : 63.724556
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (11, 10,1) :    62.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1157 (10.3%), 10093 (89.7%) left; Finishing by Sat Oct 21  6:40:42 2000

(8,10,9) <- (2,0,3).*(4, 10+0,3): 44.632826 Mflop/s
(12,10,15) <- (3,1,5).*(4, 10+0,3): 50.911868 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 44.632826
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 50.911868
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 10,3) :    47.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1158 (10.3%), 10092 (89.7%) left; Finishing by Sat Oct 21  6:40:29 2000

(5,8,9) <- (1,2,3).*(5, 4+0,3): 109.289630 Mflop/s
(15,12,15) <- (3,3,5).*(5, 4+0,3): 134.513412 Mflop/s

Testing m0 = 5, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 109.289630
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 134.513412
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 4,3) :   120.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1159 (10.3%), 10091 (89.7%) left; Finishing by Sat Oct 21  6:40:36 2000

(9,8,5) <- (3,4,1).*(3, 2+0,5): 101.487473 Mflop/s
(15,14,15) <- (5,7,3).*(3, 2+0,5): 134.017460 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  2 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 101.487473
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 134.017460
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 2,5) :   115.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1160 (10.3%), 10090 (89.7%) left; Finishing by Sat Oct 21  6:40:42 2000

(9,8,6) <- (9,4,1).*(1, 2+0,6): 112.791990 Mflop/s
(15,14,12) <- (15,7,2).*(1, 2+0,6): 126.190858 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 6 9 8 8 6 9 6
<<< (M = 9, K = 8, N = 6) : 112.791990
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 126.190858
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,6) :   119.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1161 (10.3%), 10089 (89.7%) left; Finishing by Sat Oct 21  6:40:39 2000

(9,8,15) <- (9,2,0).*(1, 4+0,15): 114.932754 Mflop/s
(15,12,15) <- (15,3,1).*(1, 4+0,15): 121.001684 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 15 9 8 8 15 9 15
<<< (M = 9, K = 8, N = 15) : 114.932754
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 121.001684
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,15) :   117.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1162 (10.3%), 10088 (89.7%) left; Finishing by Sat Oct 21  6:40:35 2000

(6,8,9) <- (1,1,9).*(6, 8+0,1): 147.649577 Mflop/s
(12,8,15) <- (2,1,15).*(6, 8+0,1): 151.516326 Mflop/s

Testing m0 = 6, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 9 6 8 8 9 6 9
<<< (M = 6, K = 8, N = 9) : 147.649577
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 15 12 8 8 15 12 15
<<< (M = 12, K = 8, N = 15) : 151.516326
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 8,1) :   149.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1163 (10.3%), 10087 (89.7%) left; Finishing by Sat Oct 21  6:40:42 2000

(7,11,8) <- (1,0,4).*(7, 11+0,2): 115.009663 Mflop/s
(14,11,14) <- (2,1,7).*(7, 11+0,2): 134.217391 Mflop/s

Testing m0 = 7, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 11 8 7 11 11 8 7 8
<<< (M = 7, K = 11, N = 8) : 115.009663
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 14 14 11 11 14 14 14
<<< (M = 14, K = 11, N = 14) : 134.217391
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 11,2) :   123.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1164 (10.3%), 10086 (89.7%) left; Finishing by Sat Oct 21  6:40:48 2000

(8,12,9) <- (4,0,3).*(2, 12+0,3): 69.532689 Mflop/s
(14,12,15) <- (7,1,5).*(2, 12+0,3): 63.018072 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 69.532689
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 63.018072
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 12,3) :    66.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1165 (10.4%), 10085 (89.6%) left; Finishing by Sat Oct 21  6:40:35 2000

(6,8,8) <- (1,1,4).*(6, 8+0,2): 46.096128 Mflop/s
(12,8,14) <- (2,1,7).*(6, 8+0,2): 46.912086 Mflop/s

Testing m0 = 6, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 8 6 8 8 8 6 8
<<< (M = 6, K = 8, N = 8) : 46.096128
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 14 12 8 8 14 12 14
<<< (M = 12, K = 8, N = 14) : 46.912086
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 8,2) :    46.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1166 (10.4%), 10084 (89.6%) left; Finishing by Sat Oct 21  6:40:32 2000

(8,10,6) <- (4,0,1).*(2, 10+0,6): 38.663802 Mflop/s
(14,10,12) <- (7,1,2).*(2, 10+0,6): 36.877859 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  10 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 6 8 10 10 6 8 6
<<< (M = 8, K = 10, N = 6) : 38.663802
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 12 14 10 10 12 14 12
<<< (M = 14, K = 10, N = 12) : 36.877859
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 10,6) :    37.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1167 (10.4%), 10083 (89.6%) left; Finishing by Sat Oct 21  6:40:29 2000

(5,8,8) <- (1,4,4).*(5, 2+0,2): 49.503715 Mflop/s
(15,14,14) <- (3,7,7).*(5, 2+0,2): 62.827932 Mflop/s

Testing m0 = 5, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 8 5 8 8 8 5 8
<<< (M = 5, K = 8, N = 8) : 49.503715
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 62.827932
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 2,2) :    55.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1168 (10.4%), 10082 (89.6%) left; Finishing by Sat Oct 21  6:40:25 2000

(9,13,9) <- (1,0,9).*(9, 13+0,1): 134.246268 Mflop/s
(9,13,15) <- (1,1,15).*(9, 13+0,1): 135.423779 Mflop/s

Testing m0 = 9, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 9  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 134.246268
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 15 9 13 13 15 9 15
<<< (M = 9, K = 13, N = 15) : 135.423779
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (9, 13,1) :   134.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1169 (10.4%), 10081 (89.6%) left; Finishing by Sat Oct 21  6:40:22 2000

(9,15,8) <- (9,0,1).*(1, 15+0,8): 130.086632 Mflop/s
(15,15,8) <- (15,1,1).*(1, 15+0,8): 129.522565 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 130.086632
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 8 15 15 15 8 15 8
<<< (M = 15, K = 15, N = 8) : 129.522565
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,8) :   129.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1170 (10.4%), 10080 (89.6%) left; Finishing by Sat Oct 21  6:40:19 2000

(11,14,9) <- (0,0,9).*(11, 14+0,1): 144.475127 Mflop/s
(11,14,15) <- (1,1,15).*(11, 14+0,1): 144.063829 Mflop/s

Testing m0 = 11, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 11  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 9 11 14 14 9 11 9
<<< (M = 11, K = 14, N = 9) : 144.475127
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 15 11 14 14 15 11 15
<<< (M = 11, K = 14, N = 15) : 144.063829
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (11, 14,1) :   144.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1171 (10.4%), 10079 (89.6%) left; Finishing by Sat Oct 21  6:40:15 2000

(8,13,9) <- (1,0,9).*(8, 13+0,1): 98.074180 Mflop/s
(8,13,15) <- (1,1,15).*(8, 13+0,1): 98.707066 Mflop/s

Testing m0 = 8, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 98.074180
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 15 8 13 13 15 8 15
<<< (M = 8, K = 13, N = 15) : 98.707066
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 13,1) :    98.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1172 (10.4%), 10078 (89.6%) left; Finishing by Sat Oct 21  6:40:02 2000

(8,7,9) <- (1,1,9).*(8, 7+0,1): 105.825640 Mflop/s
(8,14,15) <- (1,2,15).*(8, 7+0,1): 129.367621 Mflop/s

Testing m0 = 8, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 105.825640
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 15 8 14 14 15 8 15
<<< (M = 8, K = 14, N = 15) : 129.367621
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 7,1) :   116.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1173 (10.4%), 10077 (89.6%) left; Finishing by Sat Oct 21  6:40:09 2000

(9,8,8) <- (3,1,2).*(3, 8+0,4): 103.454410 Mflop/s
(15,8,12) <- (5,1,3).*(3, 8+0,4): 107.741278 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 103.454410
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 12 15 8 8 12 15 12
<<< (M = 15, K = 8, N = 12) : 107.741278
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 8,4) :   105.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1174 (10.4%), 10076 (89.6%) left; Finishing by Sat Oct 21  6:40:15 2000

(8,10,8) <- (4,0,1).*(2, 10+0,8): 38.089997 Mflop/s
(14,10,8) <- (7,1,1).*(2, 10+0,8): 38.251281 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  10 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 38.089997
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 8 14 10 10 8 14 8
<<< (M = 14, K = 10, N = 8) : 38.251281
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 10,8) :    38.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1175 (10.4%), 10075 (89.6%) left; Finishing by Sat Oct 21  6:40:12 2000

(15,10,9) <- (0,0,9).*(15, 10+0,1): 52.065657 Mflop/s
(15,10,15) <- (1,1,15).*(15, 10+0,1): 52.505284 Mflop/s

Testing m0 = 15, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 15  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 9 15 10 10 9 15 9
<<< (M = 15, K = 10, N = 9) : 52.065657
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 52.505284
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (15, 10,1) :    52.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1176 (10.5%), 10074 (89.5%) left; Finishing by Sat Oct 21  6:40:09 2000

(9,8,9) <- (3,1,9).*(3, 8+0,1): 153.241850 Mflop/s
(15,8,15) <- (5,1,15).*(3, 8+0,1): 154.231357 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 153.241850
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 154.231357
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 8,1) :   153.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1177 (10.5%), 10073 (89.5%) left; Finishing by Sat Oct 21  6:40:15 2000

(9,9,9) <- (3,3,9).*(3, 3+0,1): 153.024878 Mflop/s
(15,15,15) <- (5,5,15).*(3, 3+0,1): 182.187937 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 153.024878
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 182.187937
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 3,1) :   166.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1178 (10.5%), 10072 (89.5%) left; Finishing by Sat Oct 21  6:40:21 2000

(9,8,14) <- (9,1,0).*(1, 8+0,14): 95.346432 Mflop/s
(15,8,14) <- (15,1,1).*(1, 8+0,14): 96.473000 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 14 9 8 8 14 9 14
<<< (M = 9, K = 8, N = 14) : 95.346432
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 14 15 8 8 14 15 14
<<< (M = 15, K = 8, N = 14) : 96.473000
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,14) :    95.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1179 (10.5%), 10071 (89.5%) left; Finishing by Sat Oct 21  6:40:18 2000

(6,9,9) <- (1,3,9).*(6, 3+0,1): 145.870398 Mflop/s
(12,15,15) <- (2,5,15).*(6, 3+0,1): 166.331711 Mflop/s

Testing m0 = 6, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 9 6 9 9 9 6 9
<<< (M = 6, K = 9, N = 9) : 145.870398
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 166.331711
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 3,1) :   155.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1180 (10.5%), 10070 (89.5%) left; Finishing by Sat Oct 21  6:40:15 2000

(6,8,8) <- (1,4,4).*(6, 2+0,2): 118.564659 Mflop/s
(12,14,14) <- (2,7,7).*(6, 2+0,2): 129.545498 Mflop/s

Testing m0 = 6, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 8 6 8 8 8 6 8
<<< (M = 6, K = 8, N = 8) : 118.564659
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 129.545498
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 2,2) :   123.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1181 (10.5%), 10069 (89.5%) left; Finishing by Sat Oct 21  6:40:21 2000

(9,10,12) <- (9,0,0).*(1, 10+0,12): 118.707372 Mflop/s
(15,10,12) <- (15,1,1).*(1, 10+0,12): 117.977630 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 12 9 10 10 12 9 12
<<< (M = 9, K = 10, N = 12) : 118.707372
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 117.977630
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,12) :   118.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1182 (10.5%), 10068 (89.5%) left; Finishing by Sat Oct 21  6:40:18 2000

(9,11,15) <- (9,0,0).*(1, 11+0,15): 30.518088 Mflop/s
(15,11,15) <- (15,1,1).*(1, 11+0,15): 34.337590 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 15 9 11 11 15 9 15
<<< (M = 9, K = 11, N = 15) : 30.518088
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 34.337590
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,15) :    32.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1183 (10.5%), 10067 (89.5%) left; Finishing by Sat Oct 21  6:40:14 2000

(9,13,9) <- (3,0,9).*(3, 13+0,1): 169.516249 Mflop/s
(15,13,15) <- (5,1,15).*(3, 13+0,1): 174.607306 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 169.516249
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 174.607306
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 13,1) :   172.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1184 (10.5%), 10066 (89.5%) left; Finishing by Sat Oct 21  6:40:11 2000

(9,7,10) <- (9,1,0).*(1, 7+0,10): 108.522668 Mflop/s
(15,14,10) <- (15,2,1).*(1, 7+0,10): 122.968014 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 10 9 7 7 10 9 10
<<< (M = 9, K = 7, N = 10) : 108.522668
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 10 15 14 14 10 15 10
<<< (M = 15, K = 14, N = 10) : 122.968014
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,10) :   115.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1185 (10.5%), 10065 (89.5%) left; Finishing by Sat Oct 21  6:40:08 2000

(8,12,5) <- (4,0,1).*(2, 12+0,5): 44.331795 Mflop/s
(14,12,15) <- (7,1,3).*(2, 12+0,5): 39.025644 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  12 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 5 8 12 12 5 8 5
<<< (M = 8, K = 12, N = 5) : 44.331795
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 39.025644
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 12,5) :    41.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1186 (10.5%), 10064 (89.5%) left; Finishing by Sat Oct 21  6:40:05 2000

(8,9,8) <- (2,9,2).*(4,1+0,4): 114.320664 Mflop/s
(12,15,12) <- (3,15,3).*(4,1+0,4): 127.427558 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 114.320664
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 12 12 15 15 12 12 12
<<< (M = 12, K = 15, N = 12) : 127.427558
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4,1,4) :   120.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1187 (10.6%), 10063 (89.4%) left; Finishing by Sat Oct 21  6:40:11 2000

(8,11,9) <- (2,0,9).*(4, 11+0,1): 162.161255 Mflop/s
(12,11,15) <- (3,1,15).*(4, 11+0,1): 168.996383 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 162.161255
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 168.996383
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 11,1) :   165.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1188 (10.6%), 10062 (89.4%) left; Finishing by Sat Oct 21  6:40:17 2000

(8,5,9) <- (2,1,9).*(4, 5+0,1): 108.755121 Mflop/s
(12,15,15) <- (3,3,15).*(4, 5+0,1): 176.208399 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 9 8 5 5 9 8 9
<<< (M = 8, K = 5, N = 9) : 108.755121
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 176.208399
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 5,1) :   134.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1189 (10.6%), 10061 (89.4%) left; Finishing by Sat Oct 21  6:40:23 2000

(6,7,9) <- (1,1,9).*(6, 7+0,1): 137.479114 Mflop/s
(12,14,15) <- (2,2,15).*(6, 7+0,1): 175.234610 Mflop/s

Testing m0 = 6, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 7 9 6 7 7 9 6 9
<<< (M = 6, K = 7, N = 9) : 137.479114
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 175.234610
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 7,1) :   154.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1190 (10.6%), 10060 (89.4%) left; Finishing by Sat Oct 21  6:40:30 2000

(8,8,9) <- (4,2,3).*(2, 4+0,3): 46.429374 Mflop/s
(14,12,15) <- (7,3,5).*(2, 4+0,3): 57.756113 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 46.429374
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 57.756113
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 4,3) :    51.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1191 (10.6%), 10059 (89.4%) left; Finishing by Sat Oct 21  6:40:17 2000

(9,13,9) <- (9,0,9).*(1, 13+0,1): 127.114982 Mflop/s
(15,13,15) <- (15,1,15).*(1, 13+0,1): 130.066224 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 127.114982
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 130.066224
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,1) :   128.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1192 (10.6%), 10058 (89.4%) left; Finishing by Sat Oct 21  6:40:14 2000

(5,8,9) <- (1,4,3).*(5, 2+0,3): 37.822994 Mflop/s
(15,14,15) <- (3,7,5).*(5, 2+0,3): 45.061477 Mflop/s

Testing m0 = 5, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 37.822994
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 45.061477
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 2,3) :    41.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1193 (10.6%), 10057 (89.4%) left; Finishing by Sat Oct 21  6:40:11 2000

(9,8,9) <- (1,2,9).*(9, 4+0,1): 71.881589 Mflop/s
(9,12,15) <- (1,3,15).*(9, 4+0,1): 78.470983 Mflop/s

Testing m0 = 9, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 9  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 71.881589
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 78.470983
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (9, 4,1) :    75.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1194 (10.6%), 10056 (89.4%) left; Finishing by Sat Oct 21  6:39:58 2000

(9,9,9) <- (3,9,3).*(3,1+0,3): 96.576470 Mflop/s
(15,15,15) <- (5,15,5).*(3,1+0,3): 130.440736 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 96.576470
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 130.440736
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3,1,3) :   111.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1195 (10.6%), 10055 (89.4%) left; Finishing by Sat Oct 21  6:40:04 2000

(9,11,11) <- (9,0,0).*(1, 11+0,11): 120.348827 Mflop/s
(15,11,11) <- (15,1,1).*(1, 11+0,11): 121.130977 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 11 9 11 11 11 9 11
<<< (M = 9, K = 11, N = 11) : 120.348827
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 11 15 11 11 11 15 11
<<< (M = 15, K = 11, N = 11) : 121.130977
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,11) :   120.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1196 (10.6%), 10054 (89.4%) left; Finishing by Sat Oct 21  6:40:01 2000

(9,8,5) <- (3,2,1).*(3, 4+0,5): 106.129374 Mflop/s
(15,12,15) <- (5,3,3).*(3, 4+0,5): 133.184064 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  4 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 106.129374
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 133.184064
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 4,5) :   118.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1197 (10.6%), 10053 (89.4%) left; Finishing by Sat Oct 21  6:40:07 2000

(9,15,6) <- (9,0,1).*(1, 15+0,6): 133.921703 Mflop/s
(15,15,12) <- (15,1,2).*(1, 15+0,6): 139.860383 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 6 9 15 15 6 9 6
<<< (M = 9, K = 15, N = 6) : 133.921703
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 139.860383
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,6) :   136.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1198 (10.6%), 10052 (89.4%) left; Finishing by Sat Oct 21  6:40:13 2000

(9,8,13) <- (9,1,0).*(1, 8+0,13): 117.805360 Mflop/s
(15,8,13) <- (15,1,1).*(1, 8+0,13): 118.461520 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 13 9 8 8 13 9 13
<<< (M = 9, K = 8, N = 13) : 117.805360
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 13 15 8 8 13 15 13
<<< (M = 15, K = 8, N = 13) : 118.461520
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,13) :   118.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1199 (10.7%), 10051 (89.3%) left; Finishing by Sat Oct 21  6:40:10 2000

(8,7,8) <- (4,1,2).*(2, 7+0,4): 50.044805 Mflop/s
(14,14,12) <- (7,2,3).*(2, 7+0,4): 47.011694 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 50.044805
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 47.011694
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 7,4) :    48.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1200 (10.7%), 10050 (89.3%) left; Finishing by Sat Oct 21  6:39:58 2000

(6,12,8) <- (1,0,4).*(6, 12+0,2): 48.099476 Mflop/s
(12,12,14) <- (2,1,7).*(6, 12+0,2): 51.567041 Mflop/s

Testing m0 = 6, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 8 6 12 12 8 6 8
<<< (M = 6, K = 12, N = 8) : 48.099476
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 51.567041
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 12,2) :    49.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1201 (10.7%), 10049 (89.3%) left; Finishing by Sat Oct 21  6:39:54 2000

(9,9,12) <- (9,9,0).*(1,1+0,12): 27.313541 Mflop/s
(15,15,12) <- (15,15,1).*(1,1+0,12): 28.423827 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 12 9 9 9 12 9 12
<<< (M = 9, K = 9, N = 12) : 27.313541
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 28.423827
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,12) :    27.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1202 (10.7%), 10048 (89.3%) left; Finishing by Sat Oct 21  6:39:51 2000

(9,9,13) <- (9,9,0).*(1,1+0,13): 28.679513 Mflop/s
(15,15,13) <- (15,15,1).*(1,1+0,13): 29.501377 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 13 9 9 9 13 9 13
<<< (M = 9, K = 9, N = 13) : 28.679513
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 13 15 15 15 13 15 13
<<< (M = 15, K = 15, N = 13) : 29.501377
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,13) :    29.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1203 (10.7%), 10047 (89.3%) left; Finishing by Sat Oct 21  6:39:48 2000

(9,6,15) <- (9,1,0).*(1, 6+0,15): 106.984310 Mflop/s
(15,12,15) <- (15,2,1).*(1, 6+0,15): 122.806212 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 15 9 6 6 15 9 15
<<< (M = 9, K = 6, N = 15) : 106.984310
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 122.806212
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,15) :   114.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1204 (10.7%), 10046 (89.3%) left; Finishing by Sat Oct 21  6:39:45 2000

(9,9,8) <- (9,3,1).*(1, 3+0,8): 116.017533 Mflop/s
(15,15,8) <- (15,5,1).*(1, 3+0,8): 127.763592 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 116.017533
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 8 15 15 15 8 15 8
<<< (M = 15, K = 15, N = 8) : 127.763592
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,8) :   121.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1205 (10.7%), 10045 (89.3%) left; Finishing by Sat Oct 21  6:39:51 2000

(8,15,8) <- (4,0,1).*(2, 15+0,8): 39.719440 Mflop/s
(14,15,8) <- (7,1,1).*(2, 15+0,8): 40.387297 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  15 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 39.719440
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 8 14 15 15 8 14 8
<<< (M = 14, K = 15, N = 8) : 40.387297
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 15,8) :    40.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1206 (10.7%), 10044 (89.3%) left; Finishing by Sat Oct 21  6:39:57 2000

(9,8,8) <- (3,1,4).*(3, 8+0,2): 90.977472 Mflop/s
(15,8,14) <- (5,1,7).*(3, 8+0,2): 92.264573 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 90.977472
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 14 15 8 8 14 15 14
<<< (M = 15, K = 8, N = 14) : 92.264573
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 8,2) :    91.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1207 (10.7%), 10043 (89.3%) left; Finishing by Sat Oct 21  6:39:45 2000

(9,14,10) <- (9,0,0).*(1, 14+0,10): 94.719711 Mflop/s
(15,14,10) <- (15,1,1).*(1, 14+0,10): 122.290827 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 10 9 14 14 10 9 10
<<< (M = 9, K = 14, N = 10) : 94.719711
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 10 15 14 14 10 15 10
<<< (M = 15, K = 14, N = 10) : 122.290827
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,10) :   106.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1208 (10.7%), 10042 (89.3%) left; Finishing by Sat Oct 21  6:39:41 2000

(9,9,5) <- (3,9,1).*(3,1+0,5): 104.487907 Mflop/s
(15,15,15) <- (5,15,3).*(3,1+0,5): 135.796361 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3 1 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 104.487907
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 135.796361
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3,1,5) :   118.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1209 (10.7%), 10041 (89.3%) left; Finishing by Sat Oct 21  6:39:48 2000

(9,7,9) <- (3,1,9).*(3, 7+0,1): 137.531764 Mflop/s
(15,14,15) <- (5,2,15).*(3, 7+0,1): 183.958224 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 137.531764
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 183.958224
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 7,1) :   157.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1210 (10.8%), 10040 (89.2%) left; Finishing by Sat Oct 21  6:39:54 2000

(12,8,9) <- (0,2,9).*(12, 4+0,1): 127.859535 Mflop/s
(12,12,15) <- (1,3,15).*(12, 4+0,1): 141.171179 Mflop/s

Testing m0 = 12, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 12  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 9 12 8 8 9 12 9
<<< (M = 12, K = 8, N = 9) : 127.859535
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 141.171179
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (12, 4,1) :   134.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1211 (10.8%), 10039 (89.2%) left; Finishing by Sat Oct 21  6:39:51 2000

(9,8,16) <- (9,1,0).*(1, 8+0,16): 105.350437 Mflop/s
(15,8,16) <- (15,1,0).*(1, 8+0,16): 106.876488 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 16 9 8 8 16 9 16
<<< (M = 9, K = 8, N = 16) : 105.350437
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 16 15 8 8 16 15 16
<<< (M = 15, K = 8, N = 16) : 106.876488
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,16) :   106.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1212 (10.8%), 10038 (89.2%) left; Finishing by Sat Oct 21  6:39:47 2000

(14,8,9) <- (0,2,9).*(14, 4+0,1): 124.411156 Mflop/s
(14,12,15) <- (1,3,15).*(14, 4+0,1): 132.606737 Mflop/s

Testing m0 = 14, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 14  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 9 14 8 8 9 14 9
<<< (M = 14, K = 8, N = 9) : 124.411156
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 132.606737
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (14, 4,1) :   128.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1213 (10.8%), 10037 (89.2%) left; Finishing by Sat Oct 21  6:39:44 2000

(8,14,8) <- (4,0,4).*(2, 14+0,2): 151.230968 Mflop/s
(14,14,14) <- (7,1,7).*(2, 14+0,2): 154.010666 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 151.230968
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 154.010666
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 14,2) :   152.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1214 (10.8%), 10036 (89.2%) left; Finishing by Sat Oct 21  6:39:50 2000

(8,12,9) <- (1,0,9).*(8, 12+0,1): 94.976326 Mflop/s
(8,12,15) <- (1,1,15).*(8, 12+0,1): 96.365852 Mflop/s

Testing m0 = 8, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 94.976326
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 15 8 12 12 15 8 15
<<< (M = 8, K = 12, N = 15) : 96.365852
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 12,1) :    95.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1215 (10.8%), 10035 (89.2%) left; Finishing by Sat Oct 21  6:39:47 2000

(9,14,12) <- (9,0,0).*(1, 14+0,12): 101.150965 Mflop/s
(15,14,12) <- (15,1,1).*(1, 14+0,12): 122.273610 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 12 9 14 14 12 9 12
<<< (M = 9, K = 14, N = 12) : 101.150965
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 122.273610
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,12) :   110.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1216 (10.8%), 10034 (89.2%) left; Finishing by Sat Oct 21  6:39:44 2000

(9,13,12) <- (9,0,0).*(1, 13+0,12): 121.615437 Mflop/s
(15,13,12) <- (15,1,1).*(1, 13+0,12): 122.377951 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 12 9 13 13 12 9 12
<<< (M = 9, K = 13, N = 12) : 121.615437
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 122.377951
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,12) :   122.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1217 (10.8%), 10033 (89.2%) left; Finishing by Sat Oct 21  6:39:41 2000

(8,13,8) <- (2,0,2).*(4, 13+0,4): 42.619731 Mflop/s
(12,13,12) <- (3,1,3).*(4, 13+0,4): 46.285144 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 42.619731
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 12 12 13 13 12 12 12
<<< (M = 12, K = 13, N = 12) : 46.285144
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 13,4) :    44.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1218 (10.8%), 10032 (89.2%) left; Finishing by Sat Oct 21  6:39:38 2000

(8,5,8) <- (2,1,2).*(4, 5+0,4): 35.401966 Mflop/s
(12,15,12) <- (3,3,3).*(4, 5+0,4): 43.566833 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 8 8 5 5 8 8 8
<<< (M = 8, K = 5, N = 8) : 35.401966
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 12 12 15 15 12 12 12
<<< (M = 12, K = 15, N = 12) : 43.566833
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 5,4) :    39.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1219 (10.8%), 10031 (89.2%) left; Finishing by Sat Oct 21  6:39:35 2000

(9,6,7) <- (9,1,1).*(1, 6+0,7): 103.243962 Mflop/s
(15,12,14) <- (15,2,2).*(1, 6+0,7): 127.190691 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 7 9 6 6 7 9 7
<<< (M = 9, K = 6, N = 7) : 103.243962
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 127.190691
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,7) :   114.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1220 (10.8%), 10030 (89.2%) left; Finishing by Sat Oct 21  6:39:41 2000

(8,9,9) <- (4,3,9).*(2, 3+0,1): 127.333303 Mflop/s
(14,15,15) <- (7,5,15).*(2, 3+0,1): 158.870570 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 127.333303
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 158.870570
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 3,1) :   141.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1221 (10.9%), 10029 (89.1%) left; Finishing by Sat Oct 21  6:39:38 2000

(12,9,9) <- (0,9,9).*(12,1+0,1): 50.101046 Mflop/s
(12,15,15) <- (1,15,15).*(12,1+0,1): 58.892654 Mflop/s

Testing m0 = 12, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 12 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 9 12 9 9 9 12 9
<<< (M = 12, K = 9, N = 9) : 50.101046
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 58.892654
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (12,1,1) :    54.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1222 (10.9%), 10028 (89.1%) left; Finishing by Sat Oct 21  6:39:35 2000

(9,9,8) <- (3,1,4).*(3, 9+0,2): 90.400429 Mflop/s
(15,9,14) <- (5,1,7).*(3, 9+0,2): 92.697504 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 90.400429
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 92.697504
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 9,2) :    91.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1223 (10.9%), 10027 (89.1%) left; Finishing by Sat Oct 21  6:39:32 2000

(7,9,8) <- (1,9,4).*(7,1+0,2): 46.564863 Mflop/s
(14,15,14) <- (2,15,7).*(7,1+0,2): 45.951567 Mflop/s

Testing m0 = 7, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 8 7 9 9 8 7 8
<<< (M = 7, K = 9, N = 8) : 46.564863
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 45.951567
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7,1,2) :    46.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1224 (10.9%), 10026 (89.1%) left; Finishing by Sat Oct 21  6:39:19 2000

(8,8,8) <- (4,4,1).*(2, 2+0,8): 36.892775 Mflop/s
(14,14,8) <- (7,7,1).*(2, 2+0,8): 39.429618 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  2 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 36.892775
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 8 14 14 14 8 14 8
<<< (M = 14, K = 14, N = 8) : 39.429618
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 2,8) :    38.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1225 (10.9%), 10025 (89.1%) left; Finishing by Sat Oct 21  6:39:16 2000

(8,10,8) <- (2,0,2).*(4, 10+0,4): 40.866981 Mflop/s
(12,10,12) <- (3,1,3).*(4, 10+0,4): 44.513922 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 40.866981
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 12 12 10 10 12 12 12
<<< (M = 12, K = 10, N = 12) : 44.513922
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 10,4) :    42.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1226 (10.9%), 10024 (89.1%) left; Finishing by Sat Oct 21  6:39:13 2000

(9,8,6) <- (9,2,1).*(1, 4+0,6): 116.849809 Mflop/s
(15,12,12) <- (15,3,2).*(1, 4+0,6): 132.071263 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 6 9 8 8 6 9 6
<<< (M = 9, K = 8, N = 6) : 116.849809
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 132.071263
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,6) :   124.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1227 (10.9%), 10023 (89.1%) left; Finishing by Sat Oct 21  6:39:19 2000

(11,15,9) <- (0,0,9).*(11, 15+0,1): 132.816135 Mflop/s
(11,15,15) <- (1,1,15).*(11, 15+0,1): 134.598074 Mflop/s

Testing m0 = 11, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 11  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 9 11 15 15 9 11 9
<<< (M = 11, K = 15, N = 9) : 132.816135
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 15 11 15 15 15 11 15
<<< (M = 11, K = 15, N = 15) : 134.598074
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (11, 15,1) :   133.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1228 (10.9%), 10022 (89.1%) left; Finishing by Sat Oct 21  6:39:16 2000

(12,6,9) <- (0,1,9).*(12, 6+0,1): 119.018104 Mflop/s
(12,12,15) <- (1,2,15).*(12, 6+0,1): 144.922724 Mflop/s

Testing m0 = 12, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 12  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 6 9 12 6 6 9 12 9
<<< (M = 12, K = 6, N = 9) : 119.018104
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 144.922724
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (12, 6,1) :   130.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1229 (10.9%), 10021 (89.1%) left; Finishing by Sat Oct 21  6:39:22 2000

(5,9,8) <- (1,1,4).*(5, 9+0,2): 124.892911 Mflop/s
(15,9,14) <- (3,1,7).*(5, 9+0,2): 127.275635 Mflop/s

Testing m0 = 5, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 8 5 9 9 8 5 8
<<< (M = 5, K = 9, N = 8) : 124.892911
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 127.275635
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 9,2) :   126.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1230 (10.9%), 10020 (89.1%) left; Finishing by Sat Oct 21  6:39:28 2000

(9,13,9) <- (3,0,3).*(3, 13+0,3): 114.170602 Mflop/s
(15,13,15) <- (5,1,5).*(3, 13+0,3): 144.044926 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 114.170602
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 144.044926
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 13,3) :   127.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1231 (10.9%), 10019 (89.1%) left; Finishing by Sat Oct 21  6:39:25 2000

(8,8,8) <- (4,4,2).*(2, 2+0,4): 48.016042 Mflop/s
(14,14,12) <- (7,7,3).*(2, 2+0,4): 44.969954 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 48.016042
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 44.969954
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 2,4) :    46.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1232 (11.0%), 10018 (89.0%) left; Finishing by Sat Oct 21  6:39:22 2000

(9,8,9) <- (9,1,1).*(1, 8+0,9): 113.331515 Mflop/s
(15,8,9) <- (15,1,1).*(1, 8+0,9): 114.994753 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 113.331515
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 9 15 8 8 9 15 9
<<< (M = 15, K = 8, N = 9) : 114.994753
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,9) :   114.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1233 (11.0%), 10017 (89.0%) left; Finishing by Sat Oct 21  6:39:19 2000

(9,10,16) <- (9,0,0).*(1, 10+0,16): 122.576523 Mflop/s
(15,10,16) <- (15,1,0).*(1, 10+0,16): 122.423770 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 16 9 10 10 16 9 16
<<< (M = 9, K = 10, N = 16) : 122.576523
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 16 15 10 10 16 15 16
<<< (M = 15, K = 10, N = 16) : 122.423770
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,16) :   122.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1234 (11.0%), 10016 (89.0%) left; Finishing by Sat Oct 21  6:39:16 2000

(8,15,8) <- (4,0,2).*(2, 15+0,4): 54.897497 Mflop/s
(14,15,12) <- (7,1,3).*(2, 15+0,4): 47.730092 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 54.897497
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 47.730092
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 15,4) :    51.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1235 (11.0%), 10015 (89.0%) left; Finishing by Sat Oct 21  6:39:22 2000

(9,8,7) <- (9,1,1).*(1, 8+0,7): 113.991659 Mflop/s
(15,8,14) <- (15,1,2).*(1, 8+0,7): 120.735528 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 7 9 8 8 7 9 7
<<< (M = 9, K = 8, N = 7) : 113.991659
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 14 15 8 8 14 15 14
<<< (M = 15, K = 8, N = 14) : 120.735528
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,7) :   117.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1236 (11.0%), 10014 (89.0%) left; Finishing by Sat Oct 21  6:39:19 2000

(9,5,6) <- (9,1,1).*(1, 5+0,6): 99.269789 Mflop/s
(15,15,12) <- (15,3,2).*(1, 5+0,6): 136.229763 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 6 9 5 5 6 9 6
<<< (M = 9, K = 5, N = 6) : 99.269789
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 136.229763
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,6) :   114.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1237 (11.0%), 10013 (89.0%) left; Finishing by Sat Oct 21  6:39:16 2000

(9,8,10) <- (9,2,0).*(1, 4+0,10): 110.150917 Mflop/s
(15,12,10) <- (15,3,1).*(1, 4+0,10): 118.310104 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 10 9 8 8 10 9 10
<<< (M = 9, K = 8, N = 10) : 110.150917
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 10 15 12 12 10 15 10
<<< (M = 15, K = 12, N = 10) : 118.310104
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,10) :   114.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1238 (11.0%), 10012 (89.0%) left; Finishing by Sat Oct 21  6:39:22 2000

(8,11,9) <- (2,0,3).*(4, 11+0,3): 44.988839 Mflop/s
(12,11,15) <- (3,1,5).*(4, 11+0,3): 51.550246 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 44.988839
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 51.550246
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 11,3) :    48.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1239 (11.0%), 10011 (89.0%) left; Finishing by Sat Oct 21  6:39:28 2000

(9,8,5) <- (9,1,1).*(1, 8+0,5): 115.736514 Mflop/s
(15,8,15) <- (15,1,3).*(1, 8+0,5): 123.522473 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 115.736514
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 123.522473
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,5) :   119.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1240 (11.0%), 10010 (89.0%) left; Finishing by Sat Oct 21  6:39:25 2000

(11,12,9) <- (0,0,9).*(11, 12+0,1): 130.384513 Mflop/s
(11,12,15) <- (1,1,15).*(11, 12+0,1): 130.869453 Mflop/s

Testing m0 = 11, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 11  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 9 11 12 12 9 11 9
<<< (M = 11, K = 12, N = 9) : 130.384513
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 15 11 12 12 15 11 15
<<< (M = 11, K = 12, N = 15) : 130.869453
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (11, 12,1) :   130.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1241 (11.0%), 10009 (89.0%) left; Finishing by Sat Oct 21  6:39:22 2000

(11,6,9) <- (0,1,9).*(11, 6+0,1): 62.381871 Mflop/s
(11,12,15) <- (1,2,15).*(11, 6+0,1): 69.845099 Mflop/s

Testing m0 = 11, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 11  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 6 9 11 6 6 9 11 9
<<< (M = 11, K = 6, N = 9) : 62.381871
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 15 11 12 12 15 11 15
<<< (M = 11, K = 12, N = 15) : 69.845099
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (11, 6,1) :    65.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1242 (11.0%), 10008 (89.0%) left; Finishing by Sat Oct 21  6:39:28 2000

(9,8,8) <- (3,4,4).*(3, 2+0,2): 87.725187 Mflop/s
(15,14,14) <- (5,7,7).*(3, 2+0,2): 122.050001 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 87.725187
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 122.050001
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 2,2) :   102.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1243 (11.0%), 10007 (89.0%) left; Finishing by Sat Oct 21  6:39:34 2000

(8,12,8) <- (2,0,4).*(4, 12+0,2): 72.074895 Mflop/s
(12,12,14) <- (3,1,7).*(4, 12+0,2): 68.401187 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 72.074895
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 68.401187
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 12,2) :    70.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1244 (11.1%), 10006 (88.9%) left; Finishing by Sat Oct 21  6:39:31 2000

(9,9,10) <- (9,9,0).*(1,1+0,10): 25.854030 Mflop/s
(15,15,10) <- (15,15,1).*(1,1+0,10): 28.536121 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 10 9 9 9 10 9 10
<<< (M = 9, K = 9, N = 10) : 25.854030
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 10 15 15 15 10 15 10
<<< (M = 15, K = 15, N = 10) : 28.536121
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,10) :    27.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1245 (11.1%), 10005 (88.9%) left; Finishing by Sat Oct 21  6:39:19 2000

(8,9,9) <- (4,9,3).*(2,1+0,3): 43.762497 Mflop/s
(14,15,15) <- (7,15,5).*(2,1+0,3): 59.687630 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 43.762497
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 59.687630
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2,1,3) :    50.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1246 (11.1%), 10004 (88.9%) left; Finishing by Sat Oct 21  6:39:16 2000

(8,6,9) <- (2,1,9).*(4, 6+0,1): 124.075385 Mflop/s
(12,12,15) <- (3,2,15).*(4, 6+0,1): 177.345081 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 124.075385
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 177.345081
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 6,1) :   146.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1247 (11.1%), 10003 (88.9%) left; Finishing by Sat Oct 21  6:39:22 2000

(8,12,8) <- (1,0,4).*(8, 12+0,2): 46.493461 Mflop/s
(8,12,14) <- (1,1,7).*(8, 12+0,2): 46.706647 Mflop/s

Testing m0 = 8, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 46.493461
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 14 8 12 12 14 8 14
<<< (M = 8, K = 12, N = 14) : 46.706647
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 12,2) :    46.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1248 (11.1%), 10002 (88.9%) left; Finishing by Sat Oct 21  6:39:19 2000

(9,6,6) <- (9,1,1).*(1, 6+0,6): 110.266361 Mflop/s
(15,12,12) <- (15,2,2).*(1, 6+0,6): 134.436406 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 6 9 6 6 6 9 6
<<< (M = 9, K = 6, N = 6) : 110.266361
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 134.436406
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,6) :   121.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1249 (11.1%), 10001 (88.9%) left; Finishing by Sat Oct 21  6:39:25 2000

(9,8,11) <- (9,4,0).*(1, 2+0,11): 108.814016 Mflop/s
(15,14,11) <- (15,7,1).*(1, 2+0,11): 117.656110 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 11 9 8 8 11 9 11
<<< (M = 9, K = 8, N = 11) : 108.814016
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 11 15 14 14 11 15 11
<<< (M = 15, K = 14, N = 11) : 117.656110
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,11) :   113.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1250 (11.1%), 10000 (88.9%) left; Finishing by Sat Oct 21  6:39:22 2000

(8,8,8) <- (1,4,4).*(8, 2+0,2): 116.839307 Mflop/s
(8,14,14) <- (1,7,7).*(8, 2+0,2): 128.451031 Mflop/s

Testing m0 = 8, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 116.839307
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 14 8 14 14 14 8 14
<<< (M = 8, K = 14, N = 14) : 128.451031
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 2,2) :   122.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1251 (11.1%), 9999 (88.9%) left; Finishing by Sat Oct 21  6:39:09 2000

(9,11,13) <- (9,0,0).*(1, 11+0,13): 123.554103 Mflop/s
(15,11,13) <- (15,1,1).*(1, 11+0,13): 124.117650 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 13 9 11 11 13 9 13
<<< (M = 9, K = 11, N = 13) : 123.554103
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 13 15 11 11 13 15 13
<<< (M = 15, K = 11, N = 13) : 124.117650
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,13) :   123.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1252 (11.1%), 9998 (88.9%) left; Finishing by Sat Oct 21  6:39:06 2000

(8,5,9) <- (1,1,9).*(8, 5+0,1): 114.863704 Mflop/s
(8,15,15) <- (1,3,15).*(8, 5+0,1): 150.584348 Mflop/s

Testing m0 = 8, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 9 8 5 5 9 8 9
<<< (M = 8, K = 5, N = 9) : 114.863704
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 15 8 15 15 15 8 15
<<< (M = 8, K = 15, N = 15) : 150.584348
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 5,1) :   130.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1253 (11.1%), 9997 (88.9%) left; Finishing by Sat Oct 21  6:39:12 2000

(8,7,8) <- (2,1,2).*(4, 7+0,4): 39.163262 Mflop/s
(12,14,12) <- (3,2,3).*(4, 7+0,4): 46.285714 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 39.163262
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 12 12 14 14 12 12 12
<<< (M = 12, K = 14, N = 12) : 46.285714
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 7,4) :    42.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1254 (11.1%), 9996 (88.9%) left; Finishing by Sat Oct 21  6:39:09 2000

(9,8,5) <- (9,2,1).*(1, 4+0,5): 117.563298 Mflop/s
(15,12,15) <- (15,3,3).*(1, 4+0,5): 134.655962 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 117.563298
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 134.655962
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,5) :   125.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1255 (11.2%), 9995 (88.8%) left; Finishing by Sat Oct 21  6:39:06 2000

(7,9,8) <- (1,1,4).*(7, 9+0,2): 110.077625 Mflop/s
(14,9,14) <- (2,1,7).*(7, 9+0,2): 114.968986 Mflop/s

Testing m0 = 7, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 8 7 9 9 8 7 8
<<< (M = 7, K = 9, N = 8) : 110.077625
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 14 14 9 9 14 14 14
<<< (M = 14, K = 9, N = 14) : 114.968986
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 9,2) :   112.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1256 (11.2%), 9994 (88.8%) left; Finishing by Sat Oct 21  6:39:21 2000

(9,8,5) <- (3,1,1).*(3, 8+0,5): 104.471153 Mflop/s
(15,8,15) <- (5,1,3).*(3, 8+0,5): 110.241513 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  8 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 104.471153
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 110.241513
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 8,5) :   107.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (5, 15,1) :   190.8 MFLOPS.
Done 1257 (11.2%), 9993 (88.8%) left; Finishing by Sat Oct 21  6:39:36 2000

(8,14,9) <- (2,0,9).*(4, 14+0,1): 190.044187 Mflop/s
(12,14,15) <- (3,1,15).*(4, 14+0,1): 193.669448 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 190.044187
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 193.669448
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 14,1) :   191.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1258 (11.2%), 9992 (88.8%) left; Finishing by Sat Oct 21  6:39:24 2000

(9,15,15) <- (9,0,0).*(1, 15+0,15): 31.229852 Mflop/s
(15,15,15) <- (15,1,1).*(1, 15+0,15): 35.229027 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 31.229852
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 35.229027
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,15) :    33.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1259 (11.2%), 9991 (88.8%) left; Finishing by Sat Oct 21  6:39:30 2000

(9,8,10) <- (9,4,0).*(1, 2+0,10): 106.143501 Mflop/s
(15,14,10) <- (15,7,1).*(1, 2+0,10): 118.304689 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 10 9 8 8 10 9 10
<<< (M = 9, K = 8, N = 10) : 106.143501
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 10 15 14 14 10 15 10
<<< (M = 15, K = 14, N = 10) : 118.304689
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,10) :   111.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1260 (11.2%), 9990 (88.8%) left; Finishing by Sat Oct 21  6:39:27 2000

(5,11,9) <- (1,0,9).*(5, 11+0,1): 161.373785 Mflop/s
(15,11,15) <- (3,1,15).*(5, 11+0,1): 170.842826 Mflop/s

Testing m0 = 5, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 11 9 5 11 11 9 5 9
<<< (M = 5, K = 11, N = 9) : 161.373785
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 170.842826
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 11,1) :   166.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1261 (11.2%), 9989 (88.8%) left; Finishing by Sat Oct 21  6:39:33 2000

(5,9,8) <- (1,3,4).*(5, 3+0,2): 121.479073 Mflop/s
(15,15,14) <- (3,5,7).*(5, 3+0,2): 115.424188 Mflop/s

Testing m0 = 5, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 8 5 9 9 8 5 8
<<< (M = 5, K = 9, N = 8) : 121.479073
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 115.424188
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 3,2) :   118.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1262 (11.2%), 9988 (88.8%) left; Finishing by Sat Oct 21  6:39:39 2000

(8,8,8) <- (1,1,4).*(8, 8+0,2): 44.782897 Mflop/s
(8,8,14) <- (1,1,7).*(8, 8+0,2): 44.876146 Mflop/s

Testing m0 = 8, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 44.782897
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 14 8 8 8 14 8 14
<<< (M = 8, K = 8, N = 14) : 44.876146
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 8,2) :    44.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1263 (11.2%), 9987 (88.8%) left; Finishing by Sat Oct 21  6:39:36 2000

(9,11,8) <- (9,0,1).*(1, 11+0,8): 109.500726 Mflop/s
(15,11,8) <- (15,1,1).*(1, 11+0,8): 113.223052 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 109.500726
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 8 15 11 11 8 15 8
<<< (M = 15, K = 11, N = 8) : 113.223052
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,8) :   111.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1264 (11.2%), 9986 (88.8%) left; Finishing by Sat Oct 21  6:39:33 2000

(9,11,9) <- (1,0,9).*(9, 11+0,1): 129.098151 Mflop/s
(9,11,15) <- (1,1,15).*(9, 11+0,1): 130.681801 Mflop/s

Testing m0 = 9, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 9  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 129.098151
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 15 9 11 11 15 9 15
<<< (M = 9, K = 11, N = 15) : 130.681801
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (9, 11,1) :   129.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1265 (11.2%), 9985 (88.8%) left; Finishing by Sat Oct 21  6:39:21 2000

(8,7,8) <- (1,1,4).*(8, 7+0,2): 113.238996 Mflop/s
(8,14,14) <- (1,2,7).*(8, 7+0,2): 134.995003 Mflop/s

Testing m0 = 8, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 113.238996
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 14 8 14 14 14 8 14
<<< (M = 8, K = 14, N = 14) : 134.995003
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 7,2) :   123.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1266 (11.3%), 9984 (88.7%) left; Finishing by Sat Oct 21  6:39:27 2000

(7,9,9) <- (1,9,9).*(7,1+0,1): 97.370396 Mflop/s
(14,15,15) <- (2,15,15).*(7,1+0,1): 106.103114 Mflop/s

Testing m0 = 7, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 9 7 9 9 9 7 9
<<< (M = 7, K = 9, N = 9) : 97.370396
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 106.103114
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7,1,1) :   101.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1267 (11.3%), 9983 (88.7%) left; Finishing by Sat Oct 21  6:39:24 2000

(9,15,8) <- (3,0,2).*(3, 15+0,4): 139.697153 Mflop/s
(15,15,12) <- (5,1,3).*(3, 15+0,4): 142.569129 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 139.697153
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 142.569129
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 15,4) :   141.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1268 (11.3%), 9982 (88.7%) left; Finishing by Sat Oct 21  6:39:21 2000

(15,8,9) <- (0,2,9).*(15, 4+0,1): 53.210550 Mflop/s
(15,12,15) <- (1,3,15).*(15, 4+0,1): 55.098241 Mflop/s

Testing m0 = 15, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 15  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 9 15 8 8 9 15 9
<<< (M = 15, K = 8, N = 9) : 53.210550
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 55.098241
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (15, 4,1) :    54.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1269 (11.3%), 9981 (88.7%) left; Finishing by Sat Oct 21  6:39:18 2000

(8,12,9) <- (4,0,9).*(2, 12+0,1): 160.181884 Mflop/s
(14,12,15) <- (7,1,15).*(2, 12+0,1): 161.313716 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 160.181884
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 161.313716
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 12,1) :   160.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1270 (11.3%), 9980 (88.7%) left; Finishing by Sat Oct 21  6:39:24 2000

(8,6,8) <- (4,1,1).*(2, 6+0,8): 34.916363 Mflop/s
(14,12,8) <- (7,2,1).*(2, 6+0,8): 39.048319 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  6 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 34.916363
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 8 14 12 12 8 14 8
<<< (M = 14, K = 12, N = 8) : 39.048319
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 6,8) :    36.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1271 (11.3%), 9979 (88.7%) left; Finishing by Sat Oct 21  6:39:12 2000

(8,9,8) <- (4,3,4).*(2, 3+0,2): 133.593566 Mflop/s
(14,15,14) <- (7,5,7).*(2, 3+0,2): 146.913418 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 133.593566
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 146.913418
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 3,2) :   139.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1272 (11.3%), 9978 (88.7%) left; Finishing by Sat Oct 21  6:39:09 2000

(8,15,9) <- (2,0,9).*(4, 15+0,1): 172.254453 Mflop/s
(12,15,15) <- (3,1,15).*(4, 15+0,1): 178.459459 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 172.254453
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 178.459459
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 15,1) :   175.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1273 (11.3%), 9977 (88.7%) left; Finishing by Sat Oct 21  6:39:06 2000

(8,9,9) <- (4,1,9).*(2, 9+0,1): 137.686184 Mflop/s
(14,9,15) <- (7,1,15).*(2, 9+0,1): 142.401505 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 137.686184
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 142.401505
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 9,1) :   140.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1274 (11.3%), 9976 (88.7%) left; Finishing by Sat Oct 21  6:39:03 2000

(9,8,9) <- (1,4,9).*(9, 2+0,1): 69.434739 Mflop/s
(9,14,15) <- (1,7,15).*(9, 2+0,1): 75.626686 Mflop/s

Testing m0 = 9, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 9  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 69.434739
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 75.626686
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (9, 2,1) :    72.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1275 (11.3%), 9975 (88.7%) left; Finishing by Sat Oct 21  6:39:00 2000

(9,6,9) <- (1,1,9).*(9, 6+0,1): 63.080027 Mflop/s
(9,12,15) <- (1,2,15).*(9, 6+0,1): 74.301337 Mflop/s

Testing m0 = 9, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 9  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 63.080027
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 74.301337
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (9, 6,1) :    68.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1276 (11.3%), 9974 (88.7%) left; Finishing by Sat Oct 21  6:38:57 2000

(6,14,9) <- (1,0,9).*(6, 14+0,1): 183.653847 Mflop/s
(12,14,15) <- (2,1,15).*(6, 14+0,1): 186.183083 Mflop/s

Testing m0 = 6, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 14 9 6 14 14 9 6 9
<<< (M = 6, K = 14, N = 9) : 183.653847
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 186.183083
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 14,1) :   184.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1277 (11.4%), 9973 (88.6%) left; Finishing by Sat Oct 21  6:39:03 2000

(8,9,9) <- (2,1,9).*(4, 9+0,1): 146.967523 Mflop/s
(12,9,15) <- (3,1,15).*(4, 9+0,1): 150.580177 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 146.967523
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 150.580177
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 9,1) :   148.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1278 (11.4%), 9972 (88.6%) left; Finishing by Sat Oct 21  6:39:00 2000

(8,6,8) <- (4,1,4).*(2, 6+0,2): 122.610795 Mflop/s
(14,12,14) <- (7,2,7).*(2, 6+0,2): 147.100456 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 122.610795
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 147.100456
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 6,2) :   133.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1279 (11.4%), 9971 (88.6%) left; Finishing by Sat Oct 21  6:39:06 2000

(9,10,9) <- (3,0,9).*(3, 10+0,1): 156.511064 Mflop/s
(15,10,15) <- (5,1,15).*(3, 10+0,1): 161.234809 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 156.511064
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 161.234809
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 10,1) :   158.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1280 (11.4%), 9970 (88.6%) left; Finishing by Sat Oct 21  6:39:12 2000

(9,7,8) <- (9,1,1).*(1, 7+0,8): 111.758145 Mflop/s
(15,14,8) <- (15,2,1).*(1, 7+0,8): 129.338328 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 111.758145
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 8 15 14 14 8 15 8
<<< (M = 15, K = 14, N = 8) : 129.338328
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,8) :   119.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1281 (11.4%), 9969 (88.6%) left; Finishing by Sat Oct 21  6:39:18 2000

(6,11,8) <- (1,0,4).*(6, 11+0,2): 47.528338 Mflop/s
(12,11,14) <- (2,1,7).*(6, 11+0,2): 51.485708 Mflop/s

Testing m0 = 6, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 11 8 6 11 11 8 6 8
<<< (M = 6, K = 11, N = 8) : 47.528338
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 14 12 11 11 14 12 14
<<< (M = 12, K = 11, N = 14) : 51.485708
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 11,2) :    49.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1282 (11.4%), 9968 (88.6%) left; Finishing by Sat Oct 21  6:39:15 2000

(10,9,9) <- (0,3,9).*(10, 3+0,1): 130.575706 Mflop/s
(10,15,15) <- (1,5,15).*(10, 3+0,1): 145.312632 Mflop/s

Testing m0 = 10, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 10  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 9 9 10 9 9 9 10 9
<<< (M = 10, K = 9, N = 9) : 130.575706
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 15 10 15 15 15 10 15
<<< (M = 10, K = 15, N = 15) : 145.312632
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (10, 3,1) :   137.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1283 (11.4%), 9967 (88.6%) left; Finishing by Sat Oct 21  6:39:12 2000

(8,7,8) <- (4,1,4).*(2, 7+0,2): 123.724839 Mflop/s
(14,14,14) <- (7,2,7).*(2, 7+0,2): 145.166230 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 123.724839
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 145.166230
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 7,2) :   133.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1284 (11.4%), 9966 (88.6%) left; Finishing by Sat Oct 21  6:39:18 2000

(16,5,9) <- (0,1,9).*(16, 5+0,1): 106.737031 Mflop/s
(16,15,15) <- (0,3,15).*(16, 5+0,1): 145.045764 Mflop/s

Testing m0 = 16, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 16  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 5 9 16 5 5 9 16 9
<<< (M = 16, K = 5, N = 9) : 106.737031
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 15 16 15 15 15 16 15
<<< (M = 16, K = 15, N = 15) : 145.045764
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (16, 5,1) :   123.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1285 (11.4%), 9965 (88.6%) left; Finishing by Sat Oct 21  6:39:23 2000

(9,6,8) <- (9,1,2).*(1, 6+0,4): 118.776548 Mflop/s
(15,12,12) <- (15,2,3).*(1, 6+0,4): 143.128748 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 118.776548
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 143.128748
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,4) :   129.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1286 (11.4%), 9964 (88.6%) left; Finishing by Sat Oct 21  6:39:29 2000

(11,9,9) <- (0,9,9).*(11,1+0,1): 98.214376 Mflop/s
(11,15,15) <- (1,15,15).*(11,1+0,1): 108.965832 Mflop/s

Testing m0 = 11, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 11 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 9 9 11 9 9 9 11 9
<<< (M = 11, K = 9, N = 9) : 98.214376
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 15 11 15 15 15 11 15
<<< (M = 11, K = 15, N = 15) : 108.965832
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (11,1,1) :   103.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1287 (11.4%), 9963 (88.6%) left; Finishing by Sat Oct 21  6:39:17 2000

(8,14,9) <- (4,0,3).*(2, 14+0,3): 70.646547 Mflop/s
(14,14,15) <- (7,1,5).*(2, 14+0,3): 64.215053 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 70.646547
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 64.215053
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 14,3) :    67.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1288 (11.4%), 9962 (88.6%) left; Finishing by Sat Oct 21  6:39:15 2000

(10,7,9) <- (0,1,9).*(10, 7+0,1): 125.737705 Mflop/s
(10,14,15) <- (1,2,15).*(10, 7+0,1): 102.806661 Mflop/s

Testing m0 = 10, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 10  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 7 9 10 7 7 9 10 9
<<< (M = 10, K = 7, N = 9) : 125.737705
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 15 10 14 14 15 10 15
<<< (M = 10, K = 14, N = 15) : 102.806661
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (10, 7,1) :   113.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1289 (11.5%), 9961 (88.5%) left; Finishing by Sat Oct 21  6:39:20 2000

(9,5,5) <- (3,1,1).*(3, 5+0,5): 91.953452 Mflop/s
(15,15,15) <- (5,3,3).*(3, 5+0,5): 139.664115 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  5 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 5 9 5 5 5 9 5
<<< (M = 9, K = 5, N = 5) : 91.953452
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 139.664115
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 5,5) :   110.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1290 (11.5%), 9960 (88.5%) left; Finishing by Sat Oct 21  6:39:26 2000

(9,6,9) <- (9,1,3).*(1, 6+0,3): 123.178898 Mflop/s
(15,12,15) <- (15,2,5).*(1, 6+0,3): 150.075442 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 123.178898
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 150.075442
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,3) :   135.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1291 (11.5%), 9959 (88.5%) left; Finishing by Sat Oct 21  6:39:14 2000

(5,15,9) <- (1,0,3).*(5, 15+0,3): 120.016568 Mflop/s
(15,15,15) <- (3,1,5).*(5, 15+0,3): 137.770838 Mflop/s

Testing m0 = 5, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 9 5 15 15 9 5 9
<<< (M = 5, K = 15, N = 9) : 120.016568
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 137.770838
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 15,3) :   128.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1292 (11.5%), 9958 (88.5%) left; Finishing by Sat Oct 21  6:39:29 2000

(9,6,9) <- (9,1,9).*(1, 6+0,1): 94.882430 Mflop/s
(15,12,15) <- (15,2,15).*(1, 6+0,1): 125.883433 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 94.882430
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 125.883433
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,1) :   108.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1293 (11.5%), 9957 (88.5%) left; Finishing by Sat Oct 21  6:39:35 2000

(9,13,6) <- (9,0,1).*(1, 13+0,6): 129.724239 Mflop/s
(15,13,12) <- (15,1,2).*(1, 13+0,6): 132.794089 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 6 9 13 13 6 9 6
<<< (M = 9, K = 13, N = 6) : 129.724239
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 132.794089
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,6) :   131.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1294 (11.5%), 9956 (88.5%) left; Finishing by Sat Oct 21  6:39:40 2000

(8,15,6) <- (4,0,1).*(2, 15+0,6): 40.625259 Mflop/s
(14,15,12) <- (7,1,2).*(2, 15+0,6): 38.359392 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  15 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 6 8 15 15 6 8 6
<<< (M = 8, K = 15, N = 6) : 40.625259
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 38.359392
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 15,6) :    39.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1295 (11.5%), 9955 (88.5%) left; Finishing by Sat Oct 21  6:39:38 2000

(8,9,6) <- (4,9,1).*(2,1+0,6): 36.651783 Mflop/s
(14,15,12) <- (7,15,2).*(2,1+0,6): 37.692495 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2 1 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 6 8 9 9 6 8 6
<<< (M = 8, K = 9, N = 6) : 36.651783
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 37.692495
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2,1,6) :    37.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1296 (11.5%), 9954 (88.5%) left; Finishing by Sat Oct 21  6:39:35 2000

(8,14,8) <- (1,0,4).*(8, 14+0,2): 49.380662 Mflop/s
(8,14,14) <- (1,1,7).*(8, 14+0,2): 49.542639 Mflop/s

Testing m0 = 8, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 49.380662
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 14 8 14 14 14 8 14
<<< (M = 8, K = 14, N = 14) : 49.542639
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 14,2) :    49.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1297 (11.5%), 9953 (88.5%) left; Finishing by Sat Oct 21  6:39:32 2000

(9,14,9) <- (9,0,3).*(1, 14+0,3): 158.594862 Mflop/s
(15,14,15) <- (15,1,5).*(1, 14+0,3): 159.526148 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 158.594862
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 159.526148
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,3) :   159.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1298 (11.5%), 9952 (88.5%) left; Finishing by Sat Oct 21  6:39:29 2000

(8,13,8) <- (2,0,4).*(4, 13+0,2): 72.440885 Mflop/s
(12,13,14) <- (3,1,7).*(4, 13+0,2): 69.054747 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 72.440885
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 14 12 13 13 14 12 14
<<< (M = 12, K = 13, N = 14) : 69.054747
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 13,2) :    70.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1299 (11.5%), 9951 (88.5%) left; Finishing by Sat Oct 21  6:39:26 2000

(8,14,8) <- (4,0,1).*(2, 14+0,8): 38.903001 Mflop/s
(14,14,8) <- (7,1,1).*(2, 14+0,8): 38.805328 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  14 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 38.903001
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 8 14 14 14 8 14 8
<<< (M = 14, K = 14, N = 8) : 38.805328
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 14,8) :    38.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1300 (11.6%), 9950 (88.4%) left; Finishing by Sat Oct 21  6:39:23 2000

(12,11,9) <- (0,0,9).*(12, 11+0,1): 127.096331 Mflop/s
(12,11,15) <- (1,1,15).*(12, 11+0,1): 126.834121 Mflop/s

Testing m0 = 12, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 12  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 9 12 11 11 9 12 9
<<< (M = 12, K = 11, N = 9) : 127.096331
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 126.834121
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (12, 11,1) :   127.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1301 (11.6%), 9949 (88.4%) left; Finishing by Sat Oct 21  6:39:20 2000

(6,12,9) <- (1,0,9).*(6, 12+0,1): 166.621460 Mflop/s
(12,12,15) <- (2,1,15).*(6, 12+0,1): 175.249897 Mflop/s

Testing m0 = 6, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 9 6 12 12 9 6 9
<<< (M = 6, K = 12, N = 9) : 166.621460
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 175.249897
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 12,1) :   170.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1302 (11.6%), 9948 (88.4%) left; Finishing by Sat Oct 21  6:39:26 2000

(9,14,9) <- (3,0,9).*(3, 14+0,1): 174.370500 Mflop/s
(15,14,15) <- (5,1,15).*(3, 14+0,1): 177.006814 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 174.370500
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 177.006814
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 14,1) :   175.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1303 (11.6%), 9947 (88.4%) left; Finishing by Sat Oct 21  6:39:31 2000

(9,13,14) <- (9,0,0).*(1, 13+0,14): 28.189151 Mflop/s
(15,13,14) <- (15,1,1).*(1, 13+0,14): 33.514634 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 14 9 13 13 14 9 14
<<< (M = 9, K = 13, N = 14) : 28.189151
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 33.514634
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,14) :    30.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1304 (11.6%), 9946 (88.4%) left; Finishing by Sat Oct 21  6:39:37 2000

(9,9,6) <- (9,3,1).*(1, 3+0,6): 118.968734 Mflop/s
(15,15,12) <- (15,5,2).*(1, 3+0,6): 133.149679 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 6 9 9 9 6 9 6
<<< (M = 9, K = 9, N = 6) : 118.968734
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 133.149679
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,6) :   125.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1305 (11.6%), 9945 (88.4%) left; Finishing by Sat Oct 21  6:39:34 2000

(9,5,8) <- (9,1,2).*(1, 5+0,4): 105.949926 Mflop/s
(15,15,12) <- (15,3,3).*(1, 5+0,4): 145.437557 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 8 9 5 5 8 9 8
<<< (M = 9, K = 5, N = 8) : 105.949926
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 145.437557
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,4) :   122.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1306 (11.6%), 9944 (88.4%) left; Finishing by Sat Oct 21  6:39:40 2000

(9,9,9) <- (9,3,1).*(1, 3+0,9): 113.755213 Mflop/s
(15,15,9) <- (15,5,1).*(1, 3+0,9): 125.870037 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 113.755213
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 125.870037
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,9) :   119.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1307 (11.6%), 9943 (88.4%) left; Finishing by Sat Oct 21  6:39:37 2000

(9,8,13) <- (9,2,0).*(1, 4+0,13): 116.237213 Mflop/s
(15,12,13) <- (15,3,1).*(1, 4+0,13): 125.335147 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 13 9 8 8 13 9 13
<<< (M = 9, K = 8, N = 13) : 116.237213
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 13 15 12 12 13 15 13
<<< (M = 15, K = 12, N = 13) : 125.335147
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,13) :   120.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1308 (11.6%), 9942 (88.4%) left; Finishing by Sat Oct 21  6:39:43 2000

(14,15,9) <- (0,0,9).*(14, 15+0,1): 133.594444 Mflop/s
(14,15,15) <- (1,1,15).*(14, 15+0,1): 134.283803 Mflop/s

Testing m0 = 14, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 14  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 9 14 15 15 9 14 9
<<< (M = 14, K = 15, N = 9) : 133.594444
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 134.283803
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (14, 15,1) :   133.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1309 (11.6%), 9941 (88.4%) left; Finishing by Sat Oct 21  6:39:40 2000

(8,6,6) <- (4,1,1).*(2, 6+0,6): 35.738899 Mflop/s
(14,12,12) <- (7,2,2).*(2, 6+0,6): 37.758958 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  6 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 6 8 6 6 6 8 6
<<< (M = 8, K = 6, N = 6) : 35.738899
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 37.758958
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 6,6) :    36.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1310 (11.6%), 9940 (88.4%) left; Finishing by Sat Oct 21  6:39:37 2000

(9,9,6) <- (9,1,1).*(1, 9+0,6): 119.839556 Mflop/s
(15,9,12) <- (15,1,2).*(1, 9+0,6): 126.253012 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 6 9 9 9 6 9 6
<<< (M = 9, K = 9, N = 6) : 119.839556
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 126.253012
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,6) :   123.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1311 (11.7%), 9939 (88.3%) left; Finishing by Sat Oct 21  6:39:43 2000

(8,5,9) <- (4,1,3).*(2, 5+0,3): 41.817083 Mflop/s
(14,15,15) <- (7,3,5).*(2, 5+0,3): 59.881785 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 9 8 5 5 9 8 9
<<< (M = 8, K = 5, N = 9) : 41.817083
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 59.881785
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 5,3) :    49.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1312 (11.7%), 9938 (88.3%) left; Finishing by Sat Oct 21  6:39:40 2000

(11,9,9) <- (0,1,9).*(11, 9+0,1): 60.733324 Mflop/s
(11,9,15) <- (1,1,15).*(11, 9+0,1): 61.330954 Mflop/s

Testing m0 = 11, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 11  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 9 9 11 9 9 9 11 9
<<< (M = 11, K = 9, N = 9) : 60.733324
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 9 15 11 9 9 15 11 15
<<< (M = 11, K = 9, N = 15) : 61.330954
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (11, 9,1) :    61.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1313 (11.7%), 9937 (88.3%) left; Finishing by Sat Oct 21  6:39:37 2000

(9,5,8) <- (3,1,2).*(3, 5+0,4): 95.130145 Mflop/s
(15,15,12) <- (5,3,3).*(3, 5+0,4): 142.170772 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 8 9 5 5 8 9 8
<<< (M = 9, K = 5, N = 8) : 95.130145
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 142.170772
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 5,4) :   114.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1314 (11.7%), 9936 (88.3%) left; Finishing by Sat Oct 21  6:39:42 2000

(8,11,9) <- (4,0,3).*(2, 11+0,3): 68.498134 Mflop/s
(14,11,15) <- (7,1,5).*(2, 11+0,3): 62.761768 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 68.498134
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 62.761768
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 11,3) :    65.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1315 (11.7%), 9935 (88.3%) left; Finishing by Sat Oct 21  6:39:40 2000

(9,6,12) <- (9,1,0).*(1, 6+0,12): 106.144211 Mflop/s
(15,12,12) <- (15,2,1).*(1, 6+0,12): 124.433481 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  6 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 12 9 6 6 12 9 12
<<< (M = 9, K = 6, N = 12) : 106.144211
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 124.433481
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 6,12) :   114.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1316 (11.7%), 9934 (88.3%) left; Finishing by Sat Oct 21  6:39:28 2000

(9,8,16) <- (9,2,0).*(1, 4+0,16): 102.540731 Mflop/s
(15,12,16) <- (15,3,0).*(1, 4+0,16): 125.426553 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 16 9 8 8 16 9 16
<<< (M = 9, K = 8, N = 16) : 102.540731
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 16 15 12 12 16 15 16
<<< (M = 15, K = 12, N = 16) : 125.426553
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,16) :   112.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1317 (11.7%), 9933 (88.3%) left; Finishing by Sat Oct 21  6:39:25 2000

(9,11,14) <- (9,0,0).*(1, 11+0,14): 122.253630 Mflop/s
(15,11,14) <- (15,1,1).*(1, 11+0,14): 121.425608 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 14 9 11 11 14 9 14
<<< (M = 9, K = 11, N = 14) : 122.253630
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 121.425608
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,14) :   121.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1318 (11.7%), 9932 (88.3%) left; Finishing by Sat Oct 21  6:39:31 2000

(6,9,8) <- (1,9,4).*(6,1+0,2): 105.571057 Mflop/s
(12,15,14) <- (2,15,7).*(6,1+0,2): 123.448355 Mflop/s

Testing m0 = 6, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 8 6 9 9 8 6 8
<<< (M = 6, K = 9, N = 8) : 105.571057
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 123.448355
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6,1,2) :   113.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1319 (11.7%), 9931 (88.3%) left; Finishing by Sat Oct 21  6:39:45 2000

(13,9,9) <- (0,9,9).*(13,1+0,1): 97.284448 Mflop/s
(13,15,15) <- (1,15,15).*(13,1+0,1): 106.207219 Mflop/s

Testing m0 = 13, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 13 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 9 9 13 9 9 9 13 9
<<< (M = 13, K = 9, N = 9) : 97.284448
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 15 13 15 15 15 13 15
<<< (M = 13, K = 15, N = 15) : 106.207219
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (13,1,1) :   101.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1320 (11.7%), 9930 (88.3%) left; Finishing by Sat Oct 21  6:39:42 2000

(8,7,9) <- (2,1,3).*(4, 7+0,3): 42.114395 Mflop/s
(12,14,15) <- (3,2,5).*(4, 7+0,3): 52.705022 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 42.114395
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 52.705022
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 7,3) :    46.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1321 (11.7%), 9929 (88.3%) left; Finishing by Sat Oct 21  6:39:39 2000

(9,15,10) <- (9,0,0).*(1, 15+0,10): 123.670893 Mflop/s
(15,15,10) <- (15,1,1).*(1, 15+0,10): 124.567552 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 10 9 15 15 10 9 10
<<< (M = 9, K = 15, N = 10) : 123.670893
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 10 15 15 15 10 15 10
<<< (M = 15, K = 15, N = 10) : 124.567552
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,10) :   124.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1322 (11.8%), 9928 (88.2%) left; Finishing by Sat Oct 21  6:39:36 2000

(9,10,5) <- (9,0,1).*(1, 10+0,5): 122.636316 Mflop/s
(15,10,15) <- (15,1,3).*(1, 10+0,5): 129.869048 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 5 9 10 10 5 9 5
<<< (M = 9, K = 10, N = 5) : 122.636316
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 129.869048
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,5) :   126.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1323 (11.8%), 9927 (88.2%) left; Finishing by Sat Oct 21  6:39:42 2000

(9,9,8) <- (9,9,4).*(1,1+0,2): 106.370287 Mflop/s
(15,15,14) <- (15,15,7).*(1,1+0,2): 125.344984 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 106.370287
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 125.344984
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,2) :   115.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1324 (11.8%), 9926 (88.2%) left; Finishing by Sat Oct 21  6:39:39 2000

(9,10,8) <- (9,0,1).*(1, 10+0,8): 121.456493 Mflop/s
(15,10,8) <- (15,1,1).*(1, 10+0,8): 123.112568 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 121.456493
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 8 15 10 10 8 15 8
<<< (M = 15, K = 10, N = 8) : 123.112568
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,8) :   122.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1325 (11.8%), 9925 (88.2%) left; Finishing by Sat Oct 21  6:39:45 2000

(9,7,7) <- (9,1,1).*(1, 7+0,7): 37.279352 Mflop/s
(15,14,14) <- (15,2,2).*(1, 7+0,7): 44.070596 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 7 9 7 7 7 9 7
<<< (M = 9, K = 7, N = 7) : 37.279352
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 44.070596
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,7) :    40.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1326 (11.8%), 9924 (88.2%) left; Finishing by Sat Oct 21  6:39:42 2000

(9,9,7) <- (9,3,1).*(1, 3+0,7): 109.217441 Mflop/s
(15,15,14) <- (15,5,2).*(1, 3+0,7): 119.211725 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 7 9 9 9 7 9 7
<<< (M = 9, K = 9, N = 7) : 109.217441
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 119.211725
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,7) :   114.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1327 (11.8%), 9923 (88.2%) left; Finishing by Sat Oct 21  6:39:47 2000

(8,9,9) <- (2,9,9).*(4,1+0,1): 103.925893 Mflop/s
(12,15,15) <- (3,15,15).*(4,1+0,1): 121.492543 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 103.925893
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 121.492543
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4,1,1) :   112.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1328 (11.8%), 9922 (88.2%) left; Finishing by Sat Oct 21  6:39:45 2000

(9,7,13) <- (9,1,0).*(1, 7+0,13): 112.170017 Mflop/s
(15,14,13) <- (15,2,1).*(1, 7+0,13): 127.383450 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 13 9 7 7 13 9 13
<<< (M = 9, K = 7, N = 13) : 112.170017
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 13 15 14 14 13 15 13
<<< (M = 15, K = 14, N = 13) : 127.383450
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,13) :   119.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1329 (11.8%), 9921 (88.2%) left; Finishing by Sat Oct 21  6:39:50 2000

(16,8,9) <- (0,2,9).*(16, 4+0,1): 124.625319 Mflop/s
(16,12,15) <- (0,3,15).*(16, 4+0,1): 134.733271 Mflop/s

Testing m0 = 16, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 16  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 8 9 16 8 8 9 16 9
<<< (M = 16, K = 8, N = 9) : 124.625319
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 15 16 12 12 15 16 15
<<< (M = 16, K = 12, N = 15) : 134.733271
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (16, 4,1) :   129.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1330 (11.8%), 9920 (88.2%) left; Finishing by Sat Oct 21  6:39:47 2000

(8,9,9) <- (1,3,9).*(8, 3+0,1): 133.480058 Mflop/s
(8,15,15) <- (1,5,15).*(8, 3+0,1): 143.323210 Mflop/s

Testing m0 = 8, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 133.480058
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 15 8 15 15 15 8 15
<<< (M = 8, K = 15, N = 15) : 143.323210
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 3,1) :   138.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1331 (11.8%), 9919 (88.2%) left; Finishing by Sat Oct 21  6:39:36 2000

(9,7,9) <- (9,1,3).*(1, 7+0,3): 133.880518 Mflop/s
(15,14,15) <- (15,2,5).*(1, 7+0,3): 162.377898 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 133.880518
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 162.377898
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,3) :   146.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1332 (11.8%), 9918 (88.2%) left; Finishing by Sat Oct 21  6:39:42 2000

(9,13,15) <- (9,0,0).*(1, 13+0,15): 30.931236 Mflop/s
(15,13,15) <- (15,1,1).*(1, 13+0,15): 34.975641 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 15 9 13 13 15 9 15
<<< (M = 9, K = 13, N = 15) : 30.931236
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 34.975641
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,15) :    32.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1333 (11.8%), 9917 (88.2%) left; Finishing by Sat Oct 21  6:39:47 2000

(10,12,9) <- (0,0,9).*(10, 12+0,1): 73.827080 Mflop/s
(10,12,15) <- (1,1,15).*(10, 12+0,1): 66.161066 Mflop/s

Testing m0 = 10, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 10  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 9 10 12 12 9 10 9
<<< (M = 10, K = 12, N = 9) : 73.827080
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 15 10 12 12 15 10 15
<<< (M = 10, K = 12, N = 15) : 66.161066
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (10, 12,1) :    69.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1334 (11.9%), 9916 (88.1%) left; Finishing by Sat Oct 21  6:39:44 2000

(8,12,7) <- (4,0,1).*(2, 12+0,7): 38.120288 Mflop/s
(14,12,14) <- (7,1,2).*(2, 12+0,7): 39.617213 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  12 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 7 8 12 12 7 8 7
<<< (M = 8, K = 12, N = 7) : 38.120288
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 39.617213
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 12,7) :    38.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1335 (11.9%), 9915 (88.1%) left; Finishing by Sat Oct 21  6:39:41 2000

(13,10,9) <- (0,0,9).*(13, 10+0,1): 54.046369 Mflop/s
(13,10,15) <- (1,1,15).*(13, 10+0,1): 52.407243 Mflop/s

Testing m0 = 13, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 13  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 10 9 13 10 10 9 13 9
<<< (M = 13, K = 10, N = 9) : 54.046369
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 10 15 13 10 10 15 13 15
<<< (M = 13, K = 10, N = 15) : 52.407243
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (13, 10,1) :    53.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1336 (11.9%), 9914 (88.1%) left; Finishing by Sat Oct 21  6:39:39 2000

(9,8,9) <- (3,4,9).*(3, 2+0,1): 139.960772 Mflop/s
(15,14,15) <- (5,7,15).*(3, 2+0,1): 146.212000 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 139.960772
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 146.212000
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 2,1) :   143.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1337 (11.9%), 9913 (88.1%) left; Finishing by Sat Oct 21  6:39:44 2000

(9,15,5) <- (9,0,1).*(1, 15+0,5): 136.257406 Mflop/s
(15,15,15) <- (15,1,3).*(1, 15+0,5): 140.697499 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 5 9 15 15 5 9 5
<<< (M = 9, K = 15, N = 5) : 136.257406
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 140.697499
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,5) :   138.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1338 (11.9%), 9912 (88.1%) left; Finishing by Sat Oct 21  6:39:50 2000

(9,5,9) <- (9,1,9).*(1, 5+0,1): 86.415910 Mflop/s
(15,15,15) <- (15,3,15).*(1, 5+0,1): 128.732440 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 9 9 5 5 9 9 9
<<< (M = 9, K = 5, N = 9) : 86.415910
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 128.732440
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,1) :   103.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1339 (11.9%), 9911 (88.1%) left; Finishing by Sat Oct 21  6:39:55 2000

(9,10,14) <- (9,0,0).*(1, 10+0,14): 116.022099 Mflop/s
(15,10,14) <- (15,1,1).*(1, 10+0,14): 116.379320 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 14 9 10 10 14 9 14
<<< (M = 9, K = 10, N = 14) : 116.022099
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 116.379320
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,14) :   116.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1340 (11.9%), 9910 (88.1%) left; Finishing by Sat Oct 21  6:39:52 2000

(9,15,8) <- (3,0,4).*(3, 15+0,2): 102.904793 Mflop/s
(15,15,14) <- (5,1,7).*(3, 15+0,2): 152.234396 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 102.904793
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 152.234396
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 15,2) :   122.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1341 (11.9%), 9909 (88.1%) left; Finishing by Sat Oct 21  6:39:41 2000

(8,8,8) <- (4,1,2).*(2, 8+0,4): 50.323577 Mflop/s
(14,8,12) <- (7,1,3).*(2, 8+0,4): 51.619150 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 50.323577
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 12 14 8 8 12 14 12
<<< (M = 14, K = 8, N = 12) : 51.619150
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 8,4) :    51.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1342 (11.9%), 9908 (88.1%) left; Finishing by Sat Oct 21  6:39:38 2000

(8,7,6) <- (4,1,1).*(2, 7+0,6): 36.253270 Mflop/s
(14,14,12) <- (7,2,2).*(2, 7+0,6): 38.283590 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  7 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 6 8 7 7 6 8 6
<<< (M = 8, K = 7, N = 6) : 36.253270
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 38.283590
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 7,6) :    37.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1343 (11.9%), 9907 (88.1%) left; Finishing by Sat Oct 21  6:39:36 2000

(9,15,9) <- (9,0,3).*(1, 15+0,3): 155.121364 Mflop/s
(15,15,15) <- (15,1,5).*(1, 15+0,3): 157.782738 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 155.121364
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 157.782738
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,3) :   156.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1344 (11.9%), 9906 (88.1%) left; Finishing by Sat Oct 21  6:39:33 2000

(9,8,9) <- (9,4,3).*(1, 2+0,3): 123.426890 Mflop/s
(15,14,15) <- (15,7,5).*(1, 2+0,3): 129.367004 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 123.426890
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 129.367004
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,3) :   126.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1345 (12.0%), 9905 (88.0%) left; Finishing by Sat Oct 21  6:39:30 2000

(8,8,9) <- (1,4,9).*(8, 2+0,1): 115.613039 Mflop/s
(8,14,15) <- (1,7,15).*(8, 2+0,1): 128.754280 Mflop/s

Testing m0 = 8, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 115.613039
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 15 8 14 14 15 8 15
<<< (M = 8, K = 14, N = 15) : 128.754280
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 2,1) :   121.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1346 (12.0%), 9904 (88.0%) left; Finishing by Sat Oct 21  6:39:35 2000

(6,13,9) <- (1,0,9).*(6, 13+0,1): 175.670717 Mflop/s
(12,13,15) <- (2,1,15).*(6, 13+0,1): 178.190972 Mflop/s

Testing m0 = 6, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 13 9 6 13 13 9 6 9
<<< (M = 6, K = 13, N = 9) : 175.670717
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 178.190972
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 13,1) :   176.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1347 (12.0%), 9903 (88.0%) left; Finishing by Sat Oct 21  6:39:41 2000

(8,9,5) <- (4,1,1).*(2, 9+0,5): 42.936263 Mflop/s
(14,9,15) <- (7,1,3).*(2, 9+0,5): 43.857253 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  9 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 5 8 9 9 5 8 5
<<< (M = 8, K = 9, N = 5) : 42.936263
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 43.857253
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 9,5) :    43.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1348 (12.0%), 9902 (88.0%) left; Finishing by Sat Oct 21  6:39:38 2000

(9,5,9) <- (1,1,9).*(9, 5+0,1): 64.352390 Mflop/s
(9,15,15) <- (1,3,15).*(9, 5+0,1): 80.990352 Mflop/s

Testing m0 = 9, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 9  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 9 9 5 5 9 9 9
<<< (M = 9, K = 5, N = 9) : 64.352390
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 80.990352
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (9, 5,1) :    71.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1349 (12.0%), 9901 (88.0%) left; Finishing by Sat Oct 21  6:39:35 2000

(9,5,8) <- (9,1,1).*(1, 5+0,8): 98.415317 Mflop/s
(15,15,8) <- (15,3,1).*(1, 5+0,8): 129.907744 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 8 9 5 5 8 9 8
<<< (M = 9, K = 5, N = 8) : 98.415317
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 8 15 15 15 8 15 8
<<< (M = 15, K = 15, N = 8) : 129.907744
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,8) :   112.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1350 (12.0%), 9900 (88.0%) left; Finishing by Sat Oct 21  6:39:41 2000

(5,9,9) <- (1,9,3).*(5,1+0,3): 42.609570 Mflop/s
(15,15,15) <- (3,15,5).*(5,1+0,3): 48.385611 Mflop/s

Testing m0 = 5, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 42.609570
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 48.385611
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5,1,3) :    45.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1351 (12.0%), 9899 (88.0%) left; Finishing by Sat Oct 21  6:39:38 2000

(8,14,8) <- (2,0,2).*(4, 14+0,4): 43.347832 Mflop/s
(12,14,12) <- (3,1,3).*(4, 14+0,4): 45.763487 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 43.347832
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 12 12 14 14 12 12 12
<<< (M = 12, K = 14, N = 12) : 45.763487
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 14,4) :    44.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1352 (12.0%), 9898 (88.0%) left; Finishing by Sat Oct 21  6:39:35 2000

(9,12,8) <- (3,0,4).*(3, 12+0,2): 97.696710 Mflop/s
(15,12,14) <- (5,1,7).*(3, 12+0,2): 145.105909 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 97.696710
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 145.105909
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 12,2) :   116.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1353 (12.0%), 9897 (88.0%) left; Finishing by Sat Oct 21  6:39:32 2000

(8,13,7) <- (4,0,1).*(2, 13+0,7): 123.983693 Mflop/s
(14,13,14) <- (7,1,2).*(2, 13+0,7): 128.279578 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  13 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 7 8 13 13 7 8 7
<<< (M = 8, K = 13, N = 7) : 123.983693
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 14 14 13 13 14 14 14
<<< (M = 14, K = 13, N = 14) : 128.279578
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 13,7) :   126.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1354 (12.0%), 9896 (88.0%) left; Finishing by Sat Oct 21  6:39:30 2000

(8,9,5) <- (4,9,1).*(2,1+0,5): 40.972984 Mflop/s
(14,15,15) <- (7,15,3).*(2,1+0,5): 34.120911 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2 1 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 5 8 9 9 5 8 5
<<< (M = 8, K = 9, N = 5) : 40.972984
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 34.120911
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2,1,5) :    37.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1355 (12.0%), 9895 (88.0%) left; Finishing by Sat Oct 21  6:39:18 2000

(8,9,8) <- (2,9,4).*(4,1+0,2): 102.603064 Mflop/s
(12,15,14) <- (3,15,7).*(4,1+0,2): 113.593971 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 102.603064
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 113.593971
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4,1,2) :   107.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1356 (12.1%), 9894 (87.9%) left; Finishing by Sat Oct 21  6:39:24 2000

(9,9,15) <- (9,1,0).*(1, 9+0,15): 117.301841 Mflop/s
(15,9,15) <- (15,1,1).*(1, 9+0,15): 118.381356 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 15 9 9 9 15 9 15
<<< (M = 9, K = 9, N = 15) : 117.301841
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 118.381356
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,15) :   117.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1357 (12.1%), 9893 (87.9%) left; Finishing by Sat Oct 21  6:39:21 2000

(9,8,8) <- (9,2,2).*(1, 4+0,4): 133.897079 Mflop/s
(15,12,12) <- (15,3,3).*(1, 4+0,4): 147.670823 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 133.897079
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 147.670823
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,4) :   140.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1358 (12.1%), 9892 (87.9%) left; Finishing by Sat Oct 21  6:39:27 2000

(8,9,8) <- (4,1,4).*(2, 9+0,2): 136.938391 Mflop/s
(14,9,14) <- (7,1,7).*(2, 9+0,2): 139.845091 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 136.938391
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 14 14 9 9 14 14 14
<<< (M = 14, K = 9, N = 14) : 139.845091
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 9,2) :   138.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1359 (12.1%), 9891 (87.9%) left; Finishing by Sat Oct 21  6:39:32 2000

(9,12,8) <- (3,0,2).*(3, 12+0,4): 117.101716 Mflop/s
(15,12,12) <- (5,1,3).*(3, 12+0,4): 140.045955 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 117.101716
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 140.045955
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 12,4) :   127.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1360 (12.1%), 9890 (87.9%) left; Finishing by Sat Oct 21  6:39:29 2000

(9,10,15) <- (9,0,0).*(1, 10+0,15): 120.891134 Mflop/s
(15,10,15) <- (15,1,1).*(1, 10+0,15): 120.054551 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 15 9 10 10 15 9 15
<<< (M = 9, K = 10, N = 15) : 120.891134
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 120.054551
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,15) :   120.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1361 (12.1%), 9889 (87.9%) left; Finishing by Sat Oct 21  6:39:27 2000

(13,8,9) <- (0,2,9).*(13, 4+0,1): 54.012073 Mflop/s
(13,12,15) <- (1,3,15).*(13, 4+0,1): 56.142600 Mflop/s

Testing m0 = 13, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 13  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 8 9 13 8 8 9 13 9
<<< (M = 13, K = 8, N = 9) : 54.012073
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 15 13 12 12 15 13 15
<<< (M = 13, K = 12, N = 15) : 56.142600
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (13, 4,1) :    55.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1362 (12.1%), 9888 (87.9%) left; Finishing by Sat Oct 21  6:39:24 2000

(8,9,5) <- (4,3,1).*(2, 3+0,5): 41.008161 Mflop/s
(14,15,15) <- (7,5,3).*(2, 3+0,5): 33.901483 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  3 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 5 8 9 9 5 8 5
<<< (M = 8, K = 9, N = 5) : 41.008161
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 33.901483
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 3,5) :    37.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1363 (12.1%), 9887 (87.9%) left; Finishing by Sat Oct 21  6:39:13 2000

(13,5,9) <- (0,1,9).*(13, 5+0,1): 49.543149 Mflop/s
(13,15,15) <- (1,3,15).*(13, 5+0,1): 58.282903 Mflop/s

Testing m0 = 13, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 13  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 5 9 13 5 5 9 13 9
<<< (M = 13, K = 5, N = 9) : 49.543149
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 15 13 15 15 15 13 15
<<< (M = 13, K = 15, N = 15) : 58.282903
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (13, 5,1) :    53.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1364 (12.1%), 9886 (87.9%) left; Finishing by Sat Oct 21  6:39:18 2000

(9,5,10) <- (9,1,0).*(1, 5+0,10): 100.718077 Mflop/s
(15,15,10) <- (15,3,1).*(1, 5+0,10): 123.850088 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 10 9 5 5 10 9 10
<<< (M = 9, K = 5, N = 10) : 100.718077
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 10 15 15 15 10 15 10
<<< (M = 15, K = 15, N = 10) : 123.850088
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,10) :   111.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1365 (12.1%), 9885 (87.9%) left; Finishing by Sat Oct 21  6:39:32 2000

(14,12,9) <- (0,0,9).*(14, 12+0,1): 132.895504 Mflop/s
(14,12,15) <- (1,1,15).*(14, 12+0,1): 131.425174 Mflop/s

Testing m0 = 14, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 14  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 9 14 12 12 9 14 9
<<< (M = 14, K = 12, N = 9) : 132.895504
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 131.425174
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (14, 12,1) :   132.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1366 (12.1%), 9884 (87.9%) left; Finishing by Sat Oct 21  6:39:46 2000

(9,8,6) <- (9,1,1).*(1, 8+0,6): 117.752321 Mflop/s
(15,8,12) <- (15,1,2).*(1, 8+0,6): 119.933123 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 6 9 8 8 6 9 6
<<< (M = 9, K = 8, N = 6) : 117.752321
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 12 15 8 8 12 15 12
<<< (M = 15, K = 8, N = 12) : 119.933123
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,6) :   118.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1367 (12.2%), 9883 (87.8%) left; Finishing by Sat Oct 21  6:39:59 2000

(8,9,8) <- (2,1,4).*(4, 9+0,2): 66.167430 Mflop/s
(12,9,14) <- (3,1,7).*(4, 9+0,2): 67.556060 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 66.167430
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 14 12 9 9 14 12 14
<<< (M = 12, K = 9, N = 14) : 67.556060
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 9,2) :    66.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1368 (12.2%), 9882 (87.8%) left; Finishing by Sat Oct 21  6:40:05 2000

(8,10,5) <- (4,0,1).*(2, 10+0,5): 43.343019 Mflop/s
(14,10,15) <- (7,1,3).*(2, 10+0,5): 37.915812 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  10 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 5 8 10 10 5 8 5
<<< (M = 8, K = 10, N = 5) : 43.343019
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 37.915812
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 10,5) :    40.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1369 (12.2%), 9881 (87.8%) left; Finishing by Sat Oct 21  6:40:10 2000

(8,8,9) <- (2,4,9).*(4, 2+0,1): 141.772460 Mflop/s
(12,14,15) <- (3,7,15).*(4, 2+0,1): 152.156041 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 141.772460
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 152.156041
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 2,1) :   146.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1370 (12.2%), 9880 (87.8%) left; Finishing by Sat Oct 21  6:40:07 2000

(8,9,7) <- (4,9,1).*(2,1+0,7): 29.516428 Mflop/s
(14,15,14) <- (7,15,2).*(2,1+0,7): 34.721067 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2 1 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 7 8 9 9 7 8 7
<<< (M = 8, K = 9, N = 7) : 29.516428
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 34.721067
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2,1,7) :    31.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1371 (12.2%), 9879 (87.8%) left; Finishing by Sat Oct 21  6:40:21 2000

(9,14,8) <- (9,0,2).*(1, 14+0,4): 150.723401 Mflop/s
(15,14,12) <- (15,1,3).*(1, 14+0,4): 154.409990 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 150.723401
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 154.409990
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,4) :   152.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1372 (12.2%), 9878 (87.8%) left; Finishing by Sat Oct 21  6:40:26 2000

(8,8,9) <- (2,1,9).*(4, 8+0,1): 144.115645 Mflop/s
(12,8,15) <- (3,1,15).*(4, 8+0,1): 147.770016 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 144.115645
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 15 12 8 8 15 12 15
<<< (M = 12, K = 8, N = 15) : 147.770016
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 8,1) :   145.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1373 (12.2%), 9877 (87.8%) left; Finishing by Sat Oct 21  6:40:40 2000

(8,8,9) <- (4,1,3).*(2, 8+0,3): 65.390019 Mflop/s
(14,8,15) <- (7,1,5).*(2, 8+0,3): 66.183283 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 65.390019
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 15 14 8 8 15 14 15
<<< (M = 14, K = 8, N = 15) : 66.183283
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 8,3) :    65.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1374 (12.2%), 9876 (87.8%) left; Finishing by Sat Oct 21  6:40:45 2000

(9,9,9) <- (9,1,1).*(1, 9+0,9): 117.785714 Mflop/s
(15,9,9) <- (15,1,1).*(1, 9+0,9): 117.922054 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 117.785714
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 9 15 9 9 9 15 9
<<< (M = 15, K = 9, N = 9) : 117.922054
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,9) :   117.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1375 (12.2%), 9875 (87.8%) left; Finishing by Sat Oct 21  6:40:59 2000

(8,13,9) <- (4,0,9).*(2, 13+0,1): 166.703941 Mflop/s
(14,13,15) <- (7,1,15).*(2, 13+0,1): 167.807105 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 166.703941
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 167.807105
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 13,1) :   167.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1376 (12.2%), 9874 (87.8%) left; Finishing by Sat Oct 21  6:41:04 2000

(12,13,9) <- (0,0,9).*(12, 13+0,1): 130.418402 Mflop/s
(12,13,15) <- (1,1,15).*(12, 13+0,1): 129.981096 Mflop/s

Testing m0 = 12, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 12  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 9 12 13 13 9 12 9
<<< (M = 12, K = 13, N = 9) : 130.418402
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 129.981096
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (12, 13,1) :   130.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1377 (12.2%), 9873 (87.8%) left; Finishing by Sat Oct 21  6:41:10 2000

(9,7,14) <- (9,1,0).*(1, 7+0,14): 112.910584 Mflop/s
(15,14,14) <- (15,2,1).*(1, 7+0,14): 130.007318 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 14 9 7 7 14 9 14
<<< (M = 9, K = 7, N = 14) : 112.910584
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 130.007318
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,14) :   120.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1378 (12.2%), 9872 (87.8%) left; Finishing by Sat Oct 21  6:41:07 2000

(9,10,9) <- (9,0,3).*(1, 10+0,3): 143.595686 Mflop/s
(15,10,15) <- (15,1,5).*(1, 10+0,3): 145.823140 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 143.595686
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 145.823140
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,3) :   144.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1379 (12.3%), 9871 (87.7%) left; Finishing by Sat Oct 21  6:41:28 2000

(9,7,16) <- (9,1,0).*(1, 7+0,16): 115.141692 Mflop/s
(15,14,16) <- (15,2,0).*(1, 7+0,16): 128.076406 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 16 9 7 7 16 9 16
<<< (M = 9, K = 7, N = 16) : 115.141692
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 16 15 14 14 16 15 16
<<< (M = 15, K = 14, N = 16) : 128.076406
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,16) :   121.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1380 (12.3%), 9870 (87.7%) left; Finishing by Sat Oct 21  6:41:50 2000

(14,7,9) <- (0,1,9).*(14, 7+0,1): 114.981754 Mflop/s
(14,14,15) <- (1,2,15).*(14, 7+0,1): 132.308468 Mflop/s

Testing m0 = 14, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 14  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 7 9 14 7 7 9 14 9
<<< (M = 14, K = 7, N = 9) : 114.981754
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 132.308468
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (14, 7,1) :   123.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1381 (12.3%), 9869 (87.7%) left; Finishing by Sat Oct 21  6:42:28 2000

(9,9,8) <- (3,1,2).*(3, 9+0,4): 108.860787 Mflop/s
(15,9,12) <- (5,1,3).*(3, 9+0,4): 112.761877 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 108.860787
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 112.761877
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 9,4) :   110.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1382 (12.3%), 9868 (87.7%) left; Finishing by Sat Oct 21  6:42:33 2000

(9,9,8) <- (9,3,4).*(1, 3+0,2): 134.915729 Mflop/s
(15,15,14) <- (15,5,7).*(1, 3+0,2): 153.453953 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 134.915729
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 153.453953
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,2) :   143.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1383 (12.3%), 9867 (87.7%) left; Finishing by Sat Oct 21  6:42:38 2000

(5,5,9) <- (1,1,3).*(5, 5+0,3): 96.118968 Mflop/s
(15,15,15) <- (3,3,5).*(5, 5+0,3): 136.909435 Mflop/s

Testing m0 = 5, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 5 9 5 5 5 9 5 9
<<< (M = 5, K = 5, N = 9) : 96.118968
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 136.909435
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 5,3) :   112.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1384 (12.3%), 9866 (87.7%) left; Finishing by Sat Oct 21  6:42:44 2000

(8,9,7) <- (4,1,1).*(2, 9+0,7): 36.848112 Mflop/s
(14,9,14) <- (7,1,2).*(2, 9+0,7): 36.957688 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  9 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 7 8 9 9 7 8 7
<<< (M = 8, K = 9, N = 7) : 36.848112
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 14 14 9 9 14 14 14
<<< (M = 14, K = 9, N = 14) : 36.957688
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 9,7) :    36.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1385 (12.3%), 9865 (87.7%) left; Finishing by Sat Oct 21  6:42:41 2000

(8,9,9) <- (4,9,9).*(2,1+0,1): 100.558136 Mflop/s
(14,15,15) <- (7,15,15).*(2,1+0,1): 125.248899 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 100.558136
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 125.248899
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2,1,1) :   111.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1386 (12.3%), 9864 (87.7%) left; Finishing by Sat Oct 21  6:42:38 2000

(8,9,8) <- (1,3,4).*(8, 3+0,2): 117.415051 Mflop/s
(8,15,14) <- (1,5,7).*(8, 3+0,2): 129.679705 Mflop/s

Testing m0 = 8, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 117.415051
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 14 8 15 15 14 8 14
<<< (M = 8, K = 15, N = 14) : 129.679705
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 3,2) :   123.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1387 (12.3%), 9863 (87.7%) left; Finishing by Sat Oct 21  6:42:43 2000

(8,10,7) <- (4,0,1).*(2, 10+0,7): 37.383233 Mflop/s
(14,10,14) <- (7,1,2).*(2, 10+0,7): 38.811631 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  10 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 7 8 10 10 7 8 7
<<< (M = 8, K = 10, N = 7) : 37.383233
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 14 14 10 10 14 14 14
<<< (M = 14, K = 10, N = 14) : 38.811631
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 10,7) :    38.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1388 (12.3%), 9862 (87.7%) left; Finishing by Sat Oct 21  6:42:40 2000

(7,7,9) <- (1,1,9).*(7, 7+0,1): 105.115572 Mflop/s
(14,14,15) <- (2,2,15).*(7, 7+0,1): 121.387646 Mflop/s

Testing m0 = 7, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 7 9 7 7 7 9 7 9
<<< (M = 7, K = 7, N = 9) : 105.115572
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 121.387646
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 7,1) :   112.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1389 (12.3%), 9861 (87.7%) left; Finishing by Sat Oct 21  6:42:37 2000

(9,13,7) <- (9,0,1).*(1, 13+0,7): 41.272956 Mflop/s
(15,13,14) <- (15,1,2).*(1, 13+0,7): 43.634303 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 7 9 13 13 7 9 7
<<< (M = 9, K = 13, N = 7) : 41.272956
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 43.634303
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,7) :    42.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1390 (12.4%), 9860 (87.6%) left; Finishing by Sat Oct 21  6:42:35 2000

(9,9,15) <- (9,3,0).*(1, 3+0,15): 116.998161 Mflop/s
(15,15,15) <- (15,5,1).*(1, 3+0,15): 125.160772 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 15 9 9 9 15 9 15
<<< (M = 9, K = 9, N = 15) : 116.998161
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 125.160772
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,15) :   120.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1391 (12.4%), 9859 (87.6%) left; Finishing by Sat Oct 21  6:42:32 2000

(16,8,9) <- (0,1,9).*(16, 8+0,1): 130.386029 Mflop/s
(16,8,15) <- (0,1,15).*(16, 8+0,1): 131.544064 Mflop/s

Testing m0 = 16, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 16  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 8 9 16 8 8 9 16 9
<<< (M = 16, K = 8, N = 9) : 130.386029
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 8 15 16 8 8 15 16 15
<<< (M = 16, K = 8, N = 15) : 131.544064
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (16, 8,1) :   131.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1392 (12.4%), 9858 (87.6%) left; Finishing by Sat Oct 21  6:42:29 2000

(6,10,8) <- (1,0,4).*(6, 10+0,2): 47.604421 Mflop/s
(12,10,14) <- (2,1,7).*(6, 10+0,2): 50.640013 Mflop/s

Testing m0 = 6, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 10 8 6 10 10 8 6 8
<<< (M = 6, K = 10, N = 8) : 47.604421
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 14 12 10 10 14 12 14
<<< (M = 12, K = 10, N = 14) : 50.640013
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 10,2) :    49.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1393 (12.4%), 9857 (87.6%) left; Finishing by Sat Oct 21  6:42:26 2000

(11,8,9) <- (0,1,9).*(11, 8+0,1): 59.333248 Mflop/s
(11,8,15) <- (1,1,15).*(11, 8+0,1): 59.708298 Mflop/s

Testing m0 = 11, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 11  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 8 9 11 8 8 9 11 9
<<< (M = 11, K = 8, N = 9) : 59.333248
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 8 15 11 8 8 15 11 15
<<< (M = 11, K = 8, N = 15) : 59.708298
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (11, 8,1) :    59.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1394 (12.4%), 9856 (87.6%) left; Finishing by Sat Oct 21  6:42:23 2000

(9,9,11) <- (9,1,0).*(1, 9+0,11): 116.852061 Mflop/s
(15,9,11) <- (15,1,1).*(1, 9+0,11): 117.313816 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 11 9 9 9 11 9 11
<<< (M = 9, K = 9, N = 11) : 116.852061
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 11 15 9 9 11 15 11
<<< (M = 15, K = 9, N = 11) : 117.313816
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,11) :   117.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1395 (12.4%), 9855 (87.6%) left; Finishing by Sat Oct 21  6:42:28 2000

(13,9,9) <- (0,1,9).*(13, 9+0,1): 52.918194 Mflop/s
(13,9,15) <- (1,1,15).*(13, 9+0,1): 53.301808 Mflop/s

Testing m0 = 13, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 13  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 9 9 13 9 9 9 13 9
<<< (M = 13, K = 9, N = 9) : 52.918194
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 9 15 13 9 9 15 13 15
<<< (M = 13, K = 9, N = 15) : 53.301808
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (13, 9,1) :    53.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1396 (12.4%), 9854 (87.6%) left; Finishing by Sat Oct 21  6:42:25 2000

(9,11,8) <- (9,0,2).*(1, 11+0,4): 142.759297 Mflop/s
(15,11,12) <- (15,1,3).*(1, 11+0,4): 143.936069 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 142.759297
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 143.936069
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,4) :   143.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1397 (12.4%), 9853 (87.6%) left; Finishing by Sat Oct 21  6:42:23 2000

(9,8,9) <- (9,1,9).*(1, 8+0,1): 118.854852 Mflop/s
(15,8,15) <- (15,1,15).*(1, 8+0,1): 124.850532 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 118.854852
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 124.850532
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 8,1) :   121.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1398 (12.4%), 9852 (87.6%) left; Finishing by Sat Oct 21  6:42:28 2000

(8,13,6) <- (4,0,1).*(2, 13+0,6): 40.347220 Mflop/s
(14,13,12) <- (7,1,2).*(2, 13+0,6): 37.903559 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  13 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 6 8 13 13 6 8 6
<<< (M = 8, K = 13, N = 6) : 40.347220
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 12 14 13 13 12 14 12
<<< (M = 14, K = 13, N = 12) : 37.903559
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 13,6) :    39.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1399 (12.4%), 9851 (87.6%) left; Finishing by Sat Oct 21  6:42:25 2000

(9,9,13) <- (9,1,0).*(1, 9+0,13): 119.706701 Mflop/s
(15,9,13) <- (15,1,1).*(1, 9+0,13): 118.771974 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 13 9 9 9 13 9 13
<<< (M = 9, K = 9, N = 13) : 119.706701
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 13 15 9 9 13 15 13
<<< (M = 15, K = 9, N = 13) : 118.771974
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,13) :   119.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1400 (12.4%), 9850 (87.6%) left; Finishing by Sat Oct 21  6:42:22 2000

(8,5,8) <- (2,1,4).*(4, 5+0,2): 57.937761 Mflop/s
(12,15,14) <- (3,3,7).*(4, 5+0,2): 70.662801 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 8 8 5 5 8 8 8
<<< (M = 8, K = 5, N = 8) : 57.937761
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 70.662801
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 5,2) :    63.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1401 (12.5%), 9849 (87.5%) left; Finishing by Sat Oct 21  6:42:27 2000

(6,8,8) <- (1,2,4).*(6, 4+0,2): 121.576378 Mflop/s
(12,12,14) <- (2,3,7).*(6, 4+0,2): 130.388823 Mflop/s

Testing m0 = 6, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 8 6 8 8 8 6 8
<<< (M = 6, K = 8, N = 8) : 121.576378
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 130.388823
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 4,2) :   125.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1402 (12.5%), 9848 (87.5%) left; Finishing by Sat Oct 21  6:42:33 2000

(9,14,6) <- (9,0,1).*(1, 14+0,6): 135.073896 Mflop/s
(15,14,12) <- (15,1,2).*(1, 14+0,6): 139.345687 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 6 9 14 14 6 9 6
<<< (M = 9, K = 14, N = 6) : 135.073896
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 139.345687
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,6) :   137.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1403 (12.5%), 9847 (87.5%) left; Finishing by Sat Oct 21  6:42:38 2000

(9,11,9) <- (9,0,9).*(1, 11+0,1): 122.660147 Mflop/s
(15,11,15) <- (15,1,15).*(1, 11+0,1): 125.689304 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 122.660147
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 125.689304
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,1) :   124.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1404 (12.5%), 9846 (87.5%) left; Finishing by Sat Oct 21  6:42:27 2000

(9,9,5) <- (9,1,1).*(1, 9+0,5): 119.399057 Mflop/s
(15,9,15) <- (15,1,3).*(1, 9+0,5): 127.283556 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 119.399057
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 127.283556
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,5) :   123.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1405 (12.5%), 9845 (87.5%) left; Finishing by Sat Oct 21  6:42:32 2000

(9,14,9) <- (3,0,3).*(3, 14+0,3): 113.362487 Mflop/s
(15,14,15) <- (5,1,5).*(3, 14+0,3): 144.394217 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 113.362487
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 144.394217
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 14,3) :   127.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1406 (12.5%), 9844 (87.5%) left; Finishing by Sat Oct 21  6:42:29 2000

(8,5,5) <- (4,1,1).*(2, 5+0,5): 36.856114 Mflop/s
(14,15,15) <- (7,3,3).*(2, 5+0,5): 39.232519 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  5 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 5 8 5 5 5 8 5
<<< (M = 8, K = 5, N = 5) : 36.856114
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 39.232519
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 5,5) :    38.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1407 (12.5%), 9843 (87.5%) left; Finishing by Sat Oct 21  6:42:26 2000

(13,15,9) <- (0,0,9).*(13, 15+0,1): 134.739152 Mflop/s
(13,15,15) <- (1,1,15).*(13, 15+0,1): 135.402825 Mflop/s

Testing m0 = 13, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 13  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 9 13 15 15 9 13 9
<<< (M = 13, K = 15, N = 9) : 134.739152
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 15 13 15 15 15 13 15
<<< (M = 13, K = 15, N = 15) : 135.402825
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (13, 15,1) :   135.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1408 (12.5%), 9842 (87.5%) left; Finishing by Sat Oct 21  6:42:32 2000

(8,13,8) <- (4,0,1).*(2, 13+0,8): 39.277513 Mflop/s
(14,13,8) <- (7,1,1).*(2, 13+0,8): 39.638304 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  13 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 39.277513
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 8 14 13 13 8 14 8
<<< (M = 14, K = 13, N = 8) : 39.638304
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 13,8) :    39.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1409 (12.5%), 9841 (87.5%) left; Finishing by Sat Oct 21  6:42:29 2000

(9,12,9) <- (9,0,3).*(1, 12+0,3): 149.101751 Mflop/s
(15,12,15) <- (15,1,5).*(1, 12+0,3): 153.719166 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 149.101751
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 153.719166
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,3) :   151.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1410 (12.5%), 9840 (87.5%) left; Finishing by Sat Oct 21  6:42:34 2000

(8,6,8) <- (2,1,2).*(4, 6+0,4): 36.973025 Mflop/s
(12,12,12) <- (3,2,3).*(4, 6+0,4): 42.697488 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 36.973025
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 12 12 12 12 12 12 12
<<< (M = 12, K = 12, N = 12) : 42.697488
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 6,4) :    39.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1411 (12.5%), 9839 (87.5%) left; Finishing by Sat Oct 21  6:42:23 2000

(9,15,12) <- (9,0,0).*(1, 15+0,12): 123.264918 Mflop/s
(15,15,12) <- (15,1,1).*(1, 15+0,12): 123.836181 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 12 9 15 15 12 9 12
<<< (M = 9, K = 15, N = 12) : 123.264918
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 123.836181
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,12) :   123.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1412 (12.6%), 9838 (87.4%) left; Finishing by Sat Oct 21  6:42:28 2000

(9,9,14) <- (9,9,0).*(1,1+0,14): 28.558684 Mflop/s
(15,15,14) <- (15,15,1).*(1,1+0,14): 28.057859 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 14 9 9 9 14 9 14
<<< (M = 9, K = 9, N = 14) : 28.558684
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 28.057859
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,14) :    28.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1413 (12.6%), 9837 (87.4%) left; Finishing by Sat Oct 21  6:42:25 2000

(9,5,13) <- (9,1,0).*(1, 5+0,13): 101.511731 Mflop/s
(15,15,13) <- (15,3,1).*(1, 5+0,13): 128.556200 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 13 9 5 5 13 9 13
<<< (M = 9, K = 5, N = 13) : 101.511731
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 13 15 15 15 13 15 13
<<< (M = 15, K = 15, N = 13) : 128.556200
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,13) :   113.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1414 (12.6%), 9836 (87.4%) left; Finishing by Sat Oct 21  6:42:31 2000

(8,11,5) <- (4,0,1).*(2, 11+0,5): 44.160661 Mflop/s
(14,11,15) <- (7,1,3).*(2, 11+0,5): 38.458949 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  11 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 5 8 11 11 5 8 5
<<< (M = 8, K = 11, N = 5) : 44.160661
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 38.458949
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 11,5) :    41.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1415 (12.6%), 9835 (87.4%) left; Finishing by Sat Oct 21  6:42:28 2000

(9,7,15) <- (9,1,0).*(1, 7+0,15): 28.697035 Mflop/s
(15,14,15) <- (15,2,1).*(1, 7+0,15): 35.095064 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 15 9 7 7 15 9 15
<<< (M = 9, K = 7, N = 15) : 28.697035
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 35.095064
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,15) :    31.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1416 (12.6%), 9834 (87.4%) left; Finishing by Sat Oct 21  6:42:25 2000

(9,9,9) <- (3,1,3).*(3, 9+0,3): 106.259100 Mflop/s
(15,9,15) <- (5,1,5).*(3, 9+0,3): 108.257391 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 106.259100
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 108.257391
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 9,3) :   107.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1417 (12.6%), 9833 (87.4%) left; Finishing by Sat Oct 21  6:42:22 2000

(9,14,14) <- (9,0,0).*(1, 14+0,14): 105.005009 Mflop/s
(15,14,14) <- (15,1,1).*(1, 14+0,14): 126.399422 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 14 9 14 14 14 9 14
<<< (M = 9, K = 14, N = 14) : 105.005009
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 126.399422
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,14) :   114.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1418 (12.6%), 9832 (87.4%) left; Finishing by Sat Oct 21  6:42:19 2000

(8,7,5) <- (4,1,1).*(2, 7+0,5): 40.940415 Mflop/s
(14,14,15) <- (7,2,3).*(2, 7+0,5): 39.223794 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  7 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 5 8 7 7 5 8 5
<<< (M = 8, K = 7, N = 5) : 40.940415
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 39.223794
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 7,5) :    40.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1419 (12.6%), 9831 (87.4%) left; Finishing by Sat Oct 21  6:42:24 2000

(7,9,9) <- (1,3,9).*(7, 3+0,1): 136.048525 Mflop/s
(14,15,15) <- (2,5,15).*(7, 3+0,1): 152.872487 Mflop/s

Testing m0 = 7, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 9 7 9 9 9 7 9
<<< (M = 7, K = 9, N = 9) : 136.048525
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 152.872487
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 3,1) :   144.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1420 (12.6%), 9830 (87.4%) left; Finishing by Sat Oct 21  6:42:30 2000

(9,8,12) <- (9,4,0).*(1, 2+0,12): 110.905868 Mflop/s
(15,14,12) <- (15,7,1).*(1, 2+0,12): 121.634873 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 12 9 8 8 12 9 12
<<< (M = 9, K = 8, N = 12) : 110.905868
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 121.634873
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,12) :   116.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1421 (12.6%), 9829 (87.4%) left; Finishing by Sat Oct 21  6:42:27 2000

(5,8,9) <- (1,1,9).*(5, 8+0,1): 144.694139 Mflop/s
(15,8,15) <- (3,1,15).*(5, 8+0,1): 152.324841 Mflop/s

Testing m0 = 5, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 144.694139
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 152.324841
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 8,1) :   148.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1422 (12.6%), 9828 (87.4%) left; Finishing by Sat Oct 21  6:42:24 2000

(9,9,9) <- (1,3,9).*(9, 3+0,1): 73.766181 Mflop/s
(9,15,15) <- (1,5,15).*(9, 3+0,1): 79.671804 Mflop/s

Testing m0 = 9, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 9  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 73.766181
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 79.671804
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (9, 3,1) :    76.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1423 (12.6%), 9827 (87.4%) left; Finishing by Sat Oct 21  6:42:21 2000

(8,8,8) <- (2,2,4).*(4, 4+0,2): 61.012395 Mflop/s
(12,12,14) <- (3,3,7).*(4, 4+0,2): 62.592606 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 61.012395
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 62.592606
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 4,2) :    61.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1424 (12.7%), 9826 (87.3%) left; Finishing by Sat Oct 21  6:42:18 2000

(8,8,8) <- (4,1,1).*(2, 8+0,8): 36.884773 Mflop/s
(14,8,8) <- (7,1,1).*(2, 8+0,8): 37.014509 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  8 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 36.884773
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 8 14 8 8 8 14 8
<<< (M = 14, K = 8, N = 8) : 37.014509
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 8,8) :    36.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1425 (12.7%), 9825 (87.3%) left; Finishing by Sat Oct 21  6:42:16 2000

(9,7,6) <- (9,1,1).*(1, 7+0,6): 110.127032 Mflop/s
(15,14,12) <- (15,2,2).*(1, 7+0,6): 133.192911 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  7 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 6 9 7 7 6 9 6
<<< (M = 9, K = 7, N = 6) : 110.127032
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 133.192911
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 7,6) :   120.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1426 (12.7%), 9824 (87.3%) left; Finishing by Sat Oct 21  6:42:21 2000

(9,9,14) <- (9,3,0).*(1, 3+0,14): 118.122750 Mflop/s
(15,15,14) <- (15,5,1).*(1, 3+0,14): 128.500334 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 14 9 9 9 14 9 14
<<< (M = 9, K = 9, N = 14) : 118.122750
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 128.500334
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,14) :   123.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1427 (12.7%), 9823 (87.3%) left; Finishing by Sat Oct 21  6:42:18 2000

(6,6,9) <- (1,1,9).*(6, 6+0,1): 131.959770 Mflop/s
(12,12,15) <- (2,2,15).*(6, 6+0,1): 168.973887 Mflop/s

Testing m0 = 6, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 6 9 6 6 6 9 6 9
<<< (M = 6, K = 6, N = 9) : 131.959770
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 168.973887
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 6,1) :   148.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1428 (12.7%), 9822 (87.3%) left; Finishing by Sat Oct 21  6:42:23 2000

(8,7,9) <- (4,1,3).*(2, 7+0,3): 61.030529 Mflop/s
(14,14,15) <- (7,2,5).*(2, 7+0,3): 63.827000 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 61.030529
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 63.827000
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 7,3) :    62.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1429 (12.7%), 9821 (87.3%) left; Finishing by Sat Oct 21  6:42:28 2000

(12,8,9) <- (0,4,9).*(12, 2+0,1): 119.284857 Mflop/s
(12,14,15) <- (1,7,15).*(12, 2+0,1): 130.905285 Mflop/s

Testing m0 = 12, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 12  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 9 12 8 8 9 12 9
<<< (M = 12, K = 8, N = 9) : 119.284857
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 130.905285
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (12, 2,1) :   124.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1430 (12.7%), 9820 (87.3%) left; Finishing by Sat Oct 21  6:42:33 2000

(9,9,9) <- (9,3,9).*(1, 3+0,1): 107.078346 Mflop/s
(15,15,15) <- (15,5,15).*(1, 3+0,1): 123.617014 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 107.078346
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 123.617014
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 3,1) :   114.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1431 (12.7%), 9819 (87.3%) left; Finishing by Sat Oct 21  6:42:30 2000

(9,15,5) <- (3,0,1).*(3, 15+0,5): 118.973804 Mflop/s
(15,15,15) <- (5,1,3).*(3, 15+0,5): 141.444413 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  15 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 5 9 15 15 5 9 5
<<< (M = 9, K = 15, N = 5) : 118.973804
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 141.444413
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 15,5) :   129.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1432 (12.7%), 9818 (87.3%) left; Finishing by Sat Oct 21  6:42:28 2000

(5,12,9) <- (1,0,3).*(5, 12+0,3): 114.456548 Mflop/s
(15,12,15) <- (3,1,5).*(5, 12+0,3): 135.490315 Mflop/s

Testing m0 = 5, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 114.456548
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 135.490315
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 12,3) :   124.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1433 (12.7%), 9817 (87.3%) left; Finishing by Sat Oct 21  6:42:25 2000

(9,13,9) <- (9,0,3).*(1, 13+0,3): 149.261744 Mflop/s
(15,13,15) <- (15,1,5).*(1, 13+0,3): 154.899686 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 149.261744
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 154.899686
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,3) :   152.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1434 (12.7%), 9816 (87.3%) left; Finishing by Sat Oct 21  6:42:30 2000

(5,9,8) <- (1,9,4).*(5,1+0,2): 50.466070 Mflop/s
(15,15,14) <- (3,15,7).*(5,1+0,2): 61.653859 Mflop/s

Testing m0 = 5, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 8 5 9 9 8 5 8
<<< (M = 5, K = 9, N = 8) : 50.466070
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 61.653859
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5,1,2) :    55.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1435 (12.8%), 9815 (87.2%) left; Finishing by Sat Oct 21  6:42:27 2000

(9,12,9) <- (9,0,9).*(1, 12+0,1): 124.322967 Mflop/s
(15,12,15) <- (15,1,15).*(1, 12+0,1): 129.045532 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 124.322967
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 129.045532
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,1) :   126.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1436 (12.8%), 9814 (87.2%) left; Finishing by Sat Oct 21  6:42:17 2000

(9,13,8) <- (9,0,4).*(1, 13+0,2): 175.097276 Mflop/s
(15,13,14) <- (15,1,7).*(1, 13+0,2): 174.097129 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 175.097276
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 174.097129
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,2) :   174.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1437 (12.8%), 9813 (87.2%) left; Finishing by Sat Oct 21  6:42:14 2000

(9,14,13) <- (9,0,0).*(1, 14+0,13): 126.192975 Mflop/s
(15,14,13) <- (15,1,1).*(1, 14+0,13): 102.246399 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 13 9 14 14 13 9 13
<<< (M = 9, K = 14, N = 13) : 126.192975
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 13 15 14 14 13 15 13
<<< (M = 15, K = 14, N = 13) : 102.246399
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,13) :   113.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1438 (12.8%), 9812 (87.2%) left; Finishing by Sat Oct 21  6:42:11 2000

(5,14,9) <- (1,0,3).*(5, 14+0,3): 118.610645 Mflop/s
(15,14,15) <- (3,1,5).*(5, 14+0,3): 136.934480 Mflop/s

Testing m0 = 5, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 14 9 5 14 14 9 5 9
<<< (M = 5, K = 14, N = 9) : 118.610645
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 136.934480
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 14,3) :   127.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1439 (12.8%), 9811 (87.2%) left; Finishing by Sat Oct 21  6:42:08 2000

(8,7,9) <- (4,1,9).*(2, 7+0,1): 121.804433 Mflop/s
(14,14,15) <- (7,2,15).*(2, 7+0,1): 163.330034 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 121.804433
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 163.330034
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 7,1) :   139.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1440 (12.8%), 9810 (87.2%) left; Finishing by Sat Oct 21  6:42:13 2000

(10,6,9) <- (0,1,9).*(10, 6+0,1): 112.142297 Mflop/s
(10,12,15) <- (1,2,15).*(10, 6+0,1): 149.473908 Mflop/s

Testing m0 = 10, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 10  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 6 9 10 6 6 9 10 9
<<< (M = 10, K = 6, N = 9) : 112.142297
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 15 10 12 12 15 10 15
<<< (M = 10, K = 12, N = 15) : 149.473908
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (10, 6,1) :   128.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1441 (12.8%), 9809 (87.2%) left; Finishing by Sat Oct 21  6:42:18 2000

(9,5,9) <- (9,1,3).*(1, 5+0,3): 111.540948 Mflop/s
(15,15,15) <- (15,3,5).*(1, 5+0,3): 150.117197 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 5 9 9 5 5 9 9 9
<<< (M = 9, K = 5, N = 9) : 111.540948
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 150.117197
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 5,3) :   128.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1442 (12.8%), 9808 (87.2%) left; Finishing by Sat Oct 21  6:42:16 2000

(8,6,8) <- (1,1,4).*(8, 6+0,2): 106.651375 Mflop/s
(8,12,14) <- (1,2,7).*(8, 6+0,2): 129.389143 Mflop/s

Testing m0 = 8, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 8  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 106.651375
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 14 8 12 12 14 8 14
<<< (M = 8, K = 12, N = 14) : 129.389143
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (8, 6,2) :   116.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1443 (12.8%), 9807 (87.2%) left; Finishing by Sat Oct 21  6:42:21 2000

(9,13,11) <- (9,0,0).*(1, 13+0,11): 32.575388 Mflop/s
(15,13,11) <- (15,1,1).*(1, 13+0,11): 38.938321 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  13 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 11 9 13 13 11 9 11
<<< (M = 9, K = 13, N = 11) : 32.575388
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 11 15 13 13 11 15 11
<<< (M = 15, K = 13, N = 11) : 38.938321
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 13,11) :    35.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1444 (12.8%), 9806 (87.2%) left; Finishing by Sat Oct 21  6:42:18 2000

(5,5,9) <- (1,1,9).*(5, 5+0,1): 115.455047 Mflop/s
(15,15,15) <- (3,3,15).*(5, 5+0,1): 180.242925 Mflop/s

Testing m0 = 5, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 5 9 5 5 5 9 5 9
<<< (M = 5, K = 5, N = 9) : 115.455047
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 180.242925
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 5,1) :   140.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1445 (12.8%), 9805 (87.2%) left; Finishing by Sat Oct 21  6:42:23 2000

(5,7,9) <- (1,1,3).*(5, 7+0,3): 103.975231 Mflop/s
(15,14,15) <- (3,2,5).*(5, 7+0,3): 135.527777 Mflop/s

Testing m0 = 5, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 7 9 5 7 7 9 5 9
<<< (M = 5, K = 7, N = 9) : 103.975231
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 135.527777
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 7,3) :   117.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1446 (12.9%), 9804 (87.1%) left; Finishing by Sat Oct 21  6:42:28 2000

(12,9,9) <- (0,3,9).*(12, 3+0,1): 129.381149 Mflop/s
(12,15,15) <- (1,5,15).*(12, 3+0,1): 142.534167 Mflop/s

Testing m0 = 12, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 12  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 9 12 9 9 9 12 9
<<< (M = 12, K = 9, N = 9) : 129.381149
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 142.534167
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (12, 3,1) :   135.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1447 (12.9%), 9803 (87.1%) left; Finishing by Sat Oct 21  6:42:33 2000

(8,11,8) <- (4,0,2).*(2, 11+0,4): 52.372151 Mflop/s
(14,11,12) <- (7,1,3).*(2, 11+0,4): 45.824513 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 52.372151
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 12 14 11 11 12 14 12
<<< (M = 14, K = 11, N = 12) : 45.824513
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 11,4) :    48.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1448 (12.9%), 9802 (87.1%) left; Finishing by Sat Oct 21  6:42:30 2000

(7,12,8) <- (1,0,4).*(7, 12+0,2): 115.828520 Mflop/s
(14,12,14) <- (2,1,7).*(7, 12+0,2): 138.284831 Mflop/s

Testing m0 = 7, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 8 7 12 12 8 7 8
<<< (M = 7, K = 12, N = 8) : 115.828520
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 138.284831
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 12,2) :   126.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1449 (12.9%), 9801 (87.1%) left; Finishing by Sat Oct 21  6:42:28 2000

(14,11,9) <- (0,0,9).*(14, 11+0,1): 129.669016 Mflop/s
(14,11,15) <- (1,1,15).*(14, 11+0,1): 131.905501 Mflop/s

Testing m0 = 14, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 14  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 9 14 11 11 9 14 9
<<< (M = 14, K = 11, N = 9) : 129.669016
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 131.905501
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (14, 11,1) :   130.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1450 (12.9%), 9800 (87.1%) left; Finishing by Sat Oct 21  6:42:25 2000

(8,8,9) <- (4,1,9).*(2, 8+0,1): 134.585220 Mflop/s
(14,8,15) <- (7,1,15).*(2, 8+0,1): 139.169310 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 134.585220
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 15 14 8 8 15 14 15
<<< (M = 14, K = 8, N = 15) : 139.169310
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 8,1) :   136.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1451 (12.9%), 9799 (87.1%) left; Finishing by Sat Oct 21  6:42:22 2000

(9,9,12) <- (9,1,0).*(1, 9+0,12): 117.781682 Mflop/s
(15,9,12) <- (15,1,1).*(1, 9+0,12): 118.275175 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 12 9 9 9 12 9 12
<<< (M = 9, K = 9, N = 12) : 117.781682
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 118.275175
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,12) :   118.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1452 (12.9%), 9798 (87.1%) left; Finishing by Sat Oct 21  6:42:19 2000

(6,8,9) <- (1,4,9).*(6, 2+0,1): 138.866176 Mflop/s
(12,14,15) <- (2,7,15).*(6, 2+0,1): 157.014331 Mflop/s

Testing m0 = 6, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 9 6 8 8 9 6 9
<<< (M = 6, K = 8, N = 9) : 138.866176
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 157.014331
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 2,1) :   147.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1453 (12.9%), 9797 (87.1%) left; Finishing by Sat Oct 21  6:42:24 2000

(8,12,8) <- (4,0,1).*(2, 12+0,8): 38.953050 Mflop/s
(14,12,8) <- (7,1,1).*(2, 12+0,8): 39.203945 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  12 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 38.953050
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 8 14 12 12 8 14 8
<<< (M = 14, K = 12, N = 8) : 39.203945
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 12,8) :    39.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1454 (12.9%), 9796 (87.1%) left; Finishing by Sat Oct 21  6:42:22 2000

(8,9,8) <- (4,1,2).*(2, 9+0,4): 51.915332 Mflop/s
(14,9,12) <- (7,1,3).*(2, 9+0,4): 52.098491 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 51.915332
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 12 14 9 9 12 14 12
<<< (M = 14, K = 9, N = 12) : 52.098491
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 9,4) :    52.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1455 (12.9%), 9795 (87.1%) left; Finishing by Sat Oct 21  6:42:19 2000

(7,9,9) <- (1,1,9).*(7, 9+0,1): 111.051061 Mflop/s
(14,9,15) <- (2,1,15).*(7, 9+0,1): 114.932145 Mflop/s

Testing m0 = 7, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 9 7 9 9 9 7 9
<<< (M = 7, K = 9, N = 9) : 111.051061
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 114.932145
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 9,1) :   113.0 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1456 (12.9%), 9794 (87.1%) left; Finishing by Sat Oct 21  6:42:24 2000

(16,8,9) <- (0,4,9).*(16, 2+0,1): 49.018887 Mflop/s
(16,14,15) <- (0,7,15).*(16, 2+0,1): 49.184174 Mflop/s

Testing m0 = 16, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 16  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 8 9 16 8 8 9 16 9
<<< (M = 16, K = 8, N = 9) : 49.018887
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 15 16 14 14 15 16 15
<<< (M = 16, K = 14, N = 15) : 49.184174
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (16, 2,1) :    49.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1457 (13.0%), 9793 (87.0%) left; Finishing by Sat Oct 21  6:42:21 2000

(9,8,8) <- (9,2,1).*(1, 4+0,8): 82.352096 Mflop/s
(15,12,8) <- (15,3,1).*(1, 4+0,8): 88.991344 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 82.352096
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 8 15 12 12 8 15 8
<<< (M = 15, K = 12, N = 8) : 88.991344
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,8) :    85.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1458 (13.0%), 9792 (87.0%) left; Finishing by Sat Oct 21  6:42:19 2000

(12,10,9) <- (0,0,9).*(12, 10+0,1): 122.161658 Mflop/s
(12,10,15) <- (1,1,15).*(12, 10+0,1): 125.513086 Mflop/s

Testing m0 = 12, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 12  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 9 12 10 10 9 12 9
<<< (M = 12, K = 10, N = 9) : 122.161658
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 125.513086
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (12, 10,1) :   123.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1459 (13.0%), 9791 (87.0%) left; Finishing by Sat Oct 21  6:42:16 2000

(8,8,9) <- (2,4,3).*(4, 2+0,3): 41.389587 Mflop/s
(12,14,15) <- (3,7,5).*(4, 2+0,3): 48.295768 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 41.389587
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 48.295768
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 2,3) :    44.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1460 (13.0%), 9790 (87.0%) left; Finishing by Sat Oct 21  6:42:13 2000

(9,8,13) <- (9,4,0).*(1, 2+0,13): 115.603788 Mflop/s
(15,14,13) <- (15,7,1).*(1, 2+0,13): 124.052816 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  2 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 13 9 8 8 13 9 13
<<< (M = 9, K = 8, N = 13) : 115.603788
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 13 15 14 14 13 15 13
<<< (M = 15, K = 14, N = 13) : 124.052816
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 2,13) :   119.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1461 (13.0%), 9789 (87.0%) left; Finishing by Sat Oct 21  6:42:18 2000

(11,8,9) <- (0,2,9).*(11, 4+0,1): 63.761910 Mflop/s
(11,12,15) <- (1,3,15).*(11, 4+0,1): 69.757183 Mflop/s

Testing m0 = 11, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 11  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 8 9 11 8 8 9 11 9
<<< (M = 11, K = 8, N = 9) : 63.761910
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 15 11 12 12 15 11 15
<<< (M = 11, K = 12, N = 15) : 69.757183
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (11, 4,1) :    66.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1462 (13.0%), 9788 (87.0%) left; Finishing by Sat Oct 21  6:42:15 2000

(9,12,13) <- (9,0,0).*(1, 12+0,13): 125.069750 Mflop/s
(15,12,13) <- (15,1,1).*(1, 12+0,13): 126.632588 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  12 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 13 9 12 12 13 9 13
<<< (M = 9, K = 12, N = 13) : 125.069750
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 13 15 12 12 13 15 13
<<< (M = 15, K = 12, N = 13) : 126.632588
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 12,13) :   125.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1463 (13.0%), 9787 (87.0%) left; Finishing by Sat Oct 21  6:42:13 2000

(9,7,8) <- (3,1,2).*(3, 7+0,4): 113.133092 Mflop/s
(15,14,12) <- (5,2,3).*(3, 7+0,4): 134.533655 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 113.133092
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 134.533655
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 7,4) :   122.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1464 (13.0%), 9786 (87.0%) left; Finishing by Sat Oct 21  6:42:10 2000

(8,10,8) <- (2,0,4).*(4, 10+0,2): 67.815835 Mflop/s
(12,10,14) <- (3,1,7).*(4, 10+0,2): 65.932456 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 67.815835
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 14 12 10 10 14 12 14
<<< (M = 12, K = 10, N = 14) : 65.932456
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 10,2) :    66.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1465 (13.0%), 9785 (87.0%) left; Finishing by Sat Oct 21  6:42:00 2000

(9,9,14) <- (9,1,0).*(1, 9+0,14): 118.022706 Mflop/s
(15,9,14) <- (15,1,1).*(1, 9+0,14): 119.571797 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  9 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 14 9 9 9 14 9 14
<<< (M = 9, K = 9, N = 14) : 118.022706
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 119.571797
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 9,14) :   118.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1466 (13.0%), 9784 (87.0%) left; Finishing by Sat Oct 21  6:42:05 2000

(9,9,9) <- (3,9,9).*(3,1+0,1): 104.978546 Mflop/s
(15,15,15) <- (5,15,15).*(3,1+0,1): 125.953304 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 104.978546
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 125.953304
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3,1,1) :   114.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1467 (13.0%), 9783 (87.0%) left; Finishing by Sat Oct 21  6:41:54 2000

(8,9,8) <- (4,1,1).*(2, 9+0,8): 37.491505 Mflop/s
(14,9,8) <- (7,1,1).*(2, 9+0,8): 38.094835 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  9 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 37.491505
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 8 14 9 9 8 14 8
<<< (M = 14, K = 9, N = 8) : 38.094835
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 9,8) :    37.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1468 (13.0%), 9782 (87.0%) left; Finishing by Sat Oct 21  6:41:52 2000

(9,15,9) <- (9,0,1).*(1, 15+0,9): 121.680235 Mflop/s
(15,15,9) <- (15,1,1).*(1, 15+0,9): 122.675006 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 121.680235
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 122.675006
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,9) :   122.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1469 (13.1%), 9781 (86.9%) left; Finishing by Sat Oct 21  6:41:49 2000

(9,11,6) <- (9,0,1).*(1, 11+0,6): 126.911757 Mflop/s
(15,11,12) <- (15,1,2).*(1, 11+0,6): 129.440450 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 6 9 11 11 6 9 6
<<< (M = 9, K = 11, N = 6) : 126.911757
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 129.440450
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,6) :   128.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1470 (13.1%), 9780 (86.9%) left; Finishing by Sat Oct 21  6:41:54 2000

(6,7,8) <- (1,1,4).*(6, 7+0,2): 48.487529 Mflop/s
(12,14,14) <- (2,2,7).*(6, 7+0,2): 49.190452 Mflop/s

Testing m0 = 6, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 7 8 6 7 7 8 6 8
<<< (M = 6, K = 7, N = 8) : 48.487529
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 49.190452
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 7,2) :    48.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1471 (13.1%), 9779 (86.9%) left; Finishing by Sat Oct 21  6:41:51 2000

(5,8,9) <- (1,1,3).*(5, 8+0,3): 110.357387 Mflop/s
(15,8,15) <- (3,1,5).*(5, 8+0,3): 108.424362 Mflop/s

Testing m0 = 5, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 110.357387
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 15 15 8 8 15 15 15
<<< (M = 15, K = 8, N = 15) : 108.424362
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 8,3) :   109.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1472 (13.1%), 9778 (86.9%) left; Finishing by Sat Oct 21  6:41:56 2000

(5,9,9) <- (1,3,9).*(5, 3+0,1): 143.479887 Mflop/s
(15,15,15) <- (3,5,15).*(5, 3+0,1): 168.665986 Mflop/s

Testing m0 = 5, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 143.479887
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 168.665986
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 3,1) :   155.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1473 (13.1%), 9777 (86.9%) left; Finishing by Sat Oct 21  6:42:01 2000

(8,15,8) <- (2,0,4).*(4, 15+0,2): 74.437750 Mflop/s
(12,15,14) <- (3,1,7).*(4, 15+0,2): 71.109881 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 74.437750
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 71.109881
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 15,2) :    72.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1474 (13.1%), 9776 (86.9%) left; Finishing by Sat Oct 21  6:41:58 2000

(8,7,8) <- (4,1,1).*(2, 7+0,8): 35.998036 Mflop/s
(14,14,8) <- (7,2,1).*(2, 7+0,8): 39.628920 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  7 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 35.998036
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 8 14 14 14 8 14 8
<<< (M = 14, K = 14, N = 8) : 39.628920
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 7,8) :    37.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1475 (13.1%), 9775 (86.9%) left; Finishing by Sat Oct 21  6:41:56 2000

(6,13,8) <- (1,0,4).*(6, 13+0,2): 48.329431 Mflop/s
(12,13,14) <- (2,1,7).*(6, 13+0,2): 52.754937 Mflop/s

Testing m0 = 6, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 6  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 13 8 6 13 13 8 6 8
<<< (M = 6, K = 13, N = 8) : 48.329431
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 14 12 13 13 14 12 14
<<< (M = 12, K = 13, N = 14) : 52.754937
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (6, 13,2) :    50.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1476 (13.1%), 9774 (86.9%) left; Finishing by Sat Oct 21  6:41:53 2000

(8,9,6) <- (4,3,1).*(2, 3+0,6): 37.923064 Mflop/s
(14,15,12) <- (7,5,2).*(2, 3+0,6): 38.346739 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  3 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 6 8 9 9 6 8 6
<<< (M = 8, K = 9, N = 6) : 37.923064
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 38.346739
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 3,6) :    38.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1477 (13.1%), 9773 (86.9%) left; Finishing by Sat Oct 21  6:41:43 2000

(8,10,9) <- (2,0,9).*(4, 10+0,1): 158.610134 Mflop/s
(12,10,15) <- (3,1,15).*(4, 10+0,1): 165.158349 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 158.610134
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 165.158349
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 10,1) :   161.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1478 (13.1%), 9772 (86.9%) left; Finishing by Sat Oct 21  6:41:48 2000

(8,8,6) <- (4,2,1).*(2, 4+0,6): 37.347594 Mflop/s
(14,12,12) <- (7,3,2).*(2, 4+0,6): 37.701037 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  4 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 6 8 8 8 6 8 6
<<< (M = 8, K = 8, N = 6) : 37.347594
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 37.701037
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 4,6) :    37.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1479 (13.1%), 9771 (86.9%) left; Finishing by Sat Oct 21  6:41:45 2000

(9,10,5) <- (3,0,1).*(3, 10+0,5): 108.044064 Mflop/s
(15,10,15) <- (5,1,3).*(3, 10+0,5): 134.322945 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  10 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 5 9 10 10 5 9 5
<<< (M = 9, K = 10, N = 5) : 108.044064
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 134.322945
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 10,5) :   119.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1480 (13.2%), 9770 (86.8%) left; Finishing by Sat Oct 21  6:41:50 2000

(5,8,8) <- (1,2,4).*(5, 4+0,2): 117.397926 Mflop/s
(15,12,14) <- (3,3,7).*(5, 4+0,2): 109.611678 Mflop/s

Testing m0 = 5, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 8 5 8 8 8 5 8
<<< (M = 5, K = 8, N = 8) : 117.397926
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 109.611678
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 4,2) :   113.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1481 (13.2%), 9769 (86.8%) left; Finishing by Sat Oct 21  6:41:55 2000

(12,15,9) <- (0,0,9).*(12, 15+0,1): 63.102812 Mflop/s
(12,15,15) <- (1,1,15).*(12, 15+0,1): 61.342926 Mflop/s

Testing m0 = 12, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 12  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 9 12 15 15 9 12 9
<<< (M = 12, K = 15, N = 9) : 63.102812
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 61.342926
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (12, 15,1) :    62.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1482 (13.2%), 9768 (86.8%) left; Finishing by Sat Oct 21  6:41:52 2000

(8,13,5) <- (4,0,1).*(2, 13+0,5): 45.591025 Mflop/s
(14,13,15) <- (7,1,3).*(2, 13+0,5): 39.172648 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  13 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 5 8 13 13 5 8 5
<<< (M = 8, K = 13, N = 5) : 45.591025
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 39.172648
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 13,5) :    42.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1483 (13.2%), 9767 (86.8%) left; Finishing by Sat Oct 21  6:41:50 2000

(8,8,8) <- (2,4,2).*(4, 2+0,4): 39.533204 Mflop/s
(12,14,12) <- (3,7,3).*(4, 2+0,4): 44.589610 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 39.533204
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 12 12 14 14 12 12 12
<<< (M = 12, K = 14, N = 12) : 44.589610
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 2,4) :    41.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1484 (13.2%), 9766 (86.8%) left; Finishing by Sat Oct 21  6:41:47 2000

(9,11,16) <- (9,0,0).*(1, 11+0,16): 124.481130 Mflop/s
(15,11,16) <- (15,1,0).*(1, 11+0,16): 124.949215 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  11 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 16 9 11 11 16 9 16
<<< (M = 9, K = 11, N = 16) : 124.481130
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 16 15 11 11 16 15 16
<<< (M = 15, K = 11, N = 16) : 124.949215
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 11,16) :   124.7 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1485 (13.2%), 9765 (86.8%) left; Finishing by Sat Oct 21  6:41:44 2000

(8,5,6) <- (4,1,1).*(2, 5+0,6): 33.259750 Mflop/s
(14,15,12) <- (7,3,2).*(2, 5+0,6): 38.323212 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  5 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 5 6 8 5 5 6 8 6
<<< (M = 8, K = 5, N = 6) : 33.259750
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 38.323212
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 5,6) :    35.6 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1486 (13.2%), 9764 (86.8%) left; Finishing by Sat Oct 21  6:41:42 2000

(9,9,9) <- (9,9,1).*(1,1+0,9): 30.477066 Mflop/s
(15,15,9) <- (15,15,1).*(1,1+0,9): 32.165366 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 30.477066
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 32.165366
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,9) :    31.3 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1487 (13.2%), 9763 (86.8%) left; Finishing by Sat Oct 21  6:41:39 2000

(9,10,9) <- (9,0,9).*(1, 10+0,1): 121.751489 Mflop/s
(15,10,15) <- (15,1,15).*(1, 10+0,1): 126.622798 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 121.751489
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 126.622798
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 10,1) :   124.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1488 (13.2%), 9762 (86.8%) left; Finishing by Sat Oct 21  6:41:44 2000

(8,8,8) <- (2,4,4).*(4, 2+0,2): 51.358870 Mflop/s
(12,14,14) <- (3,7,7).*(4, 2+0,2): 54.254060 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 4  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 51.358870
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 54.254060
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (4, 2,2) :    52.8 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1489 (13.2%), 9761 (86.8%) left; Finishing by Sat Oct 21  6:41:41 2000

(7,5,8) <- (1,1,4).*(7, 5+0,2): 40.146784 Mflop/s
(14,15,14) <- (2,3,7).*(7, 5+0,2): 47.220779 Mflop/s

Testing m0 = 7, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 7  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 5 8 7 5 5 8 7 8
<<< (M = 7, K = 5, N = 8) : 40.146784
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 47.220779
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (7, 5,2) :    43.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1490 (13.2%), 9760 (86.8%) left; Finishing by Sat Oct 21  6:41:46 2000

(15,9,9) <- (0,3,9).*(15, 3+0,1): 53.169308 Mflop/s
(15,15,15) <- (1,5,15).*(15, 3+0,1): 55.309799 Mflop/s

Testing m0 = 15, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 15  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 9 15 9 9 9 15 9
<<< (M = 15, K = 9, N = 9) : 53.169308
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 55.309799
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (15, 3,1) :    54.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1491 (13.3%), 9759 (86.7%) left; Finishing by Sat Oct 21  6:41:36 2000

(13,7,9) <- (0,1,9).*(13, 7+0,1): 50.266733 Mflop/s
(13,14,15) <- (1,2,15).*(13, 7+0,1): 54.375276 Mflop/s

Testing m0 = 13, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 13  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 7 9 13 7 7 9 13 9
<<< (M = 13, K = 7, N = 9) : 50.266733
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 15 13 14 14 15 13 15
<<< (M = 13, K = 14, N = 15) : 54.375276
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (13, 7,1) :    52.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1492 (13.3%), 9758 (86.7%) left; Finishing by Sat Oct 21  6:41:41 2000

(9,9,15) <- (9,9,0).*(1,1+0,15): 29.053843 Mflop/s
(15,15,15) <- (15,15,1).*(1,1+0,15): 27.336468 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1 1 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 15 9 9 9 15 9 15
<<< (M = 9, K = 9, N = 15) : 29.053843
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 27.336468
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1,1,15) :    28.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1493 (13.3%), 9757 (86.7%) left; Finishing by Sat Oct 21  6:41:38 2000

(5,12,8) <- (1,0,4).*(5, 12+0,2): 118.535663 Mflop/s
(15,12,14) <- (3,1,7).*(5, 12+0,2): 111.926810 Mflop/s

Testing m0 = 5, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 5  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 8 5 12 12 8 5 8
<<< (M = 5, K = 12, N = 8) : 118.535663
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 111.926810
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (5, 12,2) :   115.1 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1494 (13.3%), 9756 (86.7%) left; Finishing by Sat Oct 21  6:41:43 2000

(8,10,8) <- (4,0,4).*(2, 10+0,2): 139.093481 Mflop/s
(14,10,14) <- (7,1,7).*(2, 10+0,2): 142.685213 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 2  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 139.093481
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 14 14 10 10 14 14 14
<<< (M = 14, K = 10, N = 14) : 142.685213
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (2, 10,2) :   140.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1495 (13.3%), 9755 (86.7%) left; Finishing by Sat Oct 21  6:41:48 2000

(15,9,9) <- (0,1,9).*(15, 9+0,1): 51.337334 Mflop/s
(15,9,15) <- (1,1,15).*(15, 9+0,1): 51.719680 Mflop/s

Testing m0 = 15, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 15  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 9 15 9 9 9 15 9
<<< (M = 15, K = 9, N = 9) : 51.337334
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 51.719680
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (15, 9,1) :    51.5 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1496 (13.3%), 9754 (86.7%) left; Finishing by Sat Oct 21  6:41:45 2000

(9,8,7) <- (9,2,1).*(1, 4+0,7): 114.202101 Mflop/s
(15,12,14) <- (15,3,2).*(1, 4+0,7): 128.500575 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  4 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 7 9 8 8 7 9 7
<<< (M = 9, K = 8, N = 7) : 114.202101
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 128.500575
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 4,7) :   120.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1497 (13.3%), 9753 (86.7%) left; Finishing by Sat Oct 21  6:41:50 2000

(9,15,9) <- (9,0,9).*(1, 15+0,1): 132.888214 Mflop/s
(15,15,15) <- (15,1,15).*(1, 15+0,1): 136.964479 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 132.888214
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 136.964479
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 15,1) :   134.9 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1498 (13.3%), 9752 (86.7%) left; Finishing by Sat Oct 21  6:41:40 2000

(9,15,9) <- (3,0,9).*(3, 15+0,1): 185.632027 Mflop/s
(15,15,15) <- (5,1,15).*(3, 15+0,1): 188.833122 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 3  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 185.632027
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 188.833122
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (3, 15,1) :   187.2 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1499 (13.3%), 9751 (86.7%) left; Finishing by Sat Oct 21  6:41:38 2000

(9,14,9) <- (9,0,1).*(1, 14+0,9): 121.902364 Mflop/s
(15,14,9) <- (15,1,1).*(1, 14+0,9): 122.870227 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 1 -holdstripe B -l0 1  14 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 121.902364
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 122.870227
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.1B.CC (1, 14,9) :   122.4 MFLOPS.
Best Blocking for double.NN.1.1B.CC so far : (4, 14,1) :   191.8 MFLOPS.
Done 1500 (13.3%), 9750 (86.7%) left; Finishing by Sat Oct 21  6:41:35 2000

(9,8,9) <- (9,1,1).*(1, 7+1,9): 111.295021 Mflop/s
(15,16,9) <- (15,2,1).*(1, 7+1,9): 135.000000 Mflop/s
Testing double.NN.1.2lm.CC (-O1)...

Testing m0 = 1, k0 =  7, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 111.295021
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 9 15 16 16 9 15 9
<<< (M = 15, K = 16, N = 9) : 135.000000
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,9) :   122.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 7,9) :   122.0 MFLOPS.
Done 1501 (13.3%), 9749 (86.7%) left; Finishing by Sat Oct 21  6:41:40 2000

(8,12,9) <- (1,3,9).*(8, 3+1,1): 39.475603 Mflop/s
(8,20,15) <- (1,5,15).*(8, 3+1,1): 36.219000 Mflop/s

Testing m0 = 8, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 39.475603
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 20 15 8 20 20 15 8 15
<<< (M = 8, K = 20, N = 15) : 36.219000
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 3,1) :    37.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 7,9) :   122.0 MFLOPS.
Done 1502 (13.4%), 9748 (86.6%) left; Finishing by Sat Oct 21  6:41:37 2000

(7,8,8) <- (1,1,4).*(7, 7+1,2): 23.607729 Mflop/s
(14,16,14) <- (2,2,7).*(7, 7+1,2): 29.246557 Mflop/s

Testing m0 = 7, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 8 7 8 8 8 7 8
<<< (M = 7, K = 8, N = 8) : 23.607729
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 29.246557
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 7,2) :    26.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 7,9) :   122.0 MFLOPS.
Done 1503 (13.4%), 9747 (86.6%) left; Finishing by Sat Oct 21  6:41:35 2000

(9,9,14) <- (9,1,0).*(1, 8+1,14): 116.357854 Mflop/s
(15,9,14) <- (15,1,1).*(1, 8+1,14): 117.178809 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 14 9 9 9 14 9 14
<<< (M = 9, K = 9, N = 14) : 116.357854
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 117.178809
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,14) :   116.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 7,9) :   122.0 MFLOPS.
Done 1504 (13.4%), 9746 (86.6%) left; Finishing by Sat Oct 21  6:41:25 2000

(8,8,9) <- (1,1,9).*(8, 7+1,1): 80.396511 Mflop/s
(8,16,15) <- (1,2,15).*(8, 7+1,1): 99.044113 Mflop/s

Testing m0 = 8, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 80.396511
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 15 8 16 16 15 8 15
<<< (M = 8, K = 16, N = 15) : 99.044113
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 7,1) :    88.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 7,9) :   122.0 MFLOPS.
Done 1505 (13.4%), 9745 (86.6%) left; Finishing by Sat Oct 21  6:41:29 2000

(8,11,8) <- (1,0,4).*(8, 10+1,2): 101.645516 Mflop/s
(8,11,14) <- (1,1,7).*(8, 10+1,2): 101.390372 Mflop/s

Testing m0 = 8, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 101.645516
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 14 8 11 11 14 8 14
<<< (M = 8, K = 11, N = 14) : 101.390372
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 10,2) :   101.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 7,9) :   122.0 MFLOPS.
Done 1506 (13.4%), 9744 (86.6%) left; Finishing by Sat Oct 21  6:41:42 2000

(5,18,8) <- (1,9,4).*(5,1+1,2): 31.851355 Mflop/s
(15,30,14) <- (3,15,7).*(5,1+1,2): 33.399572 Mflop/s

Testing m0 = 5, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 18 8 5 18 18 8 5 8
<<< (M = 5, K = 18, N = 8) : 31.851355
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 14 15 30 30 14 15 14
<<< (M = 15, K = 30, N = 14) : 33.399572
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5,1,2) :    32.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 7,9) :   122.0 MFLOPS.
Done 1507 (13.4%), 9743 (86.6%) left; Finishing by Sat Oct 21  6:41:39 2000

(8,9,8) <- (4,1,1).*(2, 8+1,8): 28.184404 Mflop/s
(14,9,8) <- (7,1,1).*(2, 8+1,8): 28.434173 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  8 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 28.184404
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 8 14 9 9 8 14 8
<<< (M = 14, K = 9, N = 8) : 28.434173
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 8,8) :    28.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 7,9) :   122.0 MFLOPS.
Done 1508 (13.4%), 9742 (86.6%) left; Finishing by Sat Oct 21  6:41:37 2000

(8,12,6) <- (4,0,1).*(2, 11+1,6): 31.110235 Mflop/s
(14,12,12) <- (7,1,2).*(2, 11+1,6): 27.573487 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  11 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 6 8 12 12 6 8 6
<<< (M = 8, K = 12, N = 6) : 31.110235
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 27.573487
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 11,6) :    29.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 7,9) :   122.0 MFLOPS.
Done 1509 (13.4%), 9741 (86.6%) left; Finishing by Sat Oct 21  6:41:34 2000

(8,6,8) <- (2,1,4).*(4, 5+1,2): 27.469027 Mflop/s
(12,18,14) <- (3,3,7).*(4, 5+1,2): 37.074333 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 27.469027
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 14 12 18 18 14 12 14
<<< (M = 12, K = 18, N = 14) : 37.074333
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 5,2) :    31.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 7,9) :   122.0 MFLOPS.
Done 1510 (13.4%), 9740 (86.6%) left; Finishing by Sat Oct 21  6:41:24 2000

(9,9,9) <- (9,1,9).*(1, 8+1,1): 123.286736 Mflop/s
(15,9,15) <- (15,1,15).*(1, 8+1,1): 129.658539 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 123.286736
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 129.658539
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,1) :   126.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 8,1) :   126.4 MFLOPS.
Done 1511 (13.4%), 9739 (86.6%) left; Finishing by Sat Oct 21  6:41:21 2000

(8,8,5) <- (4,1,1).*(2, 7+1,5): 30.207032 Mflop/s
(14,16,15) <- (7,2,3).*(2, 7+1,5): 33.705621 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  7 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 5 8 8 8 5 8 5
<<< (M = 8, K = 8, N = 5) : 30.207032
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 33.705621
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 7,5) :    31.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 8,1) :   126.4 MFLOPS.
Done 1512 (13.4%), 9738 (86.6%) left; Finishing by Sat Oct 21  6:41:19 2000

(8,7,9) <- (4,1,3).*(2, 6+1,3): 44.696579 Mflop/s
(14,14,15) <- (7,2,5).*(2, 6+1,3): 39.490259 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 44.696579
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 39.490259
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 6,3) :    41.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 8,1) :   126.4 MFLOPS.
Done 1513 (13.4%), 9737 (86.6%) left; Finishing by Sat Oct 21  6:41:16 2000

(8,12,8) <- (4,4,1).*(2, 2+1,8): 31.913427 Mflop/s
(14,21,8) <- (7,7,1).*(2, 2+1,8): 30.357836 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  2 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 31.913427
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 8 14 21 21 8 14 8
<<< (M = 14, K = 21, N = 8) : 30.357836
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 2,8) :    31.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 8,1) :   126.4 MFLOPS.
Done 1514 (13.5%), 9736 (86.5%) left; Finishing by Sat Oct 21  6:41:14 2000

(9,12,8) <- (9,3,1).*(1, 3+1,8): 143.445347 Mflop/s
(15,20,8) <- (15,5,1).*(1, 3+1,8): 137.513229 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 143.445347
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 8 15 20 20 8 15 8
<<< (M = 15, K = 20, N = 8) : 137.513229
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,8) :   140.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 3,8) :   140.4 MFLOPS.
Done 1515 (13.5%), 9735 (86.5%) left; Finishing by Sat Oct 21  6:41:26 2000

(8,15,9) <- (4,0,3).*(2, 14+1,3): 49.832099 Mflop/s
(14,15,15) <- (7,1,5).*(2, 14+1,3): 37.206595 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 49.832099
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 37.206595
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 14,3) :    42.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 3,8) :   140.4 MFLOPS.
Done 1516 (13.5%), 9734 (86.5%) left; Finishing by Sat Oct 21  6:41:23 2000

(8,9,9) <- (4,1,3).*(2, 8+1,3): 46.339780 Mflop/s
(14,9,15) <- (7,1,5).*(2, 8+1,3): 47.128604 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 46.339780
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 47.128604
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 8,3) :    46.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 3,8) :   140.4 MFLOPS.
Done 1517 (13.5%), 9733 (86.5%) left; Finishing by Sat Oct 21  6:41:21 2000

(9,18,5) <- (9,9,1).*(1,1+1,5): 117.302791 Mflop/s
(15,30,15) <- (15,15,3).*(1,1+1,5): 125.418229 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 5 9 18 18 5 9 5
<<< (M = 9, K = 18, N = 5) : 117.302791
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 125.418229
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,5) :   121.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (1, 3,8) :   140.4 MFLOPS.
Done 1518 (13.5%), 9732 (86.5%) left; Finishing by Sat Oct 21  6:41:18 2000

(9,12,9) <- (3,3,9).*(3, 3+1,1): 179.195885 Mflop/s
(15,20,15) <- (5,5,15).*(3, 3+1,1): 174.113676 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 179.195885
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 174.113676
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 3,1) :   176.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 3,1) :   176.6 MFLOPS.
Done 1519 (13.5%), 9731 (86.5%) left; Finishing by Sat Oct 21  6:41:23 2000

(9,13,9) <- (1,0,9).*(9, 12+1,1): 32.462092 Mflop/s
(9,13,15) <- (1,1,15).*(9, 12+1,1): 32.487095 Mflop/s

Testing m0 = 9, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 9  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 32.462092
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 15 9 13 13 15 9 15
<<< (M = 9, K = 13, N = 15) : 32.487095
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (9, 12,1) :    32.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 3,1) :   176.6 MFLOPS.
Done 1520 (13.5%), 9730 (86.5%) left; Finishing by Sat Oct 21  6:41:20 2000

(8,6,8) <- (1,1,4).*(8, 5+1,2): 87.355188 Mflop/s
(8,18,14) <- (1,3,7).*(8, 5+1,2): 118.351081 Mflop/s

Testing m0 = 8, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 87.355188
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 14 8 18 18 14 8 14
<<< (M = 8, K = 18, N = 14) : 118.351081
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 5,2) :   100.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 3,1) :   176.6 MFLOPS.
Done 1521 (13.5%), 9729 (86.5%) left; Finishing by Sat Oct 21  6:41:25 2000

(8,10,9) <- (4,2,9).*(2, 4+1,1): 164.991926 Mflop/s
(14,15,15) <- (7,3,15).*(2, 4+1,1): 195.506896 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 164.991926
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 195.506896
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 4,1) :   179.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1522 (13.5%), 9728 (86.5%) left; Finishing by Sat Oct 21  6:41:30 2000

(8,11,8) <- (2,0,2).*(4, 10+1,4): 24.073503 Mflop/s
(12,11,12) <- (3,1,3).*(4, 10+1,4): 28.727078 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 24.073503
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 12 12 11 11 12 12 12
<<< (M = 12, K = 11, N = 12) : 28.727078
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 10,4) :    26.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1523 (13.5%), 9727 (86.5%) left; Finishing by Sat Oct 21  6:41:27 2000

(8,14,6) <- (4,0,1).*(2, 13+1,6): 31.519640 Mflop/s
(14,14,12) <- (7,1,2).*(2, 13+1,6): 28.050278 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  13 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 6 8 14 14 6 8 6
<<< (M = 8, K = 14, N = 6) : 31.519640
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 28.050278
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 13,6) :    29.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1524 (13.5%), 9726 (86.5%) left; Finishing by Sat Oct 21  6:41:25 2000

(8,12,9) <- (4,0,9).*(2, 11+1,1): 174.981081 Mflop/s
(14,12,15) <- (7,1,15).*(2, 11+1,1): 180.481326 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 174.981081
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 180.481326
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 11,1) :   177.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1525 (13.6%), 9725 (86.4%) left; Finishing by Sat Oct 21  6:41:30 2000

(9,13,14) <- (9,0,0).*(1, 12+1,14): 123.490185 Mflop/s
(15,13,14) <- (15,1,1).*(1, 12+1,14): 123.671416 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 14 9 13 13 14 9 14
<<< (M = 9, K = 13, N = 14) : 123.490185
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 123.671416
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,14) :   123.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1526 (13.6%), 9724 (86.4%) left; Finishing by Sat Oct 21  6:41:35 2000

(9,9,8) <- (9,1,2).*(1, 8+1,4): 138.876539 Mflop/s
(15,9,12) <- (15,1,3).*(1, 8+1,4): 142.416293 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 138.876539
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 142.416293
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,4) :   140.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1527 (13.6%), 9723 (86.4%) left; Finishing by Sat Oct 21  6:41:39 2000

(15,14,9) <- (0,0,9).*(15, 13+1,1): 89.112400 Mflop/s
(15,14,15) <- (1,1,15).*(15, 13+1,1): 110.452500 Mflop/s

Testing m0 = 15, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 15  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 89.112400
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 110.452500
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (15, 13,1) :    98.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1528 (13.6%), 9722 (86.4%) left; Finishing by Sat Oct 21  6:41:37 2000

(8,10,9) <- (1,2,9).*(8, 4+1,1): 36.354737 Mflop/s
(8,15,15) <- (1,3,15).*(8, 4+1,1): 39.408396 Mflop/s

Testing m0 = 8, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 36.354737
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 15 8 15 15 15 8 15
<<< (M = 8, K = 15, N = 15) : 39.408396
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 4,1) :    37.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1529 (13.6%), 9721 (86.4%) left; Finishing by Sat Oct 21  6:41:34 2000

(9,11,9) <- (9,0,1).*(1, 10+1,9): 116.121609 Mflop/s
(15,11,9) <- (15,1,1).*(1, 10+1,9): 117.163865 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 116.121609
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 9 15 11 11 9 15 9
<<< (M = 15, K = 11, N = 9) : 117.163865
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,9) :   116.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1530 (13.6%), 9720 (86.4%) left; Finishing by Sat Oct 21  6:41:32 2000

(16,8,9) <- (0,1,9).*(16, 7+1,1): 26.055249 Mflop/s
(16,16,15) <- (0,2,15).*(16, 7+1,1): 29.764893 Mflop/s

Testing m0 = 16, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 16  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 8 9 16 8 8 9 16 9
<<< (M = 16, K = 8, N = 9) : 26.055249
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 16 15 16 16 16 15 16 15
<<< (M = 16, K = 16, N = 15) : 29.764893
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (16, 7,1) :    27.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1531 (13.6%), 9719 (86.4%) left; Finishing by Sat Oct 21  6:41:29 2000

(9,10,8) <- (3,2,2).*(3, 4+1,4): 135.053755 Mflop/s
(15,15,12) <- (5,3,3).*(3, 4+1,4): 150.196027 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 135.053755
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 150.196027
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 4,4) :   142.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1532 (13.6%), 9718 (86.4%) left; Finishing by Sat Oct 21  6:41:27 2000

(5,18,9) <- (1,9,9).*(5,1+1,1): 91.990911 Mflop/s
(15,30,15) <- (3,15,15).*(5,1+1,1): 99.564016 Mflop/s

Testing m0 = 5, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 18 9 5 18 18 9 5 9
<<< (M = 5, K = 18, N = 9) : 91.990911
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 99.564016
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5,1,1) :    95.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1533 (13.6%), 9717 (86.4%) left; Finishing by Sat Oct 21  6:41:24 2000

(6,13,9) <- (1,0,9).*(6, 12+1,1): 118.876057 Mflop/s
(12,13,15) <- (2,1,15).*(6, 12+1,1): 122.331984 Mflop/s

Testing m0 = 6, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 13 9 6 13 13 9 6 9
<<< (M = 6, K = 13, N = 9) : 118.876057
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 122.331984
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 12,1) :   120.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1534 (13.6%), 9716 (86.4%) left; Finishing by Sat Oct 21  6:41:29 2000

(9,12,8) <- (3,3,2).*(3, 3+1,4): 35.964250 Mflop/s
(15,20,12) <- (5,5,3).*(3, 3+1,4): 30.243430 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 35.964250
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 12 15 20 20 12 15 12
<<< (M = 15, K = 20, N = 12) : 30.243430
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 3,4) :    32.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1535 (13.6%), 9715 (86.4%) left; Finishing by Sat Oct 21  6:41:26 2000

(9,7,12) <- (9,1,0).*(1, 6+1,12): 108.489654 Mflop/s
(15,14,12) <- (15,2,1).*(1, 6+1,12): 130.077705 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 12 9 7 7 12 9 12
<<< (M = 9, K = 7, N = 12) : 108.489654
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 130.077705
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,12) :   118.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1536 (13.7%), 9714 (86.3%) left; Finishing by Sat Oct 21  6:41:24 2000

(9,6,7) <- (9,1,1).*(1, 5+1,7): 109.018693 Mflop/s
(15,18,14) <- (15,3,2).*(1, 5+1,7): 153.858885 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 7 9 6 6 7 9 7
<<< (M = 9, K = 6, N = 7) : 109.018693
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 153.858885
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,7) :   127.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1537 (13.7%), 9713 (86.3%) left; Finishing by Sat Oct 21  6:41:21 2000

(7,18,8) <- (1,9,4).*(7,1+1,2): 92.526153 Mflop/s
(14,30,14) <- (2,15,7).*(7,1+1,2): 97.530402 Mflop/s

Testing m0 = 7, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 18 8 7 18 18 8 7 8
<<< (M = 7, K = 18, N = 8) : 92.526153
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 14 14 30 30 14 14 14
<<< (M = 14, K = 30, N = 14) : 97.530402
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7,1,2) :    95.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1538 (13.7%), 9712 (86.3%) left; Finishing by Sat Oct 21  6:41:26 2000

(7,9,9) <- (1,1,9).*(7, 8+1,1): 32.762979 Mflop/s
(14,9,15) <- (2,1,15).*(7, 8+1,1): 33.067086 Mflop/s

Testing m0 = 7, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 9 7 9 9 9 7 9
<<< (M = 7, K = 9, N = 9) : 32.762979
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 33.067086
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 8,1) :    32.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1539 (13.7%), 9711 (86.3%) left; Finishing by Sat Oct 21  6:41:23 2000

(6,12,9) <- (1,4,9).*(6, 2+1,1): 46.522309 Mflop/s
(12,21,15) <- (2,7,15).*(6, 2+1,1): 50.460155 Mflop/s

Testing m0 = 6, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 9 6 12 12 9 6 9
<<< (M = 6, K = 12, N = 9) : 46.522309
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 15 12 21 21 15 12 15
<<< (M = 12, K = 21, N = 15) : 50.460155
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 2,1) :    48.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1540 (13.7%), 9710 (86.3%) left; Finishing by Sat Oct 21  6:41:13 2000

(9,12,14) <- (9,0,0).*(1, 11+1,14): 122.024556 Mflop/s
(15,12,14) <- (15,1,1).*(1, 11+1,14): 122.664490 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 14 9 12 12 14 9 14
<<< (M = 9, K = 12, N = 14) : 122.024556
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 122.664490
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,14) :   122.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1541 (13.7%), 9709 (86.3%) left; Finishing by Sat Oct 21  6:41:11 2000

(9,14,12) <- (9,0,0).*(1, 13+1,12): 121.389646 Mflop/s
(15,14,12) <- (15,1,1).*(1, 13+1,12): 122.041294 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 12 9 14 14 12 9 12
<<< (M = 9, K = 14, N = 12) : 121.389646
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 122.041294
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,12) :   121.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1542 (13.7%), 9708 (86.3%) left; Finishing by Sat Oct 21  6:41:16 2000

(8,12,6) <- (4,3,1).*(2, 3+1,6): 37.092376 Mflop/s
(14,20,12) <- (7,5,2).*(2, 3+1,6): 30.089415 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  3 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 6 8 12 12 6 8 6
<<< (M = 8, K = 12, N = 6) : 37.092376
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 12 14 20 20 12 14 12
<<< (M = 14, K = 20, N = 12) : 30.089415
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 3,6) :    33.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1543 (13.7%), 9707 (86.3%) left; Finishing by Sat Oct 21  6:41:13 2000

(9,15,12) <- (9,0,0).*(1, 14+1,12): 123.807920 Mflop/s
(15,15,12) <- (15,1,1).*(1, 14+1,12): 123.778783 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 12 9 15 15 12 9 12
<<< (M = 9, K = 15, N = 12) : 123.807920
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 123.778783
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,12) :   123.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1544 (13.7%), 9706 (86.3%) left; Finishing by Sat Oct 21  6:41:11 2000

(9,8,8) <- (3,1,4).*(3, 7+1,2): 114.005786 Mflop/s
(15,16,14) <- (5,2,7).*(3, 7+1,2): 144.010210 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 114.005786
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 144.010210
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 7,2) :   127.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1545 (13.7%), 9705 (86.3%) left; Finishing by Sat Oct 21  6:41:15 2000

(10,10,9) <- (0,2,9).*(10, 4+1,1): 33.772061 Mflop/s
(10,15,15) <- (1,3,15).*(10, 4+1,1): 33.614973 Mflop/s

Testing m0 = 10, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 10  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 10 9 10 10 10 9 10 9
<<< (M = 10, K = 10, N = 9) : 33.772061
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 15 10 15 15 15 10 15
<<< (M = 10, K = 15, N = 15) : 33.614973
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (10, 4,1) :    33.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1546 (13.7%), 9704 (86.3%) left; Finishing by Sat Oct 21  6:41:13 2000

(9,6,8) <- (3,1,2).*(3, 5+1,4): 107.754169 Mflop/s
(15,18,12) <- (5,3,3).*(3, 5+1,4): 152.535731 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 107.754169
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 152.535731
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 5,4) :   126.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1547 (13.8%), 9703 (86.2%) left; Finishing by Sat Oct 21  6:41:18 2000

(7,6,9) <- (1,1,9).*(7, 5+1,1): 30.560683 Mflop/s
(14,18,15) <- (2,3,15).*(7, 5+1,1): 44.011574 Mflop/s

Testing m0 = 7, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 6 9 7 6 6 9 7 9
<<< (M = 7, K = 6, N = 9) : 30.560683
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 44.011574
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 5,1) :    36.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1548 (13.8%), 9702 (86.2%) left; Finishing by Sat Oct 21  6:41:15 2000

(8,18,8) <- (4,9,2).*(2,1+1,4): 33.101812 Mflop/s
(14,30,12) <- (7,15,3).*(2,1+1,4): 29.155065 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 8 8 18 18 8 8 8
<<< (M = 8, K = 18, N = 8) : 33.101812
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 12 14 30 30 12 14 12
<<< (M = 14, K = 30, N = 12) : 29.155065
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2,1,4) :    31.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1549 (13.8%), 9701 (86.2%) left; Finishing by Sat Oct 21  6:41:13 2000

(5,10,8) <- (1,2,4).*(5, 4+1,2): 32.894623 Mflop/s
(15,15,14) <- (3,3,7).*(5, 4+1,2): 36.856196 Mflop/s

Testing m0 = 5, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 8 5 10 10 8 5 8
<<< (M = 5, K = 10, N = 8) : 32.894623
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 36.856196
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 4,2) :    34.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1550 (13.8%), 9700 (86.2%) left; Finishing by Sat Oct 21  6:41:03 2000

(9,16,5) <- (3,0,1).*(3, 15+1,5): 122.020017 Mflop/s
(15,16,15) <- (5,1,3).*(3, 15+1,5): 127.832368 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  15 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 5 9 16 16 5 9 5
<<< (M = 9, K = 16, N = 5) : 122.020017
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 127.832368
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 15,5) :   124.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1551 (13.8%), 9699 (86.2%) left; Finishing by Sat Oct 21  6:41:15 2000

(10,7,9) <- (0,1,9).*(10, 6+1,1): 28.665525 Mflop/s
(10,14,15) <- (1,2,15).*(10, 6+1,1): 31.178972 Mflop/s

Testing m0 = 10, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 10  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 7 9 10 7 7 9 10 9
<<< (M = 10, K = 7, N = 9) : 28.665525
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 15 10 14 14 15 10 15
<<< (M = 10, K = 14, N = 15) : 31.178972
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (10, 6,1) :    29.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1552 (13.8%), 9698 (86.2%) left; Finishing by Sat Oct 21  6:41:12 2000

(8,11,9) <- (2,0,9).*(4, 10+1,1): 167.152325 Mflop/s
(12,11,15) <- (3,1,15).*(4, 10+1,1): 171.321602 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 167.152325
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 171.321602
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 10,1) :   169.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1553 (13.8%), 9697 (86.2%) left; Finishing by Sat Oct 21  6:41:10 2000

(9,18,6) <- (9,9,1).*(1,1+1,6): 112.365159 Mflop/s
(15,30,12) <- (15,15,2).*(1,1+1,6): 120.552898 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 6 9 18 18 6 9 6
<<< (M = 9, K = 18, N = 6) : 112.365159
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 12 15 30 30 12 15 12
<<< (M = 15, K = 30, N = 12) : 120.552898
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,6) :   116.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1554 (13.8%), 9696 (86.2%) left; Finishing by Sat Oct 21  6:41:07 2000

(16,12,9) <- (0,3,9).*(16, 3+1,1): 32.226907 Mflop/s
(16,20,15) <- (0,5,15).*(16, 3+1,1): 29.981110 Mflop/s

Testing m0 = 16, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 16  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 9 16 12 12 9 16 9
<<< (M = 16, K = 12, N = 9) : 32.226907
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 20 15 16 20 20 15 16 15
<<< (M = 16, K = 20, N = 15) : 29.981110
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (16, 3,1) :    31.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1555 (13.8%), 9695 (86.2%) left; Finishing by Sat Oct 21  6:41:05 2000

(13,11,9) <- (0,0,9).*(13, 10+1,1): 105.671222 Mflop/s
(13,11,15) <- (1,1,15).*(13, 10+1,1): 81.831712 Mflop/s

Testing m0 = 13, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 13  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 11 9 13 11 11 9 13 9
<<< (M = 13, K = 11, N = 9) : 105.671222
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 11 15 13 11 11 15 13 15
<<< (M = 13, K = 11, N = 15) : 81.831712
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (13, 10,1) :    92.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1556 (13.8%), 9694 (86.2%) left; Finishing by Sat Oct 21  6:41:02 2000

(16,16,9) <- (0,0,9).*(16, 15+1,1): 28.273593 Mflop/s
(16,16,15) <- (0,1,15).*(16, 15+1,1): 28.098778 Mflop/s

Testing m0 = 16, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 16  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 16 9 16 16 16 9 16 9
<<< (M = 16, K = 16, N = 9) : 28.273593
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 16 15 16 16 16 15 16 15
<<< (M = 16, K = 16, N = 15) : 28.098778
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (16, 15,1) :    28.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1557 (13.8%), 9693 (86.2%) left; Finishing by Sat Oct 21  6:41:07 2000

(9,9,8) <- (9,1,1).*(1, 8+1,8): 116.494551 Mflop/s
(15,9,8) <- (15,1,1).*(1, 8+1,8): 120.384723 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 116.494551
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 8 15 9 9 8 15 8
<<< (M = 15, K = 9, N = 8) : 120.384723
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,8) :   118.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1558 (13.8%), 9692 (86.2%) left; Finishing by Sat Oct 21  6:41:12 2000

(9,10,12) <- (9,2,0).*(1, 4+1,12): 126.466098 Mflop/s
(15,15,12) <- (15,3,1).*(1, 4+1,12): 138.043197 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 12 9 10 10 12 9 12
<<< (M = 9, K = 10, N = 12) : 126.466098
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 138.043197
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,12) :   132.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1559 (13.9%), 9691 (86.1%) left; Finishing by Sat Oct 21  6:41:09 2000

(9,7,9) <- (3,1,9).*(3, 6+1,1): 147.496967 Mflop/s
(15,14,15) <- (5,2,15).*(3, 6+1,1): 196.506125 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 147.496967
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 196.506125
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 6,1) :   168.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1560 (13.9%), 9690 (86.1%) left; Finishing by Sat Oct 21  6:41:14 2000

(9,15,15) <- (9,0,0).*(1, 14+1,15): 128.991720 Mflop/s
(15,15,15) <- (15,1,1).*(1, 14+1,15): 129.553007 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 128.991720
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 129.553007
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,15) :   129.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1561 (13.9%), 9689 (86.1%) left; Finishing by Sat Oct 21  6:41:11 2000

(8,9,9) <- (2,1,3).*(4, 8+1,3): 27.146764 Mflop/s
(12,9,15) <- (3,1,5).*(4, 8+1,3): 27.328701 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 27.146764
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 27.328701
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 8,3) :    27.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1562 (13.9%), 9688 (86.1%) left; Finishing by Sat Oct 21  6:41:09 2000

(9,11,9) <- (1,0,9).*(9, 10+1,1): 31.235814 Mflop/s
(9,11,15) <- (1,1,15).*(9, 10+1,1): 31.304565 Mflop/s

Testing m0 = 9, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 9  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 31.235814
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 15 9 11 11 15 9 15
<<< (M = 9, K = 11, N = 15) : 31.304565
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (9, 10,1) :    31.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1563 (13.9%), 9687 (86.1%) left; Finishing by Sat Oct 21  6:41:06 2000

(8,12,5) <- (4,4,1).*(2, 2+1,5): 34.115882 Mflop/s
(14,21,15) <- (7,7,3).*(2, 2+1,5): 29.486569 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  2 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 5 8 12 12 5 8 5
<<< (M = 8, K = 12, N = 5) : 34.115882
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 15 14 21 21 15 14 15
<<< (M = 14, K = 21, N = 15) : 29.486569
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 2,5) :    31.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1564 (13.9%), 9686 (86.1%) left; Finishing by Sat Oct 21  6:41:04 2000

(9,11,10) <- (9,0,0).*(1, 10+1,10): 119.464615 Mflop/s
(15,11,10) <- (15,1,1).*(1, 10+1,10): 121.309600 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 10 9 11 11 10 9 10
<<< (M = 9, K = 11, N = 10) : 119.464615
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 10 15 11 11 10 15 10
<<< (M = 15, K = 11, N = 10) : 121.309600
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,10) :   120.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1565 (13.9%), 9685 (86.1%) left; Finishing by Sat Oct 21  6:41:01 2000

(5,12,9) <- (1,0,3).*(5, 11+1,3): 28.528496 Mflop/s
(15,12,15) <- (3,1,5).*(5, 11+1,3): 29.714772 Mflop/s

Testing m0 = 5, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 28.528496
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 29.714772
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 11,3) :    29.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1566 (13.9%), 9684 (86.1%) left; Finishing by Sat Oct 21  6:40:59 2000

(9,8,10) <- (9,1,0).*(1, 7+1,10): 112.292101 Mflop/s
(15,16,10) <- (15,2,1).*(1, 7+1,10): 133.388402 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 10 9 8 8 10 9 10
<<< (M = 9, K = 8, N = 10) : 112.292101
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 10 15 16 16 10 15 10
<<< (M = 15, K = 16, N = 10) : 133.388402
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,10) :   121.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1567 (13.9%), 9683 (86.1%) left; Finishing by Sat Oct 21  6:40:57 2000

(9,12,15) <- (9,0,0).*(1, 11+1,15): 125.077404 Mflop/s
(15,12,15) <- (15,1,1).*(1, 11+1,15): 125.547224 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 125.077404
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 125.547224
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,15) :   125.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1568 (13.9%), 9682 (86.1%) left; Finishing by Sat Oct 21  6:40:54 2000

(9,13,9) <- (3,0,9).*(3, 12+1,1): 174.314704 Mflop/s
(15,13,15) <- (5,1,15).*(3, 12+1,1): 177.421454 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 174.314704
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 177.421454
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 12,1) :   175.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1569 (13.9%), 9681 (86.1%) left; Finishing by Sat Oct 21  6:40:59 2000

(16,10,9) <- (0,2,9).*(16, 4+1,1): 29.245555 Mflop/s
(16,15,15) <- (0,3,15).*(16, 4+1,1): 32.160896 Mflop/s

Testing m0 = 16, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 16  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 10 9 16 10 10 9 16 9
<<< (M = 16, K = 10, N = 9) : 29.245555
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 15 16 15 15 15 16 15
<<< (M = 16, K = 15, N = 15) : 32.160896
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (16, 4,1) :    30.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1570 (14.0%), 9680 (86.0%) left; Finishing by Sat Oct 21  6:40:56 2000

(10,13,9) <- (0,0,9).*(10, 12+1,1): 104.356364 Mflop/s
(10,13,15) <- (1,1,15).*(10, 12+1,1): 105.015401 Mflop/s

Testing m0 = 10, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 10  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 13 9 10 13 13 9 10 9
<<< (M = 10, K = 13, N = 9) : 104.356364
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 13 15 10 13 13 15 10 15
<<< (M = 10, K = 13, N = 15) : 105.015401
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (10, 12,1) :   104.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1571 (14.0%), 9679 (86.0%) left; Finishing by Sat Oct 21  6:40:54 2000

(9,7,5) <- (9,1,1).*(1, 6+1,5): 113.663579 Mflop/s
(15,14,15) <- (15,2,3).*(1, 6+1,5): 150.333777 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 5 9 7 7 5 9 5
<<< (M = 9, K = 7, N = 5) : 113.663579
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 150.333777
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,5) :   129.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1572 (14.0%), 9678 (86.0%) left; Finishing by Sat Oct 21  6:40:51 2000

(13,12,9) <- (0,0,9).*(13, 11+1,1): 107.152735 Mflop/s
(13,12,15) <- (1,1,15).*(13, 11+1,1): 84.997395 Mflop/s

Testing m0 = 13, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 13  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 9 13 12 12 9 13 9
<<< (M = 13, K = 12, N = 9) : 107.152735
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 15 13 12 12 15 13 15
<<< (M = 13, K = 12, N = 15) : 84.997395
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (13, 11,1) :    94.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1573 (14.0%), 9677 (86.0%) left; Finishing by Sat Oct 21  6:40:56 2000

(15,16,9) <- (0,0,9).*(15, 15+1,1): 91.864992 Mflop/s
(15,16,15) <- (1,1,15).*(15, 15+1,1): 111.501925 Mflop/s

Testing m0 = 15, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 15  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 9 15 16 16 9 15 9
<<< (M = 15, K = 16, N = 9) : 91.864992
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 111.501925
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (15, 15,1) :   100.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1574 (14.0%), 9676 (86.0%) left; Finishing by Sat Oct 21  6:40:54 2000

(9,12,8) <- (3,0,4).*(3, 11+1,2): 129.645197 Mflop/s
(15,12,14) <- (5,1,7).*(3, 11+1,2): 130.640550 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 129.645197
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 130.640550
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 11,2) :   130.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1575 (14.0%), 9675 (86.0%) left; Finishing by Sat Oct 21  6:40:51 2000

(9,7,7) <- (9,1,1).*(1, 6+1,7): 112.969601 Mflop/s
(15,14,14) <- (15,2,2).*(1, 6+1,7): 144.221431 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 7 9 7 7 7 9 7
<<< (M = 9, K = 7, N = 7) : 112.969601
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 144.221431
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,7) :   126.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1576 (14.0%), 9674 (86.0%) left; Finishing by Sat Oct 21  6:40:56 2000

(9,9,6) <- (9,1,1).*(1, 8+1,6): 126.209715 Mflop/s
(15,9,12) <- (15,1,2).*(1, 8+1,6): 132.593153 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 6 9 9 9 6 9 6
<<< (M = 9, K = 9, N = 6) : 126.209715
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 132.593153
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,6) :   129.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1577 (14.0%), 9673 (86.0%) left; Finishing by Sat Oct 21  6:40:53 2000

(16,18,9) <- (0,9,9).*(16,1+1,1): 26.461178 Mflop/s
(16,30,15) <- (0,15,15).*(16,1+1,1): 27.798268 Mflop/s

Testing m0 = 16, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 16 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 18 9 16 18 18 9 16 9
<<< (M = 16, K = 18, N = 9) : 26.461178
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 30 15 16 30 30 15 16 15
<<< (M = 16, K = 30, N = 15) : 27.798268
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (16,1,1) :    27.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1578 (14.0%), 9672 (86.0%) left; Finishing by Sat Oct 21  6:40:51 2000

(9,8,8) <- (9,1,2).*(1, 7+1,4): 133.183080 Mflop/s
(15,16,12) <- (15,2,3).*(1, 7+1,4): 162.332719 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 133.183080
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 162.332719
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,4) :   146.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1579 (14.0%), 9671 (86.0%) left; Finishing by Sat Oct 21  6:40:48 2000

(9,11,9) <- (9,0,3).*(1, 10+1,3): 135.255679 Mflop/s
(15,11,15) <- (15,1,5).*(1, 10+1,3): 143.242198 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 135.255679
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 143.242198
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,3) :   139.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1580 (14.0%), 9670 (86.0%) left; Finishing by Sat Oct 21  6:40:53 2000

(9,18,9) <- (1,9,9).*(9,1+1,1): 81.211076 Mflop/s
(9,30,15) <- (1,15,15).*(9,1+1,1): 84.173790 Mflop/s

Testing m0 = 9, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 9 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 9 9 18 18 9 9 9
<<< (M = 9, K = 18, N = 9) : 81.211076
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 30 15 9 30 30 15 9 15
<<< (M = 9, K = 30, N = 15) : 84.173790
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (9,1,1) :    82.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1581 (14.1%), 9669 (85.9%) left; Finishing by Sat Oct 21  6:40:43 2000

(5,14,8) <- (1,0,4).*(5, 13+1,2): 31.351033 Mflop/s
(15,14,14) <- (3,1,7).*(5, 13+1,2): 32.354445 Mflop/s

Testing m0 = 5, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 14 8 5 14 14 8 5 8
<<< (M = 5, K = 14, N = 8) : 31.351033
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 32.354445
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 13,2) :    31.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1582 (14.1%), 9668 (85.9%) left; Finishing by Sat Oct 21  6:40:41 2000

(9,14,6) <- (9,0,1).*(1, 13+1,6): 137.892521 Mflop/s
(15,14,12) <- (15,1,2).*(1, 13+1,6): 141.685574 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 6 9 14 14 6 9 6
<<< (M = 9, K = 14, N = 6) : 137.892521
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 141.685574
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,6) :   139.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1583 (14.1%), 9667 (85.9%) left; Finishing by Sat Oct 21  6:40:46 2000

(9,8,11) <- (9,1,0).*(1, 7+1,11): 111.482585 Mflop/s
(15,16,11) <- (15,2,1).*(1, 7+1,11): 131.308110 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 11 9 8 8 11 9 11
<<< (M = 9, K = 8, N = 11) : 111.482585
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 11 15 16 16 11 15 11
<<< (M = 15, K = 16, N = 11) : 131.308110
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,11) :   120.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1584 (14.1%), 9666 (85.9%) left; Finishing by Sat Oct 21  6:40:50 2000

(8,10,8) <- (4,2,1).*(2, 4+1,8): 31.783854 Mflop/s
(14,15,8) <- (7,3,1).*(2, 4+1,8): 34.384340 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  4 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 31.783854
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 8 14 15 15 8 14 8
<<< (M = 14, K = 15, N = 8) : 34.384340
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 4,8) :    33.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1585 (14.1%), 9665 (85.9%) left; Finishing by Sat Oct 21  6:40:48 2000

(8,11,8) <- (4,0,1).*(2, 10+1,8): 28.703927 Mflop/s
(14,11,8) <- (7,1,1).*(2, 10+1,8): 28.803815 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  10 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 28.703927
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 8 14 11 11 8 14 8
<<< (M = 14, K = 11, N = 8) : 28.803815
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 10,8) :    28.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1586 (14.1%), 9664 (85.9%) left; Finishing by Sat Oct 21  6:40:45 2000

(9,12,11) <- (9,4,0).*(1, 2+1,11): 130.228674 Mflop/s
(15,21,11) <- (15,7,1).*(1, 2+1,11): 125.030033 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 11 9 12 12 11 9 11
<<< (M = 9, K = 12, N = 11) : 130.228674
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 11 15 21 21 11 15 11
<<< (M = 15, K = 21, N = 11) : 125.030033
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,11) :   127.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1587 (14.1%), 9663 (85.9%) left; Finishing by Sat Oct 21  6:40:43 2000

(9,10,13) <- (9,2,0).*(1, 4+1,13): 127.904622 Mflop/s
(15,15,13) <- (15,3,1).*(1, 4+1,13): 139.941653 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 13 9 10 10 13 9 13
<<< (M = 9, K = 10, N = 13) : 127.904622
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 13 15 15 15 13 15 13
<<< (M = 15, K = 15, N = 13) : 139.941653
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,13) :   133.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1588 (14.1%), 9662 (85.9%) left; Finishing by Sat Oct 21  6:40:33 2000

(8,10,9) <- (2,1,3).*(4, 9+1,3): 27.610633 Mflop/s
(12,10,15) <- (3,1,5).*(4, 9+1,3): 29.322736 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 27.610633
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 29.322736
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 9,3) :    28.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1589 (14.1%), 9661 (85.9%) left; Finishing by Sat Oct 21  6:40:31 2000

(8,16,7) <- (4,0,1).*(2, 15+1,7): 30.403841 Mflop/s
(14,16,14) <- (7,1,2).*(2, 15+1,7): 30.437035 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  15 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 7 8 16 16 7 8 7
<<< (M = 8, K = 16, N = 7) : 30.403841
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 30.437035
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 15,7) :    30.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1590 (14.1%), 9660 (85.9%) left; Finishing by Sat Oct 21  6:40:36 2000

(8,18,5) <- (4,9,1).*(2,1+1,5): 121.490128 Mflop/s
(14,30,15) <- (7,15,3).*(2,1+1,5): 104.626717 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2 1 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 5 8 18 18 5 8 5
<<< (M = 8, K = 18, N = 5) : 121.490128
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 15 14 30 30 15 14 15
<<< (M = 14, K = 30, N = 15) : 104.626717
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2,1,5) :   112.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1591 (14.1%), 9659 (85.9%) left; Finishing by Sat Oct 21  6:40:33 2000

(11,8,9) <- (0,1,9).*(11, 7+1,1): 79.232269 Mflop/s
(11,16,15) <- (1,2,15).*(11, 7+1,1): 115.563300 Mflop/s

Testing m0 = 11, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 11  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 8 9 11 8 8 9 11 9
<<< (M = 11, K = 8, N = 9) : 79.232269
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 16 15 11 16 16 15 11 15
<<< (M = 11, K = 16, N = 15) : 115.563300
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (11, 7,1) :    94.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1592 (14.2%), 9658 (85.8%) left; Finishing by Sat Oct 21  6:40:31 2000

(14,12,9) <- (0,4,9).*(14, 2+1,1): 30.050860 Mflop/s
(14,21,15) <- (1,7,15).*(14, 2+1,1): 29.795094 Mflop/s

Testing m0 = 14, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 14  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 9 14 12 12 9 14 9
<<< (M = 14, K = 12, N = 9) : 30.050860
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 15 14 21 21 15 14 15
<<< (M = 14, K = 21, N = 15) : 29.795094
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (14, 2,1) :    29.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1593 (14.2%), 9657 (85.8%) left; Finishing by Sat Oct 21  6:40:28 2000

(9,9,13) <- (9,1,0).*(1, 8+1,13): 112.816516 Mflop/s
(15,9,13) <- (15,1,1).*(1, 8+1,13): 114.090410 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 13 9 9 9 13 9 13
<<< (M = 9, K = 9, N = 13) : 112.816516
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 13 15 9 9 13 15 13
<<< (M = 15, K = 9, N = 13) : 114.090410
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,13) :   113.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1594 (14.2%), 9656 (85.8%) left; Finishing by Sat Oct 21  6:40:26 2000

(7,12,9) <- (1,0,9).*(7, 11+1,1): 34.660987 Mflop/s
(14,12,15) <- (2,1,15).*(7, 11+1,1): 40.104773 Mflop/s

Testing m0 = 7, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 9 7 12 12 9 7 9
<<< (M = 7, K = 12, N = 9) : 34.660987
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 40.104773
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 11,1) :    37.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1595 (14.2%), 9655 (85.8%) left; Finishing by Sat Oct 21  6:40:24 2000

(15,12,9) <- (0,3,9).*(15, 3+1,1): 117.546322 Mflop/s
(15,20,15) <- (1,5,15).*(15, 3+1,1): 111.657752 Mflop/s

Testing m0 = 15, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 15  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 117.546322
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 111.657752
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (15, 3,1) :   114.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1596 (14.2%), 9654 (85.8%) left; Finishing by Sat Oct 21  6:40:21 2000

(8,18,9) <- (4,9,3).*(2,1+1,3): 40.381077 Mflop/s
(14,30,15) <- (7,15,5).*(2,1+1,3): 29.733027 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 9 8 18 18 9 8 9
<<< (M = 8, K = 18, N = 9) : 40.381077
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 15 14 30 30 15 14 15
<<< (M = 14, K = 30, N = 15) : 29.733027
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2,1,3) :    34.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1597 (14.2%), 9653 (85.8%) left; Finishing by Sat Oct 21  6:40:19 2000

(8,12,9) <- (2,4,3).*(4, 2+1,3): 98.256364 Mflop/s
(12,21,15) <- (3,7,5).*(4, 2+1,3): 111.826437 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 98.256364
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 15 12 21 21 15 12 15
<<< (M = 12, K = 21, N = 15) : 111.826437
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 2,3) :   104.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1598 (14.2%), 9652 (85.8%) left; Finishing by Sat Oct 21  6:40:09 2000

(9,7,6) <- (9,1,1).*(1, 6+1,6): 116.061486 Mflop/s
(15,14,12) <- (15,2,2).*(1, 6+1,6): 147.658627 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 6 9 7 7 6 9 6
<<< (M = 9, K = 7, N = 6) : 116.061486
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 147.658627
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,6) :   130.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1599 (14.2%), 9651 (85.8%) left; Finishing by Sat Oct 21  6:40:14 2000

(6,6,8) <- (1,1,4).*(6, 5+1,2): 95.634331 Mflop/s
(12,18,14) <- (2,3,7).*(6, 5+1,2): 95.666775 Mflop/s

Testing m0 = 6, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 6 8 6 6 6 8 6 8
<<< (M = 6, K = 6, N = 8) : 95.634331
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 14 12 18 18 14 12 14
<<< (M = 12, K = 18, N = 14) : 95.666775
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 5,2) :    95.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1600 (14.2%), 9650 (85.8%) left; Finishing by Sat Oct 21  6:40:19 2000

(9,12,12) <- (9,3,0).*(1, 3+1,12): 139.238477 Mflop/s
(15,20,12) <- (15,5,1).*(1, 3+1,12): 129.529786 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 12 9 12 12 12 9 12
<<< (M = 9, K = 12, N = 12) : 139.238477
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 12 15 20 20 12 15 12
<<< (M = 15, K = 20, N = 12) : 129.529786
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,12) :   134.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1601 (14.2%), 9649 (85.8%) left; Finishing by Sat Oct 21  6:40:16 2000

(9,11,11) <- (9,0,0).*(1, 10+1,11): 117.348847 Mflop/s
(15,11,11) <- (15,1,1).*(1, 10+1,11): 117.751257 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 11 9 11 11 11 9 11
<<< (M = 9, K = 11, N = 11) : 117.348847
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 11 15 11 11 11 15 11
<<< (M = 15, K = 11, N = 11) : 117.751257
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,11) :   117.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1602 (14.2%), 9648 (85.8%) left; Finishing by Sat Oct 21  6:40:14 2000

(16,11,9) <- (0,0,9).*(16, 10+1,1): 27.240494 Mflop/s
(16,11,15) <- (0,1,15).*(16, 10+1,1): 27.662570 Mflop/s

Testing m0 = 16, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 16  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 11 9 16 11 11 9 16 9
<<< (M = 16, K = 11, N = 9) : 27.240494
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 11 15 16 11 11 15 16 15
<<< (M = 16, K = 11, N = 15) : 27.662570
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (16, 10,1) :    27.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1603 (14.2%), 9647 (85.8%) left; Finishing by Sat Oct 21  6:40:11 2000

(8,12,8) <- (1,4,4).*(8, 2+1,2): 30.106447 Mflop/s
(8,21,14) <- (1,7,7).*(8, 2+1,2): 28.617771 Mflop/s

Testing m0 = 8, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 30.106447
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 21 14 8 21 21 14 8 14
<<< (M = 8, K = 21, N = 14) : 28.617771
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 2,2) :    29.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1604 (14.3%), 9646 (85.7%) left; Finishing by Sat Oct 21  6:40:09 2000

(9,10,9) <- (9,1,3).*(1, 9+1,3): 139.756635 Mflop/s
(15,10,15) <- (15,1,5).*(1, 9+1,3): 141.520102 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 139.756635
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 141.520102
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,3) :   140.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1605 (14.3%), 9645 (85.7%) left; Finishing by Sat Oct 21  6:40:07 2000

(9,8,14) <- (9,1,0).*(1, 7+1,14): 113.875179 Mflop/s
(15,16,14) <- (15,2,1).*(1, 7+1,14): 133.476235 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 14 9 8 8 14 9 14
<<< (M = 9, K = 8, N = 14) : 113.875179
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 133.476235
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,14) :   122.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1606 (14.3%), 9644 (85.7%) left; Finishing by Sat Oct 21  6:40:11 2000

(8,10,6) <- (4,2,1).*(2, 4+1,6): 33.767592 Mflop/s
(14,15,12) <- (7,3,2).*(2, 4+1,6): 32.400639 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  4 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 6 8 10 10 6 8 6
<<< (M = 8, K = 10, N = 6) : 33.767592
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 32.400639
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 4,6) :    33.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1607 (14.3%), 9643 (85.7%) left; Finishing by Sat Oct 21  6:40:09 2000

(9,15,14) <- (9,0,0).*(1, 14+1,14): 124.582147 Mflop/s
(15,15,14) <- (15,1,1).*(1, 14+1,14): 125.260609 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 14 9 15 15 14 9 14
<<< (M = 9, K = 15, N = 14) : 124.582147
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 125.260609
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,14) :   124.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1608 (14.3%), 9642 (85.7%) left; Finishing by Sat Oct 21  6:40:06 2000

(8,12,6) <- (4,4,1).*(2, 2+1,6): 33.963578 Mflop/s
(14,21,12) <- (7,7,2).*(2, 2+1,6): 28.591082 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  2 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 6 8 12 12 6 8 6
<<< (M = 8, K = 12, N = 6) : 33.963578
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 12 14 21 21 12 14 12
<<< (M = 14, K = 21, N = 12) : 28.591082
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 2,6) :    31.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1609 (14.3%), 9641 (85.7%) left; Finishing by Sat Oct 21  6:40:04 2000

(9,12,5) <- (9,0,1).*(1, 11+1,5): 131.262075 Mflop/s
(15,12,15) <- (15,1,3).*(1, 11+1,5): 135.961748 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 131.262075
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 135.961748
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,5) :   133.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1610 (14.3%), 9640 (85.7%) left; Finishing by Sat Oct 21  6:40:09 2000

(8,12,9) <- (2,0,9).*(4, 11+1,1): 171.651927 Mflop/s
(12,12,15) <- (3,1,15).*(4, 11+1,1): 174.397564 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 171.651927
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 174.397564
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 11,1) :   173.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1611 (14.3%), 9639 (85.7%) left; Finishing by Sat Oct 21  6:40:06 2000

(9,10,13) <- (9,1,0).*(1, 9+1,13): 114.431326 Mflop/s
(15,10,13) <- (15,1,1).*(1, 9+1,13): 115.870334 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 13 9 10 10 13 9 13
<<< (M = 9, K = 10, N = 13) : 114.431326
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 13 15 10 10 13 15 13
<<< (M = 15, K = 10, N = 13) : 115.870334
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,13) :   115.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1612 (14.3%), 9638 (85.7%) left; Finishing by Sat Oct 21  6:40:11 2000

(9,6,11) <- (9,1,0).*(1, 5+1,11): 104.913755 Mflop/s
(15,18,11) <- (15,3,1).*(1, 5+1,11): 140.108217 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 11 9 6 6 11 9 11
<<< (M = 9, K = 6, N = 11) : 104.913755
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 11 15 18 18 11 15 11
<<< (M = 15, K = 18, N = 11) : 140.108217
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,11) :   120.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1613 (14.3%), 9637 (85.7%) left; Finishing by Sat Oct 21  6:40:15 2000

(8,10,8) <- (2,2,4).*(4, 4+1,2): 32.929115 Mflop/s
(12,15,14) <- (3,3,7).*(4, 4+1,2): 37.239640 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 32.929115
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 37.239640
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 4,2) :    35.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1614 (14.3%), 9636 (85.7%) left; Finishing by Sat Oct 21  6:40:13 2000

(14,6,9) <- (0,1,9).*(14, 5+1,1): 25.650042 Mflop/s
(14,18,15) <- (1,3,15).*(14, 5+1,1): 34.367751 Mflop/s

Testing m0 = 14, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 14  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 6 9 14 6 6 9 14 9
<<< (M = 14, K = 6, N = 9) : 25.650042
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 34.367751
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (14, 5,1) :    29.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1615 (14.4%), 9635 (85.6%) left; Finishing by Sat Oct 21  6:40:18 2000

(9,8,12) <- (9,1,0).*(1, 7+1,12): 112.590814 Mflop/s
(15,16,12) <- (15,2,1).*(1, 7+1,12): 130.050529 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 12 9 8 8 12 9 12
<<< (M = 9, K = 8, N = 12) : 112.590814
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 130.050529
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,12) :   120.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1616 (14.4%), 9634 (85.6%) left; Finishing by Sat Oct 21  6:40:22 2000

(8,12,7) <- (4,4,1).*(2, 2+1,7): 32.180509 Mflop/s
(14,21,14) <- (7,7,2).*(2, 2+1,7): 30.021228 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  2 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 7 8 12 12 7 8 7
<<< (M = 8, K = 12, N = 7) : 32.180509
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 14 14 21 21 14 14 14
<<< (M = 14, K = 21, N = 14) : 30.021228
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 2,7) :    31.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1617 (14.4%), 9633 (85.6%) left; Finishing by Sat Oct 21  6:40:20 2000

(9,7,9) <- (9,1,3).*(1, 6+1,3): 127.585000 Mflop/s
(15,14,15) <- (15,2,5).*(1, 6+1,3): 157.762406 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 127.585000
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 157.762406
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,3) :   141.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1618 (14.4%), 9632 (85.6%) left; Finishing by Sat Oct 21  6:40:18 2000

(8,8,9) <- (4,1,3).*(2, 7+1,3): 45.867398 Mflop/s
(14,16,15) <- (7,2,5).*(2, 7+1,3): 39.682062 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 45.867398
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 39.682062
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 7,3) :    42.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1619 (14.4%), 9631 (85.6%) left; Finishing by Sat Oct 21  6:40:15 2000

(9,9,15) <- (9,1,0).*(1, 8+1,15): 119.079653 Mflop/s
(15,9,15) <- (15,1,1).*(1, 8+1,15): 120.096511 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 15 9 9 9 15 9 15
<<< (M = 9, K = 9, N = 15) : 119.079653
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 120.096511
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,15) :   119.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (2, 4,1) :   179.0 MFLOPS.
Done 1620 (14.4%), 9630 (85.6%) left; Finishing by Sat Oct 21  6:40:13 2000

(9,16,9) <- (3,0,9).*(3, 15+1,1): 185.755376 Mflop/s
(15,16,15) <- (5,1,15).*(3, 15+1,1): 188.608597 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 185.755376
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 188.608597
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 15,1) :   187.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1621 (14.4%), 9629 (85.6%) left; Finishing by Sat Oct 21  6:40:17 2000

(9,13,15) <- (9,0,0).*(1, 12+1,15): 126.527881 Mflop/s
(15,13,15) <- (15,1,1).*(1, 12+1,15): 127.042287 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 15 9 13 13 15 9 15
<<< (M = 9, K = 13, N = 15) : 126.527881
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 127.042287
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,15) :   126.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1622 (14.4%), 9628 (85.6%) left; Finishing by Sat Oct 21  6:40:22 2000

(8,9,8) <- (1,1,4).*(8, 8+1,2): 98.398737 Mflop/s
(8,9,14) <- (1,1,7).*(8, 8+1,2): 98.790051 Mflop/s

Testing m0 = 8, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 98.398737
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 14 8 9 9 14 8 14
<<< (M = 8, K = 9, N = 14) : 98.790051
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 8,2) :    98.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1623 (14.4%), 9627 (85.6%) left; Finishing by Sat Oct 21  6:40:13 2000

(9,16,8) <- (9,0,4).*(1, 15+1,2): 151.873553 Mflop/s
(15,16,14) <- (15,1,7).*(1, 15+1,2): 151.637970 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 151.873553
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 151.637970
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,2) :   151.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1624 (14.4%), 9626 (85.6%) left; Finishing by Sat Oct 21  6:40:10 2000

(9,11,6) <- (9,0,1).*(1, 10+1,6): 128.641661 Mflop/s
(15,11,12) <- (15,1,2).*(1, 10+1,6): 136.735523 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 6 9 11 11 6 9 6
<<< (M = 9, K = 11, N = 6) : 128.641661
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 136.735523
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,6) :   132.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1625 (14.4%), 9625 (85.6%) left; Finishing by Sat Oct 21  6:40:15 2000

(9,12,9) <- (9,4,1).*(1, 2+1,9): 134.083632 Mflop/s
(15,21,9) <- (15,7,1).*(1, 2+1,9): 129.540348 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 134.083632
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 9 15 21 21 9 15 9
<<< (M = 15, K = 21, N = 9) : 129.540348
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,9) :   131.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1626 (14.5%), 9624 (85.5%) left; Finishing by Sat Oct 21  6:40:12 2000

(8,11,9) <- (4,0,9).*(2, 10+1,1): 160.013195 Mflop/s
(14,11,15) <- (7,1,15).*(2, 10+1,1): 167.524485 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 160.013195
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 167.524485
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 10,1) :   163.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1627 (14.5%), 9623 (85.5%) left; Finishing by Sat Oct 21  6:40:17 2000

(9,10,7) <- (9,1,1).*(1, 9+1,7): 122.411330 Mflop/s
(15,10,14) <- (15,1,2).*(1, 9+1,7): 125.952266 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 7 9 10 10 7 9 7
<<< (M = 9, K = 10, N = 7) : 122.411330
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 125.952266
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,7) :   124.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1628 (14.5%), 9622 (85.5%) left; Finishing by Sat Oct 21  6:40:22 2000

(9,12,10) <- (9,4,0).*(1, 2+1,10): 132.153731 Mflop/s
(15,21,10) <- (15,7,1).*(1, 2+1,10): 128.503020 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 10 9 12 12 10 9 10
<<< (M = 9, K = 12, N = 10) : 132.153731
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 10 15 21 21 10 15 10
<<< (M = 15, K = 21, N = 10) : 128.503020
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,10) :   130.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1629 (14.5%), 9621 (85.5%) left; Finishing by Sat Oct 21  6:40:12 2000

(7,14,8) <- (1,0,4).*(7, 13+1,2): 25.077956 Mflop/s
(14,14,14) <- (2,1,7).*(7, 13+1,2): 27.292818 Mflop/s

Testing m0 = 7, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 14 8 7 14 14 8 7 8
<<< (M = 7, K = 14, N = 8) : 25.077956
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 27.292818
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 13,2) :    26.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1630 (14.5%), 9620 (85.5%) left; Finishing by Sat Oct 21  6:40:17 2000

(5,14,9) <- (1,0,3).*(5, 13+1,3): 29.227550 Mflop/s
(15,14,15) <- (3,1,5).*(5, 13+1,3): 29.841793 Mflop/s

Testing m0 = 5, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 14 9 5 14 14 9 5 9
<<< (M = 5, K = 14, N = 9) : 29.227550
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 29.841793
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 13,3) :    29.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1631 (14.5%), 9619 (85.5%) left; Finishing by Sat Oct 21  6:40:14 2000

(9,7,14) <- (9,1,0).*(1, 6+1,14): 111.167325 Mflop/s
(15,14,14) <- (15,2,1).*(1, 6+1,14): 134.440472 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 14 9 7 7 14 9 14
<<< (M = 9, K = 7, N = 14) : 111.167325
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 134.440472
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,14) :   121.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1632 (14.5%), 9618 (85.5%) left; Finishing by Sat Oct 21  6:40:12 2000

(8,11,9) <- (2,0,3).*(4, 10+1,3): 27.841715 Mflop/s
(12,11,15) <- (3,1,5).*(4, 10+1,3): 29.681309 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 27.841715
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 29.681309
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 10,3) :    28.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1633 (14.5%), 9617 (85.5%) left; Finishing by Sat Oct 21  6:40:10 2000

(10,8,9) <- (0,1,9).*(10, 7+1,1): 29.281993 Mflop/s
(10,16,15) <- (1,2,15).*(10, 7+1,1): 31.394200 Mflop/s

Testing m0 = 10, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 10  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 8 9 10 8 8 9 10 9
<<< (M = 10, K = 8, N = 9) : 29.281993
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 16 15 10 16 16 15 10 15
<<< (M = 10, K = 16, N = 15) : 31.394200
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (10, 7,1) :    30.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1634 (14.5%), 9616 (85.5%) left; Finishing by Sat Oct 21  6:40:07 2000

(13,15,9) <- (0,0,9).*(13, 14+1,1): 27.726922 Mflop/s
(13,15,15) <- (1,1,15).*(13, 14+1,1): 28.730502 Mflop/s

Testing m0 = 13, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 13  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 9 13 15 15 9 13 9
<<< (M = 13, K = 15, N = 9) : 27.726922
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 15 13 15 15 15 13 15
<<< (M = 13, K = 15, N = 15) : 28.730502
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (13, 14,1) :    28.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1635 (14.5%), 9615 (85.5%) left; Finishing by Sat Oct 21  6:40:05 2000

(8,7,8) <- (1,1,4).*(8, 6+1,2): 90.571252 Mflop/s
(8,14,14) <- (1,2,7).*(8, 6+1,2): 111.016286 Mflop/s

Testing m0 = 8, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 90.571252
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 14 8 14 14 14 8 14
<<< (M = 8, K = 14, N = 14) : 111.016286
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 6,2) :    99.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1636 (14.5%), 9614 (85.5%) left; Finishing by Sat Oct 21  6:40:10 2000

(11,12,9) <- (0,4,9).*(11, 2+1,1): 105.698836 Mflop/s
(11,21,15) <- (1,7,15).*(11, 2+1,1): 103.726083 Mflop/s

Testing m0 = 11, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 11  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 9 11 12 12 9 11 9
<<< (M = 11, K = 12, N = 9) : 105.698836
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 21 15 11 21 21 15 11 15
<<< (M = 11, K = 21, N = 15) : 103.726083
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (11, 2,1) :   104.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1637 (14.6%), 9613 (85.4%) left; Finishing by Sat Oct 21  6:40:07 2000

(6,7,8) <- (1,1,4).*(6, 6+1,2): 100.496119 Mflop/s
(12,14,14) <- (2,2,7).*(6, 6+1,2): 88.251012 Mflop/s

Testing m0 = 6, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 7 8 6 7 7 8 6 8
<<< (M = 6, K = 7, N = 8) : 100.496119
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 88.251012
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 6,2) :    94.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1638 (14.6%), 9612 (85.4%) left; Finishing by Sat Oct 21  6:40:12 2000

(5,8,8) <- (1,1,4).*(5, 7+1,2): 29.118863 Mflop/s
(15,16,14) <- (3,2,7).*(5, 7+1,2): 34.583815 Mflop/s

Testing m0 = 5, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 8 5 8 8 8 5 8
<<< (M = 5, K = 8, N = 8) : 29.118863
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 34.583815
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 7,2) :    31.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1639 (14.6%), 9611 (85.4%) left; Finishing by Sat Oct 21  6:40:03 2000

(9,11,12) <- (9,0,0).*(1, 10+1,12): 115.979537 Mflop/s
(15,11,12) <- (15,1,1).*(1, 10+1,12): 116.753552 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 12 9 11 11 12 9 12
<<< (M = 9, K = 11, N = 12) : 115.979537
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 116.753552
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,12) :   116.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1640 (14.6%), 9610 (85.4%) left; Finishing by Sat Oct 21  6:40:00 2000

(9,10,8) <- (3,2,4).*(3, 4+1,2): 133.699699 Mflop/s
(15,15,14) <- (5,3,7).*(3, 4+1,2): 151.565048 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 133.699699
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 151.565048
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 4,2) :   142.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1641 (14.6%), 9609 (85.4%) left; Finishing by Sat Oct 21  6:40:05 2000

(5,7,8) <- (1,1,4).*(5, 6+1,2): 28.427728 Mflop/s
(15,14,14) <- (3,2,7).*(5, 6+1,2): 34.525196 Mflop/s

Testing m0 = 5, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 7 8 5 7 7 8 5 8
<<< (M = 5, K = 7, N = 8) : 28.427728
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 34.525196
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 6,2) :    31.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1642 (14.6%), 9608 (85.4%) left; Finishing by Sat Oct 21  6:40:02 2000

(9,11,14) <- (9,0,0).*(1, 10+1,14): 120.099243 Mflop/s
(15,11,14) <- (15,1,1).*(1, 10+1,14): 120.966733 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 14 9 11 11 14 9 14
<<< (M = 9, K = 11, N = 14) : 120.099243
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 120.966733
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,14) :   120.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1643 (14.6%), 9607 (85.4%) left; Finishing by Sat Oct 21  6:40:00 2000

(14,18,9) <- (0,9,9).*(14,1+1,1): 27.336291 Mflop/s
(14,30,15) <- (1,15,15).*(14,1+1,1): 28.779570 Mflop/s

Testing m0 = 14, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 14 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 9 14 18 18 9 14 9
<<< (M = 14, K = 18, N = 9) : 27.336291
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 15 14 30 30 15 14 15
<<< (M = 14, K = 30, N = 15) : 28.779570
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (14,1,1) :    28.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1644 (14.6%), 9606 (85.4%) left; Finishing by Sat Oct 21  6:39:58 2000

(5,15,8) <- (1,0,4).*(5, 14+1,2): 31.271068 Mflop/s
(15,15,14) <- (3,1,7).*(5, 14+1,2): 32.470776 Mflop/s

Testing m0 = 5, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 8 5 15 15 8 5 8
<<< (M = 5, K = 15, N = 8) : 31.271068
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 32.470776
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 14,2) :    31.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1645 (14.6%), 9605 (85.4%) left; Finishing by Sat Oct 21  6:39:55 2000

(8,18,9) <- (4,9,9).*(2,1+1,1): 108.444340 Mflop/s
(14,30,15) <- (7,15,15).*(2,1+1,1): 117.027481 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 9 8 18 18 9 8 9
<<< (M = 8, K = 18, N = 9) : 108.444340
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 15 14 30 30 15 14 15
<<< (M = 14, K = 30, N = 15) : 117.027481
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2,1,1) :   112.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1646 (14.6%), 9604 (85.4%) left; Finishing by Sat Oct 21  6:39:46 2000

(8,18,8) <- (1,9,4).*(8,1+1,2): 28.320016 Mflop/s
(8,30,14) <- (1,15,7).*(8,1+1,2): 29.025156 Mflop/s

Testing m0 = 8, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 8 8 18 18 8 8 8
<<< (M = 8, K = 18, N = 8) : 28.320016
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 30 14 8 30 30 14 8 14
<<< (M = 8, K = 30, N = 14) : 29.025156
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8,1,2) :    28.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1647 (14.6%), 9603 (85.4%) left; Finishing by Sat Oct 21  6:39:44 2000

(5,16,9) <- (1,0,3).*(5, 15+1,3): 29.603355 Mflop/s
(15,16,15) <- (3,1,5).*(5, 15+1,3): 29.947381 Mflop/s

Testing m0 = 5, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 16 9 5 16 16 9 5 9
<<< (M = 5, K = 16, N = 9) : 29.603355
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 29.947381
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 15,3) :    29.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1648 (14.6%), 9602 (85.4%) left; Finishing by Sat Oct 21  6:39:42 2000

(5,13,9) <- (1,0,3).*(5, 12+1,3): 28.961731 Mflop/s
(15,13,15) <- (3,1,5).*(5, 12+1,3): 29.839761 Mflop/s

Testing m0 = 5, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 13 9 5 13 13 9 5 9
<<< (M = 5, K = 13, N = 9) : 28.961731
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 29.839761
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 12,3) :    29.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1649 (14.7%), 9601 (85.3%) left; Finishing by Sat Oct 21  6:39:46 2000

(9,8,8) <- (9,1,4).*(1, 7+1,2): 131.767851 Mflop/s
(15,16,14) <- (15,2,7).*(1, 7+1,2): 159.494939 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 131.767851
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 159.494939
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,2) :   144.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1650 (14.7%), 9600 (85.3%) left; Finishing by Sat Oct 21  6:39:51 2000

(8,8,8) <- (1,1,4).*(8, 7+1,2): 94.120415 Mflop/s
(8,16,14) <- (1,2,7).*(8, 7+1,2): 109.492719 Mflop/s

Testing m0 = 8, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 94.120415
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 14 8 16 16 14 8 14
<<< (M = 8, K = 16, N = 14) : 109.492719
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 7,2) :   101.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1651 (14.7%), 9599 (85.3%) left; Finishing by Sat Oct 21  6:39:48 2000

(9,11,16) <- (9,0,0).*(1, 10+1,16): 122.187944 Mflop/s
(15,11,16) <- (15,1,0).*(1, 10+1,16): 122.453569 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 16 9 11 11 16 9 16
<<< (M = 9, K = 11, N = 16) : 122.187944
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 16 15 11 11 16 15 16
<<< (M = 15, K = 11, N = 16) : 122.453569
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,16) :   122.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1652 (14.7%), 9598 (85.3%) left; Finishing by Sat Oct 21  6:39:46 2000

(5,12,9) <- (1,3,3).*(5, 3+1,3): 34.053938 Mflop/s
(15,20,15) <- (3,5,5).*(5, 3+1,3): 32.144913 Mflop/s

Testing m0 = 5, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 34.053938
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 32.144913
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 3,3) :    33.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1653 (14.7%), 9597 (85.3%) left; Finishing by Sat Oct 21  6:39:44 2000

(7,18,9) <- (1,9,9).*(7,1+1,1): 96.493884 Mflop/s
(14,30,15) <- (2,15,15).*(7,1+1,1): 101.642353 Mflop/s

Testing m0 = 7, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 18 9 7 18 18 9 7 9
<<< (M = 7, K = 18, N = 9) : 96.493884
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 15 14 30 30 15 14 15
<<< (M = 14, K = 30, N = 15) : 101.642353
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7,1,1) :    99.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1654 (14.7%), 9596 (85.3%) left; Finishing by Sat Oct 21  6:39:35 2000

(5,8,9) <- (1,1,3).*(5, 7+1,3): 27.533357 Mflop/s
(15,16,15) <- (3,2,5).*(5, 7+1,3): 31.799075 Mflop/s

Testing m0 = 5, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 27.533357
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 31.799075
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 7,3) :    29.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1655 (14.7%), 9595 (85.3%) left; Finishing by Sat Oct 21  6:39:32 2000

(9,15,9) <- (3,0,3).*(3, 14+1,3): 124.455726 Mflop/s
(15,15,15) <- (5,1,5).*(3, 14+1,3): 126.264425 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 124.455726
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 126.264425
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 14,3) :   125.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1656 (14.7%), 9594 (85.3%) left; Finishing by Sat Oct 21  6:39:30 2000

(9,9,9) <- (3,1,3).*(3, 8+1,3): 115.472099 Mflop/s
(15,9,15) <- (5,1,5).*(3, 8+1,3): 116.411792 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 115.472099
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 116.411792
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 8,3) :   115.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1657 (14.7%), 9593 (85.3%) left; Finishing by Sat Oct 21  6:39:28 2000

(9,13,10) <- (9,0,0).*(1, 12+1,10): 121.541589 Mflop/s
(15,13,10) <- (15,1,1).*(1, 12+1,10): 122.827827 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 10 9 13 13 10 9 10
<<< (M = 9, K = 13, N = 10) : 121.541589
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 10 15 13 13 10 15 10
<<< (M = 15, K = 13, N = 10) : 122.827827
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,10) :   122.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1658 (14.7%), 9592 (85.3%) left; Finishing by Sat Oct 21  6:39:25 2000

(9,12,14) <- (9,4,0).*(1, 2+1,14): 130.984134 Mflop/s
(15,21,14) <- (15,7,1).*(1, 2+1,14): 125.031752 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 14 9 12 12 14 9 14
<<< (M = 9, K = 12, N = 14) : 130.984134
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 14 15 21 21 14 15 14
<<< (M = 15, K = 21, N = 14) : 125.031752
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,14) :   127.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1659 (14.7%), 9591 (85.3%) left; Finishing by Sat Oct 21  6:39:23 2000

(15,6,9) <- (0,1,9).*(15, 5+1,1): 89.946923 Mflop/s
(15,18,15) <- (1,3,15).*(15, 5+1,1): 125.759455 Mflop/s

Testing m0 = 15, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 15  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 6 9 15 6 6 9 15 9
<<< (M = 15, K = 6, N = 9) : 89.946923
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 125.759455
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (15, 5,1) :   104.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1660 (14.8%), 9590 (85.2%) left; Finishing by Sat Oct 21  6:39:21 2000

(16,12,9) <- (0,0,9).*(16, 11+1,1): 27.475113 Mflop/s
(16,12,15) <- (0,1,15).*(16, 11+1,1): 27.817560 Mflop/s

Testing m0 = 16, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 16  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 9 16 12 12 9 16 9
<<< (M = 16, K = 12, N = 9) : 27.475113
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 15 16 12 12 15 16 15
<<< (M = 16, K = 12, N = 15) : 27.817560
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (16, 11,1) :    27.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1661 (14.8%), 9589 (85.2%) left; Finishing by Sat Oct 21  6:39:19 2000

(9,8,9) <- (3,1,9).*(3, 7+1,1): 140.220363 Mflop/s
(15,16,15) <- (5,2,15).*(3, 7+1,1): 186.057160 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 140.220363
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 186.057160
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 7,1) :   159.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1662 (14.8%), 9588 (85.2%) left; Finishing by Sat Oct 21  6:39:23 2000

(9,16,13) <- (9,0,0).*(1, 15+1,13): 123.721035 Mflop/s
(15,16,13) <- (15,1,1).*(1, 15+1,13): 124.456049 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 13 9 16 16 13 9 13
<<< (M = 9, K = 16, N = 13) : 123.721035
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 13 15 16 16 13 15 13
<<< (M = 15, K = 16, N = 13) : 124.456049
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,13) :   124.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1663 (14.8%), 9587 (85.2%) left; Finishing by Sat Oct 21  6:39:21 2000

(15,13,9) <- (0,0,9).*(15, 12+1,1): 88.042365 Mflop/s
(15,13,15) <- (1,1,15).*(15, 12+1,1): 106.477265 Mflop/s

Testing m0 = 15, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 15  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 9 15 13 13 9 15 9
<<< (M = 15, K = 13, N = 9) : 88.042365
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 106.477265
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (15, 12,1) :    96.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1664 (14.8%), 9586 (85.2%) left; Finishing by Sat Oct 21  6:39:19 2000

(8,16,6) <- (4,0,1).*(2, 15+1,6): 31.805428 Mflop/s
(14,16,12) <- (7,1,2).*(2, 15+1,6): 28.181509 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  15 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 6 8 16 16 6 8 6
<<< (M = 8, K = 16, N = 6) : 31.805428
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 12 14 16 16 12 14 12
<<< (M = 14, K = 16, N = 12) : 28.181509
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 15,6) :    29.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1665 (14.8%), 9585 (85.2%) left; Finishing by Sat Oct 21  6:39:16 2000

(9,14,11) <- (9,0,0).*(1, 13+1,11): 121.634088 Mflop/s
(15,14,11) <- (15,1,1).*(1, 13+1,11): 121.949196 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 11 9 14 14 11 9 11
<<< (M = 9, K = 14, N = 11) : 121.634088
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 11 15 14 14 11 15 11
<<< (M = 15, K = 14, N = 11) : 121.949196
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,11) :   121.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1666 (14.8%), 9584 (85.2%) left; Finishing by Sat Oct 21  6:39:14 2000

(7,9,8) <- (1,1,4).*(7, 8+1,2): 23.957604 Mflop/s
(14,9,14) <- (2,1,7).*(7, 8+1,2): 24.153336 Mflop/s

Testing m0 = 7, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 8 7 9 9 8 7 8
<<< (M = 7, K = 9, N = 8) : 23.957604
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 14 14 9 9 14 14 14
<<< (M = 14, K = 9, N = 14) : 24.153336
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 8,2) :    24.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1667 (14.8%), 9583 (85.2%) left; Finishing by Sat Oct 21  6:39:18 2000

(10,12,9) <- (0,4,9).*(10, 2+1,1): 33.353513 Mflop/s
(10,21,15) <- (1,7,15).*(10, 2+1,1): 30.249398 Mflop/s

Testing m0 = 10, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 10  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 9 10 12 12 9 10 9
<<< (M = 10, K = 12, N = 9) : 33.353513
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 21 15 10 21 21 15 10 15
<<< (M = 10, K = 21, N = 15) : 30.249398
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (10, 2,1) :    31.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1668 (14.8%), 9582 (85.2%) left; Finishing by Sat Oct 21  6:39:09 2000

(8,9,5) <- (4,1,1).*(2, 8+1,5): 30.655055 Mflop/s
(14,9,15) <- (7,1,3).*(2, 8+1,5): 31.053448 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  8 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 5 8 9 9 5 8 5
<<< (M = 8, K = 9, N = 5) : 30.655055
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 31.053448
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 8,5) :    30.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1669 (14.8%), 9581 (85.2%) left; Finishing by Sat Oct 21  6:39:07 2000

(7,7,9) <- (1,1,9).*(7, 6+1,1): 32.356519 Mflop/s
(14,14,15) <- (2,2,15).*(7, 6+1,1): 42.451816 Mflop/s

Testing m0 = 7, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 7 9 7 7 7 9 7 9
<<< (M = 7, K = 7, N = 9) : 32.356519
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 42.451816
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 6,1) :    36.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1670 (14.8%), 9580 (85.2%) left; Finishing by Sat Oct 21  6:39:05 2000

(8,16,9) <- (2,0,3).*(4, 15+1,3): 29.975998 Mflop/s
(12,16,15) <- (3,1,5).*(4, 15+1,3): 30.348704 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 29.975998
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 30.348704
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 15,3) :    30.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1671 (14.9%), 9579 (85.1%) left; Finishing by Sat Oct 21  6:39:03 2000

(8,15,9) <- (4,0,9).*(2, 14+1,1): 179.626787 Mflop/s
(14,15,15) <- (7,1,15).*(2, 14+1,1): 183.260920 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 179.626787
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 183.260920
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 14,1) :   181.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1672 (14.9%), 9578 (85.1%) left; Finishing by Sat Oct 21  6:39:14 2000

(9,12,7) <- (9,4,1).*(1, 2+1,7): 134.084322 Mflop/s
(15,21,14) <- (15,7,2).*(1, 2+1,7): 131.635196 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 7 9 12 12 7 9 7
<<< (M = 9, K = 12, N = 7) : 134.084322
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 14 15 21 21 14 15 14
<<< (M = 15, K = 21, N = 14) : 131.635196
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,7) :   132.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1673 (14.9%), 9577 (85.1%) left; Finishing by Sat Oct 21  6:39:12 2000

(9,12,8) <- (9,0,2).*(1, 11+1,4): 147.385431 Mflop/s
(15,12,12) <- (15,1,3).*(1, 11+1,4): 148.762008 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 147.385431
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 148.762008
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,4) :   148.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1674 (14.9%), 9576 (85.1%) left; Finishing by Sat Oct 21  6:39:03 2000

(8,9,8) <- (2,1,2).*(4, 8+1,4): 23.351619 Mflop/s
(12,9,12) <- (3,1,3).*(4, 8+1,4): 23.455029 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 23.351619
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 12 12 9 9 12 12 12
<<< (M = 12, K = 9, N = 12) : 23.455029
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 8,4) :    23.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1675 (14.9%), 9575 (85.1%) left; Finishing by Sat Oct 21  6:39:00 2000

(7,10,9) <- (1,1,9).*(7, 9+1,1): 34.236810 Mflop/s
(14,10,15) <- (2,1,15).*(7, 9+1,1): 37.501937 Mflop/s

Testing m0 = 7, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 10 9 7 10 10 9 7 9
<<< (M = 7, K = 10, N = 9) : 34.236810
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 37.501937
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 9,1) :    35.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1676 (14.9%), 9574 (85.1%) left; Finishing by Sat Oct 21  6:38:58 2000

(9,7,9) <- (1,1,9).*(9, 6+1,1): 28.938183 Mflop/s
(9,14,15) <- (1,2,15).*(9, 6+1,1): 34.451606 Mflop/s

Testing m0 = 9, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 9  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 28.938183
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 34.451606
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (9, 6,1) :    31.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1677 (14.9%), 9573 (85.1%) left; Finishing by Sat Oct 21  6:38:56 2000

(9,15,11) <- (9,0,0).*(1, 14+1,11): 122.425958 Mflop/s
(15,15,11) <- (15,1,1).*(1, 14+1,11): 123.027263 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 11 9 15 15 11 9 11
<<< (M = 9, K = 15, N = 11) : 122.425958
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 11 15 15 15 11 15 11
<<< (M = 15, K = 15, N = 11) : 123.027263
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,11) :   122.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1678 (14.9%), 9572 (85.1%) left; Finishing by Sat Oct 21  6:38:54 2000

(8,13,5) <- (4,0,1).*(2, 12+1,5): 31.878874 Mflop/s
(14,13,15) <- (7,1,3).*(2, 12+1,5): 31.137420 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  12 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 5 8 13 13 5 8 5
<<< (M = 8, K = 13, N = 5) : 31.878874
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 31.137420
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 12,5) :    31.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1679 (14.9%), 9571 (85.1%) left; Finishing by Sat Oct 21  6:38:51 2000

(7,13,9) <- (1,0,9).*(7, 12+1,1): 35.327351 Mflop/s
(14,13,15) <- (2,1,15).*(7, 12+1,1): 40.553216 Mflop/s

Testing m0 = 7, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 13 9 7 13 13 9 7 9
<<< (M = 7, K = 13, N = 9) : 35.327351
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 40.553216
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 12,1) :    37.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1680 (14.9%), 9570 (85.1%) left; Finishing by Sat Oct 21  6:38:49 2000

(9,8,16) <- (9,1,0).*(1, 7+1,16): 114.956988 Mflop/s
(15,16,16) <- (15,2,0).*(1, 7+1,16): 135.247686 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 16 9 8 8 16 9 16
<<< (M = 9, K = 8, N = 16) : 114.956988
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 16 15 16 16 16 15 16
<<< (M = 15, K = 16, N = 16) : 135.247686
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,16) :   124.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1681 (14.9%), 9569 (85.1%) left; Finishing by Sat Oct 21  6:38:47 2000

(5,10,9) <- (1,1,9).*(5, 9+1,1): 66.227646 Mflop/s
(15,10,15) <- (3,1,15).*(5, 9+1,1): 76.036070 Mflop/s

Testing m0 = 5, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 9 5 10 10 9 5 9
<<< (M = 5, K = 10, N = 9) : 66.227646
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 76.036070
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 9,1) :    70.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1682 (15.0%), 9568 (85.0%) left; Finishing by Sat Oct 21  6:38:45 2000

(8,13,9) <- (1,0,9).*(8, 12+1,1): 96.511923 Mflop/s
(8,13,15) <- (1,1,15).*(8, 12+1,1): 97.332188 Mflop/s

Testing m0 = 8, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 96.511923
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 15 8 13 13 15 8 15
<<< (M = 8, K = 13, N = 15) : 97.332188
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 12,1) :    96.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1683 (15.0%), 9567 (85.0%) left; Finishing by Sat Oct 21  6:38:43 2000

(7,11,9) <- (1,0,9).*(7, 10+1,1): 34.747719 Mflop/s
(14,11,15) <- (2,1,15).*(7, 10+1,1): 37.997378 Mflop/s

Testing m0 = 7, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 11 9 7 11 11 9 7 9
<<< (M = 7, K = 11, N = 9) : 34.747719
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 37.997378
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 10,1) :    36.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1684 (15.0%), 9566 (85.0%) left; Finishing by Sat Oct 21  6:38:40 2000

(8,13,7) <- (4,0,1).*(2, 12+1,7): 29.944288 Mflop/s
(14,13,14) <- (7,1,2).*(2, 12+1,7): 29.920993 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  12 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 7 8 13 13 7 8 7
<<< (M = 8, K = 13, N = 7) : 29.944288
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 14 14 13 13 14 14 14
<<< (M = 14, K = 13, N = 14) : 29.920993
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 12,7) :    29.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1685 (15.0%), 9565 (85.0%) left; Finishing by Sat Oct 21  6:38:38 2000

(7,14,9) <- (1,0,9).*(7, 13+1,1): 35.575497 Mflop/s
(14,14,15) <- (2,1,15).*(7, 13+1,1): 39.094139 Mflop/s

Testing m0 = 7, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 14 9 7 14 14 9 7 9
<<< (M = 7, K = 14, N = 9) : 35.575497
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 39.094139
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 13,1) :    37.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1686 (15.0%), 9564 (85.0%) left; Finishing by Sat Oct 21  6:38:36 2000

(12,10,9) <- (0,2,9).*(12, 4+1,1): 31.672413 Mflop/s
(12,15,15) <- (1,3,15).*(12, 4+1,1): 33.634328 Mflop/s

Testing m0 = 12, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 12  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 9 12 10 10 9 12 9
<<< (M = 12, K = 10, N = 9) : 31.672413
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 33.634328
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (12, 4,1) :    32.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1687 (15.0%), 9563 (85.0%) left; Finishing by Sat Oct 21  6:38:34 2000

(9,11,8) <- (9,0,1).*(1, 10+1,8): 119.731689 Mflop/s
(15,11,8) <- (15,1,1).*(1, 10+1,8): 121.065375 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 119.731689
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 8 15 11 11 8 15 8
<<< (M = 15, K = 11, N = 8) : 121.065375
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,8) :   120.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1688 (15.0%), 9562 (85.0%) left; Finishing by Sat Oct 21  6:38:38 2000

(9,6,8) <- (9,1,2).*(1, 5+1,4): 124.421701 Mflop/s
(15,18,12) <- (15,3,3).*(1, 5+1,4): 175.562638 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 124.421701
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 175.562638
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,4) :   145.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1689 (15.0%), 9561 (85.0%) left; Finishing by Sat Oct 21  6:38:43 2000

(8,14,5) <- (4,0,1).*(2, 13+1,5): 32.034503 Mflop/s
(14,14,15) <- (7,1,3).*(2, 13+1,5): 31.329979 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  13 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 5 8 14 14 5 8 5
<<< (M = 8, K = 14, N = 5) : 32.034503
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 31.329979
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 13,5) :    31.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1690 (15.0%), 9560 (85.0%) left; Finishing by Sat Oct 21  6:38:40 2000

(9,12,13) <- (9,0,0).*(1, 11+1,13): 118.305287 Mflop/s
(15,12,13) <- (15,1,1).*(1, 11+1,13): 118.837798 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 13 9 12 12 13 9 13
<<< (M = 9, K = 12, N = 13) : 118.305287
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 13 15 12 12 13 15 13
<<< (M = 15, K = 12, N = 13) : 118.837798
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,13) :   118.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1691 (15.0%), 9559 (85.0%) left; Finishing by Sat Oct 21  6:38:38 2000

(8,16,8) <- (2,0,2).*(4, 15+1,4): 24.667785 Mflop/s
(12,16,12) <- (3,1,3).*(4, 15+1,4): 29.572923 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 24.667785
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 12 12 16 16 12 12 12
<<< (M = 12, K = 16, N = 12) : 29.572923
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 15,4) :    26.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1692 (15.0%), 9558 (85.0%) left; Finishing by Sat Oct 21  6:38:43 2000

(5,15,9) <- (1,0,9).*(5, 14+1,1): 72.259413 Mflop/s
(15,15,15) <- (3,1,15).*(5, 14+1,1): 84.698913 Mflop/s

Testing m0 = 5, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 9 5 15 15 9 5 9
<<< (M = 5, K = 15, N = 9) : 72.259413
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 84.698913
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 14,1) :    78.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1693 (15.0%), 9557 (85.0%) left; Finishing by Sat Oct 21  6:38:34 2000

(9,14,9) <- (1,0,9).*(9, 13+1,1): 32.087461 Mflop/s
(9,14,15) <- (1,1,15).*(9, 13+1,1): 32.235353 Mflop/s

Testing m0 = 9, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 9  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 32.087461
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 32.235353
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (9, 13,1) :    32.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1694 (15.1%), 9556 (84.9%) left; Finishing by Sat Oct 21  6:38:38 2000

(8,10,9) <- (4,2,3).*(2, 4+1,3): 50.113020 Mflop/s
(14,15,15) <- (7,3,5).*(2, 4+1,3): 39.469649 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 50.113020
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 39.469649
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 4,3) :    44.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1695 (15.1%), 9555 (84.9%) left; Finishing by Sat Oct 21  6:38:36 2000

(9,12,8) <- (3,4,2).*(3, 2+1,4): 33.272402 Mflop/s
(15,21,12) <- (5,7,3).*(3, 2+1,4): 29.796761 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 33.272402
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 12 15 21 21 12 15 12
<<< (M = 15, K = 21, N = 12) : 29.796761
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 2,4) :    31.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1696 (15.1%), 9554 (84.9%) left; Finishing by Sat Oct 21  6:38:27 2000

(8,11,8) <- (4,0,2).*(2, 10+1,4): 34.871214 Mflop/s
(14,11,12) <- (7,1,3).*(2, 10+1,4): 29.951728 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 34.871214
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 12 14 11 11 12 14 12
<<< (M = 14, K = 11, N = 12) : 29.951728
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 10,4) :    32.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1697 (15.1%), 9553 (84.9%) left; Finishing by Sat Oct 21  6:38:25 2000

(5,16,8) <- (1,0,4).*(5, 15+1,2): 31.521043 Mflop/s
(15,16,14) <- (3,1,7).*(5, 15+1,2): 32.614095 Mflop/s

Testing m0 = 5, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 16 8 5 16 16 8 5 8
<<< (M = 5, K = 16, N = 8) : 31.521043
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 32.614095
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 15,2) :    32.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1698 (15.1%), 9552 (84.9%) left; Finishing by Sat Oct 21  6:38:29 2000

(9,12,9) <- (3,4,3).*(3, 2+1,3): 33.461356 Mflop/s
(15,21,15) <- (5,7,5).*(3, 2+1,3): 30.412550 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 33.461356
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 30.412550
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 2,3) :    31.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1699 (15.1%), 9551 (84.9%) left; Finishing by Sat Oct 21  6:38:27 2000

(9,12,7) <- (9,3,1).*(1, 3+1,7): 146.538333 Mflop/s
(15,20,14) <- (15,5,2).*(1, 3+1,7): 139.578909 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 7 9 12 12 7 9 7
<<< (M = 9, K = 12, N = 7) : 146.538333
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 14 15 20 20 14 15 14
<<< (M = 15, K = 20, N = 14) : 139.578909
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,7) :   143.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1700 (15.1%), 9550 (84.9%) left; Finishing by Sat Oct 21  6:38:25 2000

(8,10,9) <- (4,1,9).*(2, 9+1,1): 157.646212 Mflop/s
(14,10,15) <- (7,1,15).*(2, 9+1,1): 162.103766 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 157.646212
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 162.103766
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 9,1) :   159.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1701 (15.1%), 9549 (84.9%) left; Finishing by Sat Oct 21  6:38:29 2000

(9,12,8) <- (9,0,1).*(1, 11+1,8): 126.731978 Mflop/s
(15,12,8) <- (15,1,1).*(1, 11+1,8): 128.503928 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 126.731978
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 8 15 12 12 8 15 8
<<< (M = 15, K = 12, N = 8) : 128.503928
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,8) :   127.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1702 (15.1%), 9548 (84.9%) left; Finishing by Sat Oct 21  6:38:27 2000

(12,10,9) <- (0,1,9).*(12, 9+1,1): 28.700351 Mflop/s
(12,10,15) <- (1,1,15).*(12, 9+1,1): 27.944905 Mflop/s

Testing m0 = 12, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 12  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 9 12 10 10 9 12 9
<<< (M = 12, K = 10, N = 9) : 28.700351
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 27.944905
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (12, 9,1) :    28.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1703 (15.1%), 9547 (84.9%) left; Finishing by Sat Oct 21  6:38:25 2000

(8,12,8) <- (2,3,2).*(4, 3+1,4): 72.621181 Mflop/s
(12,20,12) <- (3,5,3).*(4, 3+1,4): 125.849182 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 72.621181
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 20 12 12 20 20 12 12 12
<<< (M = 12, K = 20, N = 12) : 125.849182
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 3,4) :    92.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1704 (15.1%), 9546 (84.9%) left; Finishing by Sat Oct 21  6:38:16 2000

(6,12,8) <- (1,3,4).*(6, 3+1,2): 133.953083 Mflop/s
(12,20,14) <- (2,5,7).*(6, 3+1,2): 87.891276 Mflop/s

Testing m0 = 6, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 8 6 12 12 8 6 8
<<< (M = 6, K = 12, N = 8) : 133.953083
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 20 14 12 20 20 14 12 14
<<< (M = 12, K = 20, N = 14) : 87.891276
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 3,2) :   106.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1705 (15.2%), 9545 (84.8%) left; Finishing by Sat Oct 21  6:38:21 2000

(8,6,8) <- (2,1,2).*(4, 5+1,4): 53.629319 Mflop/s
(12,18,12) <- (3,3,3).*(4, 5+1,4): 117.759210 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 53.629319
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 12 12 18 18 12 12 12
<<< (M = 12, K = 18, N = 12) : 117.759210
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 5,4) :    73.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1706 (15.2%), 9544 (84.8%) left; Finishing by Sat Oct 21  6:38:18 2000

(9,16,10) <- (9,0,0).*(1, 15+1,10): 125.082612 Mflop/s
(15,16,10) <- (15,1,1).*(1, 15+1,10): 124.974470 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 10 9 16 16 10 9 10
<<< (M = 9, K = 16, N = 10) : 125.082612
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 10 15 16 16 10 15 10
<<< (M = 15, K = 16, N = 10) : 124.974470
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,10) :   125.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1707 (15.2%), 9543 (84.8%) left; Finishing by Sat Oct 21  6:38:16 2000

(9,8,5) <- (9,1,1).*(1, 7+1,5): 118.237196 Mflop/s
(15,16,15) <- (15,2,3).*(1, 7+1,5): 151.803901 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 118.237196
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 151.803901
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,5) :   132.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1708 (15.2%), 9542 (84.8%) left; Finishing by Sat Oct 21  6:38:21 2000

(9,8,7) <- (9,1,1).*(1, 7+1,7): 115.358116 Mflop/s
(15,16,14) <- (15,2,2).*(1, 7+1,7): 144.395154 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 7 9 8 8 7 9 7
<<< (M = 9, K = 8, N = 7) : 115.358116
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 144.395154
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,7) :   128.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1709 (15.2%), 9541 (84.8%) left; Finishing by Sat Oct 21  6:38:25 2000

(9,12,9) <- (9,0,1).*(1, 11+1,9): 118.964179 Mflop/s
(15,12,9) <- (15,1,1).*(1, 11+1,9): 119.764538 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 118.964179
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 119.764538
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,9) :   119.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1710 (15.2%), 9540 (84.8%) left; Finishing by Sat Oct 21  6:38:23 2000

(5,7,9) <- (1,1,9).*(5, 6+1,1): 54.712880 Mflop/s
(15,14,15) <- (3,2,15).*(5, 6+1,1): 83.132638 Mflop/s

Testing m0 = 5, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 7 9 5 7 7 9 5 9
<<< (M = 5, K = 7, N = 9) : 54.712880
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 83.132638
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 6,1) :    66.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1711 (15.2%), 9539 (84.8%) left; Finishing by Sat Oct 21  6:38:21 2000

(8,12,8) <- (4,4,4).*(2, 2+1,2): 125.802922 Mflop/s
(14,21,14) <- (7,7,7).*(2, 2+1,2): 54.115959 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 125.802922
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 14 14 21 21 14 14 14
<<< (M = 14, K = 21, N = 14) : 54.115959
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 2,2) :    75.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1712 (15.2%), 9538 (84.8%) left; Finishing by Sat Oct 21  6:38:25 2000

(9,12,7) <- (9,0,1).*(1, 11+1,7): 128.764317 Mflop/s
(15,12,14) <- (15,1,2).*(1, 11+1,7): 131.356036 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 7 9 12 12 7 9 7
<<< (M = 9, K = 12, N = 7) : 128.764317
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 131.356036
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,7) :   130.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1713 (15.2%), 9537 (84.8%) left; Finishing by Sat Oct 21  6:38:29 2000

(9,10,9) <- (1,1,9).*(9, 9+1,1): 30.939791 Mflop/s
(9,10,15) <- (1,1,15).*(9, 9+1,1): 31.141912 Mflop/s

Testing m0 = 9, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 9  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 30.939791
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 15 9 10 10 15 9 15
<<< (M = 9, K = 10, N = 15) : 31.141912
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (9, 9,1) :    31.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1714 (15.2%), 9536 (84.8%) left; Finishing by Sat Oct 21  6:38:27 2000

(13,12,9) <- (0,3,9).*(13, 3+1,1): 118.863998 Mflop/s
(13,20,15) <- (1,5,15).*(13, 3+1,1): 110.614341 Mflop/s

Testing m0 = 13, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 13  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 9 13 12 12 9 13 9
<<< (M = 13, K = 12, N = 9) : 118.863998
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 20 15 13 20 20 15 13 15
<<< (M = 13, K = 20, N = 15) : 110.614341
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (13, 3,1) :   114.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1715 (15.2%), 9535 (84.8%) left; Finishing by Sat Oct 21  6:38:25 2000

(9,6,9) <- (9,1,9).*(1, 5+1,1): 97.175264 Mflop/s
(15,18,15) <- (15,3,15).*(1, 5+1,1): 159.119970 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 97.175264
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 159.119970
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,1) :   120.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1716 (15.3%), 9534 (84.7%) left; Finishing by Sat Oct 21  6:38:16 2000

(12,12,9) <- (0,0,9).*(12, 11+1,1): 103.142517 Mflop/s
(12,12,15) <- (1,1,15).*(12, 11+1,1): 102.280561 Mflop/s

Testing m0 = 12, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 12  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 9 12 12 12 9 12 9
<<< (M = 12, K = 12, N = 9) : 103.142517
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 102.280561
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (12, 11,1) :   102.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1717 (15.3%), 9533 (84.7%) left; Finishing by Sat Oct 21  6:38:21 2000

(9,12,9) <- (9,3,9).*(1, 3+1,1): 134.748866 Mflop/s
(15,20,15) <- (15,5,15).*(1, 3+1,1): 111.275708 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 134.748866
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 111.275708
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,1) :   121.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1718 (15.3%), 9532 (84.7%) left; Finishing by Sat Oct 21  6:38:18 2000

(8,12,9) <- (2,3,9).*(4, 3+1,1): 185.823322 Mflop/s
(12,20,15) <- (3,5,15).*(4, 3+1,1): 179.477883 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 185.823322
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 20 15 12 20 20 15 12 15
<<< (M = 12, K = 20, N = 15) : 179.477883
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 3,1) :   182.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1719 (15.3%), 9531 (84.7%) left; Finishing by Sat Oct 21  6:38:16 2000

(8,9,8) <- (4,1,4).*(2, 8+1,2): 122.911141 Mflop/s
(14,9,14) <- (7,1,7).*(2, 8+1,2): 125.867013 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 122.911141
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 14 14 9 9 14 14 14
<<< (M = 14, K = 9, N = 14) : 125.867013
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 8,2) :   124.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1720 (15.3%), 9530 (84.7%) left; Finishing by Sat Oct 21  6:38:21 2000

(9,11,8) <- (3,0,4).*(3, 10+1,2): 125.201033 Mflop/s
(15,11,14) <- (5,1,7).*(3, 10+1,2): 127.997265 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 125.201033
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 127.997265
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 10,2) :   126.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1721 (15.3%), 9529 (84.7%) left; Finishing by Sat Oct 21  6:38:19 2000

(8,14,9) <- (4,0,9).*(2, 13+1,1): 175.768570 Mflop/s
(14,14,15) <- (7,1,15).*(2, 13+1,1): 184.023827 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 175.768570
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 184.023827
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 13,1) :   179.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1722 (15.3%), 9528 (84.7%) left; Finishing by Sat Oct 21  6:38:10 2000

(9,15,16) <- (9,0,0).*(1, 14+1,16): 127.252313 Mflop/s
(15,15,16) <- (15,1,0).*(1, 14+1,16): 127.385097 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 16 9 15 15 16 9 16
<<< (M = 9, K = 15, N = 16) : 127.252313
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 16 15 15 15 16 15 16
<<< (M = 15, K = 15, N = 16) : 127.385097
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,16) :   127.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1723 (15.3%), 9527 (84.7%) left; Finishing by Sat Oct 21  6:38:14 2000

(8,14,8) <- (2,0,4).*(4, 13+1,2): 30.355373 Mflop/s
(12,14,14) <- (3,1,7).*(4, 13+1,2): 32.597886 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 30.355373
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 32.597886
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 13,2) :    31.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1724 (15.3%), 9526 (84.7%) left; Finishing by Sat Oct 21  6:38:12 2000

(9,7,16) <- (9,1,0).*(1, 6+1,16): 112.252770 Mflop/s
(15,14,16) <- (15,2,0).*(1, 6+1,16): 135.407126 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 16 9 7 7 16 9 16
<<< (M = 9, K = 7, N = 16) : 112.252770
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 16 15 14 14 16 15 16
<<< (M = 15, K = 14, N = 16) : 135.407126
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,16) :   122.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1725 (15.3%), 9525 (84.7%) left; Finishing by Sat Oct 21  6:38:10 2000

(8,15,8) <- (4,0,1).*(2, 14+1,8): 29.452703 Mflop/s
(14,15,8) <- (7,1,1).*(2, 14+1,8): 29.399706 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  14 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 29.452703
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 8 14 15 15 8 14 8
<<< (M = 14, K = 15, N = 8) : 29.399706
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 14,8) :    29.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1726 (15.3%), 9524 (84.7%) left; Finishing by Sat Oct 21  6:38:08 2000

(9,18,14) <- (9,9,0).*(1,1+1,14): 30.325718 Mflop/s
(15,30,14) <- (15,15,1).*(1,1+1,14): 30.433155 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 14 9 18 18 14 9 14
<<< (M = 9, K = 18, N = 14) : 30.325718
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 14 15 30 30 14 15 14
<<< (M = 15, K = 30, N = 14) : 30.433155
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,14) :    30.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1727 (15.4%), 9523 (84.6%) left; Finishing by Sat Oct 21  6:38:06 2000

(8,7,8) <- (4,1,4).*(2, 6+1,2): 109.265065 Mflop/s
(14,14,14) <- (7,2,7).*(2, 6+1,2): 70.469742 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 109.265065
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 70.469742
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 6,2) :    85.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1728 (15.4%), 9522 (84.6%) left; Finishing by Sat Oct 21  6:38:10 2000

(9,8,8) <- (9,1,1).*(1, 7+1,8): 113.724173 Mflop/s
(15,16,8) <- (15,2,1).*(1, 7+1,8): 137.256353 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 113.724173
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 8 15 16 16 8 15 8
<<< (M = 15, K = 16, N = 8) : 137.256353
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,8) :   124.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1729 (15.4%), 9521 (84.6%) left; Finishing by Sat Oct 21  6:38:08 2000

(8,10,9) <- (2,2,3).*(4, 4+1,3): 102.374897 Mflop/s
(12,15,15) <- (3,3,5).*(4, 4+1,3): 138.118294 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 102.374897
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 138.118294
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 4,3) :   117.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1730 (15.4%), 9520 (84.6%) left; Finishing by Sat Oct 21  6:38:12 2000

(16,9,9) <- (0,1,9).*(16, 8+1,1): 26.428967 Mflop/s
(16,9,15) <- (0,1,15).*(16, 8+1,1): 26.492537 Mflop/s

Testing m0 = 16, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 16  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 9 9 16 9 9 9 16 9
<<< (M = 16, K = 9, N = 9) : 26.428967
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 9 15 16 9 9 15 16 15
<<< (M = 16, K = 9, N = 15) : 26.492537
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (16, 8,1) :    26.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1731 (15.4%), 9519 (84.6%) left; Finishing by Sat Oct 21  6:38:10 2000

(9,16,16) <- (9,0,0).*(1, 15+1,16): 127.678940 Mflop/s
(15,16,16) <- (15,1,0).*(1, 15+1,16): 128.259253 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 16 9 16 16 16 9 16
<<< (M = 9, K = 16, N = 16) : 127.678940
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 16 15 16 16 16 15 16
<<< (M = 15, K = 16, N = 16) : 128.259253
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,16) :   128.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1732 (15.4%), 9518 (84.6%) left; Finishing by Sat Oct 21  6:38:14 2000

(8,15,8) <- (1,0,4).*(8, 14+1,2): 104.379043 Mflop/s
(8,15,14) <- (1,1,7).*(8, 14+1,2): 105.588562 Mflop/s

Testing m0 = 8, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 104.379043
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 14 8 15 15 14 8 14
<<< (M = 8, K = 15, N = 14) : 105.588562
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 14,2) :   105.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1733 (15.4%), 9517 (84.6%) left; Finishing by Sat Oct 21  6:38:19 2000

(9,15,9) <- (1,0,9).*(9, 14+1,1): 32.344346 Mflop/s
(9,15,15) <- (1,1,15).*(9, 14+1,1): 32.288512 Mflop/s

Testing m0 = 9, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 9  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 32.344346
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 32.288512
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (9, 14,1) :    32.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1734 (15.4%), 9516 (84.6%) left; Finishing by Sat Oct 21  6:38:17 2000

(8,10,8) <- (4,2,2).*(2, 4+1,4): 39.195650 Mflop/s
(14,15,12) <- (7,3,3).*(2, 4+1,4): 35.636225 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 39.195650
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 35.636225
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 4,4) :    37.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1735 (15.4%), 9515 (84.6%) left; Finishing by Sat Oct 21  6:38:14 2000

(9,16,9) <- (9,0,1).*(1, 15+1,9): 126.751453 Mflop/s
(15,16,9) <- (15,1,1).*(1, 15+1,9): 128.103355 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 126.751453
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 9 15 16 16 9 15 9
<<< (M = 15, K = 16, N = 9) : 128.103355
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,9) :   127.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1736 (15.4%), 9514 (84.6%) left; Finishing by Sat Oct 21  6:38:06 2000

(9,16,9) <- (9,0,3).*(1, 15+1,3): 150.799176 Mflop/s
(15,16,15) <- (15,1,5).*(1, 15+1,3): 153.105447 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 150.799176
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 153.105447
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,3) :   151.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1737 (15.4%), 9513 (84.6%) left; Finishing by Sat Oct 21  6:38:04 2000

(13,10,9) <- (0,1,9).*(13, 9+1,1): 102.233676 Mflop/s
(13,10,15) <- (1,1,15).*(13, 9+1,1): 79.854286 Mflop/s

Testing m0 = 13, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 13  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 10 9 13 10 10 9 13 9
<<< (M = 13, K = 10, N = 9) : 102.233676
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 10 15 13 10 10 15 13 15
<<< (M = 13, K = 10, N = 15) : 79.854286
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (13, 9,1) :    89.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1738 (15.4%), 9512 (84.6%) left; Finishing by Sat Oct 21  6:38:02 2000

(9,12,9) <- (9,4,3).*(1, 2+1,3): 147.808657 Mflop/s
(15,21,15) <- (15,7,5).*(1, 2+1,3): 139.515253 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 147.808657
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 139.515253
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,3) :   143.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1739 (15.5%), 9511 (84.5%) left; Finishing by Sat Oct 21  6:38:06 2000

(9,9,12) <- (9,1,0).*(1, 8+1,12): 112.367635 Mflop/s
(15,9,12) <- (15,1,1).*(1, 8+1,12): 113.999602 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 12 9 9 9 12 9 12
<<< (M = 9, K = 9, N = 12) : 112.367635
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 113.999602
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,12) :   113.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1740 (15.5%), 9510 (84.5%) left; Finishing by Sat Oct 21  6:38:04 2000

(8,7,5) <- (4,1,1).*(2, 6+1,5): 29.518805 Mflop/s
(14,14,15) <- (7,2,3).*(2, 6+1,5): 33.352636 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  6 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 5 8 7 7 5 8 5
<<< (M = 8, K = 7, N = 5) : 29.518805
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 33.352636
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 6,5) :    31.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1741 (15.5%), 9509 (84.5%) left; Finishing by Sat Oct 21  6:38:02 2000

(9,7,10) <- (9,1,0).*(1, 6+1,10): 108.997994 Mflop/s
(15,14,10) <- (15,2,1).*(1, 6+1,10): 134.796109 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 10 9 7 7 10 9 10
<<< (M = 9, K = 7, N = 10) : 108.997994
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 10 15 14 14 10 15 10
<<< (M = 15, K = 14, N = 10) : 134.796109
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,10) :   120.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1742 (15.5%), 9508 (84.5%) left; Finishing by Sat Oct 21  6:37:59 2000

(8,16,9) <- (1,0,9).*(8, 15+1,1): 95.087237 Mflop/s
(8,16,15) <- (1,1,15).*(8, 15+1,1): 95.704970 Mflop/s

Testing m0 = 8, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 95.087237
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 15 8 16 16 15 8 15
<<< (M = 8, K = 16, N = 15) : 95.704970
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 15,1) :    95.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1743 (15.5%), 9507 (84.5%) left; Finishing by Sat Oct 21  6:37:57 2000

(5,10,9) <- (1,2,9).*(5, 4+1,1): 73.745897 Mflop/s
(15,15,15) <- (3,3,15).*(5, 4+1,1): 89.231487 Mflop/s

Testing m0 = 5, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 9 5 10 10 9 5 9
<<< (M = 5, K = 10, N = 9) : 73.745897
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 89.231487
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 4,1) :    80.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1744 (15.5%), 9506 (84.5%) left; Finishing by Sat Oct 21  6:37:55 2000

(9,12,6) <- (9,0,1).*(1, 11+1,6): 130.458633 Mflop/s
(15,12,12) <- (15,1,2).*(1, 11+1,6): 141.099306 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 6 9 12 12 6 9 6
<<< (M = 9, K = 12, N = 6) : 130.458633
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 141.099306
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,6) :   135.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1745 (15.5%), 9505 (84.5%) left; Finishing by Sat Oct 21  6:38:00 2000

(8,10,8) <- (2,2,2).*(4, 4+1,4): 70.607379 Mflop/s
(12,15,12) <- (3,3,3).*(4, 4+1,4): 141.409355 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 70.607379
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 12 12 15 15 12 12 12
<<< (M = 12, K = 15, N = 12) : 141.409355
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 4,4) :    94.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1746 (15.5%), 9504 (84.5%) left; Finishing by Sat Oct 21  6:38:04 2000

(8,15,8) <- (4,0,2).*(2, 14+1,4): 36.258036 Mflop/s
(14,15,12) <- (7,1,3).*(2, 14+1,4): 30.598992 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 36.258036
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 30.598992
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 14,4) :    33.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1747 (15.5%), 9503 (84.5%) left; Finishing by Sat Oct 21  6:38:02 2000

(8,8,8) <- (2,1,2).*(4, 7+1,4): 63.087409 Mflop/s
(12,16,12) <- (3,2,3).*(4, 7+1,4): 134.501141 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 63.087409
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 12 12 16 16 12 12 12
<<< (M = 12, K = 16, N = 12) : 134.501141
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 7,4) :    85.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1748 (15.5%), 9502 (84.5%) left; Finishing by Sat Oct 21  6:38:06 2000

(9,7,8) <- (3,1,4).*(3, 6+1,2): 111.202352 Mflop/s
(15,14,14) <- (5,2,7).*(3, 6+1,2): 136.181364 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 111.202352
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 136.181364
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 6,2) :   122.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1749 (15.5%), 9501 (84.5%) left; Finishing by Sat Oct 21  6:38:10 2000

(8,6,8) <- (4,1,1).*(2, 5+1,8): 26.467533 Mflop/s
(14,18,8) <- (7,3,1).*(2, 5+1,8): 33.390612 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  5 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 26.467533
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 8 14 18 18 8 14 8
<<< (M = 14, K = 18, N = 8) : 33.390612
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 5,8) :    29.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1750 (15.6%), 9500 (84.4%) left; Finishing by Sat Oct 21  6:38:08 2000

(8,10,5) <- (4,2,1).*(2, 4+1,5): 34.655455 Mflop/s
(14,15,15) <- (7,3,3).*(2, 4+1,5): 36.050999 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  4 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 5 8 10 10 5 8 5
<<< (M = 8, K = 10, N = 5) : 34.655455
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 36.050999
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 4,5) :    35.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1751 (15.6%), 9499 (84.4%) left; Finishing by Sat Oct 21  6:38:06 2000

(8,6,8) <- (4,1,4).*(2, 5+1,2): 103.814194 Mflop/s
(14,18,14) <- (7,3,7).*(2, 5+1,2): 71.636002 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 103.814194
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 14 14 18 18 14 14 14
<<< (M = 14, K = 18, N = 14) : 71.636002
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 5,2) :    84.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1752 (15.6%), 9498 (84.4%) left; Finishing by Sat Oct 21  6:38:10 2000

(7,10,8) <- (1,2,4).*(7, 4+1,2): 26.879515 Mflop/s
(14,15,14) <- (2,3,7).*(7, 4+1,2): 31.028920 Mflop/s

Testing m0 = 7, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 10 8 7 10 10 8 7 8
<<< (M = 7, K = 10, N = 8) : 26.879515
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 31.028920
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 4,2) :    28.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1753 (15.6%), 9497 (84.4%) left; Finishing by Sat Oct 21  6:38:15 2000

(9,8,13) <- (9,1,0).*(1, 7+1,13): 111.286894 Mflop/s
(15,16,13) <- (15,2,1).*(1, 7+1,13): 130.888953 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 13 9 8 8 13 9 13
<<< (M = 9, K = 8, N = 13) : 111.286894
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 13 15 16 16 13 15 13
<<< (M = 15, K = 16, N = 13) : 130.888953
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,13) :   120.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1754 (15.6%), 9496 (84.4%) left; Finishing by Sat Oct 21  6:38:19 2000

(8,7,7) <- (4,1,1).*(2, 6+1,7): 27.179718 Mflop/s
(14,14,14) <- (7,2,2).*(2, 6+1,7): 31.781032 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  6 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 7 8 7 7 7 8 7
<<< (M = 8, K = 7, N = 7) : 27.179718
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 31.781032
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 6,7) :    29.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1755 (15.6%), 9495 (84.4%) left; Finishing by Sat Oct 21  6:38:17 2000

(9,7,13) <- (9,1,0).*(1, 6+1,13): 107.764259 Mflop/s
(15,14,13) <- (15,2,1).*(1, 6+1,13): 129.073349 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 13 9 7 7 13 9 13
<<< (M = 9, K = 7, N = 13) : 107.764259
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 13 15 14 14 13 15 13
<<< (M = 15, K = 14, N = 13) : 129.073349
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,13) :   117.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1756 (15.6%), 9494 (84.4%) left; Finishing by Sat Oct 21  6:38:15 2000

(9,9,8) <- (3,1,4).*(3, 8+1,2): 121.010796 Mflop/s
(15,9,14) <- (5,1,7).*(3, 8+1,2): 122.137539 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 121.010796
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 122.137539
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 8,2) :   121.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1757 (15.6%), 9493 (84.4%) left; Finishing by Sat Oct 21  6:38:13 2000

(8,12,5) <- (4,0,1).*(2, 11+1,5): 31.583067 Mflop/s
(14,12,15) <- (7,1,3).*(2, 11+1,5): 30.932121 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  11 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 5 8 12 12 5 8 5
<<< (M = 8, K = 12, N = 5) : 31.583067
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 30.932121
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 11,5) :    31.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1758 (15.6%), 9492 (84.4%) left; Finishing by Sat Oct 21  6:38:11 2000

(6,9,8) <- (1,1,4).*(6, 8+1,2): 108.725795 Mflop/s
(12,9,14) <- (2,1,7).*(6, 8+1,2): 109.173124 Mflop/s

Testing m0 = 6, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 8 6 9 9 8 6 8
<<< (M = 6, K = 9, N = 8) : 108.725795
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 14 12 9 9 14 12 14
<<< (M = 12, K = 9, N = 14) : 109.173124
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 8,2) :   108.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1759 (15.6%), 9491 (84.4%) left; Finishing by Sat Oct 21  6:38:15 2000

(5,8,9) <- (1,1,9).*(5, 7+1,1): 61.129635 Mflop/s
(15,16,15) <- (3,2,15).*(5, 7+1,1): 83.789546 Mflop/s

Testing m0 = 5, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 61.129635
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 83.789546
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 7,1) :    70.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1760 (15.6%), 9490 (84.4%) left; Finishing by Sat Oct 21  6:38:06 2000

(16,6,9) <- (0,1,9).*(16, 5+1,1): 24.811865 Mflop/s
(16,18,15) <- (0,3,15).*(16, 5+1,1): 32.135012 Mflop/s

Testing m0 = 16, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 16  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 6 9 16 6 6 9 16 9
<<< (M = 16, K = 6, N = 9) : 24.811865
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 18 15 16 18 18 15 16 15
<<< (M = 16, K = 18, N = 15) : 32.135012
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (16, 5,1) :    28.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1761 (15.7%), 9489 (84.3%) left; Finishing by Sat Oct 21  6:38:04 2000

(8,8,9) <- (4,1,9).*(2, 7+1,1): 139.089938 Mflop/s
(14,16,15) <- (7,2,15).*(2, 7+1,1): 193.348673 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 139.089938
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 193.348673
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 7,1) :   161.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1762 (15.7%), 9488 (84.3%) left; Finishing by Sat Oct 21  6:38:08 2000

(8,12,7) <- (4,0,1).*(2, 11+1,7): 29.663325 Mflop/s
(14,12,14) <- (7,1,2).*(2, 11+1,7): 29.815850 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  11 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 7 8 12 12 7 8 7
<<< (M = 8, K = 12, N = 7) : 29.663325
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 29.815850
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 11,7) :    29.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1763 (15.7%), 9487 (84.3%) left; Finishing by Sat Oct 21  6:38:06 2000

(8,13,9) <- (2,0,3).*(4, 12+1,3): 28.600214 Mflop/s
(12,13,15) <- (3,1,5).*(4, 12+1,3): 30.054219 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 28.600214
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 30.054219
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 12,3) :    29.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1764 (15.7%), 9486 (84.3%) left; Finishing by Sat Oct 21  6:38:04 2000

(9,13,5) <- (9,0,1).*(1, 12+1,5): 135.296455 Mflop/s
(15,13,15) <- (15,1,3).*(1, 12+1,5): 140.741716 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 5 9 13 13 5 9 5
<<< (M = 9, K = 13, N = 5) : 135.296455
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 140.741716
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,5) :   138.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1765 (15.7%), 9485 (84.3%) left; Finishing by Sat Oct 21  6:38:09 2000

(8,15,8) <- (4,0,4).*(2, 14+1,2): 140.691932 Mflop/s
(14,15,14) <- (7,1,7).*(2, 14+1,2): 74.831505 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 140.691932
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 74.831505
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 14,2) :    97.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1766 (15.7%), 9484 (84.3%) left; Finishing by Sat Oct 21  6:38:13 2000

(9,10,5) <- (3,1,1).*(3, 9+1,5): 114.355547 Mflop/s
(15,10,15) <- (5,1,3).*(3, 9+1,5): 122.854993 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  9 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 5 9 10 10 5 9 5
<<< (M = 9, K = 10, N = 5) : 114.355547
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 122.854993
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 9,5) :   118.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1767 (15.7%), 9483 (84.3%) left; Finishing by Sat Oct 21  6:38:17 2000

(9,18,9) <- (3,9,9).*(3,1+1,1): 115.038986 Mflop/s
(15,30,15) <- (5,15,15).*(3,1+1,1): 123.942652 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 9 9 18 18 9 9 9
<<< (M = 9, K = 18, N = 9) : 115.038986
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 123.942652
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3,1,1) :   119.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1768 (15.7%), 9482 (84.3%) left; Finishing by Sat Oct 21  6:38:15 2000

(14,11,9) <- (0,0,9).*(14, 10+1,1): 27.276847 Mflop/s
(14,11,15) <- (1,1,15).*(14, 10+1,1): 29.136863 Mflop/s

Testing m0 = 14, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 14  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 9 14 11 11 9 14 9
<<< (M = 14, K = 11, N = 9) : 27.276847
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 29.136863
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (14, 10,1) :    28.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1769 (15.7%), 9481 (84.3%) left; Finishing by Sat Oct 21  6:38:13 2000

(9,15,13) <- (9,0,0).*(1, 14+1,13): 125.286378 Mflop/s
(15,15,13) <- (15,1,1).*(1, 14+1,13): 124.421272 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 13 9 15 15 13 9 13
<<< (M = 9, K = 15, N = 13) : 125.286378
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 13 15 15 15 13 15 13
<<< (M = 15, K = 15, N = 13) : 124.421272
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,13) :   124.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1770 (15.7%), 9480 (84.3%) left; Finishing by Sat Oct 21  6:38:11 2000

(9,10,9) <- (9,2,1).*(1, 4+1,9): 128.839996 Mflop/s
(15,15,9) <- (15,3,1).*(1, 4+1,9): 144.343196 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 128.839996
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 144.343196
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,9) :   136.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1771 (15.7%), 9479 (84.3%) left; Finishing by Sat Oct 21  6:38:09 2000

(8,13,8) <- (2,0,4).*(4, 12+1,2): 30.113925 Mflop/s
(12,13,14) <- (3,1,7).*(4, 12+1,2): 32.788776 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 30.113925
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 14 12 13 13 14 12 14
<<< (M = 12, K = 13, N = 14) : 32.788776
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 12,2) :    31.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1772 (15.8%), 9478 (84.2%) left; Finishing by Sat Oct 21  6:38:07 2000

(11,7,9) <- (0,1,9).*(11, 6+1,1): 77.118538 Mflop/s
(11,14,15) <- (1,2,15).*(11, 6+1,1): 115.771146 Mflop/s

Testing m0 = 11, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 11  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 7 9 11 7 7 9 11 9
<<< (M = 11, K = 7, N = 9) : 77.118538
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 15 11 14 14 15 11 15
<<< (M = 11, K = 14, N = 15) : 115.771146
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (11, 6,1) :    92.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1773 (15.8%), 9477 (84.2%) left; Finishing by Sat Oct 21  6:37:58 2000

(9,10,9) <- (9,2,9).*(1, 4+1,1): 140.954680 Mflop/s
(15,15,15) <- (15,3,15).*(1, 4+1,1): 161.792176 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 140.954680
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 161.792176
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,1) :   150.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1774 (15.8%), 9476 (84.2%) left; Finishing by Sat Oct 21  6:37:56 2000

(9,16,15) <- (9,0,0).*(1, 15+1,15): 130.100085 Mflop/s
(15,16,15) <- (15,1,1).*(1, 15+1,15): 129.830243 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 15 9 16 16 15 9 15
<<< (M = 9, K = 16, N = 15) : 130.100085
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 129.830243
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,15) :   130.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1775 (15.8%), 9475 (84.2%) left; Finishing by Sat Oct 21  6:37:54 2000

(9,12,5) <- (3,0,1).*(3, 11+1,5): 118.807492 Mflop/s
(15,12,15) <- (5,1,3).*(3, 11+1,5): 126.006854 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  11 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 118.807492
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 126.006854
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 11,5) :   122.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1776 (15.8%), 9474 (84.2%) left; Finishing by Sat Oct 21  6:37:58 2000

(8,11,6) <- (4,0,1).*(2, 10+1,6): 30.806031 Mflop/s
(14,11,12) <- (7,1,2).*(2, 10+1,6): 27.397037 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  10 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 6 8 11 11 6 8 6
<<< (M = 8, K = 11, N = 6) : 30.806031
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 12 14 11 11 12 14 12
<<< (M = 14, K = 11, N = 12) : 27.397037
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 10,6) :    29.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1777 (15.8%), 9473 (84.2%) left; Finishing by Sat Oct 21  6:38:02 2000

(9,14,8) <- (9,0,2).*(1, 13+1,4): 148.728146 Mflop/s
(15,14,12) <- (15,1,3).*(1, 13+1,4): 150.887531 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 148.728146
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 150.887531
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,4) :   149.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1778 (15.8%), 9472 (84.2%) left; Finishing by Sat Oct 21  6:38:00 2000

(9,14,5) <- (9,0,1).*(1, 13+1,5): 130.543075 Mflop/s
(15,14,15) <- (15,1,3).*(1, 13+1,5): 141.360599 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 5 9 14 14 5 9 5
<<< (M = 9, K = 14, N = 5) : 130.543075
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 141.360599
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,5) :   135.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1779 (15.8%), 9471 (84.2%) left; Finishing by Sat Oct 21  6:37:58 2000

(9,10,8) <- (9,2,2).*(1, 4+1,4): 153.660605 Mflop/s
(15,15,12) <- (15,3,3).*(1, 4+1,4): 172.048318 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 153.660605
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 172.048318
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,4) :   162.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1780 (15.8%), 9470 (84.2%) left; Finishing by Sat Oct 21  6:38:02 2000

(9,12,9) <- (3,0,9).*(3, 11+1,1): 167.731845 Mflop/s
(15,12,15) <- (5,1,15).*(3, 11+1,1): 171.929808 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 167.731845
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 171.929808
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 11,1) :   169.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1781 (15.8%), 9469 (84.2%) left; Finishing by Sat Oct 21  6:37:54 2000

(8,8,8) <- (2,1,4).*(4, 7+1,2): 28.387777 Mflop/s
(12,16,14) <- (3,2,7).*(4, 7+1,2): 34.849318 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 28.387777
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 14 12 16 16 14 12 14
<<< (M = 12, K = 16, N = 14) : 34.849318
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 7,2) :    31.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1782 (15.8%), 9468 (84.2%) left; Finishing by Sat Oct 21  6:37:52 2000

(16,15,9) <- (0,0,9).*(16, 14+1,1): 28.244403 Mflop/s
(16,15,15) <- (0,1,15).*(16, 14+1,1): 27.878269 Mflop/s

Testing m0 = 16, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 16  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 9 16 15 15 9 16 9
<<< (M = 16, K = 15, N = 9) : 28.244403
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 15 16 15 15 15 16 15
<<< (M = 16, K = 15, N = 15) : 27.878269
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (16, 14,1) :    28.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1783 (15.8%), 9467 (84.2%) left; Finishing by Sat Oct 21  6:37:56 2000

(14,10,9) <- (0,2,9).*(14, 4+1,1): 30.471831 Mflop/s
(14,15,15) <- (1,3,15).*(14, 4+1,1): 34.476435 Mflop/s

Testing m0 = 14, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 14  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 9 14 10 10 9 14 9
<<< (M = 14, K = 10, N = 9) : 30.471831
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 34.476435
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (14, 4,1) :    32.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1784 (15.9%), 9466 (84.1%) left; Finishing by Sat Oct 21  6:37:54 2000

(9,14,9) <- (9,0,1).*(1, 13+1,9): 119.954245 Mflop/s
(15,14,9) <- (15,1,1).*(1, 13+1,9): 121.284641 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 119.954245
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 121.284641
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,9) :   120.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1785 (15.9%), 9465 (84.1%) left; Finishing by Sat Oct 21  6:37:52 2000

(9,9,9) <- (1,1,9).*(9, 8+1,1): 33.381344 Mflop/s
(9,9,15) <- (1,1,15).*(9, 8+1,1): 33.517198 Mflop/s

Testing m0 = 9, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 9  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 33.381344
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 15 9 9 9 15 9 15
<<< (M = 9, K = 9, N = 15) : 33.517198
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (9, 8,1) :    33.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1786 (15.9%), 9464 (84.1%) left; Finishing by Sat Oct 21  6:37:50 2000

(7,12,8) <- (1,0,4).*(7, 11+1,2): 24.682575 Mflop/s
(14,12,14) <- (2,1,7).*(7, 11+1,2): 26.942288 Mflop/s

Testing m0 = 7, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 8 7 12 12 8 7 8
<<< (M = 7, K = 12, N = 8) : 24.682575
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 26.942288
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 11,2) :    25.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1787 (15.9%), 9463 (84.1%) left; Finishing by Sat Oct 21  6:37:54 2000

(9,12,9) <- (1,3,9).*(9, 3+1,1): 125.896938 Mflop/s
(9,20,15) <- (1,5,15).*(9, 3+1,1): 115.626320 Mflop/s

Testing m0 = 9, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 9  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 125.896938
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 20 15 9 20 20 15 9 15
<<< (M = 9, K = 20, N = 15) : 115.626320
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (9, 3,1) :   120.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1788 (15.9%), 9462 (84.1%) left; Finishing by Sat Oct 21  6:37:52 2000

(11,13,9) <- (0,0,9).*(11, 12+1,1): 29.911987 Mflop/s
(11,13,15) <- (1,1,15).*(11, 12+1,1): 26.710717 Mflop/s

Testing m0 = 11, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 11  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 13 9 11 13 13 9 11 9
<<< (M = 11, K = 13, N = 9) : 29.911987
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 13 15 11 13 13 15 11 15
<<< (M = 11, K = 13, N = 15) : 26.710717
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (11, 12,1) :    28.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1789 (15.9%), 9461 (84.1%) left; Finishing by Sat Oct 21  6:37:50 2000

(9,15,10) <- (9,0,0).*(1, 14+1,10): 124.776502 Mflop/s
(15,15,10) <- (15,1,1).*(1, 14+1,10): 127.803640 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 10 9 15 15 10 9 10
<<< (M = 9, K = 15, N = 10) : 124.776502
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 10 15 15 15 10 15 10
<<< (M = 15, K = 15, N = 10) : 127.803640
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,10) :   126.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1790 (15.9%), 9460 (84.1%) left; Finishing by Sat Oct 21  6:37:54 2000

(9,6,9) <- (9,1,1).*(1, 5+1,9): 103.960497 Mflop/s
(15,18,9) <- (15,3,1).*(1, 5+1,9): 141.817231 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 103.960497
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 9 15 18 18 9 15 9
<<< (M = 15, K = 18, N = 9) : 141.817231
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,9) :   120.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1791 (15.9%), 9459 (84.1%) left; Finishing by Sat Oct 21  6:37:52 2000

(9,11,8) <- (9,0,2).*(1, 10+1,4): 142.109087 Mflop/s
(15,11,12) <- (15,1,3).*(1, 10+1,4): 147.883688 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 142.109087
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 147.883688
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,4) :   144.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1792 (15.9%), 9458 (84.1%) left; Finishing by Sat Oct 21  6:37:56 2000

(6,8,8) <- (1,1,4).*(6, 7+1,2): 104.625399 Mflop/s
(12,16,14) <- (2,2,7).*(6, 7+1,2): 88.680366 Mflop/s

Testing m0 = 6, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 8 6 8 8 8 6 8
<<< (M = 6, K = 8, N = 8) : 104.625399
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 14 12 16 16 14 12 14
<<< (M = 12, K = 16, N = 14) : 88.680366
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 7,2) :    96.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1793 (15.9%), 9457 (84.1%) left; Finishing by Sat Oct 21  6:38:01 2000

(9,16,12) <- (9,0,0).*(1, 15+1,12): 124.311708 Mflop/s
(15,16,12) <- (15,1,1).*(1, 15+1,12): 124.248277 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 12 9 16 16 12 9 12
<<< (M = 9, K = 16, N = 12) : 124.311708
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 124.248277
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,12) :   124.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1794 (15.9%), 9456 (84.1%) left; Finishing by Sat Oct 21  6:38:05 2000

(9,10,9) <- (3,2,3).*(3, 4+1,3): 123.188554 Mflop/s
(15,15,15) <- (5,3,5).*(3, 4+1,3): 137.004190 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 123.188554
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 137.004190
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 4,3) :   129.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1795 (16.0%), 9455 (84.0%) left; Finishing by Sat Oct 21  6:38:03 2000

(9,7,9) <- (3,1,3).*(3, 6+1,3): 105.695364 Mflop/s
(15,14,15) <- (5,2,5).*(3, 6+1,3): 130.753122 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 105.695364
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 130.753122
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 6,3) :   116.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1796 (16.0%), 9454 (84.0%) left; Finishing by Sat Oct 21  6:38:07 2000

(8,11,8) <- (4,0,4).*(2, 10+1,2): 133.214392 Mflop/s
(14,11,14) <- (7,1,7).*(2, 10+1,2): 72.547335 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 133.214392
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 14 14 11 11 14 14 14
<<< (M = 14, K = 11, N = 14) : 72.547335
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 10,2) :    93.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1797 (16.0%), 9453 (84.0%) left; Finishing by Sat Oct 21  6:38:05 2000

(5,11,8) <- (1,0,4).*(5, 10+1,2): 30.346023 Mflop/s
(15,11,14) <- (3,1,7).*(5, 10+1,2): 31.555482 Mflop/s

Testing m0 = 5, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 11 8 5 11 11 8 5 8
<<< (M = 5, K = 11, N = 8) : 30.346023
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 31.555482
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 10,2) :    30.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1798 (16.0%), 9452 (84.0%) left; Finishing by Sat Oct 21  6:38:03 2000

(9,9,5) <- (3,1,1).*(3, 8+1,5): 113.644918 Mflop/s
(15,9,15) <- (5,1,3).*(3, 8+1,5): 118.785057 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  8 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 113.644918
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 118.785057
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 8,5) :   116.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1799 (16.0%), 9451 (84.0%) left; Finishing by Sat Oct 21  6:38:07 2000

(6,11,9) <- (1,0,9).*(6, 10+1,1): 109.741272 Mflop/s
(12,11,15) <- (2,1,15).*(6, 10+1,1): 114.263956 Mflop/s

Testing m0 = 6, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 11 9 6 11 11 9 6 9
<<< (M = 6, K = 11, N = 9) : 109.741272
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 114.263956
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 10,1) :   112.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1800 (16.0%), 9450 (84.0%) left; Finishing by Sat Oct 21  6:38:05 2000

(9,16,11) <- (9,0,0).*(1, 15+1,11): 123.896179 Mflop/s
(15,16,11) <- (15,1,1).*(1, 15+1,11): 124.597130 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 11 9 16 16 11 9 11
<<< (M = 9, K = 16, N = 11) : 123.896179
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 11 15 16 16 11 15 11
<<< (M = 15, K = 16, N = 11) : 124.597130
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,11) :   124.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1801 (16.0%), 9449 (84.0%) left; Finishing by Sat Oct 21  6:38:03 2000

(5,10,9) <- (1,2,3).*(5, 4+1,3): 31.241113 Mflop/s
(15,15,15) <- (3,3,5).*(5, 4+1,3): 34.462080 Mflop/s

Testing m0 = 5, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 9 5 10 10 9 5 9
<<< (M = 5, K = 10, N = 9) : 31.241113
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 34.462080
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 4,3) :    32.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1802 (16.0%), 9448 (84.0%) left; Finishing by Sat Oct 21  6:38:01 2000

(9,12,5) <- (3,3,1).*(3, 3+1,5): 33.332678 Mflop/s
(15,20,15) <- (5,5,3).*(3, 3+1,5): 31.462230 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  3 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 33.332678
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 31.462230
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 3,5) :    32.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1803 (16.0%), 9447 (84.0%) left; Finishing by Sat Oct 21  6:37:59 2000

(6,10,9) <- (1,1,9).*(6, 9+1,1): 106.249110 Mflop/s
(12,10,15) <- (2,1,15).*(6, 9+1,1): 109.193896 Mflop/s

Testing m0 = 6, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 10 9 6 10 10 9 6 9
<<< (M = 6, K = 10, N = 9) : 106.249110
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 109.193896
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 9,1) :   107.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1804 (16.0%), 9446 (84.0%) left; Finishing by Sat Oct 21  6:38:03 2000

(8,14,8) <- (4,0,2).*(2, 13+1,4): 36.075324 Mflop/s
(14,14,12) <- (7,1,3).*(2, 13+1,4): 30.956343 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 36.075324
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 30.956343
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 13,4) :    33.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1805 (16.0%), 9445 (84.0%) left; Finishing by Sat Oct 21  6:38:01 2000

(14,9,9) <- (0,1,9).*(14, 8+1,1): 26.608819 Mflop/s
(14,9,15) <- (1,1,15).*(14, 8+1,1): 26.739976 Mflop/s

Testing m0 = 14, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 14  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 9 14 9 9 9 14 9
<<< (M = 14, K = 9, N = 9) : 26.608819
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 26.739976
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (14, 8,1) :    26.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1806 (16.1%), 9444 (83.9%) left; Finishing by Sat Oct 21  6:37:59 2000

(14,15,9) <- (0,0,9).*(14, 14+1,1): 106.182952 Mflop/s
(14,15,15) <- (1,1,15).*(14, 14+1,1): 106.363059 Mflop/s

Testing m0 = 14, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 14  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 9 14 15 15 9 14 9
<<< (M = 14, K = 15, N = 9) : 106.182952
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 106.363059
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (14, 14,1) :   106.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1807 (16.1%), 9443 (83.9%) left; Finishing by Sat Oct 21  6:38:03 2000

(9,12,10) <- (9,0,0).*(1, 11+1,10): 122.915930 Mflop/s
(15,12,10) <- (15,1,1).*(1, 11+1,10): 121.793230 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 10 9 12 12 10 9 10
<<< (M = 9, K = 12, N = 10) : 122.915930
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 10 15 12 12 10 15 10
<<< (M = 15, K = 12, N = 10) : 121.793230
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,10) :   122.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1808 (16.1%), 9442 (83.9%) left; Finishing by Sat Oct 21  6:38:01 2000

(11,9,9) <- (0,1,9).*(11, 8+1,1): 85.304658 Mflop/s
(11,9,15) <- (1,1,15).*(11, 8+1,1): 85.909349 Mflop/s

Testing m0 = 11, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 11  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 9 9 11 9 9 9 11 9
<<< (M = 11, K = 9, N = 9) : 85.304658
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 9 15 11 9 9 15 11 15
<<< (M = 11, K = 9, N = 15) : 85.909349
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (11, 8,1) :    85.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1809 (16.1%), 9441 (83.9%) left; Finishing by Sat Oct 21  6:37:53 2000

(6,14,9) <- (1,0,9).*(6, 13+1,1): 118.795227 Mflop/s
(12,14,15) <- (2,1,15).*(6, 13+1,1): 122.780200 Mflop/s

Testing m0 = 6, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 14 9 6 14 14 9 6 9
<<< (M = 6, K = 14, N = 9) : 118.795227
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 122.780200
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 13,1) :   120.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1810 (16.1%), 9440 (83.9%) left; Finishing by Sat Oct 21  6:38:03 2000

(5,15,9) <- (1,0,3).*(5, 14+1,3): 29.467547 Mflop/s
(15,15,15) <- (3,1,5).*(5, 14+1,3): 29.911513 Mflop/s

Testing m0 = 5, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 9 5 15 15 9 5 9
<<< (M = 5, K = 15, N = 9) : 29.467547
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 29.911513
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 14,3) :    29.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1811 (16.1%), 9439 (83.9%) left; Finishing by Sat Oct 21  6:38:01 2000

(9,10,5) <- (3,2,1).*(3, 4+1,5): 126.264836 Mflop/s
(15,15,15) <- (5,3,3).*(3, 4+1,5): 145.753183 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  4 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 5 9 10 10 5 9 5
<<< (M = 9, K = 10, N = 5) : 126.264836
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 145.753183
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 4,5) :   135.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1812 (16.1%), 9438 (83.9%) left; Finishing by Sat Oct 21  6:38:05 2000

(9,8,9) <- (9,1,3).*(1, 7+1,3): 128.754240 Mflop/s
(15,16,15) <- (15,2,5).*(1, 7+1,3): 161.381602 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 128.754240
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 161.381602
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,3) :   143.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1813 (16.1%), 9437 (83.9%) left; Finishing by Sat Oct 21  6:38:09 2000

(7,13,8) <- (1,0,4).*(7, 12+1,2): 24.837506 Mflop/s
(14,13,14) <- (2,1,7).*(7, 12+1,2): 27.143329 Mflop/s

Testing m0 = 7, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 13 8 7 13 13 8 7 8
<<< (M = 7, K = 13, N = 8) : 24.837506
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 14 14 13 13 14 14 14
<<< (M = 14, K = 13, N = 14) : 27.143329
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 12,2) :    25.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1814 (16.1%), 9436 (83.9%) left; Finishing by Sat Oct 21  6:38:07 2000

(8,15,9) <- (2,0,3).*(4, 14+1,3): 29.853626 Mflop/s
(12,15,15) <- (3,1,5).*(4, 14+1,3): 30.207393 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 29.853626
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 30.207393
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 14,3) :    30.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1815 (16.1%), 9435 (83.9%) left; Finishing by Sat Oct 21  6:38:05 2000

(8,13,8) <- (1,0,4).*(8, 12+1,2): 104.506114 Mflop/s
(8,13,14) <- (1,1,7).*(8, 12+1,2): 105.243421 Mflop/s

Testing m0 = 8, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 104.506114
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 14 8 13 13 14 8 14
<<< (M = 8, K = 13, N = 14) : 105.243421
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 12,2) :   104.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1816 (16.1%), 9434 (83.9%) left; Finishing by Sat Oct 21  6:38:09 2000

(9,12,8) <- (3,4,4).*(3, 2+1,2): 127.438265 Mflop/s
(15,21,14) <- (5,7,7).*(3, 2+1,2): 129.764335 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 127.438265
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 14 15 21 21 14 15 14
<<< (M = 15, K = 21, N = 14) : 129.764335
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 2,2) :   128.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1817 (16.2%), 9433 (83.8%) left; Finishing by Sat Oct 21  6:38:01 2000

(9,16,6) <- (9,0,1).*(1, 15+1,6): 136.835764 Mflop/s
(15,16,12) <- (15,1,2).*(1, 15+1,6): 143.809042 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 6 9 16 16 6 9 6
<<< (M = 9, K = 16, N = 6) : 136.835764
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 143.809042
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,6) :   140.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1818 (16.2%), 9432 (83.8%) left; Finishing by Sat Oct 21  6:38:05 2000

(9,16,9) <- (3,0,3).*(3, 15+1,3): 126.679425 Mflop/s
(15,16,15) <- (5,1,5).*(3, 15+1,3): 128.246440 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 126.679425
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 128.246440
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 15,3) :   127.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1819 (16.2%), 9431 (83.8%) left; Finishing by Sat Oct 21  6:38:03 2000

(9,6,8) <- (3,1,4).*(3, 5+1,2): 106.299959 Mflop/s
(15,18,14) <- (5,3,7).*(3, 5+1,2): 152.709781 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 106.299959
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 152.709781
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 5,2) :   125.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1820 (16.2%), 9430 (83.8%) left; Finishing by Sat Oct 21  6:38:07 2000

(9,12,16) <- (9,4,0).*(1, 2+1,16): 132.177594 Mflop/s
(15,21,16) <- (15,7,0).*(1, 2+1,16): 126.244539 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 16 9 12 12 16 9 16
<<< (M = 9, K = 12, N = 16) : 132.177594
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 16 15 21 21 16 15 16
<<< (M = 15, K = 21, N = 16) : 126.244539
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,16) :   129.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (3, 15,1) :   187.2 MFLOPS.
Done 1821 (16.2%), 9429 (83.8%) left; Finishing by Sat Oct 21  6:38:05 2000

(8,15,9) <- (2,0,9).*(4, 14+1,1): 188.409367 Mflop/s
(12,15,15) <- (3,1,15).*(4, 14+1,1): 190.152703 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 188.409367
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 190.152703
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 14,1) :   189.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1822 (16.2%), 9428 (83.8%) left; Finishing by Sat Oct 21  6:37:57 2000

(9,11,5) <- (3,0,1).*(3, 10+1,5): 118.131545 Mflop/s
(15,11,15) <- (5,1,3).*(3, 10+1,5): 124.687561 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  10 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 5 9 11 11 5 9 5
<<< (M = 9, K = 11, N = 5) : 118.131545
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 124.687561
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 10,5) :   121.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1823 (16.2%), 9427 (83.8%) left; Finishing by Sat Oct 21  6:37:55 2000

(9,10,9) <- (9,1,1).*(1, 9+1,9): 116.056245 Mflop/s
(15,10,9) <- (15,1,1).*(1, 9+1,9): 117.059253 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 116.056245
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 9 15 10 10 9 15 9
<<< (M = 15, K = 10, N = 9) : 117.059253
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,9) :   116.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1824 (16.2%), 9426 (83.8%) left; Finishing by Sat Oct 21  6:37:53 2000

(13,18,9) <- (0,9,9).*(13,1+1,1): 86.250563 Mflop/s
(13,30,15) <- (1,15,15).*(13,1+1,1): 82.806923 Mflop/s

Testing m0 = 13, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 13 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 18 9 13 18 18 9 13 9
<<< (M = 13, K = 18, N = 9) : 86.250563
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 30 15 13 30 30 15 13 15
<<< (M = 13, K = 30, N = 15) : 82.806923
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (13,1,1) :    84.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1825 (16.2%), 9425 (83.8%) left; Finishing by Sat Oct 21  6:37:51 2000

(10,14,9) <- (0,0,9).*(10, 13+1,1): 103.996654 Mflop/s
(10,14,15) <- (1,1,15).*(10, 13+1,1): 105.474743 Mflop/s

Testing m0 = 10, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 10  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 9 10 14 14 9 10 9
<<< (M = 10, K = 14, N = 9) : 103.996654
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 15 10 14 14 15 10 15
<<< (M = 10, K = 14, N = 15) : 105.474743
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (10, 13,1) :   104.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1826 (16.2%), 9424 (83.8%) left; Finishing by Sat Oct 21  6:37:49 2000

(8,14,9) <- (1,0,9).*(8, 13+1,1): 91.735327 Mflop/s
(8,14,15) <- (1,1,15).*(8, 13+1,1): 92.102135 Mflop/s

Testing m0 = 8, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 91.735327
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 15 8 14 14 15 8 15
<<< (M = 8, K = 14, N = 15) : 92.102135
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 13,1) :    91.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1827 (16.2%), 9423 (83.8%) left; Finishing by Sat Oct 21  6:37:47 2000

(9,13,11) <- (9,0,0).*(1, 12+1,11): 120.483687 Mflop/s
(15,13,11) <- (15,1,1).*(1, 12+1,11): 120.913928 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 11 9 13 13 11 9 11
<<< (M = 9, K = 13, N = 11) : 120.483687
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 11 15 13 13 11 15 11
<<< (M = 15, K = 13, N = 11) : 120.913928
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,11) :   120.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1828 (16.2%), 9422 (83.8%) left; Finishing by Sat Oct 21  6:37:45 2000

(9,7,8) <- (9,1,2).*(1, 6+1,4): 129.964374 Mflop/s
(15,14,12) <- (15,2,3).*(1, 6+1,4): 160.486010 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 129.964374
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 160.486010
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,4) :   143.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1829 (16.3%), 9421 (83.7%) left; Finishing by Sat Oct 21  6:37:49 2000

(9,14,13) <- (9,0,0).*(1, 13+1,13): 120.648024 Mflop/s
(15,14,13) <- (15,1,1).*(1, 13+1,13): 122.156639 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 13 9 14 14 13 9 13
<<< (M = 9, K = 14, N = 13) : 120.648024
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 13 15 14 14 13 15 13
<<< (M = 15, K = 14, N = 13) : 122.156639
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,13) :   121.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1830 (16.3%), 9420 (83.7%) left; Finishing by Sat Oct 21  6:37:47 2000

(11,18,9) <- (0,9,9).*(11,1+1,1): 80.649666 Mflop/s
(11,30,15) <- (1,15,15).*(11,1+1,1): 89.737027 Mflop/s

Testing m0 = 11, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 11 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 18 9 11 18 18 9 11 9
<<< (M = 11, K = 18, N = 9) : 80.649666
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 30 15 11 30 30 15 11 15
<<< (M = 11, K = 30, N = 15) : 89.737027
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (11,1,1) :    85.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1831 (16.3%), 9419 (83.7%) left; Finishing by Sat Oct 21  6:37:39 2000

(9,14,5) <- (3,0,1).*(3, 13+1,5): 120.186684 Mflop/s
(15,14,15) <- (5,1,3).*(3, 13+1,5): 127.975744 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  13 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 5 9 14 14 5 9 5
<<< (M = 9, K = 14, N = 5) : 120.186684
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 127.975744
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 13,5) :   124.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1832 (16.3%), 9418 (83.7%) left; Finishing by Sat Oct 21  6:37:49 2000

(9,11,15) <- (9,0,0).*(1, 10+1,15): 123.346292 Mflop/s
(15,11,15) <- (15,1,1).*(1, 10+1,15): 124.279501 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 15 9 11 11 15 9 15
<<< (M = 9, K = 11, N = 15) : 123.346292
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 124.279501
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,15) :   123.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1833 (16.3%), 9417 (83.7%) left; Finishing by Sat Oct 21  6:37:47 2000

(9,12,8) <- (9,4,2).*(1, 2+1,4): 155.815635 Mflop/s
(15,21,12) <- (15,7,3).*(1, 2+1,4): 144.261856 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 155.815635
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 12 15 21 21 12 15 12
<<< (M = 15, K = 21, N = 12) : 144.261856
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,4) :   149.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1834 (16.3%), 9416 (83.7%) left; Finishing by Sat Oct 21  6:37:45 2000

(8,13,9) <- (2,0,9).*(4, 12+1,1): 172.801571 Mflop/s
(12,13,15) <- (3,1,15).*(4, 12+1,1): 179.254343 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 172.801571
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 179.254343
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 12,1) :   176.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1835 (16.3%), 9415 (83.7%) left; Finishing by Sat Oct 21  6:37:49 2000

(8,12,9) <- (2,0,3).*(4, 11+1,3): 28.451368 Mflop/s
(12,12,15) <- (3,1,5).*(4, 11+1,3): 29.755304 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 28.451368
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 29.755304
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 11,3) :    29.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1836 (16.3%), 9414 (83.7%) left; Finishing by Sat Oct 21  6:37:47 2000

(9,12,6) <- (9,4,1).*(1, 2+1,6): 135.296557 Mflop/s
(15,21,12) <- (15,7,2).*(1, 2+1,6): 131.879670 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 6 9 12 12 6 9 6
<<< (M = 9, K = 12, N = 6) : 135.296557
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 12 15 21 21 12 15 12
<<< (M = 15, K = 21, N = 12) : 131.879670
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,6) :   133.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1837 (16.3%), 9413 (83.7%) left; Finishing by Sat Oct 21  6:37:51 2000

(14,8,9) <- (0,1,9).*(14, 7+1,1): 26.303575 Mflop/s
(14,16,15) <- (1,2,15).*(14, 7+1,1): 31.935961 Mflop/s

Testing m0 = 14, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 14  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 9 14 8 8 9 14 9
<<< (M = 14, K = 8, N = 9) : 26.303575
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 31.935961
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (14, 7,1) :    28.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1838 (16.3%), 9412 (83.7%) left; Finishing by Sat Oct 21  6:37:49 2000

(9,12,9) <- (3,3,3).*(3, 3+1,3): 131.670866 Mflop/s
(15,20,15) <- (5,5,5).*(3, 3+1,3): 125.881893 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 131.670866
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 125.881893
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 3,3) :   128.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1839 (16.3%), 9411 (83.7%) left; Finishing by Sat Oct 21  6:37:47 2000

(6,14,8) <- (1,0,4).*(6, 13+1,2): 117.011701 Mflop/s
(12,14,14) <- (2,1,7).*(6, 13+1,2): 81.597942 Mflop/s

Testing m0 = 6, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 14 8 6 14 14 8 6 8
<<< (M = 6, K = 14, N = 8) : 117.011701
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 81.597942
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 13,2) :    96.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1840 (16.4%), 9410 (83.6%) left; Finishing by Sat Oct 21  6:37:45 2000

(9,12,15) <- (9,3,0).*(1, 3+1,15): 146.066989 Mflop/s
(15,20,15) <- (15,5,1).*(1, 3+1,15): 132.936145 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 146.066989
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 132.936145
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,15) :   139.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1841 (16.4%), 9409 (83.6%) left; Finishing by Sat Oct 21  6:37:43 2000

(9,15,8) <- (9,0,4).*(1, 14+1,2): 146.900668 Mflop/s
(15,15,14) <- (15,1,7).*(1, 14+1,2): 146.825825 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 146.900668
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 146.825825
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,2) :   146.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1842 (16.4%), 9408 (83.6%) left; Finishing by Sat Oct 21  6:37:48 2000

(8,10,8) <- (2,1,4).*(4, 9+1,2): 29.506578 Mflop/s
(12,10,14) <- (3,1,7).*(4, 9+1,2): 31.485163 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 29.506578
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 14 12 10 10 14 12 14
<<< (M = 12, K = 10, N = 14) : 31.485163
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 9,2) :    30.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1843 (16.4%), 9407 (83.6%) left; Finishing by Sat Oct 21  6:37:46 2000

(12,8,9) <- (0,1,9).*(12, 7+1,1): 27.871997 Mflop/s
(12,16,15) <- (1,2,15).*(12, 7+1,1): 31.082525 Mflop/s

Testing m0 = 12, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 12  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 9 12 8 8 9 12 9
<<< (M = 12, K = 8, N = 9) : 27.871997
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 31.082525
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (12, 7,1) :    29.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1844 (16.4%), 9406 (83.6%) left; Finishing by Sat Oct 21  6:37:44 2000

(16,14,9) <- (0,0,9).*(16, 13+1,1): 28.104911 Mflop/s
(16,14,15) <- (0,1,15).*(16, 13+1,1): 27.790770 Mflop/s

Testing m0 = 16, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 16  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 9 16 14 14 9 16 9
<<< (M = 16, K = 14, N = 9) : 28.104911
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 15 16 14 14 15 16 15
<<< (M = 16, K = 14, N = 15) : 27.790770
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (16, 13,1) :    27.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1845 (16.4%), 9405 (83.6%) left; Finishing by Sat Oct 21  6:37:42 2000

(10,12,9) <- (0,0,9).*(10, 11+1,1): 101.840008 Mflop/s
(10,12,15) <- (1,1,15).*(10, 11+1,1): 102.194524 Mflop/s

Testing m0 = 10, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 10  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 9 10 12 12 9 10 9
<<< (M = 10, K = 12, N = 9) : 101.840008
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 15 10 12 12 15 10 15
<<< (M = 10, K = 12, N = 15) : 102.194524
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (10, 11,1) :   102.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1846 (16.4%), 9404 (83.6%) left; Finishing by Sat Oct 21  6:37:46 2000

(8,9,7) <- (4,1,1).*(2, 8+1,7): 28.654956 Mflop/s
(14,9,14) <- (7,1,2).*(2, 8+1,7): 28.887331 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  8 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 7 8 9 9 7 8 7
<<< (M = 8, K = 9, N = 7) : 28.654956
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 14 14 9 9 14 14 14
<<< (M = 14, K = 9, N = 14) : 28.887331
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 8,7) :    28.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1847 (16.4%), 9403 (83.6%) left; Finishing by Sat Oct 21  6:37:44 2000

(9,12,10) <- (9,3,0).*(1, 3+1,10): 140.932768 Mflop/s
(15,20,10) <- (15,5,1).*(1, 3+1,10): 129.124455 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 10 9 12 12 10 9 10
<<< (M = 9, K = 12, N = 10) : 140.932768
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 10 15 20 20 10 15 10
<<< (M = 15, K = 20, N = 10) : 129.124455
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,10) :   134.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1848 (16.4%), 9402 (83.6%) left; Finishing by Sat Oct 21  6:37:42 2000

(8,7,9) <- (2,1,3).*(4, 6+1,3): 91.106985 Mflop/s
(12,14,15) <- (3,2,5).*(4, 6+1,3): 126.477463 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 91.106985
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 126.477463
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 6,3) :   105.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1849 (16.4%), 9401 (83.6%) left; Finishing by Sat Oct 21  6:37:46 2000

(9,13,9) <- (9,0,1).*(1, 12+1,9): 119.982693 Mflop/s
(15,13,9) <- (15,1,1).*(1, 12+1,9): 121.449409 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 119.982693
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 9 15 13 13 9 15 9
<<< (M = 15, K = 13, N = 9) : 121.449409
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,9) :   120.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1850 (16.4%), 9400 (83.6%) left; Finishing by Sat Oct 21  6:37:44 2000

(8,16,9) <- (4,0,3).*(2, 15+1,3): 50.080347 Mflop/s
(14,16,15) <- (7,1,5).*(2, 15+1,3): 37.245002 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 50.080347
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 37.245002
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 15,3) :    42.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1851 (16.5%), 9399 (83.5%) left; Finishing by Sat Oct 21  6:37:42 2000

(9,10,15) <- (9,1,0).*(1, 9+1,15): 121.443113 Mflop/s
(15,10,15) <- (15,1,1).*(1, 9+1,15): 122.577195 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 15 9 10 10 15 9 15
<<< (M = 9, K = 10, N = 15) : 121.443113
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 122.577195
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,15) :   122.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1852 (16.5%), 9398 (83.5%) left; Finishing by Sat Oct 21  6:37:40 2000

(8,12,8) <- (4,0,1).*(2, 11+1,8): 28.882292 Mflop/s
(14,12,8) <- (7,1,1).*(2, 11+1,8): 28.879030 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  11 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 28.882292
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 8 14 12 12 8 14 8
<<< (M = 14, K = 12, N = 8) : 28.879030
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 11,8) :    28.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1853 (16.5%), 9397 (83.5%) left; Finishing by Sat Oct 21  6:37:38 2000

(9,8,5) <- (3,1,1).*(3, 7+1,5): 110.242458 Mflop/s
(15,16,15) <- (5,2,3).*(3, 7+1,5): 136.947531 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  7 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 110.242458
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 136.947531
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 7,5) :   122.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1854 (16.5%), 9396 (83.5%) left; Finishing by Sat Oct 21  6:37:42 2000

(9,10,8) <- (9,1,1).*(1, 9+1,8): 118.119333 Mflop/s
(15,10,8) <- (15,1,1).*(1, 9+1,8): 120.739457 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 118.119333
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 8 15 10 10 8 15 8
<<< (M = 15, K = 10, N = 8) : 120.739457
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,8) :   119.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1855 (16.5%), 9395 (83.5%) left; Finishing by Sat Oct 21  6:37:46 2000

(9,7,8) <- (3,1,2).*(3, 6+1,4): 109.010175 Mflop/s
(15,14,12) <- (5,2,3).*(3, 6+1,4): 135.773835 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 109.010175
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 135.773835
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 6,4) :   120.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1856 (16.5%), 9394 (83.5%) left; Finishing by Sat Oct 21  6:37:50 2000

(8,13,9) <- (4,0,3).*(2, 12+1,3): 48.560246 Mflop/s
(14,13,15) <- (7,1,5).*(2, 12+1,3): 36.734806 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 48.560246
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 36.734806
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 12,3) :    41.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1857 (16.5%), 9393 (83.5%) left; Finishing by Sat Oct 21  6:37:48 2000

(9,8,9) <- (9,1,9).*(1, 7+1,1): 114.755217 Mflop/s
(15,16,15) <- (15,2,15).*(1, 7+1,1): 152.404919 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 114.755217
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 152.404919
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,1) :   130.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1858 (16.5%), 9392 (83.5%) left; Finishing by Sat Oct 21  6:37:52 2000

(9,14,8) <- (3,0,2).*(3, 13+1,4): 130.211124 Mflop/s
(15,14,12) <- (5,1,3).*(3, 13+1,4): 132.466836 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 130.211124
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 132.466836
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 13,4) :   131.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1859 (16.5%), 9391 (83.5%) left; Finishing by Sat Oct 21  6:37:50 2000

(9,13,5) <- (3,0,1).*(3, 12+1,5): 121.838662 Mflop/s
(15,13,15) <- (5,1,3).*(3, 12+1,5): 122.754742 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  12 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 5 9 13 13 5 9 5
<<< (M = 9, K = 13, N = 5) : 121.838662
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 122.754742
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 12,5) :   122.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1860 (16.5%), 9390 (83.5%) left; Finishing by Sat Oct 21  6:37:54 2000

(9,10,8) <- (3,1,2).*(3, 9+1,4): 123.696314 Mflop/s
(15,10,12) <- (5,1,3).*(3, 9+1,4): 125.872864 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 123.696314
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 125.872864
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 9,4) :   124.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1861 (16.5%), 9389 (83.5%) left; Finishing by Sat Oct 21  6:37:52 2000

(8,11,9) <- (4,0,3).*(2, 10+1,3): 48.048282 Mflop/s
(14,11,15) <- (7,1,5).*(2, 10+1,3): 36.119392 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 48.048282
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 36.119392
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 10,3) :    41.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1862 (16.6%), 9388 (83.4%) left; Finishing by Sat Oct 21  6:37:50 2000

(8,14,8) <- (4,0,4).*(2, 13+1,2): 137.780731 Mflop/s
(14,14,14) <- (7,1,7).*(2, 13+1,2): 73.892262 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 137.780731
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 73.892262
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 13,2) :    96.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1863 (16.6%), 9387 (83.4%) left; Finishing by Sat Oct 21  6:37:48 2000

(9,18,8) <- (9,9,1).*(1,1+1,8): 125.020221 Mflop/s
(15,30,8) <- (15,15,1).*(1,1+1,8): 134.554547 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 8 9 18 18 8 9 8
<<< (M = 9, K = 18, N = 8) : 125.020221
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 8 15 30 30 8 15 8
<<< (M = 15, K = 30, N = 8) : 134.554547
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,8) :   129.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1864 (16.6%), 9386 (83.4%) left; Finishing by Sat Oct 21  6:37:46 2000

(8,12,8) <- (2,3,4).*(4, 3+1,2): 103.681488 Mflop/s
(12,20,14) <- (3,5,7).*(4, 3+1,2): 124.304259 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 103.681488
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 20 14 12 20 20 14 12 14
<<< (M = 12, K = 20, N = 14) : 124.304259
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 3,2) :   113.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1865 (16.6%), 9385 (83.4%) left; Finishing by Sat Oct 21  6:37:44 2000

(8,14,7) <- (4,0,1).*(2, 13+1,7): 30.064022 Mflop/s
(14,14,14) <- (7,1,2).*(2, 13+1,7): 30.110062 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  13 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 7 8 14 14 7 8 7
<<< (M = 8, K = 14, N = 7) : 30.064022
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 30.110062
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 13,7) :    30.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1866 (16.6%), 9384 (83.4%) left; Finishing by Sat Oct 21  6:37:42 2000

(9,9,10) <- (9,1,0).*(1, 8+1,10): 115.284411 Mflop/s
(15,9,10) <- (15,1,1).*(1, 8+1,10): 115.324937 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 10 9 9 9 10 9 10
<<< (M = 9, K = 9, N = 10) : 115.284411
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 10 15 9 9 10 15 10
<<< (M = 15, K = 9, N = 10) : 115.324937
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,10) :   115.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1867 (16.6%), 9383 (83.4%) left; Finishing by Sat Oct 21  6:37:46 2000

(10,9,9) <- (0,1,9).*(10, 8+1,1): 102.498952 Mflop/s
(10,9,15) <- (1,1,15).*(10, 8+1,1): 103.219804 Mflop/s

Testing m0 = 10, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 10  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 9 9 10 9 9 9 10 9
<<< (M = 10, K = 9, N = 9) : 102.498952
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 9 15 10 9 9 15 10 15
<<< (M = 10, K = 9, N = 15) : 103.219804
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (10, 8,1) :   102.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1868 (16.6%), 9382 (83.4%) left; Finishing by Sat Oct 21  6:37:38 2000

(13,14,9) <- (0,0,9).*(13, 13+1,1): 27.448416 Mflop/s
(13,14,15) <- (1,1,15).*(13, 13+1,1): 28.536715 Mflop/s

Testing m0 = 13, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 13  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 9 13 14 14 9 13 9
<<< (M = 13, K = 14, N = 9) : 27.448416
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 15 13 14 14 15 13 15
<<< (M = 13, K = 14, N = 15) : 28.536715
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (13, 13,1) :    28.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1869 (16.6%), 9381 (83.4%) left; Finishing by Sat Oct 21  6:37:42 2000

(9,16,9) <- (1,0,9).*(9, 15+1,1): 32.598079 Mflop/s
(9,16,15) <- (1,1,15).*(9, 15+1,1): 32.634637 Mflop/s

Testing m0 = 9, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 9  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 32.598079
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 15 9 16 16 15 9 15
<<< (M = 9, K = 16, N = 15) : 32.634637
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (9, 15,1) :    32.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1870 (16.6%), 9380 (83.4%) left; Finishing by Sat Oct 21  6:37:40 2000

(8,14,8) <- (1,0,4).*(8, 13+1,2): 102.709878 Mflop/s
(8,14,14) <- (1,1,7).*(8, 13+1,2): 105.384779 Mflop/s

Testing m0 = 8, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 102.709878
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 14 8 14 14 14 8 14
<<< (M = 8, K = 14, N = 14) : 105.384779
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 13,2) :   104.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1871 (16.6%), 9379 (83.4%) left; Finishing by Sat Oct 21  6:37:38 2000

(15,9,9) <- (0,1,9).*(15, 8+1,1): 82.283490 Mflop/s
(15,9,15) <- (1,1,15).*(15, 8+1,1): 82.423564 Mflop/s

Testing m0 = 15, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 15  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 9 15 9 9 9 15 9
<<< (M = 15, K = 9, N = 9) : 82.283490
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 82.423564
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (15, 8,1) :    82.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1872 (16.6%), 9378 (83.4%) left; Finishing by Sat Oct 21  6:37:36 2000

(8,12,9) <- (1,0,9).*(8, 11+1,1): 95.284016 Mflop/s
(8,12,15) <- (1,1,15).*(8, 11+1,1): 95.838415 Mflop/s

Testing m0 = 8, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 95.284016
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 15 8 12 12 15 8 15
<<< (M = 8, K = 12, N = 15) : 95.838415
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 11,1) :    95.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1873 (16.6%), 9377 (83.4%) left; Finishing by Sat Oct 21  6:37:34 2000

(9,16,9) <- (9,0,9).*(1, 15+1,1): 139.595099 Mflop/s
(15,16,15) <- (15,1,15).*(1, 15+1,1): 143.660943 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 139.595099
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 143.660943
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,1) :   141.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1874 (16.7%), 9376 (83.3%) left; Finishing by Sat Oct 21  6:37:32 2000

(8,15,7) <- (4,0,1).*(2, 14+1,7): 30.109481 Mflop/s
(14,15,14) <- (7,1,2).*(2, 14+1,7): 30.241782 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  14 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 7 8 15 15 7 8 7
<<< (M = 8, K = 15, N = 7) : 30.109481
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 30.241782
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 14,7) :    30.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1875 (16.7%), 9375 (83.3%) left; Finishing by Sat Oct 21  6:37:31 2000

(9,12,8) <- (9,3,4).*(1, 3+1,2): 160.778613 Mflop/s
(15,20,14) <- (15,5,7).*(1, 3+1,2): 137.282988 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 160.778613
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 14 15 20 20 14 15 14
<<< (M = 15, K = 20, N = 14) : 137.282988
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,2) :   148.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1876 (16.7%), 9374 (83.3%) left; Finishing by Sat Oct 21  6:37:29 2000

(9,9,8) <- (3,1,2).*(3, 8+1,4): 122.575283 Mflop/s
(15,9,12) <- (5,1,3).*(3, 8+1,4): 123.016390 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 122.575283
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 123.016390
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 8,4) :   122.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1877 (16.7%), 9373 (83.3%) left; Finishing by Sat Oct 21  6:37:21 2000

(9,12,8) <- (3,3,4).*(3, 3+1,2): 134.472135 Mflop/s
(15,20,14) <- (5,5,7).*(3, 3+1,2): 128.843268 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 134.472135
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 14 15 20 20 14 15 14
<<< (M = 15, K = 20, N = 14) : 128.843268
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 3,2) :   131.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1878 (16.7%), 9372 (83.3%) left; Finishing by Sat Oct 21  6:37:25 2000

(8,8,8) <- (4,1,1).*(2, 7+1,8): 27.666802 Mflop/s
(14,16,8) <- (7,2,1).*(2, 7+1,8): 31.526618 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  7 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 27.666802
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 8 14 16 16 8 14 8
<<< (M = 14, K = 16, N = 8) : 31.526618
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 7,8) :    29.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1879 (16.7%), 9371 (83.3%) left; Finishing by Sat Oct 21  6:37:23 2000

(9,12,12) <- (9,4,0).*(1, 2+1,12): 129.535693 Mflop/s
(15,21,12) <- (15,7,1).*(1, 2+1,12): 124.879206 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 12 9 12 12 12 9 12
<<< (M = 9, K = 12, N = 12) : 129.535693
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 12 15 21 21 12 15 12
<<< (M = 15, K = 21, N = 12) : 124.879206
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,12) :   127.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1880 (16.7%), 9370 (83.3%) left; Finishing by Sat Oct 21  6:37:21 2000

(8,14,9) <- (4,0,3).*(2, 13+1,3): 49.470294 Mflop/s
(14,14,15) <- (7,1,5).*(2, 13+1,3): 37.025270 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 49.470294
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 37.025270
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 13,3) :    42.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1881 (16.7%), 9369 (83.3%) left; Finishing by Sat Oct 21  6:37:19 2000

(6,11,8) <- (1,0,4).*(6, 10+1,2): 112.801287 Mflop/s
(12,11,14) <- (2,1,7).*(6, 10+1,2): 79.906882 Mflop/s

Testing m0 = 6, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 11 8 6 11 11 8 6 8
<<< (M = 6, K = 11, N = 8) : 112.801287
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 14 12 11 11 14 12 14
<<< (M = 12, K = 11, N = 14) : 79.906882
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 10,2) :    93.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1882 (16.7%), 9368 (83.3%) left; Finishing by Sat Oct 21  6:37:23 2000

(9,11,7) <- (9,0,1).*(1, 10+1,7): 126.718317 Mflop/s
(15,11,14) <- (15,1,2).*(1, 10+1,7): 134.916589 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 7 9 11 11 7 9 7
<<< (M = 9, K = 11, N = 7) : 126.718317
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 134.916589
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,7) :   130.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1883 (16.7%), 9367 (83.3%) left; Finishing by Sat Oct 21  6:37:21 2000

(9,10,6) <- (9,1,1).*(1, 9+1,6): 128.068085 Mflop/s
(15,10,12) <- (15,1,2).*(1, 9+1,6): 133.072405 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 6 9 10 10 6 9 6
<<< (M = 9, K = 10, N = 6) : 128.068085
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 133.072405
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,6) :   130.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1884 (16.7%), 9366 (83.3%) left; Finishing by Sat Oct 21  6:37:25 2000

(9,13,9) <- (3,0,3).*(3, 12+1,3): 121.181134 Mflop/s
(15,13,15) <- (5,1,5).*(3, 12+1,3): 123.448974 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 121.181134
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 123.448974
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 12,3) :   122.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1885 (16.8%), 9365 (83.2%) left; Finishing by Sat Oct 21  6:37:23 2000

(9,16,8) <- (9,0,1).*(1, 15+1,8): 126.366801 Mflop/s
(15,16,8) <- (15,1,1).*(1, 15+1,8): 127.958202 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 126.366801
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 8 15 16 16 8 15 8
<<< (M = 15, K = 16, N = 8) : 127.958202
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,8) :   127.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1886 (16.8%), 9364 (83.2%) left; Finishing by Sat Oct 21  6:37:21 2000

(15,11,9) <- (0,0,9).*(15, 10+1,1): 85.438501 Mflop/s
(15,11,15) <- (1,1,15).*(15, 10+1,1): 104.645220 Mflop/s

Testing m0 = 15, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 15  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 9 15 11 11 9 15 9
<<< (M = 15, K = 11, N = 9) : 85.438501
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 104.645220
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (15, 10,1) :    94.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1887 (16.8%), 9363 (83.2%) left; Finishing by Sat Oct 21  6:37:19 2000

(8,10,8) <- (4,1,4).*(2, 9+1,2): 127.095448 Mflop/s
(14,10,14) <- (7,1,7).*(2, 9+1,2): 70.149143 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 127.095448
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 14 14 10 10 14 14 14
<<< (M = 14, K = 10, N = 14) : 70.149143
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 9,2) :    90.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1888 (16.8%), 9362 (83.2%) left; Finishing by Sat Oct 21  6:37:23 2000

(9,18,9) <- (9,9,1).*(1,1+1,9): 34.130886 Mflop/s
(15,30,9) <- (15,15,1).*(1,1+1,9): 35.102864 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 9 9 18 18 9 9 9
<<< (M = 9, K = 18, N = 9) : 34.130886
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 9 15 30 30 9 15 9
<<< (M = 15, K = 30, N = 9) : 35.102864
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,9) :    34.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1889 (16.8%), 9361 (83.2%) left; Finishing by Sat Oct 21  6:37:21 2000

(9,11,8) <- (3,0,2).*(3, 10+1,4): 126.052137 Mflop/s
(15,11,12) <- (5,1,3).*(3, 10+1,4): 128.127024 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 126.052137
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 128.127024
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 10,4) :   127.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1890 (16.8%), 9360 (83.2%) left; Finishing by Sat Oct 21  6:37:19 2000

(9,6,9) <- (1,1,9).*(9, 5+1,1): 85.782223 Mflop/s
(9,18,15) <- (1,3,15).*(9, 5+1,1): 118.022725 Mflop/s

Testing m0 = 9, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 9  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 85.782223
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 15 9 18 18 15 9 15
<<< (M = 9, K = 18, N = 15) : 118.022725
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (9, 5,1) :    99.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1891 (16.8%), 9359 (83.2%) left; Finishing by Sat Oct 21  6:37:17 2000

(9,15,9) <- (9,0,1).*(1, 14+1,9): 123.097958 Mflop/s
(15,15,9) <- (15,1,1).*(1, 14+1,9): 123.694865 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 123.097958
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 123.694865
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,9) :   123.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1892 (16.8%), 9358 (83.2%) left; Finishing by Sat Oct 21  6:37:15 2000

(9,10,9) <- (1,2,9).*(9, 4+1,1): 116.419257 Mflop/s
(9,15,15) <- (1,3,15).*(9, 4+1,1): 129.536146 Mflop/s

Testing m0 = 9, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 9  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 116.419257
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 129.536146
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (9, 4,1) :   122.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1893 (16.8%), 9357 (83.2%) left; Finishing by Sat Oct 21  6:37:19 2000

(7,7,8) <- (1,1,4).*(7, 6+1,2): 23.082640 Mflop/s
(14,14,14) <- (2,2,7).*(7, 6+1,2): 29.347441 Mflop/s

Testing m0 = 7, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 7 8 7 7 7 8 7 8
<<< (M = 7, K = 7, N = 8) : 23.082640
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 29.347441
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 6,2) :    25.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1894 (16.8%), 9356 (83.2%) left; Finishing by Sat Oct 21  6:37:17 2000

(6,18,9) <- (1,9,9).*(6,1+1,1): 42.479695 Mflop/s
(12,30,15) <- (2,15,15).*(6,1+1,1): 52.804489 Mflop/s

Testing m0 = 6, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 18 9 6 18 18 9 6 9
<<< (M = 6, K = 18, N = 9) : 42.479695
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 30 15 12 30 30 15 12 15
<<< (M = 12, K = 30, N = 15) : 52.804489
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6,1,1) :    47.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1895 (16.8%), 9355 (83.2%) left; Finishing by Sat Oct 21  6:37:15 2000

(8,8,9) <- (2,1,3).*(4, 7+1,3): 90.257768 Mflop/s
(12,16,15) <- (3,2,5).*(4, 7+1,3): 126.139548 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 90.257768
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 126.139548
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 7,3) :   105.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1896 (16.9%), 9354 (83.1%) left; Finishing by Sat Oct 21  6:37:13 2000

(9,14,9) <- (3,0,9).*(3, 13+1,1): 173.703734 Mflop/s
(15,14,15) <- (5,1,15).*(3, 13+1,1): 176.542412 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 173.703734
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 176.542412
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 13,1) :   175.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1897 (16.9%), 9353 (83.1%) left; Finishing by Sat Oct 21  6:37:12 2000

(9,13,9) <- (9,0,9).*(1, 12+1,1): 135.320176 Mflop/s
(15,13,15) <- (15,1,15).*(1, 12+1,1): 138.699936 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 135.320176
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 138.699936
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,1) :   137.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1898 (16.9%), 9352 (83.1%) left; Finishing by Sat Oct 21  6:37:10 2000

(8,12,8) <- (4,3,4).*(2, 3+1,2): 134.368517 Mflop/s
(14,20,14) <- (7,5,7).*(2, 3+1,2): 63.417014 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 134.368517
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 14 14 20 20 14 14 14
<<< (M = 14, K = 20, N = 14) : 63.417014
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 3,2) :    86.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1899 (16.9%), 9351 (83.1%) left; Finishing by Sat Oct 21  6:37:08 2000

(6,18,8) <- (1,9,4).*(6,1+1,2): 26.934025 Mflop/s
(12,30,14) <- (2,15,7).*(6,1+1,2): 25.644369 Mflop/s

Testing m0 = 6, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 18 8 6 18 18 8 6 8
<<< (M = 6, K = 18, N = 8) : 26.934025
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 30 14 12 30 30 14 12 14
<<< (M = 12, K = 30, N = 14) : 25.644369
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6,1,2) :    26.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1900 (16.9%), 9350 (83.1%) left; Finishing by Sat Oct 21  6:37:00 2000

(9,15,8) <- (9,0,2).*(1, 14+1,4): 145.721212 Mflop/s
(15,15,12) <- (15,1,3).*(1, 14+1,4): 154.550473 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 145.721212
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 154.550473
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,4) :   150.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1901 (16.9%), 9349 (83.1%) left; Finishing by Sat Oct 21  6:37:04 2000

(7,10,9) <- (1,2,9).*(7, 4+1,1): 36.054424 Mflop/s
(14,15,15) <- (2,3,15).*(7, 4+1,1): 44.956838 Mflop/s

Testing m0 = 7, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 10 9 7 10 10 9 7 9
<<< (M = 7, K = 10, N = 9) : 36.054424
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 44.956838
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 4,1) :    40.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1902 (16.9%), 9348 (83.1%) left; Finishing by Sat Oct 21  6:37:02 2000

(9,11,9) <- (3,0,9).*(3, 10+1,1): 156.752568 Mflop/s
(15,11,15) <- (5,1,15).*(3, 10+1,1): 162.356984 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 156.752568
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 162.356984
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 10,1) :   159.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1903 (16.9%), 9347 (83.1%) left; Finishing by Sat Oct 21  6:37:06 2000

(8,12,9) <- (2,4,9).*(4, 2+1,1): 149.563562 Mflop/s
(12,21,15) <- (3,7,15).*(4, 2+1,1): 150.056840 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 149.563562
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 15 12 21 21 15 12 15
<<< (M = 12, K = 21, N = 15) : 150.056840
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 2,1) :   149.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1904 (16.9%), 9346 (83.1%) left; Finishing by Sat Oct 21  6:36:58 2000

(9,6,15) <- (9,1,0).*(1, 5+1,15): 108.889606 Mflop/s
(15,18,15) <- (15,3,1).*(1, 5+1,15): 145.507289 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 15 9 6 6 15 9 15
<<< (M = 9, K = 6, N = 15) : 108.889606
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 145.507289
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,15) :   124.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1905 (16.9%), 9345 (83.1%) left; Finishing by Sat Oct 21  6:36:56 2000

(9,14,8) <- (9,0,4).*(1, 13+1,2): 147.816318 Mflop/s
(15,14,14) <- (15,1,7).*(1, 13+1,2): 151.109295 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 147.816318
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 151.109295
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,2) :   149.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1906 (16.9%), 9344 (83.1%) left; Finishing by Sat Oct 21  6:36:54 2000

(9,12,15) <- (9,4,0).*(1, 2+1,15): 132.792908 Mflop/s
(15,21,15) <- (15,7,1).*(1, 2+1,15): 128.234912 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 132.792908
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 128.234912
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,15) :   130.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1907 (17.0%), 9343 (83.0%) left; Finishing by Sat Oct 21  6:36:52 2000

(9,11,8) <- (9,0,4).*(1, 10+1,2): 138.419558 Mflop/s
(15,11,14) <- (15,1,7).*(1, 10+1,2): 140.080721 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 138.419558
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 140.080721
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,2) :   139.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1908 (17.0%), 9342 (83.0%) left; Finishing by Sat Oct 21  6:36:45 2000

(9,8,15) <- (9,1,0).*(1, 7+1,15): 116.697853 Mflop/s
(15,16,15) <- (15,2,1).*(1, 7+1,15): 137.294205 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 15 9 8 8 15 9 15
<<< (M = 9, K = 8, N = 15) : 116.697853
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 137.294205
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,15) :   126.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1909 (17.0%), 9341 (83.0%) left; Finishing by Sat Oct 21  6:36:43 2000

(8,14,8) <- (4,0,1).*(2, 13+1,8): 29.233997 Mflop/s
(14,14,8) <- (7,1,1).*(2, 13+1,8): 29.320479 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  13 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 29.233997
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 8 14 14 14 8 14 8
<<< (M = 14, K = 14, N = 8) : 29.320479
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 13,8) :    29.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1910 (17.0%), 9340 (83.0%) left; Finishing by Sat Oct 21  6:36:47 2000

(8,7,9) <- (2,1,9).*(4, 6+1,1): 132.960290 Mflop/s
(12,14,15) <- (3,2,15).*(4, 6+1,1): 181.776936 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 132.960290
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 181.776936
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 6,1) :   153.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1911 (17.0%), 9339 (83.0%) left; Finishing by Sat Oct 21  6:36:51 2000

(6,15,9) <- (1,0,9).*(6, 14+1,1): 122.142870 Mflop/s
(12,15,15) <- (2,1,15).*(6, 14+1,1): 125.256888 Mflop/s

Testing m0 = 6, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 15 9 6 15 15 9 6 9
<<< (M = 6, K = 15, N = 9) : 122.142870
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 125.256888
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 14,1) :   123.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1912 (17.0%), 9338 (83.0%) left; Finishing by Sat Oct 21  6:36:43 2000

(8,13,8) <- (2,0,2).*(4, 12+1,4): 24.383498 Mflop/s
(12,13,12) <- (3,1,3).*(4, 12+1,4): 29.127285 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 24.383498
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 12 12 13 13 12 12 12
<<< (M = 12, K = 13, N = 12) : 29.127285
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 12,4) :    26.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1913 (17.0%), 9337 (83.0%) left; Finishing by Sat Oct 21  6:36:47 2000

(8,18,6) <- (4,9,1).*(2,1+1,6): 103.010917 Mflop/s
(14,30,12) <- (7,15,2).*(2,1+1,6): 78.988074 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2 1 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 6 8 18 18 6 8 6
<<< (M = 8, K = 18, N = 6) : 103.010917
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 12 14 30 30 12 14 12
<<< (M = 14, K = 30, N = 12) : 78.988074
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2,1,6) :    89.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1914 (17.0%), 9336 (83.0%) left; Finishing by Sat Oct 21  6:36:39 2000

(8,12,8) <- (2,0,4).*(4, 11+1,2): 29.738627 Mflop/s
(12,12,14) <- (3,1,7).*(4, 11+1,2): 32.107868 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 29.738627
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 32.107868
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 11,2) :    30.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1915 (17.0%), 9335 (83.0%) left; Finishing by Sat Oct 21  6:36:37 2000

(7,12,9) <- (1,4,9).*(7, 2+1,1): 116.478846 Mflop/s
(14,21,15) <- (2,7,15).*(7, 2+1,1): 113.043826 Mflop/s

Testing m0 = 7, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 9 7 12 12 9 7 9
<<< (M = 7, K = 12, N = 9) : 116.478846
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 15 14 21 21 15 14 15
<<< (M = 14, K = 21, N = 15) : 113.043826
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 2,1) :   114.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1916 (17.0%), 9334 (83.0%) left; Finishing by Sat Oct 21  6:36:41 2000

(9,7,11) <- (9,1,0).*(1, 6+1,11): 107.531685 Mflop/s
(15,14,11) <- (15,2,1).*(1, 6+1,11): 127.680837 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 11 9 7 7 11 9 11
<<< (M = 9, K = 7, N = 11) : 107.531685
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 11 15 14 14 11 15 11
<<< (M = 15, K = 14, N = 11) : 127.680837
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,11) :   116.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1917 (17.0%), 9333 (83.0%) left; Finishing by Sat Oct 21  6:36:39 2000

(14,13,9) <- (0,0,9).*(14, 12+1,1): 27.341146 Mflop/s
(14,13,15) <- (1,1,15).*(14, 12+1,1): 29.159623 Mflop/s

Testing m0 = 14, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 14  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 9 14 13 13 9 14 9
<<< (M = 14, K = 13, N = 9) : 27.341146
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 29.159623
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (14, 12,1) :    28.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1918 (17.0%), 9332 (83.0%) left; Finishing by Sat Oct 21  6:36:37 2000

(8,12,8) <- (2,4,2).*(4, 2+1,4): 70.120615 Mflop/s
(12,21,12) <- (3,7,3).*(4, 2+1,4): 121.679501 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 70.120615
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 12 12 21 21 12 12 12
<<< (M = 12, K = 21, N = 12) : 121.679501
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 2,4) :    89.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1919 (17.1%), 9331 (82.9%) left; Finishing by Sat Oct 21  6:36:41 2000

(9,6,16) <- (9,1,0).*(1, 5+1,16): 107.646989 Mflop/s
(15,18,16) <- (15,3,0).*(1, 5+1,16): 142.682927 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 16 9 6 6 16 9 16
<<< (M = 9, K = 6, N = 16) : 107.646989
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 16 15 18 18 16 15 16
<<< (M = 15, K = 18, N = 16) : 142.682927
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,16) :   122.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1920 (17.1%), 9330 (82.9%) left; Finishing by Sat Oct 21  6:36:39 2000

(9,14,9) <- (9,0,3).*(1, 13+1,3): 149.718449 Mflop/s
(15,14,15) <- (15,1,5).*(1, 13+1,3): 151.428347 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 149.718449
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 151.428347
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,3) :   150.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1921 (17.1%), 9329 (82.9%) left; Finishing by Sat Oct 21  6:36:38 2000

(5,6,9) <- (1,1,9).*(5, 5+1,1): 53.244787 Mflop/s
(15,18,15) <- (3,3,15).*(5, 5+1,1): 86.804052 Mflop/s

Testing m0 = 5, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 6 9 5 6 6 9 5 9
<<< (M = 5, K = 6, N = 9) : 53.244787
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 86.804052
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 5,1) :    66.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1922 (17.1%), 9328 (82.9%) left; Finishing by Sat Oct 21  6:36:42 2000

(8,7,6) <- (4,1,1).*(2, 6+1,6): 29.028478 Mflop/s
(14,14,12) <- (7,2,2).*(2, 6+1,6): 29.967417 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  6 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 6 8 7 7 6 8 6
<<< (M = 8, K = 7, N = 6) : 29.028478
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 29.967417
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 6,6) :    29.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1923 (17.1%), 9327 (82.9%) left; Finishing by Sat Oct 21  6:36:40 2000

(8,16,8) <- (4,0,1).*(2, 15+1,8): 29.570478 Mflop/s
(14,16,8) <- (7,1,1).*(2, 15+1,8): 29.544582 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  15 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 29.570478
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 8 14 16 16 8 14 8
<<< (M = 14, K = 16, N = 8) : 29.544582
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 15,8) :    29.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1924 (17.1%), 9326 (82.9%) left; Finishing by Sat Oct 21  6:36:38 2000

(8,15,9) <- (1,0,9).*(8, 14+1,1): 94.974979 Mflop/s
(8,15,15) <- (1,1,15).*(8, 14+1,1): 95.579906 Mflop/s

Testing m0 = 8, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 94.974979
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 15 8 15 15 15 8 15
<<< (M = 8, K = 15, N = 15) : 95.579906
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 14,1) :    95.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1925 (17.1%), 9325 (82.9%) left; Finishing by Sat Oct 21  6:36:36 2000

(7,12,8) <- (1,3,4).*(7, 3+1,2): 29.051535 Mflop/s
(14,20,14) <- (2,5,7).*(7, 3+1,2): 28.804587 Mflop/s

Testing m0 = 7, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 8 7 12 12 8 7 8
<<< (M = 7, K = 12, N = 8) : 29.051535
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 14 14 20 20 14 14 14
<<< (M = 14, K = 20, N = 14) : 28.804587
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 3,2) :    28.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1926 (17.1%), 9324 (82.9%) left; Finishing by Sat Oct 21  6:36:40 2000

(12,15,9) <- (0,0,9).*(12, 14+1,1): 104.694096 Mflop/s
(12,15,15) <- (1,1,15).*(12, 14+1,1): 105.215579 Mflop/s

Testing m0 = 12, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 12  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 9 12 15 15 9 12 9
<<< (M = 12, K = 15, N = 9) : 104.694096
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 105.215579
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (12, 14,1) :   105.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1927 (17.1%), 9323 (82.9%) left; Finishing by Sat Oct 21  6:36:38 2000

(7,15,8) <- (1,0,4).*(7, 14+1,2): 25.109986 Mflop/s
(14,15,14) <- (2,1,7).*(7, 14+1,2): 27.536850 Mflop/s

Testing m0 = 7, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 15 8 7 15 15 8 7 8
<<< (M = 7, K = 15, N = 8) : 25.109986
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 27.536850
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 14,2) :    26.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1928 (17.1%), 9322 (82.9%) left; Finishing by Sat Oct 21  6:36:36 2000

(8,8,7) <- (4,1,1).*(2, 7+1,7): 28.272525 Mflop/s
(14,16,14) <- (7,2,2).*(2, 7+1,7): 32.178730 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  7 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 7 8 8 8 7 8 7
<<< (M = 8, K = 8, N = 7) : 28.272525
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 32.178730
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 7,7) :    30.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1929 (17.1%), 9321 (82.9%) left; Finishing by Sat Oct 21  6:36:34 2000

(9,16,7) <- (9,0,1).*(1, 15+1,7): 133.676563 Mflop/s
(15,16,14) <- (15,1,2).*(1, 15+1,7): 136.748070 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 7 9 16 16 7 9 7
<<< (M = 9, K = 16, N = 7) : 133.676563
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 136.748070
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,7) :   135.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1930 (17.2%), 9320 (82.8%) left; Finishing by Sat Oct 21  6:36:32 2000

(6,12,8) <- (1,0,4).*(6, 11+1,2): 115.393368 Mflop/s
(12,12,14) <- (2,1,7).*(6, 11+1,2): 81.579551 Mflop/s

Testing m0 = 6, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 8 6 12 12 8 6 8
<<< (M = 6, K = 12, N = 8) : 115.393368
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 81.579551
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 11,2) :    95.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1931 (17.2%), 9319 (82.8%) left; Finishing by Sat Oct 21  6:36:36 2000

(8,18,8) <- (4,9,1).*(2,1+1,8): 81.839390 Mflop/s
(14,30,8) <- (7,15,1).*(2,1+1,8): 84.252107 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2 1 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 8 8 18 18 8 8 8
<<< (M = 8, K = 18, N = 8) : 81.839390
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 8 14 30 30 8 14 8
<<< (M = 14, K = 30, N = 8) : 84.252107
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2,1,8) :    83.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1932 (17.2%), 9318 (82.8%) left; Finishing by Sat Oct 21  6:36:34 2000

(8,13,6) <- (4,0,1).*(2, 12+1,6): 31.354813 Mflop/s
(14,13,12) <- (7,1,2).*(2, 12+1,6): 27.757556 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  12 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 6 8 13 13 6 8 6
<<< (M = 8, K = 13, N = 6) : 31.354813
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 12 14 13 13 12 14 12
<<< (M = 14, K = 13, N = 12) : 27.757556
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 12,6) :    29.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1933 (17.2%), 9317 (82.8%) left; Finishing by Sat Oct 21  6:36:33 2000

(8,12,9) <- (4,3,9).*(2, 3+1,1): 157.659649 Mflop/s
(14,20,15) <- (7,5,15).*(2, 3+1,1): 145.335601 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 157.659649
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 15 14 20 20 15 14 15
<<< (M = 14, K = 20, N = 15) : 145.335601
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 3,1) :   151.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1934 (17.2%), 9316 (82.8%) left; Finishing by Sat Oct 21  6:36:36 2000

(9,13,13) <- (9,0,0).*(1, 12+1,13): 119.094212 Mflop/s
(15,13,13) <- (15,1,1).*(1, 12+1,13): 119.552648 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 13 9 13 13 13 9 13
<<< (M = 9, K = 13, N = 13) : 119.094212
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 13 15 13 13 13 15 13
<<< (M = 15, K = 13, N = 13) : 119.552648
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,13) :   119.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1935 (17.2%), 9315 (82.8%) left; Finishing by Sat Oct 21  6:36:35 2000

(8,8,8) <- (4,1,4).*(2, 7+1,2): 121.223516 Mflop/s
(14,16,14) <- (7,2,7).*(2, 7+1,2): 79.197959 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 121.223516
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 79.197959
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 7,2) :    95.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1936 (17.2%), 9314 (82.8%) left; Finishing by Sat Oct 21  6:36:27 2000

(9,6,10) <- (9,1,0).*(1, 5+1,10): 104.860596 Mflop/s
(15,18,10) <- (15,3,1).*(1, 5+1,10): 143.460224 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 10 9 6 6 10 9 10
<<< (M = 9, K = 6, N = 10) : 104.860596
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 10 15 18 18 10 15 10
<<< (M = 15, K = 18, N = 10) : 143.460224
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,10) :   121.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1937 (17.2%), 9313 (82.8%) left; Finishing by Sat Oct 21  6:36:31 2000

(8,15,5) <- (4,0,1).*(2, 14+1,5): 32.262917 Mflop/s
(14,15,15) <- (7,1,3).*(2, 14+1,5): 31.556711 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  14 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 5 8 15 15 5 8 5
<<< (M = 8, K = 15, N = 5) : 32.262917
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 31.556711
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 14,5) :    31.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1938 (17.2%), 9312 (82.8%) left; Finishing by Sat Oct 21  6:36:35 2000

(8,8,9) <- (2,1,9).*(4, 7+1,1): 142.816460 Mflop/s
(12,16,15) <- (3,2,15).*(4, 7+1,1): 194.635733 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 142.816460
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 194.635733
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 7,1) :   164.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1939 (17.2%), 9311 (82.8%) left; Finishing by Sat Oct 21  6:36:33 2000

(9,13,7) <- (9,0,1).*(1, 12+1,7): 130.758099 Mflop/s
(15,13,14) <- (15,1,2).*(1, 12+1,7): 134.039235 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 7 9 13 13 7 9 7
<<< (M = 9, K = 13, N = 7) : 130.758099
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 134.039235
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,7) :   132.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1940 (17.2%), 9310 (82.8%) left; Finishing by Sat Oct 21  6:36:31 2000

(9,14,9) <- (9,0,9).*(1, 13+1,1): 134.605397 Mflop/s
(15,14,15) <- (15,1,15).*(1, 13+1,1): 139.715625 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 134.605397
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 139.715625
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,1) :   137.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1941 (17.3%), 9309 (82.7%) left; Finishing by Sat Oct 21  6:36:35 2000

(11,16,9) <- (0,0,9).*(11, 15+1,1): 29.649440 Mflop/s
(11,16,15) <- (1,1,15).*(11, 15+1,1): 27.867130 Mflop/s

Testing m0 = 11, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 11  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 16 9 11 16 16 9 11 9
<<< (M = 11, K = 16, N = 9) : 29.649440
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 16 15 11 16 16 15 11 15
<<< (M = 11, K = 16, N = 15) : 27.867130
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (11, 15,1) :    28.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1942 (17.3%), 9308 (82.7%) left; Finishing by Sat Oct 21  6:36:39 2000

(15,8,9) <- (0,1,9).*(15, 7+1,1): 79.128421 Mflop/s
(15,16,15) <- (1,2,15).*(15, 7+1,1): 115.392470 Mflop/s

Testing m0 = 15, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 15  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 9 15 8 8 9 15 9
<<< (M = 15, K = 8, N = 9) : 79.128421
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 115.392470
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (15, 7,1) :    93.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1943 (17.3%), 9307 (82.7%) left; Finishing by Sat Oct 21  6:36:37 2000

(6,15,8) <- (1,0,4).*(6, 14+1,2): 118.671648 Mflop/s
(12,15,14) <- (2,1,7).*(6, 14+1,2): 82.866677 Mflop/s

Testing m0 = 6, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 15 8 6 15 15 8 6 8
<<< (M = 6, K = 15, N = 8) : 118.671648
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 82.866677
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 14,2) :    97.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1944 (17.3%), 9306 (82.7%) left; Finishing by Sat Oct 21  6:36:41 2000

(8,9,8) <- (4,1,2).*(2, 8+1,4): 35.136666 Mflop/s
(14,9,12) <- (7,1,3).*(2, 8+1,4): 35.776730 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 35.136666
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 12 14 9 9 12 14 12
<<< (M = 14, K = 9, N = 12) : 35.776730
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 8,4) :    35.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1945 (17.3%), 9305 (82.7%) left; Finishing by Sat Oct 21  6:36:39 2000

(9,10,8) <- (9,2,1).*(1, 4+1,8): 129.864521 Mflop/s
(15,15,8) <- (15,3,1).*(1, 4+1,8): 142.972501 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 129.864521
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 8 15 15 15 8 15 8
<<< (M = 15, K = 15, N = 8) : 142.972501
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,8) :   136.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1946 (17.3%), 9304 (82.7%) left; Finishing by Sat Oct 21  6:36:43 2000

(9,12,14) <- (9,3,0).*(1, 3+1,14): 144.661309 Mflop/s
(15,20,14) <- (15,5,1).*(1, 3+1,14): 131.165005 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 14 9 12 12 14 9 14
<<< (M = 9, K = 12, N = 14) : 144.661309
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 14 15 20 20 14 15 14
<<< (M = 15, K = 20, N = 14) : 131.165005
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,14) :   137.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1947 (17.3%), 9303 (82.7%) left; Finishing by Sat Oct 21  6:36:41 2000

(9,12,9) <- (3,4,9).*(3, 2+1,1): 153.129145 Mflop/s
(15,21,15) <- (5,7,15).*(3, 2+1,1): 152.057143 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 153.129145
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 152.057143
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 2,1) :   152.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1948 (17.3%), 9302 (82.7%) left; Finishing by Sat Oct 21  6:36:45 2000

(9,14,8) <- (3,0,4).*(3, 13+1,2): 133.142726 Mflop/s
(15,14,14) <- (5,1,7).*(3, 13+1,2): 134.236768 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 133.142726
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 134.236768
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 13,2) :   133.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1949 (17.3%), 9301 (82.7%) left; Finishing by Sat Oct 21  6:36:37 2000

(14,7,9) <- (0,1,9).*(14, 6+1,1): 25.826284 Mflop/s
(14,14,15) <- (1,2,15).*(14, 6+1,1): 32.203829 Mflop/s

Testing m0 = 14, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 14  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 7 9 14 7 7 9 14 9
<<< (M = 14, K = 7, N = 9) : 25.826284
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 32.203829
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (14, 6,1) :    28.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1950 (17.3%), 9300 (82.7%) left; Finishing by Sat Oct 21  6:36:41 2000

(5,9,9) <- (1,1,9).*(5, 8+1,1): 68.862545 Mflop/s
(15,9,15) <- (3,1,15).*(5, 8+1,1): 69.941718 Mflop/s

Testing m0 = 5, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 68.862545
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 69.941718
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 8,1) :    69.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1951 (17.3%), 9299 (82.7%) left; Finishing by Sat Oct 21  6:36:34 2000

(9,6,9) <- (3,1,9).*(3, 5+1,1): 119.971281 Mflop/s
(15,18,15) <- (5,3,15).*(3, 5+1,1): 192.719283 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 119.971281
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 192.719283
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 5,1) :   147.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1952 (17.4%), 9298 (82.6%) left; Finishing by Sat Oct 21  6:36:38 2000

(13,10,9) <- (0,2,9).*(13, 4+1,1): 110.774618 Mflop/s
(13,15,15) <- (1,3,15).*(13, 4+1,1): 122.349406 Mflop/s

Testing m0 = 13, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 13  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 10 9 13 10 10 9 13 9
<<< (M = 13, K = 10, N = 9) : 110.774618
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 15 13 15 15 15 13 15
<<< (M = 13, K = 15, N = 15) : 122.349406
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (13, 4,1) :   116.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1953 (17.4%), 9297 (82.6%) left; Finishing by Sat Oct 21  6:36:36 2000

(5,14,9) <- (1,0,9).*(5, 13+1,1): 73.279890 Mflop/s
(15,14,15) <- (3,1,15).*(5, 13+1,1): 83.328952 Mflop/s

Testing m0 = 5, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 14 9 5 14 14 9 5 9
<<< (M = 5, K = 14, N = 9) : 73.279890
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 83.328952
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 13,1) :    78.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1954 (17.4%), 9296 (82.6%) left; Finishing by Sat Oct 21  6:36:34 2000

(9,9,5) <- (9,1,1).*(1, 8+1,5): 122.335501 Mflop/s
(15,9,15) <- (15,1,3).*(1, 8+1,5): 130.982531 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 122.335501
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 130.982531
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,5) :   126.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1955 (17.4%), 9295 (82.6%) left; Finishing by Sat Oct 21  6:36:38 2000

(9,14,15) <- (9,0,0).*(1, 13+1,15): 128.111096 Mflop/s
(15,14,15) <- (15,1,1).*(1, 13+1,15): 128.715242 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 128.111096
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 128.715242
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,15) :   128.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1956 (17.4%), 9294 (82.6%) left; Finishing by Sat Oct 21  6:36:36 2000

(11,12,9) <- (0,3,9).*(11, 3+1,1): 119.669186 Mflop/s
(11,20,15) <- (1,5,15).*(11, 3+1,1): 113.894337 Mflop/s

Testing m0 = 11, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 11  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 9 11 12 12 9 11 9
<<< (M = 11, K = 12, N = 9) : 119.669186
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 20 15 11 20 20 15 11 15
<<< (M = 11, K = 20, N = 15) : 113.894337
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (11, 3,1) :   116.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1957 (17.4%), 9293 (82.6%) left; Finishing by Sat Oct 21  6:36:34 2000

(15,12,9) <- (0,0,9).*(15, 11+1,1): 85.292109 Mflop/s
(15,12,15) <- (1,1,15).*(15, 11+1,1): 105.000553 Mflop/s

Testing m0 = 15, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 15  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 85.292109
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 105.000553
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (15, 11,1) :    94.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1958 (17.4%), 9292 (82.6%) left; Finishing by Sat Oct 21  6:36:32 2000

(9,18,10) <- (9,9,0).*(1,1+1,10): 31.006737 Mflop/s
(15,30,10) <- (15,15,1).*(1,1+1,10): 32.377555 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 10 9 18 18 10 9 10
<<< (M = 9, K = 18, N = 10) : 31.006737
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 10 15 30 30 10 15 10
<<< (M = 15, K = 30, N = 10) : 32.377555
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,10) :    31.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1959 (17.4%), 9291 (82.6%) left; Finishing by Sat Oct 21  6:36:30 2000

(9,15,5) <- (9,0,1).*(1, 14+1,5): 137.675640 Mflop/s
(15,15,15) <- (15,1,3).*(1, 14+1,5): 145.068763 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 5 9 15 15 5 9 5
<<< (M = 9, K = 15, N = 5) : 137.675640
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 145.068763
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,5) :   141.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1960 (17.4%), 9290 (82.6%) left; Finishing by Sat Oct 21  6:36:34 2000

(9,15,8) <- (9,0,1).*(1, 14+1,8): 125.385873 Mflop/s
(15,15,8) <- (15,1,1).*(1, 14+1,8): 127.598094 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 125.385873
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 8 15 15 15 8 15 8
<<< (M = 15, K = 15, N = 8) : 127.598094
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,8) :   126.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1961 (17.4%), 9289 (82.6%) left; Finishing by Sat Oct 21  6:36:32 2000

(8,13,8) <- (4,0,4).*(2, 12+1,2): 135.388528 Mflop/s
(14,13,14) <- (7,1,7).*(2, 12+1,2): 73.460954 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 135.388528
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 14 14 13 13 14 14 14
<<< (M = 14, K = 13, N = 14) : 73.460954
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 12,2) :    95.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1962 (17.4%), 9288 (82.6%) left; Finishing by Sat Oct 21  6:36:31 2000

(8,7,8) <- (2,1,4).*(4, 6+1,2): 27.893451 Mflop/s
(12,14,14) <- (3,2,7).*(4, 6+1,2): 34.777974 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 27.893451
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 34.777974
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 6,2) :    31.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1963 (17.4%), 9287 (82.6%) left; Finishing by Sat Oct 21  6:36:29 2000

(11,15,9) <- (0,0,9).*(11, 14+1,1): 29.511676 Mflop/s
(11,15,15) <- (1,1,15).*(11, 14+1,1): 27.820276 Mflop/s

Testing m0 = 11, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 11  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 9 11 15 15 9 11 9
<<< (M = 11, K = 15, N = 9) : 29.511676
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 15 11 15 15 15 11 15
<<< (M = 11, K = 15, N = 15) : 27.820276
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (11, 14,1) :    28.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1964 (17.5%), 9286 (82.5%) left; Finishing by Sat Oct 21  6:36:27 2000

(6,10,8) <- (1,2,4).*(6, 4+1,2): 119.114276 Mflop/s
(12,15,14) <- (2,3,7).*(6, 4+1,2): 94.945820 Mflop/s

Testing m0 = 6, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 10 8 6 10 10 8 6 8
<<< (M = 6, K = 10, N = 8) : 119.114276
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 94.945820
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 4,2) :   105.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1965 (17.5%), 9285 (82.5%) left; Finishing by Sat Oct 21  6:36:31 2000

(8,12,5) <- (4,3,1).*(2, 3+1,5): 37.595449 Mflop/s
(14,20,15) <- (7,5,3).*(2, 3+1,5): 33.626654 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  3 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 5 8 12 12 5 8 5
<<< (M = 8, K = 12, N = 5) : 37.595449
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 15 14 20 20 15 14 15
<<< (M = 14, K = 20, N = 15) : 33.626654
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 3,5) :    35.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1966 (17.5%), 9284 (82.5%) left; Finishing by Sat Oct 21  6:36:35 2000

(9,12,8) <- (3,0,2).*(3, 11+1,4): 126.761611 Mflop/s
(15,12,12) <- (5,1,3).*(3, 11+1,4): 129.257445 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 126.761611
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 129.257445
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 11,4) :   128.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1967 (17.5%), 9283 (82.5%) left; Finishing by Sat Oct 21  6:36:33 2000

(9,13,8) <- (9,0,1).*(1, 12+1,8): 123.062083 Mflop/s
(15,13,8) <- (15,1,1).*(1, 12+1,8): 126.486455 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 123.062083
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 8 15 13 13 8 15 8
<<< (M = 15, K = 13, N = 8) : 126.486455
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,8) :   124.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1968 (17.5%), 9282 (82.5%) left; Finishing by Sat Oct 21  6:36:31 2000

(6,7,9) <- (1,1,9).*(6, 6+1,1): 103.564660 Mflop/s
(12,14,15) <- (2,2,15).*(6, 6+1,1): 137.254488 Mflop/s

Testing m0 = 6, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 7 9 6 7 7 9 6 9
<<< (M = 6, K = 7, N = 9) : 103.564660
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 137.254488
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 6,1) :   118.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1969 (17.5%), 9281 (82.5%) left; Finishing by Sat Oct 21  6:36:35 2000

(8,10,9) <- (4,1,3).*(2, 9+1,3): 47.830435 Mflop/s
(14,10,15) <- (7,1,5).*(2, 9+1,3): 35.486280 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 47.830435
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 35.486280
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 9,3) :    40.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1970 (17.5%), 9280 (82.5%) left; Finishing by Sat Oct 21  6:36:33 2000

(9,10,8) <- (9,2,4).*(1, 4+1,2): 146.007782 Mflop/s
(15,15,14) <- (15,3,7).*(1, 4+1,2): 170.038881 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 146.007782
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 170.038881
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,2) :   157.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1971 (17.5%), 9279 (82.5%) left; Finishing by Sat Oct 21  6:36:31 2000

(7,11,8) <- (1,0,4).*(7, 10+1,2): 24.464130 Mflop/s
(14,11,14) <- (2,1,7).*(7, 10+1,2): 26.871705 Mflop/s

Testing m0 = 7, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 11 8 7 11 11 8 7 8
<<< (M = 7, K = 11, N = 8) : 24.464130
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 14 14 11 11 14 14 14
<<< (M = 14, K = 11, N = 14) : 26.871705
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 10,2) :    25.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1972 (17.5%), 9278 (82.5%) left; Finishing by Sat Oct 21  6:36:35 2000

(9,10,12) <- (9,1,0).*(1, 9+1,12): 116.602351 Mflop/s
(15,10,12) <- (15,1,1).*(1, 9+1,12): 116.574854 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 12 9 10 10 12 9 12
<<< (M = 9, K = 10, N = 12) : 116.602351
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 116.574854
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,12) :   116.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1973 (17.5%), 9277 (82.5%) left; Finishing by Sat Oct 21  6:36:39 2000

(8,12,8) <- (4,3,1).*(2, 3+1,8): 34.206148 Mflop/s
(14,20,8) <- (7,5,1).*(2, 3+1,8): 31.394576 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  3 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 34.206148
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 8 14 20 20 8 14 8
<<< (M = 14, K = 20, N = 8) : 31.394576
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 3,8) :    32.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1974 (17.5%), 9276 (82.5%) left; Finishing by Sat Oct 21  6:36:37 2000

(9,6,8) <- (9,1,1).*(1, 5+1,8): 108.042542 Mflop/s
(15,18,8) <- (15,3,1).*(1, 5+1,8): 149.127105 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 108.042542
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 8 15 18 18 8 15 8
<<< (M = 15, K = 18, N = 8) : 149.127105
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,8) :   125.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1975 (17.6%), 9275 (82.4%) left; Finishing by Sat Oct 21  6:36:41 2000

(8,10,9) <- (1,1,9).*(8, 9+1,1): 87.809390 Mflop/s
(8,10,15) <- (1,1,15).*(8, 9+1,1): 88.618449 Mflop/s

Testing m0 = 8, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 87.809390
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 15 8 10 10 15 8 15
<<< (M = 8, K = 10, N = 15) : 88.618449
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 9,1) :    88.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1976 (17.6%), 9274 (82.4%) left; Finishing by Sat Oct 21  6:36:39 2000

(9,7,8) <- (9,1,1).*(1, 6+1,8): 106.861284 Mflop/s
(15,14,8) <- (15,2,1).*(1, 6+1,8): 133.691314 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 106.861284
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 8 15 14 14 8 15 8
<<< (M = 15, K = 14, N = 8) : 133.691314
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,8) :   118.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1977 (17.6%), 9273 (82.4%) left; Finishing by Sat Oct 21  6:36:49 2000

(9,14,8) <- (9,0,1).*(1, 13+1,8): 126.313230 Mflop/s
(15,14,8) <- (15,1,1).*(1, 13+1,8): 126.549638 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 126.313230
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 8 15 14 14 8 15 8
<<< (M = 15, K = 14, N = 8) : 126.549638
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,8) :   126.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1978 (17.6%), 9272 (82.4%) left; Finishing by Sat Oct 21  6:36:53 2000

(12,9,9) <- (0,1,9).*(12, 8+1,1): 28.181133 Mflop/s
(12,9,15) <- (1,1,15).*(12, 8+1,1): 28.372388 Mflop/s

Testing m0 = 12, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 12  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 9 12 9 9 9 12 9
<<< (M = 12, K = 9, N = 9) : 28.181133
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 28.372388
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (12, 8,1) :    28.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1979 (17.6%), 9271 (82.4%) left; Finishing by Sat Oct 21  6:36:56 2000

(6,9,9) <- (1,1,9).*(6, 8+1,1): 114.935933 Mflop/s
(12,9,15) <- (2,1,15).*(6, 8+1,1): 116.320204 Mflop/s

Testing m0 = 6, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 9 6 9 9 9 6 9
<<< (M = 6, K = 9, N = 9) : 114.935933
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 116.320204
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 8,1) :   115.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1980 (17.6%), 9270 (82.4%) left; Finishing by Sat Oct 21  6:37:06 2000

(9,12,11) <- (9,3,0).*(1, 3+1,11): 141.050975 Mflop/s
(15,20,11) <- (15,5,1).*(1, 3+1,11): 129.277046 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 11 9 12 12 11 9 11
<<< (M = 9, K = 12, N = 11) : 141.050975
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 11 15 20 20 11 15 11
<<< (M = 15, K = 20, N = 11) : 129.277046
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,11) :   134.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1981 (17.6%), 9269 (82.4%) left; Finishing by Sat Oct 21  6:37:04 2000

(9,9,9) <- (3,1,9).*(3, 8+1,1): 149.570455 Mflop/s
(15,9,15) <- (5,1,15).*(3, 8+1,1): 154.489762 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 149.570455
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 154.489762
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 8,1) :   152.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1982 (17.6%), 9268 (82.4%) left; Finishing by Sat Oct 21  6:36:57 2000

(10,18,9) <- (0,9,9).*(10,1+1,1): 28.273142 Mflop/s
(10,30,15) <- (1,15,15).*(10,1+1,1): 29.170526 Mflop/s

Testing m0 = 10, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 10 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 18 9 10 18 18 9 10 9
<<< (M = 10, K = 18, N = 9) : 28.273142
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 30 15 10 30 30 15 10 15
<<< (M = 10, K = 30, N = 15) : 29.170526
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (10,1,1) :    28.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1983 (17.6%), 9267 (82.4%) left; Finishing by Sat Oct 21  6:37:00 2000

(9,6,6) <- (9,1,1).*(1, 5+1,6): 112.810732 Mflop/s
(15,18,12) <- (15,3,2).*(1, 5+1,6): 159.853414 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 6 9 6 6 6 9 6
<<< (M = 9, K = 6, N = 6) : 112.810732
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 159.853414
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,6) :   132.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1984 (17.6%), 9266 (82.4%) left; Finishing by Sat Oct 21  6:37:04 2000

(8,16,8) <- (1,0,4).*(8, 15+1,2): 104.030813 Mflop/s
(8,16,14) <- (1,1,7).*(8, 15+1,2): 104.687483 Mflop/s

Testing m0 = 8, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 104.030813
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 14 8 16 16 14 8 14
<<< (M = 8, K = 16, N = 14) : 104.687483
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 15,2) :   104.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1985 (17.6%), 9265 (82.4%) left; Finishing by Sat Oct 21  6:37:02 2000

(9,13,8) <- (3,0,2).*(3, 12+1,4): 127.771163 Mflop/s
(15,13,12) <- (5,1,3).*(3, 12+1,4): 130.179195 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 127.771163
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 130.179195
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 12,4) :   129.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1986 (17.7%), 9264 (82.3%) left; Finishing by Sat Oct 21  6:37:06 2000

(6,16,8) <- (1,0,4).*(6, 15+1,2): 119.121072 Mflop/s
(12,16,14) <- (2,1,7).*(6, 15+1,2): 83.329939 Mflop/s

Testing m0 = 6, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 16 8 6 16 16 8 6 8
<<< (M = 6, K = 16, N = 8) : 119.121072
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 14 12 16 16 14 12 14
<<< (M = 12, K = 16, N = 14) : 83.329939
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 15,2) :    98.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1987 (17.7%), 9263 (82.3%) left; Finishing by Sat Oct 21  6:37:10 2000

(7,8,9) <- (1,1,9).*(7, 7+1,1): 32.279698 Mflop/s
(14,16,15) <- (2,2,15).*(7, 7+1,1): 41.767435 Mflop/s

Testing m0 = 7, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 9 7 8 8 9 7 9
<<< (M = 7, K = 8, N = 9) : 32.279698
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 41.767435
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 7,1) :    36.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1988 (17.7%), 9262 (82.3%) left; Finishing by Sat Oct 21  6:37:08 2000

(5,6,9) <- (1,1,3).*(5, 5+1,3): 26.480372 Mflop/s
(15,18,15) <- (3,3,5).*(5, 5+1,3): 33.925687 Mflop/s

Testing m0 = 5, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 6 9 5 6 6 9 5 9
<<< (M = 5, K = 6, N = 9) : 26.480372
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 33.925687
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 5,3) :    29.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1989 (17.7%), 9261 (82.3%) left; Finishing by Sat Oct 21  6:37:06 2000

(5,10,9) <- (1,1,3).*(5, 9+1,3): 28.401805 Mflop/s
(15,10,15) <- (3,1,5).*(5, 9+1,3): 29.036969 Mflop/s

Testing m0 = 5, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 9 5 10 10 9 5 9
<<< (M = 5, K = 10, N = 9) : 28.401805
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 29.036969
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 9,3) :    28.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1990 (17.7%), 9260 (82.3%) left; Finishing by Sat Oct 21  6:37:05 2000

(9,13,8) <- (3,0,4).*(3, 12+1,2): 131.672719 Mflop/s
(15,13,14) <- (5,1,7).*(3, 12+1,2): 132.932089 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 131.672719
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 132.932089
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 12,2) :   132.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1991 (17.7%), 9259 (82.3%) left; Finishing by Sat Oct 21  6:36:57 2000

(9,12,9) <- (9,0,9).*(1, 11+1,1): 134.091528 Mflop/s
(15,12,15) <- (15,1,15).*(1, 11+1,1): 138.220899 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 134.091528
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 138.220899
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,1) :   136.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1992 (17.7%), 9258 (82.3%) left; Finishing by Sat Oct 21  6:36:55 2000

(8,7,8) <- (2,1,2).*(4, 6+1,4): 57.391852 Mflop/s
(12,14,12) <- (3,2,3).*(4, 6+1,4): 125.756821 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 57.391852
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 12 12 14 14 12 12 12
<<< (M = 12, K = 14, N = 12) : 125.756821
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 6,4) :    78.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1993 (17.7%), 9257 (82.3%) left; Finishing by Sat Oct 21  6:36:53 2000

(9,14,10) <- (9,0,0).*(1, 13+1,10): 123.726270 Mflop/s
(15,14,10) <- (15,1,1).*(1, 13+1,10): 124.071952 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 10 9 14 14 10 9 10
<<< (M = 9, K = 14, N = 10) : 123.726270
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 10 15 14 14 10 15 10
<<< (M = 15, K = 14, N = 10) : 124.071952
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,10) :   123.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1994 (17.7%), 9256 (82.3%) left; Finishing by Sat Oct 21  6:36:52 2000

(6,10,9) <- (1,2,9).*(6, 4+1,1): 109.160265 Mflop/s
(12,15,15) <- (2,3,15).*(6, 4+1,1): 123.600044 Mflop/s

Testing m0 = 6, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 10 9 6 10 10 9 6 9
<<< (M = 6, K = 10, N = 9) : 109.160265
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 123.600044
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 4,1) :   115.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1995 (17.7%), 9255 (82.3%) left; Finishing by Sat Oct 21  6:36:55 2000

(12,14,9) <- (0,0,9).*(12, 13+1,1): 105.553161 Mflop/s
(12,14,15) <- (1,1,15).*(12, 13+1,1): 104.936553 Mflop/s

Testing m0 = 12, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 12  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 9 12 14 14 9 12 9
<<< (M = 12, K = 14, N = 9) : 105.553161
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 104.936553
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (12, 13,1) :   105.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1996 (17.7%), 9254 (82.3%) left; Finishing by Sat Oct 21  6:36:54 2000

(12,16,9) <- (0,0,9).*(12, 15+1,1): 105.089080 Mflop/s
(12,16,15) <- (1,1,15).*(12, 15+1,1): 106.292175 Mflop/s

Testing m0 = 12, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 12  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 9 12 16 16 9 12 9
<<< (M = 12, K = 16, N = 9) : 105.089080
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 106.292175
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (12, 15,1) :   105.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1997 (17.8%), 9253 (82.2%) left; Finishing by Sat Oct 21  6:36:52 2000

(8,6,9) <- (2,1,9).*(4, 5+1,1): 121.894495 Mflop/s
(12,18,15) <- (3,3,15).*(4, 5+1,1): 197.640315 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 121.894495
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 197.640315
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 5,1) :   150.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1998 (17.8%), 9252 (82.2%) left; Finishing by Sat Oct 21  6:36:56 2000

(7,6,8) <- (1,1,4).*(7, 5+1,2): 22.460596 Mflop/s
(14,18,14) <- (2,3,7).*(7, 5+1,2): 30.965409 Mflop/s

Testing m0 = 7, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 6 8 7 6 6 8 7 8
<<< (M = 7, K = 6, N = 8) : 22.460596
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 14 14 18 18 14 14 14
<<< (M = 14, K = 18, N = 14) : 30.965409
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 5,2) :    26.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 1999 (17.8%), 9251 (82.2%) left; Finishing by Sat Oct 21  6:37:05 2000

(12,7,9) <- (0,1,9).*(12, 6+1,1): 26.883701 Mflop/s
(12,14,15) <- (1,2,15).*(12, 6+1,1): 30.734061 Mflop/s

Testing m0 = 12, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 12  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 7 9 12 7 7 9 12 9
<<< (M = 12, K = 7, N = 9) : 26.883701
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 30.734061
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (12, 6,1) :    28.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2000 (17.8%), 9250 (82.2%) left; Finishing by Sat Oct 21  6:37:03 2000

(16,13,9) <- (0,0,9).*(16, 12+1,1): 27.425586 Mflop/s
(16,13,15) <- (0,1,15).*(16, 12+1,1): 28.101764 Mflop/s

Testing m0 = 16, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 16  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 13 9 16 13 13 9 16 9
<<< (M = 16, K = 13, N = 9) : 27.425586
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 13 15 16 13 13 15 16 15
<<< (M = 16, K = 13, N = 15) : 28.101764
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (16, 12,1) :    27.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2001 (17.8%), 9249 (82.2%) left; Finishing by Sat Oct 21  6:37:07 2000

(8,14,8) <- (2,0,2).*(4, 13+1,4): 24.373975 Mflop/s
(12,14,12) <- (3,1,3).*(4, 13+1,4): 28.861193 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 24.373975
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 12 12 14 14 12 12 12
<<< (M = 12, K = 14, N = 12) : 28.861193
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 13,4) :    26.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2002 (17.8%), 9248 (82.2%) left; Finishing by Sat Oct 21  6:37:05 2000

(8,15,8) <- (2,0,2).*(4, 14+1,4): 24.506178 Mflop/s
(12,15,12) <- (3,1,3).*(4, 14+1,4): 29.385308 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 24.506178
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 12 12 15 15 12 12 12
<<< (M = 12, K = 15, N = 12) : 29.385308
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 14,4) :    26.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2003 (17.8%), 9247 (82.2%) left; Finishing by Sat Oct 21  6:37:09 2000

(8,10,8) <- (4,2,4).*(2, 4+1,2): 120.067933 Mflop/s
(14,15,14) <- (7,3,7).*(2, 4+1,2): 70.036147 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 120.067933
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 70.036147
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 4,2) :    88.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2004 (17.8%), 9246 (82.2%) left; Finishing by Sat Oct 21  6:37:01 2000

(9,12,5) <- (3,4,1).*(3, 2+1,5): 30.223400 Mflop/s
(15,21,15) <- (5,7,3).*(3, 2+1,5): 29.789825 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  2 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 30.223400
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 29.789825
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 2,5) :    30.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2005 (17.8%), 9245 (82.2%) left; Finishing by Sat Oct 21  6:37:00 2000

(12,11,9) <- (0,0,9).*(12, 10+1,1): 29.003197 Mflop/s
(12,11,15) <- (1,1,15).*(12, 10+1,1): 28.391411 Mflop/s

Testing m0 = 12, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 12  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 9 12 11 11 9 12 9
<<< (M = 12, K = 11, N = 9) : 29.003197
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 28.391411
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (12, 10,1) :    28.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2006 (17.8%), 9244 (82.2%) left; Finishing by Sat Oct 21  6:36:58 2000

(8,11,9) <- (1,0,9).*(8, 10+1,1): 88.470241 Mflop/s
(8,11,15) <- (1,1,15).*(8, 10+1,1): 89.310228 Mflop/s

Testing m0 = 8, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 88.470241
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 15 8 11 11 15 8 15
<<< (M = 8, K = 11, N = 15) : 89.310228
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 10,1) :    88.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2007 (17.8%), 9243 (82.2%) left; Finishing by Sat Oct 21  6:36:56 2000

(6,13,8) <- (1,0,4).*(6, 12+1,2): 118.095126 Mflop/s
(12,13,14) <- (2,1,7).*(6, 12+1,2): 82.133644 Mflop/s

Testing m0 = 6, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 13 8 6 13 13 8 6 8
<<< (M = 6, K = 13, N = 8) : 118.095126
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 14 12 13 13 14 12 14
<<< (M = 12, K = 13, N = 14) : 82.133644
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 12,2) :    96.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2008 (17.8%), 9242 (82.2%) left; Finishing by Sat Oct 21  6:36:54 2000

(15,10,9) <- (0,2,9).*(15, 4+1,1): 112.287659 Mflop/s
(15,15,15) <- (1,3,15).*(15, 4+1,1): 121.645429 Mflop/s

Testing m0 = 15, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 15  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 9 15 10 10 9 15 9
<<< (M = 15, K = 10, N = 9) : 112.287659
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 121.645429
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (15, 4,1) :   116.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2009 (17.9%), 9241 (82.1%) left; Finishing by Sat Oct 21  6:36:52 2000

(9,12,8) <- (9,0,4).*(1, 11+1,2): 145.598933 Mflop/s
(15,12,14) <- (15,1,7).*(1, 11+1,2): 146.164934 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 145.598933
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 146.164934
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,2) :   145.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2010 (17.9%), 9240 (82.1%) left; Finishing by Sat Oct 21  6:36:56 2000

(9,7,5) <- (3,1,1).*(3, 6+1,5): 107.462936 Mflop/s
(15,14,15) <- (5,2,3).*(3, 6+1,5): 134.670817 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  6 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 5 9 7 7 5 9 5
<<< (M = 9, K = 7, N = 5) : 107.462936
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 134.670817
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 6,5) :   119.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2011 (17.9%), 9239 (82.1%) left; Finishing by Sat Oct 21  6:37:00 2000

(9,18,16) <- (9,9,0).*(1,1+1,16): 29.522241 Mflop/s
(15,30,16) <- (15,15,0).*(1,1+1,16): 30.259712 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 16 9 18 18 16 9 16
<<< (M = 9, K = 18, N = 16) : 29.522241
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 16 15 30 30 16 15 16
<<< (M = 15, K = 30, N = 16) : 30.259712
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,16) :    29.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2012 (17.9%), 9238 (82.1%) left; Finishing by Sat Oct 21  6:36:58 2000

(15,18,9) <- (0,9,9).*(15,1+1,1): 82.389149 Mflop/s
(15,30,15) <- (1,15,15).*(15,1+1,1): 91.617886 Mflop/s

Testing m0 = 15, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 15 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 9 15 18 18 9 15 9
<<< (M = 15, K = 18, N = 9) : 82.389149
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 91.617886
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (15,1,1) :    86.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2013 (17.9%), 9237 (82.1%) left; Finishing by Sat Oct 21  6:36:56 2000

(10,12,9) <- (0,3,9).*(10, 3+1,1): 36.921925 Mflop/s
(10,20,15) <- (1,5,15).*(10, 3+1,1): 32.576798 Mflop/s

Testing m0 = 10, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 10  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 9 10 12 12 9 10 9
<<< (M = 10, K = 12, N = 9) : 36.921925
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 20 15 10 20 20 15 10 15
<<< (M = 10, K = 20, N = 15) : 32.576798
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (10, 3,1) :    34.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2014 (17.9%), 9236 (82.1%) left; Finishing by Sat Oct 21  6:36:49 2000

(9,6,5) <- (3,1,1).*(3, 5+1,5): 102.300060 Mflop/s
(15,18,15) <- (5,3,3).*(3, 5+1,5): 143.807531 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  5 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 5 9 6 6 5 9 5
<<< (M = 9, K = 6, N = 5) : 102.300060
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 143.807531
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 5,5) :   119.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2015 (17.9%), 9235 (82.1%) left; Finishing by Sat Oct 21  6:36:53 2000

(5,11,9) <- (1,0,3).*(5, 10+1,3): 28.710591 Mflop/s
(15,11,15) <- (3,1,5).*(5, 10+1,3): 29.253343 Mflop/s

Testing m0 = 5, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 11 9 5 11 11 9 5 9
<<< (M = 5, K = 11, N = 9) : 28.710591
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 29.253343
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 10,3) :    29.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2016 (17.9%), 9234 (82.1%) left; Finishing by Sat Oct 21  6:36:51 2000

(9,18,9) <- (9,9,3).*(1,1+1,3): 119.724731 Mflop/s
(15,30,15) <- (15,15,5).*(1,1+1,3): 126.685453 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 9 9 18 18 9 9 9
<<< (M = 9, K = 18, N = 9) : 119.724731
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 126.685453
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,3) :   123.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2017 (17.9%), 9233 (82.1%) left; Finishing by Sat Oct 21  6:36:49 2000

(6,10,8) <- (1,1,4).*(6, 9+1,2): 111.087659 Mflop/s
(12,10,14) <- (2,1,7).*(6, 9+1,2): 80.040150 Mflop/s

Testing m0 = 6, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 10 8 6 10 10 8 6 8
<<< (M = 6, K = 10, N = 8) : 111.087659
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 14 12 10 10 14 12 14
<<< (M = 12, K = 10, N = 14) : 80.040150
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 9,2) :    93.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2018 (17.9%), 9232 (82.1%) left; Finishing by Sat Oct 21  6:36:53 2000

(8,18,9) <- (2,9,3).*(4,1+1,3): 108.913240 Mflop/s
(12,30,15) <- (3,15,5).*(4,1+1,3): 112.862597 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 9 8 18 18 9 8 9
<<< (M = 8, K = 18, N = 9) : 108.913240
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 30 15 12 30 30 15 12 15
<<< (M = 12, K = 30, N = 15) : 112.862597
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4,1,3) :   110.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2019 (17.9%), 9231 (82.1%) left; Finishing by Sat Oct 21  6:36:51 2000

(8,13,9) <- (4,0,9).*(2, 12+1,1): 172.214148 Mflop/s
(14,13,15) <- (7,1,15).*(2, 12+1,1): 177.303749 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 172.214148
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 177.303749
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 12,1) :   174.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2020 (18.0%), 9230 (82.0%) left; Finishing by Sat Oct 21  6:36:55 2000

(8,10,8) <- (1,2,4).*(8, 4+1,2): 30.421260 Mflop/s
(8,15,14) <- (1,3,7).*(8, 4+1,2): 32.578723 Mflop/s

Testing m0 = 8, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 30.421260
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 14 8 15 15 14 8 14
<<< (M = 8, K = 15, N = 14) : 32.578723
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 4,2) :    31.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2021 (18.0%), 9229 (82.0%) left; Finishing by Sat Oct 21  6:36:53 2000

(5,12,9) <- (1,0,9).*(5, 11+1,1): 70.050848 Mflop/s
(15,12,15) <- (3,1,15).*(5, 11+1,1): 82.925425 Mflop/s

Testing m0 = 5, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 70.050848
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 82.925425
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 11,1) :    75.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2022 (18.0%), 9228 (82.0%) left; Finishing by Sat Oct 21  6:36:51 2000

(8,12,7) <- (4,3,1).*(2, 3+1,7): 34.953739 Mflop/s
(14,20,14) <- (7,5,2).*(2, 3+1,7): 31.604573 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  3 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 7 8 12 12 7 8 7
<<< (M = 8, K = 12, N = 7) : 34.953739
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 14 14 20 20 14 14 14
<<< (M = 14, K = 20, N = 14) : 31.604573
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 3,7) :    33.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2023 (18.0%), 9227 (82.0%) left; Finishing by Sat Oct 21  6:36:44 2000

(8,16,8) <- (4,0,4).*(2, 15+1,2): 143.095593 Mflop/s
(14,16,14) <- (7,1,7).*(2, 15+1,2): 75.596961 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 143.095593
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 75.596961
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 15,2) :    98.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2024 (18.0%), 9226 (82.0%) left; Finishing by Sat Oct 21  6:36:42 2000

(9,6,13) <- (9,1,0).*(1, 5+1,13): 104.976200 Mflop/s
(15,18,13) <- (15,3,1).*(1, 5+1,13): 138.523705 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 13 9 6 6 13 9 13
<<< (M = 9, K = 6, N = 13) : 104.976200
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 13 15 18 18 13 15 13
<<< (M = 15, K = 18, N = 13) : 138.523705
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,13) :   119.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2025 (18.0%), 9225 (82.0%) left; Finishing by Sat Oct 21  6:36:46 2000

(9,12,9) <- (9,3,3).*(1, 3+1,3): 171.720521 Mflop/s
(15,20,15) <- (15,5,5).*(1, 3+1,3): 152.497716 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 171.720521
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 152.497716
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,3) :   161.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2026 (18.0%), 9224 (82.0%) left; Finishing by Sat Oct 21  6:36:44 2000

(9,12,13) <- (9,4,0).*(1, 2+1,13): 126.648689 Mflop/s
(15,21,13) <- (15,7,1).*(1, 2+1,13): 120.626574 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 13 9 12 12 13 9 13
<<< (M = 9, K = 12, N = 13) : 126.648689
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 13 15 21 21 13 15 13
<<< (M = 15, K = 21, N = 13) : 120.626574
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,13) :   123.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2027 (18.0%), 9223 (82.0%) left; Finishing by Sat Oct 21  6:36:37 2000

(9,11,9) <- (9,0,9).*(1, 10+1,1): 127.601364 Mflop/s
(15,11,15) <- (15,1,15).*(1, 10+1,1): 131.816540 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 127.601364
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 131.816540
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,1) :   129.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2028 (18.0%), 9222 (82.0%) left; Finishing by Sat Oct 21  6:36:40 2000

(5,12,8) <- (1,4,4).*(5, 2+1,2): 32.359503 Mflop/s
(15,21,14) <- (3,7,7).*(5, 2+1,2): 32.124819 Mflop/s

Testing m0 = 5, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 8 5 12 12 8 5 8
<<< (M = 5, K = 12, N = 8) : 32.359503
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 14 15 21 21 14 15 14
<<< (M = 15, K = 21, N = 14) : 32.124819
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 2,2) :    32.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2029 (18.0%), 9221 (82.0%) left; Finishing by Sat Oct 21  6:36:39 2000

(9,12,9) <- (9,0,3).*(1, 11+1,3): 140.798867 Mflop/s
(15,12,15) <- (15,1,5).*(1, 11+1,3): 149.065443 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 140.798867
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 149.065443
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,3) :   144.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2030 (18.0%), 9220 (82.0%) left; Finishing by Sat Oct 21  6:36:31 2000

(9,10,11) <- (9,1,0).*(1, 9+1,11): 116.473542 Mflop/s
(15,10,11) <- (15,1,1).*(1, 9+1,11): 117.239487 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 11 9 10 10 11 9 11
<<< (M = 9, K = 10, N = 11) : 116.473542
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 11 15 10 10 11 15 11
<<< (M = 15, K = 10, N = 11) : 117.239487
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,11) :   116.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2031 (18.1%), 9219 (81.9%) left; Finishing by Sat Oct 21  6:36:35 2000

(7,16,9) <- (1,0,9).*(7, 15+1,1): 36.500579 Mflop/s
(14,16,15) <- (2,1,15).*(7, 15+1,1): 39.611696 Mflop/s

Testing m0 = 7, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 16 9 7 16 16 9 7 9
<<< (M = 7, K = 16, N = 9) : 36.500579
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 39.611696
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 15,1) :    38.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2032 (18.1%), 9218 (81.9%) left; Finishing by Sat Oct 21  6:36:33 2000

(9,14,16) <- (9,0,0).*(1, 13+1,16): 126.041414 Mflop/s
(15,14,16) <- (15,1,0).*(1, 13+1,16): 126.264004 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 16 9 14 14 16 9 16
<<< (M = 9, K = 14, N = 16) : 126.041414
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 16 15 14 14 16 15 16
<<< (M = 15, K = 14, N = 16) : 126.264004
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,16) :   126.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2033 (18.1%), 9217 (81.9%) left; Finishing by Sat Oct 21  6:36:32 2000

(9,7,9) <- (9,1,9).*(1, 6+1,1): 103.979461 Mflop/s
(15,14,15) <- (15,2,15).*(1, 6+1,1): 144.370070 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 103.979461
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 144.370070
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,1) :   120.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2034 (18.1%), 9216 (81.9%) left; Finishing by Sat Oct 21  6:36:30 2000

(9,10,16) <- (9,1,0).*(1, 9+1,16): 119.969460 Mflop/s
(15,10,16) <- (15,1,0).*(1, 9+1,16): 120.695815 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 16 9 10 10 16 9 16
<<< (M = 9, K = 10, N = 16) : 119.969460
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 16 15 10 10 16 15 16
<<< (M = 15, K = 10, N = 16) : 120.695815
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,16) :   120.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2035 (18.1%), 9215 (81.9%) left; Finishing by Sat Oct 21  6:36:28 2000

(8,9,8) <- (2,1,4).*(4, 8+1,2): 29.533892 Mflop/s
(12,9,14) <- (3,1,7).*(4, 8+1,2): 29.562627 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 29.533892
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 14 12 9 9 14 12 14
<<< (M = 12, K = 9, N = 14) : 29.562627
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 8,2) :    29.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2036 (18.1%), 9214 (81.9%) left; Finishing by Sat Oct 21  6:36:26 2000

(9,13,12) <- (9,0,0).*(1, 12+1,12): 119.190314 Mflop/s
(15,13,12) <- (15,1,1).*(1, 12+1,12): 119.624011 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 12 9 13 13 12 9 12
<<< (M = 9, K = 13, N = 12) : 119.190314
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 119.624011
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,12) :   119.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2037 (18.1%), 9213 (81.9%) left; Finishing by Sat Oct 21  6:36:24 2000

(9,10,8) <- (3,1,4).*(3, 9+1,2): 126.063514 Mflop/s
(15,10,14) <- (5,1,7).*(3, 9+1,2): 128.331587 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 126.063514
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 128.331587
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 9,2) :   127.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2038 (18.1%), 9212 (81.9%) left; Finishing by Sat Oct 21  6:36:28 2000

(10,16,9) <- (0,0,9).*(10, 15+1,1): 106.431514 Mflop/s
(10,16,15) <- (1,1,15).*(10, 15+1,1): 107.914671 Mflop/s

Testing m0 = 10, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 10  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 16 9 10 16 16 9 10 9
<<< (M = 10, K = 16, N = 9) : 106.431514
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 16 15 10 16 16 15 10 15
<<< (M = 10, K = 16, N = 15) : 107.914671
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (10, 15,1) :   107.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2039 (18.1%), 9211 (81.9%) left; Finishing by Sat Oct 21  6:36:26 2000

(12,12,9) <- (0,4,9).*(12, 2+1,1): 31.205395 Mflop/s
(12,21,15) <- (1,7,15).*(12, 2+1,1): 29.765668 Mflop/s

Testing m0 = 12, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 12  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 9 12 12 12 9 12 9
<<< (M = 12, K = 12, N = 9) : 31.205395
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 15 12 21 21 15 12 15
<<< (M = 12, K = 21, N = 15) : 29.765668
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (12, 2,1) :    30.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2040 (18.1%), 9210 (81.9%) left; Finishing by Sat Oct 21  6:36:25 2000

(9,18,8) <- (3,9,2).*(3,1+1,4): 30.193718 Mflop/s
(15,30,12) <- (5,15,3).*(3,1+1,4): 29.416138 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 8 9 18 18 8 9 8
<<< (M = 9, K = 18, N = 8) : 30.193718
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 12 15 30 30 12 15 12
<<< (M = 15, K = 30, N = 12) : 29.416138
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3,1,4) :    29.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2041 (18.1%), 9209 (81.9%) left; Finishing by Sat Oct 21  6:36:17 2000

(5,6,8) <- (1,1,4).*(5, 5+1,2): 27.765220 Mflop/s
(15,18,14) <- (3,3,7).*(5, 5+1,2): 36.534813 Mflop/s

Testing m0 = 5, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 6 8 5 6 6 8 5 8
<<< (M = 5, K = 6, N = 8) : 27.765220
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 36.534813
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 5,2) :    31.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2042 (18.2%), 9208 (81.8%) left; Finishing by Sat Oct 21  6:36:16 2000

(9,6,12) <- (9,1,0).*(1, 5+1,12): 104.919021 Mflop/s
(15,18,12) <- (15,3,1).*(1, 5+1,12): 136.876410 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 12 9 6 6 12 9 12
<<< (M = 9, K = 6, N = 12) : 104.919021
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 136.876410
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,12) :   118.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2043 (18.2%), 9207 (81.8%) left; Finishing by Sat Oct 21  6:36:19 2000

(8,18,8) <- (2,9,2).*(4,1+1,4): 114.856052 Mflop/s
(12,30,12) <- (3,15,3).*(4,1+1,4): 119.346247 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 8 8 18 18 8 8 8
<<< (M = 8, K = 18, N = 8) : 114.856052
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 30 12 12 30 30 12 12 12
<<< (M = 12, K = 30, N = 12) : 119.346247
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4,1,4) :   117.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2044 (18.2%), 9206 (81.8%) left; Finishing by Sat Oct 21  6:36:18 2000

(8,16,9) <- (4,0,9).*(2, 15+1,1): 183.782892 Mflop/s
(14,16,15) <- (7,1,15).*(2, 15+1,1): 188.434712 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 183.782892
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 188.434712
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 15,1) :   186.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2045 (18.2%), 9205 (81.8%) left; Finishing by Sat Oct 21  6:36:10 2000

(9,18,8) <- (3,9,4).*(3,1+1,2): 44.146427 Mflop/s
(15,30,14) <- (5,15,7).*(3,1+1,2): 34.496520 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 8 9 18 18 8 9 8
<<< (M = 9, K = 18, N = 8) : 44.146427
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 14 15 30 30 14 15 14
<<< (M = 15, K = 30, N = 14) : 34.496520
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3,1,2) :    38.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2046 (18.2%), 9204 (81.8%) left; Finishing by Sat Oct 21  6:36:09 2000

(9,10,9) <- (9,1,9).*(1, 9+1,1): 126.759779 Mflop/s
(15,10,15) <- (15,1,15).*(1, 9+1,1): 132.882343 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 126.759779
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 132.882343
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,1) :   129.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2047 (18.2%), 9203 (81.8%) left; Finishing by Sat Oct 21  6:36:12 2000

(13,7,9) <- (0,1,9).*(13, 6+1,1): 93.224861 Mflop/s
(13,14,15) <- (1,2,15).*(13, 6+1,1): 88.612535 Mflop/s

Testing m0 = 13, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 13  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 7 9 13 7 7 9 13 9
<<< (M = 13, K = 7, N = 9) : 93.224861
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 15 13 14 14 15 13 15
<<< (M = 13, K = 14, N = 15) : 88.612535
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (13, 6,1) :    90.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2048 (18.2%), 9202 (81.8%) left; Finishing by Sat Oct 21  6:36:11 2000

(9,9,8) <- (9,1,4).*(1, 8+1,2): 135.310367 Mflop/s
(15,9,14) <- (15,1,7).*(1, 8+1,2): 137.478609 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 135.310367
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 137.478609
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,2) :   136.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2049 (18.2%), 9201 (81.8%) left; Finishing by Sat Oct 21  6:36:09 2000

(9,6,14) <- (9,1,0).*(1, 5+1,14): 107.086123 Mflop/s
(15,18,14) <- (15,3,1).*(1, 5+1,14): 144.060218 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 14 9 6 6 14 9 14
<<< (M = 9, K = 6, N = 14) : 107.086123
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 144.060218
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,14) :   122.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2050 (18.2%), 9200 (81.8%) left; Finishing by Sat Oct 21  6:36:07 2000

(5,16,9) <- (1,0,9).*(5, 15+1,1): 74.546020 Mflop/s
(15,16,15) <- (3,1,15).*(5, 15+1,1): 85.129926 Mflop/s

Testing m0 = 5, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 16 9 5 16 16 9 5 9
<<< (M = 5, K = 16, N = 9) : 74.546020
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 85.129926
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 15,1) :    79.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2051 (18.2%), 9199 (81.8%) left; Finishing by Sat Oct 21  6:36:05 2000

(12,13,9) <- (0,0,9).*(12, 12+1,1): 103.178906 Mflop/s
(12,13,15) <- (1,1,15).*(12, 12+1,1): 105.177540 Mflop/s

Testing m0 = 12, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 12  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 9 12 13 13 9 12 9
<<< (M = 12, K = 13, N = 9) : 103.178906
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 105.177540
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (12, 12,1) :   104.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2052 (18.2%), 9198 (81.8%) left; Finishing by Sat Oct 21  6:36:04 2000

(8,10,8) <- (2,1,2).*(4, 9+1,4): 23.671523 Mflop/s
(12,10,12) <- (3,1,3).*(4, 9+1,4): 28.379302 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 23.671523
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 12 12 10 10 12 12 12
<<< (M = 12, K = 10, N = 12) : 28.379302
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 9,4) :    25.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2053 (18.2%), 9197 (81.8%) left; Finishing by Sat Oct 21  6:36:02 2000

(8,11,5) <- (4,0,1).*(2, 10+1,5): 31.255185 Mflop/s
(14,11,15) <- (7,1,3).*(2, 10+1,5): 30.638736 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  10 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 5 8 11 11 5 8 5
<<< (M = 8, K = 11, N = 5) : 31.255185
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 30.638736
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 10,5) :    30.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2054 (18.3%), 9196 (81.7%) left; Finishing by Sat Oct 21  6:36:00 2000

(8,6,7) <- (4,1,1).*(2, 5+1,7): 27.026183 Mflop/s
(14,18,14) <- (7,3,2).*(2, 5+1,7): 34.226523 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  5 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 7 8 6 6 7 8 7
<<< (M = 8, K = 6, N = 7) : 27.026183
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 14 14 18 18 14 14 14
<<< (M = 14, K = 18, N = 14) : 34.226523
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 5,7) :    30.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2055 (18.3%), 9195 (81.7%) left; Finishing by Sat Oct 21  6:35:58 2000

(9,13,8) <- (9,0,2).*(1, 12+1,4): 145.272614 Mflop/s
(15,13,12) <- (15,1,3).*(1, 12+1,4): 148.359460 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 145.272614
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 148.359460
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,4) :   146.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2056 (18.3%), 9194 (81.7%) left; Finishing by Sat Oct 21  6:36:02 2000

(8,10,5) <- (4,1,1).*(2, 9+1,5): 30.974242 Mflop/s
(14,10,15) <- (7,1,3).*(2, 9+1,5): 30.356022 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  9 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 5 8 10 10 5 8 5
<<< (M = 8, K = 10, N = 5) : 30.974242
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 30.356022
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 9,5) :    30.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2057 (18.3%), 9193 (81.7%) left; Finishing by Sat Oct 21  6:36:00 2000

(11,10,9) <- (0,1,9).*(11, 9+1,1): 83.116779 Mflop/s
(11,10,15) <- (1,1,15).*(11, 9+1,1): 105.136111 Mflop/s

Testing m0 = 11, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 11  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 10 9 11 10 10 9 11 9
<<< (M = 11, K = 10, N = 9) : 83.116779
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 10 15 11 10 10 15 11 15
<<< (M = 11, K = 10, N = 15) : 105.136111
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (11, 9,1) :    92.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2058 (18.3%), 9192 (81.7%) left; Finishing by Sat Oct 21  6:35:53 2000

(10,11,9) <- (0,0,9).*(10, 10+1,1): 99.120833 Mflop/s
(10,11,15) <- (1,1,15).*(10, 10+1,1): 99.881557 Mflop/s

Testing m0 = 10, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 10  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 11 9 10 11 11 9 10 9
<<< (M = 10, K = 11, N = 9) : 99.120833
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 11 15 10 11 11 15 10 15
<<< (M = 10, K = 11, N = 15) : 99.881557
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (10, 10,1) :    99.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2059 (18.3%), 9191 (81.7%) left; Finishing by Sat Oct 21  6:35:51 2000

(5,12,8) <- (1,0,4).*(5, 11+1,2): 30.655722 Mflop/s
(15,12,14) <- (3,1,7).*(5, 11+1,2): 31.846251 Mflop/s

Testing m0 = 5, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 8 5 12 12 8 5 8
<<< (M = 5, K = 12, N = 8) : 30.655722
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 31.846251
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 11,2) :    31.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2060 (18.3%), 9190 (81.7%) left; Finishing by Sat Oct 21  6:35:50 2000

(8,12,8) <- (4,4,2).*(2, 2+1,4): 37.225604 Mflop/s
(14,21,12) <- (7,7,3).*(2, 2+1,4): 28.812450 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 37.225604
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 12 14 21 21 12 14 12
<<< (M = 14, K = 21, N = 12) : 28.812450
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 2,4) :    32.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2061 (18.3%), 9189 (81.7%) left; Finishing by Sat Oct 21  6:35:48 2000

(9,18,9) <- (9,9,9).*(1,1+1,1): 92.413221 Mflop/s
(15,30,15) <- (15,15,15).*(1,1+1,1): 102.185567 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 9 9 18 18 9 9 9
<<< (M = 9, K = 18, N = 9) : 92.413221
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 102.185567
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,1) :    97.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2062 (18.3%), 9188 (81.7%) left; Finishing by Sat Oct 21  6:35:46 2000

(8,12,8) <- (2,0,2).*(4, 11+1,4): 24.222923 Mflop/s
(12,12,12) <- (3,1,3).*(4, 11+1,4): 28.897544 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 24.222923
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 12 12 12 12 12 12 12
<<< (M = 12, K = 12, N = 12) : 28.897544
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 11,4) :    26.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2063 (18.3%), 9187 (81.7%) left; Finishing by Sat Oct 21  6:35:44 2000

(8,6,9) <- (2,1,3).*(4, 5+1,3): 87.199088 Mflop/s
(12,18,15) <- (3,3,5).*(4, 5+1,3): 132.476911 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 87.199088
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 132.476911
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 5,3) :   105.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2064 (18.3%), 9186 (81.7%) left; Finishing by Sat Oct 21  6:35:48 2000

(9,10,9) <- (9,2,3).*(1, 4+1,3): 145.448697 Mflop/s
(15,15,15) <- (15,3,5).*(1, 4+1,3): 164.772417 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 145.448697
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 164.772417
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,3) :   154.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2065 (18.4%), 9185 (81.6%) left; Finishing by Sat Oct 21  6:35:46 2000

(9,15,5) <- (3,0,1).*(3, 14+1,5): 124.579563 Mflop/s
(15,15,15) <- (5,1,3).*(3, 14+1,5): 128.080294 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  14 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 5 9 15 15 5 9 5
<<< (M = 9, K = 15, N = 5) : 124.579563
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 128.080294
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 14,5) :   126.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2066 (18.4%), 9184 (81.6%) left; Finishing by Sat Oct 21  6:35:50 2000

(9,10,5) <- (9,1,1).*(1, 9+1,5): 127.330383 Mflop/s
(15,10,15) <- (15,1,3).*(1, 9+1,5): 133.715168 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 5 9 10 10 5 9 5
<<< (M = 9, K = 10, N = 5) : 127.330383
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 133.715168
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,5) :   130.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2067 (18.4%), 9183 (81.6%) left; Finishing by Sat Oct 21  6:35:54 2000

(8,10,8) <- (1,1,4).*(8, 9+1,2): 97.915306 Mflop/s
(8,10,14) <- (1,1,7).*(8, 9+1,2): 99.387983 Mflop/s

Testing m0 = 8, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 97.915306
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 14 8 10 10 14 8 14
<<< (M = 8, K = 10, N = 14) : 99.387983
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 9,2) :    98.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2068 (18.4%), 9182 (81.6%) left; Finishing by Sat Oct 21  6:35:57 2000

(8,13,8) <- (4,0,2).*(2, 12+1,4): 35.657961 Mflop/s
(14,13,12) <- (7,1,3).*(2, 12+1,4): 30.398630 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 35.657961
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 12 14 13 13 12 14 12
<<< (M = 14, K = 13, N = 12) : 30.398630
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 12,4) :    32.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2069 (18.4%), 9181 (81.6%) left; Finishing by Sat Oct 21  6:35:56 2000

(8,12,8) <- (4,0,2).*(2, 11+1,4): 35.365605 Mflop/s
(14,12,12) <- (7,1,3).*(2, 11+1,4): 30.536321 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 35.365605
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 30.536321
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 11,4) :    32.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2070 (18.4%), 9180 (81.6%) left; Finishing by Sat Oct 21  6:35:54 2000

(5,7,9) <- (1,1,3).*(5, 6+1,3): 27.131602 Mflop/s
(15,14,15) <- (3,2,5).*(5, 6+1,3): 32.016689 Mflop/s

Testing m0 = 5, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 7 9 5 7 7 9 5 9
<<< (M = 5, K = 7, N = 9) : 27.131602
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 32.016689
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 6,3) :    29.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2071 (18.4%), 9179 (81.6%) left; Finishing by Sat Oct 21  6:35:52 2000

(14,14,9) <- (0,0,9).*(14, 13+1,1): 27.944944 Mflop/s
(14,14,15) <- (1,1,15).*(14, 13+1,1): 30.008775 Mflop/s

Testing m0 = 14, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 14  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 9 14 14 14 9 14 9
<<< (M = 14, K = 14, N = 9) : 27.944944
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 30.008775
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (14, 13,1) :    28.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2072 (18.4%), 9178 (81.6%) left; Finishing by Sat Oct 21  6:35:51 2000

(9,10,9) <- (3,2,9).*(3, 4+1,1): 169.513855 Mflop/s
(15,15,15) <- (5,3,15).*(3, 4+1,1): 193.430435 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 169.513855
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 193.430435
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 4,1) :   180.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2073 (18.4%), 9177 (81.6%) left; Finishing by Sat Oct 21  6:35:54 2000

(8,9,6) <- (4,1,1).*(2, 8+1,6): 30.317963 Mflop/s
(14,9,12) <- (7,1,2).*(2, 8+1,6): 30.569453 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  8 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 6 8 9 9 6 8 6
<<< (M = 8, K = 9, N = 6) : 30.317963
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 12 14 9 9 12 14 12
<<< (M = 14, K = 9, N = 12) : 30.569453
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 8,6) :    30.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2074 (18.4%), 9176 (81.6%) left; Finishing by Sat Oct 21  6:35:53 2000

(8,12,9) <- (4,3,3).*(2, 3+1,3): 54.289387 Mflop/s
(14,20,15) <- (7,5,5).*(2, 3+1,3): 36.934413 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 54.289387
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 15 14 20 20 15 14 15
<<< (M = 14, K = 20, N = 15) : 36.934413
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 3,3) :    44.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2075 (18.4%), 9175 (81.6%) left; Finishing by Sat Oct 21  6:35:45 2000

(15,10,9) <- (0,1,9).*(15, 9+1,1): 85.379679 Mflop/s
(15,10,15) <- (1,1,15).*(15, 9+1,1): 102.510874 Mflop/s

Testing m0 = 15, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 15  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 9 15 10 10 9 15 9
<<< (M = 15, K = 10, N = 9) : 85.379679
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 102.510874
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (15, 9,1) :    93.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2076 (18.5%), 9174 (81.5%) left; Finishing by Sat Oct 21  6:35:44 2000

(6,16,9) <- (1,0,9).*(6, 15+1,1): 121.624528 Mflop/s
(12,16,15) <- (2,1,15).*(6, 15+1,1): 125.984703 Mflop/s

Testing m0 = 6, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 16 9 6 16 16 9 6 9
<<< (M = 6, K = 16, N = 9) : 121.624528
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 125.984703
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 15,1) :   123.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2077 (18.5%), 9173 (81.5%) left; Finishing by Sat Oct 21  6:35:42 2000

(9,8,9) <- (1,1,9).*(9, 7+1,1): 29.961443 Mflop/s
(9,16,15) <- (1,2,15).*(9, 7+1,1): 34.391885 Mflop/s

Testing m0 = 9, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 9  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 29.961443
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 15 9 16 16 15 9 15
<<< (M = 9, K = 16, N = 15) : 34.391885
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (9, 7,1) :    32.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2078 (18.5%), 9172 (81.5%) left; Finishing by Sat Oct 21  6:35:40 2000

(9,12,6) <- (9,3,1).*(1, 3+1,6): 146.492940 Mflop/s
(15,20,12) <- (15,5,2).*(1, 3+1,6): 141.590754 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 6 9 12 12 6 9 6
<<< (M = 9, K = 12, N = 6) : 146.492940
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 12 15 20 20 12 15 12
<<< (M = 15, K = 20, N = 12) : 141.590754
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,6) :   144.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2079 (18.5%), 9171 (81.5%) left; Finishing by Sat Oct 21  6:35:44 2000

(16,12,9) <- (0,4,9).*(16, 2+1,1): 29.374655 Mflop/s
(16,21,15) <- (0,7,15).*(16, 2+1,1): 27.956582 Mflop/s

Testing m0 = 16, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 16  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 9 16 12 12 9 16 9
<<< (M = 16, K = 12, N = 9) : 29.374655
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 21 15 16 21 21 15 16 15
<<< (M = 16, K = 21, N = 15) : 27.956582
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (16, 2,1) :    28.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2080 (18.5%), 9170 (81.5%) left; Finishing by Sat Oct 21  6:35:42 2000

(8,10,7) <- (4,2,1).*(2, 4+1,7): 32.059536 Mflop/s
(14,15,14) <- (7,3,2).*(2, 4+1,7): 34.297712 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  4 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 7 8 10 10 7 8 7
<<< (M = 8, K = 10, N = 7) : 32.059536
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 34.297712
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 4,7) :    33.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2081 (18.5%), 9169 (81.5%) left; Finishing by Sat Oct 21  6:35:40 2000

(9,10,8) <- (9,1,2).*(1, 9+1,4): 140.191942 Mflop/s
(15,10,12) <- (15,1,3).*(1, 9+1,4): 143.946278 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 140.191942
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 143.946278
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,4) :   142.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2082 (18.5%), 9168 (81.5%) left; Finishing by Sat Oct 21  6:35:39 2000

(8,7,8) <- (4,1,2).*(2, 6+1,4): 32.848789 Mflop/s
(14,14,12) <- (7,2,3).*(2, 6+1,4): 33.374639 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 32.848789
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 33.374639
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 6,4) :    33.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2083 (18.5%), 9167 (81.5%) left; Finishing by Sat Oct 21  6:35:37 2000

(9,16,8) <- (3,0,4).*(3, 15+1,2): 137.211182 Mflop/s
(15,16,14) <- (5,1,7).*(3, 15+1,2): 136.212778 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 137.211182
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 136.212778
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 15,2) :   136.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2084 (18.5%), 9166 (81.5%) left; Finishing by Sat Oct 21  6:35:35 2000

(14,16,9) <- (0,0,9).*(14, 15+1,1): 107.382081 Mflop/s
(14,16,15) <- (1,1,15).*(14, 15+1,1): 107.934167 Mflop/s

Testing m0 = 14, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 14  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 9 14 16 16 9 14 9
<<< (M = 14, K = 16, N = 9) : 107.382081
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 107.934167
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (14, 15,1) :   107.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2085 (18.5%), 9165 (81.5%) left; Finishing by Sat Oct 21  6:35:34 2000

(9,15,6) <- (9,0,1).*(1, 14+1,6): 135.858991 Mflop/s
(15,15,12) <- (15,1,2).*(1, 14+1,6): 145.048789 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 6 9 15 15 6 9 6
<<< (M = 9, K = 15, N = 6) : 135.858991
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 145.048789
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,6) :   140.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2086 (18.5%), 9164 (81.5%) left; Finishing by Sat Oct 21  6:35:37 2000

(8,10,9) <- (2,2,9).*(4, 4+1,1): 167.368720 Mflop/s
(12,15,15) <- (3,3,15).*(4, 4+1,1): 192.046182 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 167.368720
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 192.046182
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 4,1) :   178.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2087 (18.6%), 9163 (81.4%) left; Finishing by Sat Oct 21  6:35:41 2000

(9,13,6) <- (9,0,1).*(1, 12+1,6): 136.886953 Mflop/s
(15,13,12) <- (15,1,2).*(1, 12+1,6): 142.666223 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 6 9 13 13 6 9 6
<<< (M = 9, K = 13, N = 6) : 136.886953
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 142.666223
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,6) :   139.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2088 (18.6%), 9162 (81.4%) left; Finishing by Sat Oct 21  6:35:39 2000

(11,14,9) <- (0,0,9).*(11, 13+1,1): 29.270353 Mflop/s
(11,14,15) <- (1,1,15).*(11, 13+1,1): 27.921167 Mflop/s

Testing m0 = 11, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 11  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 9 11 14 14 9 11 9
<<< (M = 11, K = 14, N = 9) : 29.270353
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 15 11 14 14 15 11 15
<<< (M = 11, K = 14, N = 15) : 27.921167
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (11, 13,1) :    28.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2089 (18.6%), 9161 (81.4%) left; Finishing by Sat Oct 21  6:35:43 2000

(9,10,8) <- (9,1,4).*(1, 9+1,2): 139.125660 Mflop/s
(15,10,14) <- (15,1,7).*(1, 9+1,2): 138.790837 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 139.125660
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 138.790837
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,2) :   139.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2090 (18.6%), 9160 (81.4%) left; Finishing by Sat Oct 21  6:35:41 2000

(5,12,8) <- (1,3,4).*(5, 3+1,2): 36.361943 Mflop/s
(15,20,14) <- (3,5,7).*(5, 3+1,2): 34.230406 Mflop/s

Testing m0 = 5, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 8 5 12 12 8 5 8
<<< (M = 5, K = 12, N = 8) : 36.361943
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 14 15 20 20 14 15 14
<<< (M = 15, K = 20, N = 14) : 34.230406
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 3,2) :    35.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2091 (18.6%), 9159 (81.4%) left; Finishing by Sat Oct 21  6:35:40 2000

(8,7,8) <- (4,1,1).*(2, 6+1,8): 27.115261 Mflop/s
(14,14,8) <- (7,2,1).*(2, 6+1,8): 31.609465 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  6 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 27.115261
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 8 14 14 14 8 14 8
<<< (M = 14, K = 14, N = 8) : 31.609465
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 6,8) :    29.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2092 (18.6%), 9158 (81.4%) left; Finishing by Sat Oct 21  6:35:38 2000

(8,7,9) <- (1,1,9).*(8, 6+1,1): 96.782242 Mflop/s
(8,14,15) <- (1,2,15).*(8, 6+1,1): 120.487251 Mflop/s

Testing m0 = 8, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 96.782242
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 15 8 14 14 15 8 15
<<< (M = 8, K = 14, N = 15) : 120.487251
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 6,1) :   107.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2093 (18.6%), 9157 (81.4%) left; Finishing by Sat Oct 21  6:35:42 2000

(8,12,8) <- (4,0,4).*(2, 11+1,2): 135.108477 Mflop/s
(14,12,14) <- (7,1,7).*(2, 11+1,2): 70.526074 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 135.108477
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 70.526074
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 11,2) :    92.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2094 (18.6%), 9156 (81.4%) left; Finishing by Sat Oct 21  6:35:34 2000

(8,12,9) <- (1,4,9).*(8, 2+1,1): 35.348563 Mflop/s
(8,21,15) <- (1,7,15).*(8, 2+1,1): 34.005471 Mflop/s

Testing m0 = 8, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 35.348563
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 21 15 8 21 21 15 8 15
<<< (M = 8, K = 21, N = 15) : 34.005471
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 2,1) :    34.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2095 (18.6%), 9155 (81.4%) left; Finishing by Sat Oct 21  6:35:33 2000

(9,18,11) <- (9,9,0).*(1,1+1,11): 31.069217 Mflop/s
(15,30,11) <- (15,15,1).*(1,1+1,11): 30.971531 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 11 9 18 18 11 9 11
<<< (M = 9, K = 18, N = 11) : 31.069217
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 11 15 30 30 11 15 11
<<< (M = 15, K = 30, N = 11) : 30.971531
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,11) :    31.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2096 (18.6%), 9154 (81.4%) left; Finishing by Sat Oct 21  6:35:31 2000

(9,14,7) <- (9,0,1).*(1, 13+1,7): 129.642901 Mflop/s
(15,14,14) <- (15,1,2).*(1, 13+1,7): 136.618784 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 7 9 14 14 7 9 7
<<< (M = 9, K = 14, N = 7) : 129.642901
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 136.618784
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,7) :   133.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2097 (18.6%), 9153 (81.4%) left; Finishing by Sat Oct 21  6:35:29 2000

(8,8,8) <- (4,1,2).*(2, 7+1,4): 33.525580 Mflop/s
(14,16,12) <- (7,2,3).*(2, 7+1,4): 33.342539 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 33.525580
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 12 14 16 16 12 14 12
<<< (M = 14, K = 16, N = 12) : 33.342539
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 7,4) :    33.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2098 (18.6%), 9152 (81.4%) left; Finishing by Sat Oct 21  6:35:22 2000

(8,16,5) <- (4,0,1).*(2, 15+1,5): 32.530097 Mflop/s
(14,16,15) <- (7,1,3).*(2, 15+1,5): 31.635490 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  15 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 5 8 16 16 5 8 5
<<< (M = 8, K = 16, N = 5) : 32.530097
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 31.635490
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 15,5) :    32.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2099 (18.7%), 9151 (81.3%) left; Finishing by Sat Oct 21  6:35:26 2000

(8,6,9) <- (4,1,3).*(2, 5+1,3): 43.859441 Mflop/s
(14,18,15) <- (7,3,5).*(2, 5+1,3): 42.144882 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 43.859441
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 42.144882
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 5,3) :    43.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2100 (18.7%), 9150 (81.3%) left; Finishing by Sat Oct 21  6:35:19 2000

(14,10,9) <- (0,1,9).*(14, 9+1,1): 26.960105 Mflop/s
(14,10,15) <- (1,1,15).*(14, 9+1,1): 28.851334 Mflop/s

Testing m0 = 14, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 14  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 9 14 10 10 9 14 9
<<< (M = 14, K = 10, N = 9) : 26.960105
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 28.851334
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (14, 9,1) :    27.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2101 (18.7%), 9149 (81.3%) left; Finishing by Sat Oct 21  6:35:17 2000

(5,12,9) <- (1,3,9).*(5, 3+1,1): 70.662320 Mflop/s
(15,20,15) <- (3,5,15).*(5, 3+1,1): 77.568084 Mflop/s

Testing m0 = 5, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 70.662320
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 77.568084
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 3,1) :    74.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2102 (18.7%), 9148 (81.3%) left; Finishing by Sat Oct 21  6:35:16 2000

(9,6,8) <- (9,1,4).*(1, 5+1,2): 115.194759 Mflop/s
(15,18,14) <- (15,3,7).*(1, 5+1,2): 166.944545 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 115.194759
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 166.944545
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,2) :   136.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2103 (18.7%), 9147 (81.3%) left; Finishing by Sat Oct 21  6:35:19 2000

(8,12,9) <- (2,3,3).*(4, 3+1,3): 116.003210 Mflop/s
(12,20,15) <- (3,5,5).*(4, 3+1,3): 128.694321 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 116.003210
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 20 15 12 20 20 15 12 15
<<< (M = 12, K = 20, N = 15) : 128.694321
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 3,3) :   122.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2104 (18.7%), 9146 (81.3%) left; Finishing by Sat Oct 21  6:35:12 2000

(11,12,9) <- (0,0,9).*(11, 11+1,1): 29.575515 Mflop/s
(11,12,15) <- (1,1,15).*(11, 11+1,1): 26.664306 Mflop/s

Testing m0 = 11, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 11  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 9 11 12 12 9 11 9
<<< (M = 11, K = 12, N = 9) : 29.575515
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 15 11 12 12 15 11 15
<<< (M = 11, K = 12, N = 15) : 26.664306
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (11, 11,1) :    28.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2105 (18.7%), 9145 (81.3%) left; Finishing by Sat Oct 21  6:35:11 2000

(8,6,9) <- (4,1,9).*(2, 5+1,1): 122.400394 Mflop/s
(14,18,15) <- (7,3,15).*(2, 5+1,1): 190.086803 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 122.400394
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 190.086803
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 5,1) :   148.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2106 (18.7%), 9144 (81.3%) left; Finishing by Sat Oct 21  6:35:14 2000

(8,12,8) <- (1,0,4).*(8, 11+1,2): 103.721339 Mflop/s
(8,12,14) <- (1,1,7).*(8, 11+1,2): 103.664289 Mflop/s

Testing m0 = 8, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 103.721339
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 14 8 12 12 14 8 14
<<< (M = 8, K = 12, N = 14) : 103.664289
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 11,2) :   103.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2107 (18.7%), 9143 (81.3%) left; Finishing by Sat Oct 21  6:35:12 2000

(13,16,9) <- (0,0,9).*(13, 15+1,1): 27.854215 Mflop/s
(13,16,15) <- (1,1,15).*(13, 15+1,1): 28.903915 Mflop/s

Testing m0 = 13, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 13  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 16 9 13 16 16 9 13 9
<<< (M = 13, K = 16, N = 9) : 27.854215
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 16 15 13 16 16 15 13 15
<<< (M = 13, K = 16, N = 15) : 28.903915
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (13, 15,1) :    28.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2108 (18.7%), 9142 (81.3%) left; Finishing by Sat Oct 21  6:35:11 2000

(13,8,9) <- (0,1,9).*(13, 7+1,1): 98.221915 Mflop/s
(13,16,15) <- (1,2,15).*(13, 7+1,1): 89.407644 Mflop/s

Testing m0 = 13, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 13  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 8 9 13 8 8 9 13 9
<<< (M = 13, K = 8, N = 9) : 98.221915
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 16 15 13 16 16 15 13 15
<<< (M = 13, K = 16, N = 15) : 89.407644
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (13, 7,1) :    93.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2109 (18.7%), 9141 (81.3%) left; Finishing by Sat Oct 21  6:35:09 2000

(9,10,9) <- (3,1,3).*(3, 9+1,3): 118.345221 Mflop/s
(15,10,15) <- (5,1,5).*(3, 9+1,3): 119.645429 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 118.345221
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 119.645429
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 9,3) :   119.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2110 (18.8%), 9140 (81.2%) left; Finishing by Sat Oct 21  6:35:07 2000

(6,12,9) <- (1,3,9).*(6, 3+1,1): 133.779854 Mflop/s
(12,20,15) <- (2,5,15).*(6, 3+1,1): 132.407452 Mflop/s

Testing m0 = 6, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 9 6 12 12 9 6 9
<<< (M = 6, K = 12, N = 9) : 133.779854
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 20 15 12 20 20 15 12 15
<<< (M = 12, K = 20, N = 15) : 132.407452
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 3,1) :   133.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2111 (18.8%), 9139 (81.2%) left; Finishing by Sat Oct 21  6:35:06 2000

(9,12,9) <- (9,3,1).*(1, 3+1,9): 141.270398 Mflop/s
(15,20,9) <- (15,5,1).*(1, 3+1,9): 132.624752 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 141.270398
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 9 15 20 20 9 15 9
<<< (M = 15, K = 20, N = 9) : 132.624752
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,9) :   136.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2112 (18.8%), 9138 (81.2%) left; Finishing by Sat Oct 21  6:35:04 2000

(8,14,9) <- (2,0,3).*(4, 13+1,3): 29.591345 Mflop/s
(12,14,15) <- (3,1,5).*(4, 13+1,3): 30.017569 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 29.591345
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 30.017569
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 13,3) :    29.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2113 (18.8%), 9137 (81.2%) left; Finishing by Sat Oct 21  6:35:02 2000

(8,15,8) <- (2,0,4).*(4, 14+1,2): 30.498662 Mflop/s
(12,15,14) <- (3,1,7).*(4, 14+1,2): 33.237804 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 30.498662
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 33.237804
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 14,2) :    31.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2114 (18.8%), 9136 (81.2%) left; Finishing by Sat Oct 21  6:35:01 2000

(6,8,9) <- (1,1,9).*(6, 7+1,1): 97.394261 Mflop/s
(12,16,15) <- (2,2,15).*(6, 7+1,1): 126.484140 Mflop/s

Testing m0 = 6, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 9 6 8 8 9 6 9
<<< (M = 6, K = 8, N = 9) : 97.394261
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 126.484140
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 7,1) :   110.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2115 (18.8%), 9135 (81.2%) left; Finishing by Sat Oct 21  6:34:59 2000

(8,14,9) <- (2,0,9).*(4, 13+1,1): 181.273710 Mflop/s
(12,14,15) <- (3,1,15).*(4, 13+1,1): 185.579290 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 181.273710
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 185.579290
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 13,1) :   183.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2116 (18.8%), 9134 (81.2%) left; Finishing by Sat Oct 21  6:35:03 2000

(8,18,9) <- (1,9,9).*(8,1+1,1): 28.870477 Mflop/s
(8,30,15) <- (1,15,15).*(8,1+1,1): 29.627762 Mflop/s

Testing m0 = 8, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 9 8 18 18 9 8 9
<<< (M = 8, K = 18, N = 9) : 28.870477
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 30 15 8 30 30 15 8 15
<<< (M = 8, K = 30, N = 15) : 29.627762
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8,1,1) :    29.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2117 (18.8%), 9133 (81.2%) left; Finishing by Sat Oct 21  6:35:01 2000

(8,10,8) <- (4,1,1).*(2, 9+1,8): 28.279070 Mflop/s
(14,10,8) <- (7,1,1).*(2, 9+1,8): 28.356611 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  9 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 28.279070
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 8 14 10 10 8 14 8
<<< (M = 14, K = 10, N = 8) : 28.356611
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 9,8) :    28.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2118 (18.8%), 9132 (81.2%) left; Finishing by Sat Oct 21  6:34:59 2000

(9,8,8) <- (3,1,2).*(3, 7+1,4): 117.016282 Mflop/s
(15,16,12) <- (5,2,3).*(3, 7+1,4): 143.019582 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 117.016282
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 143.019582
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 7,4) :   128.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2119 (18.8%), 9131 (81.2%) left; Finishing by Sat Oct 21  6:35:03 2000

(9,6,9) <- (9,1,3).*(1, 5+1,3): 120.128829 Mflop/s
(15,18,15) <- (15,3,5).*(1, 5+1,3): 168.340795 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 120.128829
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 168.340795
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,3) :   140.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2120 (18.8%), 9130 (81.2%) left; Finishing by Sat Oct 21  6:35:01 2000

(9,15,9) <- (3,0,9).*(3, 14+1,1): 182.885697 Mflop/s
(15,15,15) <- (5,1,15).*(3, 14+1,1): 186.235302 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 182.885697
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 186.235302
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 14,1) :   184.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2121 (18.9%), 9129 (81.1%) left; Finishing by Sat Oct 21  6:35:00 2000

(9,9,9) <- (9,1,3).*(1, 8+1,3): 134.629110 Mflop/s
(15,9,15) <- (15,1,5).*(1, 8+1,3): 139.760182 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 134.629110
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 139.760182
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,3) :   137.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2122 (18.9%), 9128 (81.1%) left; Finishing by Sat Oct 21  6:34:58 2000

(9,13,9) <- (9,0,3).*(1, 12+1,3): 146.767267 Mflop/s
(15,13,15) <- (15,1,5).*(1, 12+1,3): 146.172927 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 146.767267
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 146.172927
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,3) :   146.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2123 (18.9%), 9127 (81.1%) left; Finishing by Sat Oct 21  6:34:51 2000

(8,6,8) <- (4,1,2).*(2, 5+1,4): 31.625517 Mflop/s
(14,18,12) <- (7,3,3).*(2, 5+1,4): 35.425249 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 31.625517
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 12 14 18 18 12 14 12
<<< (M = 14, K = 18, N = 12) : 35.425249
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 5,4) :    33.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2124 (18.9%), 9126 (81.1%) left; Finishing by Sat Oct 21  6:34:49 2000

(9,12,5) <- (9,4,1).*(1, 2+1,5): 137.766619 Mflop/s
(15,21,15) <- (15,7,3).*(1, 2+1,5): 135.015931 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 137.766619
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 135.015931
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,5) :   136.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2125 (18.9%), 9125 (81.1%) left; Finishing by Sat Oct 21  6:34:53 2000

(9,14,14) <- (9,0,0).*(1, 13+1,14): 124.219390 Mflop/s
(15,14,14) <- (15,1,1).*(1, 13+1,14): 124.773593 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  13 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 14 9 14 14 14 9 14
<<< (M = 9, K = 14, N = 14) : 124.219390
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 124.773593
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 13,14) :   124.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2126 (18.9%), 9124 (81.1%) left; Finishing by Sat Oct 21  6:34:51 2000

(9,10,16) <- (9,2,0).*(1, 4+1,16): 132.540159 Mflop/s
(15,15,16) <- (15,3,0).*(1, 4+1,16): 145.248011 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 16 9 10 10 16 9 16
<<< (M = 9, K = 10, N = 16) : 132.540159
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 16 15 15 15 16 15 16
<<< (M = 15, K = 15, N = 16) : 145.248011
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,16) :   138.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2127 (18.9%), 9123 (81.1%) left; Finishing by Sat Oct 21  6:34:50 2000

(9,13,8) <- (9,0,4).*(1, 12+1,2): 146.663243 Mflop/s
(15,13,14) <- (15,1,7).*(1, 12+1,2): 146.403748 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 146.663243
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 146.403748
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,2) :   146.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2128 (18.9%), 9122 (81.1%) left; Finishing by Sat Oct 21  6:34:48 2000

(5,9,8) <- (1,1,4).*(5, 8+1,2): 29.443988 Mflop/s
(15,9,14) <- (3,1,7).*(5, 8+1,2): 29.754637 Mflop/s

Testing m0 = 5, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 8 5 9 9 8 5 8
<<< (M = 5, K = 9, N = 8) : 29.443988
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 29.754637
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 8,2) :    29.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2129 (18.9%), 9121 (81.1%) left; Finishing by Sat Oct 21  6:34:46 2000

(16,10,9) <- (0,1,9).*(16, 9+1,1): 26.909493 Mflop/s
(16,10,15) <- (0,1,15).*(16, 9+1,1): 27.339881 Mflop/s

Testing m0 = 16, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 16  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 10 9 16 10 10 9 16 9
<<< (M = 16, K = 10, N = 9) : 26.909493
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 10 15 16 10 10 15 16 15
<<< (M = 16, K = 10, N = 15) : 27.339881
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (16, 9,1) :    27.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2130 (18.9%), 9120 (81.1%) left; Finishing by Sat Oct 21  6:34:45 2000

(15,12,9) <- (0,4,9).*(15, 2+1,1): 102.856771 Mflop/s
(15,21,15) <- (1,7,15).*(15, 2+1,1): 101.301957 Mflop/s

Testing m0 = 15, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 15  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 102.856771
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 101.301957
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (15, 2,1) :   102.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2131 (18.9%), 9119 (81.1%) left; Finishing by Sat Oct 21  6:34:43 2000

(9,16,8) <- (3,0,2).*(3, 15+1,4): 132.750854 Mflop/s
(15,16,12) <- (5,1,3).*(3, 15+1,4): 135.021204 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 132.750854
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 135.021204
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 15,4) :   133.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2132 (19.0%), 9118 (81.0%) left; Finishing by Sat Oct 21  6:34:42 2000

(8,12,9) <- (4,4,9).*(2, 2+1,1): 166.836213 Mflop/s
(14,21,15) <- (7,7,15).*(2, 2+1,1): 155.203235 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 166.836213
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 15 14 21 21 15 14 15
<<< (M = 14, K = 21, N = 15) : 155.203235
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 2,1) :   160.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2133 (19.0%), 9117 (81.0%) left; Finishing by Sat Oct 21  6:34:45 2000

(9,18,8) <- (9,9,4).*(1,1+1,2): 111.939752 Mflop/s
(15,30,14) <- (15,15,7).*(1,1+1,2): 119.677045 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 8 9 18 18 8 9 8
<<< (M = 9, K = 18, N = 8) : 111.939752
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 14 15 30 30 14 15 14
<<< (M = 15, K = 30, N = 14) : 119.677045
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,2) :   115.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2134 (19.0%), 9116 (81.0%) left; Finishing by Sat Oct 21  6:34:44 2000

(8,9,9) <- (4,1,9).*(2, 8+1,1): 142.929913 Mflop/s
(14,9,15) <- (7,1,15).*(2, 8+1,1): 148.491265 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 142.929913
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 148.491265
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 8,1) :   145.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 14,1) :   189.3 MFLOPS.
Done 2135 (19.0%), 9115 (81.0%) left; Finishing by Sat Oct 21  6:34:42 2000

(8,16,9) <- (2,0,9).*(4, 15+1,1): 190.918201 Mflop/s
(12,16,15) <- (3,1,15).*(4, 15+1,1): 194.155557 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 190.918201
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 194.155557
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 15,1) :   192.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2136 (19.0%), 9114 (81.0%) left; Finishing by Sat Oct 21  6:34:45 2000

(9,18,5) <- (3,9,1).*(3,1+1,5): 28.848414 Mflop/s
(15,30,15) <- (5,15,3).*(3,1+1,5): 30.544548 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3 1 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 5 9 18 18 5 9 5
<<< (M = 9, K = 18, N = 5) : 28.848414
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 30.544548
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3,1,5) :    29.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2137 (19.0%), 9113 (81.0%) left; Finishing by Sat Oct 21  6:34:44 2000

(8,16,8) <- (2,0,4).*(4, 15+1,2): 30.573301 Mflop/s
(12,16,14) <- (3,1,7).*(4, 15+1,2): 32.932206 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 30.573301
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 14 12 16 16 14 12 14
<<< (M = 12, K = 16, N = 14) : 32.932206
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 15,2) :    31.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2138 (19.0%), 9112 (81.0%) left; Finishing by Sat Oct 21  6:34:42 2000

(9,10,5) <- (9,2,1).*(1, 4+1,5): 134.286375 Mflop/s
(15,15,15) <- (15,3,3).*(1, 4+1,5): 157.365738 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 5 9 10 10 5 9 5
<<< (M = 9, K = 10, N = 5) : 134.286375
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 157.365738
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,5) :   144.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2139 (19.0%), 9111 (81.0%) left; Finishing by Sat Oct 21  6:34:46 2000

(5,9,9) <- (1,1,3).*(5, 8+1,3): 28.090251 Mflop/s
(15,9,15) <- (3,1,5).*(5, 8+1,3): 28.317258 Mflop/s

Testing m0 = 5, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 28.090251
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 28.317258
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 8,3) :    28.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2140 (19.0%), 9110 (81.0%) left; Finishing by Sat Oct 21  6:34:44 2000

(9,18,8) <- (9,9,2).*(1,1+1,4): 148.285252 Mflop/s
(15,30,12) <- (15,15,3).*(1,1+1,4): 157.924747 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 8 9 18 18 8 9 8
<<< (M = 9, K = 18, N = 8) : 148.285252
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 12 15 30 30 12 15 12
<<< (M = 15, K = 30, N = 12) : 157.924747
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,4) :   153.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2141 (19.0%), 9109 (81.0%) left; Finishing by Sat Oct 21  6:34:37 2000

(8,15,6) <- (4,0,1).*(2, 14+1,6): 31.703287 Mflop/s
(14,15,12) <- (7,1,2).*(2, 14+1,6): 28.119671 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  14 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 6 8 15 15 6 8 6
<<< (M = 8, K = 15, N = 6) : 31.703287
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 28.119671
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 14,6) :    29.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2142 (19.0%), 9108 (81.0%) left; Finishing by Sat Oct 21  6:34:36 2000

(7,12,9) <- (1,3,9).*(7, 3+1,1): 41.268816 Mflop/s
(14,20,15) <- (2,5,15).*(7, 3+1,1): 42.123713 Mflop/s

Testing m0 = 7, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 9 7 12 12 9 7 9
<<< (M = 7, K = 12, N = 9) : 41.268816
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 15 14 20 20 15 14 15
<<< (M = 14, K = 20, N = 15) : 42.123713
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 3,1) :    41.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2143 (19.0%), 9107 (81.0%) left; Finishing by Sat Oct 21  6:34:34 2000

(8,18,7) <- (4,9,1).*(2,1+1,7): 109.062602 Mflop/s
(14,30,14) <- (7,15,2).*(2,1+1,7): 115.158850 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2 1 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 7 8 18 18 7 8 7
<<< (M = 8, K = 18, N = 7) : 109.062602
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 14 14 30 30 14 14 14
<<< (M = 14, K = 30, N = 14) : 115.158850
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2,1,7) :   112.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2144 (19.1%), 9106 (80.9%) left; Finishing by Sat Oct 21  6:34:32 2000

(9,12,8) <- (9,4,1).*(1, 2+1,8): 132.511862 Mflop/s
(15,21,8) <- (15,7,1).*(1, 2+1,8): 130.628894 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 132.511862
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 8 15 21 21 8 15 8
<<< (M = 15, K = 21, N = 8) : 130.628894
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,8) :   131.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2145 (19.1%), 9105 (80.9%) left; Finishing by Sat Oct 21  6:34:36 2000

(9,15,8) <- (3,0,4).*(3, 14+1,2): 133.821762 Mflop/s
(15,15,14) <- (5,1,7).*(3, 14+1,2): 134.985817 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 133.821762
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 134.985817
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 14,2) :   134.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2146 (19.1%), 9104 (80.9%) left; Finishing by Sat Oct 21  6:34:34 2000

(9,18,9) <- (3,9,3).*(3,1+1,3): 30.156527 Mflop/s
(15,30,15) <- (5,15,5).*(3,1+1,3): 30.619068 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 9 9 18 18 9 9 9
<<< (M = 9, K = 18, N = 9) : 30.156527
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 30.619068
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3,1,3) :    30.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2147 (19.1%), 9103 (80.9%) left; Finishing by Sat Oct 21  6:34:27 2000

(9,16,14) <- (9,0,0).*(1, 15+1,14): 125.612242 Mflop/s
(15,16,14) <- (15,1,1).*(1, 15+1,14): 125.689468 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 14 9 16 16 14 9 14
<<< (M = 9, K = 16, N = 14) : 125.612242
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 125.689468
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,14) :   125.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2148 (19.1%), 9102 (80.9%) left; Finishing by Sat Oct 21  6:34:31 2000

(9,12,16) <- (9,3,0).*(1, 3+1,16): 145.160913 Mflop/s
(15,20,16) <- (15,5,0).*(1, 3+1,16): 133.991091 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 16 9 12 12 16 9 16
<<< (M = 9, K = 12, N = 16) : 145.160913
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 16 15 20 20 16 15 16
<<< (M = 15, K = 20, N = 16) : 133.991091
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,16) :   139.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2149 (19.1%), 9101 (80.9%) left; Finishing by Sat Oct 21  6:34:29 2000

(7,15,9) <- (1,0,9).*(7, 14+1,1): 35.848924 Mflop/s
(14,15,15) <- (2,1,15).*(7, 14+1,1): 39.735519 Mflop/s

Testing m0 = 7, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 15 9 7 15 15 9 7 9
<<< (M = 7, K = 15, N = 9) : 35.848924
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 39.735519
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 14,1) :    37.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2150 (19.1%), 9100 (80.9%) left; Finishing by Sat Oct 21  6:34:28 2000

(7,12,8) <- (1,4,4).*(7, 2+1,2): 103.645149 Mflop/s
(14,21,14) <- (2,7,7).*(7, 2+1,2): 102.072960 Mflop/s

Testing m0 = 7, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 8 7 12 12 8 7 8
<<< (M = 7, K = 12, N = 8) : 103.645149
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 14 14 21 21 14 14 14
<<< (M = 14, K = 21, N = 14) : 102.072960
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 2,2) :   102.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2151 (19.1%), 9099 (80.9%) left; Finishing by Sat Oct 21  6:34:31 2000

(5,18,9) <- (1,9,3).*(5,1+1,3): 29.276725 Mflop/s
(15,30,15) <- (3,15,5).*(5,1+1,3): 30.183403 Mflop/s

Testing m0 = 5, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 18 9 5 18 18 9 5 9
<<< (M = 5, K = 18, N = 9) : 29.276725
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 30.183403
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5,1,3) :    29.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2152 (19.1%), 9098 (80.9%) left; Finishing by Sat Oct 21  6:34:30 2000

(9,10,7) <- (9,2,1).*(1, 4+1,7): 134.354549 Mflop/s
(15,15,14) <- (15,3,2).*(1, 4+1,7): 153.790484 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 7 9 10 10 7 9 7
<<< (M = 9, K = 10, N = 7) : 134.354549
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 153.790484
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,7) :   143.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2153 (19.1%), 9097 (80.9%) left; Finishing by Sat Oct 21  6:34:28 2000

(9,12,12) <- (9,0,0).*(1, 11+1,12): 118.096759 Mflop/s
(15,12,12) <- (15,1,1).*(1, 11+1,12): 119.064935 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 12 9 12 12 12 9 12
<<< (M = 9, K = 12, N = 12) : 118.096759
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 119.064935
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,12) :   118.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2154 (19.1%), 9096 (80.9%) left; Finishing by Sat Oct 21  6:34:27 2000

(8,13,8) <- (4,0,1).*(2, 12+1,8): 29.061853 Mflop/s
(14,13,8) <- (7,1,1).*(2, 12+1,8): 29.155418 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  12 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 29.061853
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 8 14 13 13 8 14 8
<<< (M = 14, K = 13, N = 8) : 29.155418
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 12,8) :    29.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2155 (19.2%), 9095 (80.8%) left; Finishing by Sat Oct 21  6:34:25 2000

(9,12,8) <- (9,3,2).*(1, 3+1,4): 160.600431 Mflop/s
(15,20,12) <- (15,5,3).*(1, 3+1,4): 141.123610 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 160.600431
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 12 15 20 20 12 15 12
<<< (M = 15, K = 20, N = 12) : 141.123610
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,4) :   150.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2156 (19.2%), 9094 (80.8%) left; Finishing by Sat Oct 21  6:34:29 2000

(8,11,8) <- (2,0,4).*(4, 10+1,2): 29.545954 Mflop/s
(12,11,14) <- (3,1,7).*(4, 10+1,2): 32.228831 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 29.545954
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 14 12 11 11 14 12 14
<<< (M = 12, K = 11, N = 14) : 32.228831
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 10,2) :    30.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2157 (19.2%), 9093 (80.8%) left; Finishing by Sat Oct 21  6:34:27 2000

(9,9,7) <- (9,1,1).*(1, 8+1,7): 119.909082 Mflop/s
(15,9,14) <- (15,1,2).*(1, 8+1,7): 129.632385 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 7 9 9 9 7 9 7
<<< (M = 9, K = 9, N = 7) : 119.909082
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 129.632385
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,7) :   124.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2158 (19.2%), 9092 (80.8%) left; Finishing by Sat Oct 21  6:34:31 2000

(9,12,13) <- (9,3,0).*(1, 3+1,13): 141.082101 Mflop/s
(15,20,13) <- (15,5,1).*(1, 3+1,13): 130.219197 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 13 9 12 12 13 9 13
<<< (M = 9, K = 12, N = 13) : 141.082101
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 13 15 20 20 13 15 13
<<< (M = 15, K = 20, N = 13) : 130.219197
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,13) :   135.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2159 (19.2%), 9091 (80.8%) left; Finishing by Sat Oct 21  6:34:24 2000

(7,16,8) <- (1,0,4).*(7, 15+1,2): 25.378558 Mflop/s
(14,16,14) <- (2,1,7).*(7, 15+1,2): 27.587713 Mflop/s

Testing m0 = 7, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 16 8 7 16 16 8 7 8
<<< (M = 7, K = 16, N = 8) : 25.378558
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 27.587713
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 15,2) :    26.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2160 (19.2%), 9090 (80.8%) left; Finishing by Sat Oct 21  6:34:27 2000

(9,16,8) <- (9,0,2).*(1, 15+1,4): 151.795430 Mflop/s
(15,16,12) <- (15,1,3).*(1, 15+1,4): 153.595505 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 151.795430
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 153.595505
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,4) :   152.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2161 (19.2%), 9089 (80.8%) left; Finishing by Sat Oct 21  6:34:20 2000

(8,6,6) <- (4,1,1).*(2, 5+1,6): 28.001157 Mflop/s
(14,18,12) <- (7,3,2).*(2, 5+1,6): 31.773903 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  5 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 6 8 6 6 6 8 6
<<< (M = 8, K = 6, N = 6) : 28.001157
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 12 14 18 18 12 14 12
<<< (M = 14, K = 18, N = 12) : 31.773903
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 5,6) :    29.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2162 (19.2%), 9088 (80.8%) left; Finishing by Sat Oct 21  6:34:19 2000

(8,16,8) <- (4,0,2).*(2, 15+1,4): 36.508723 Mflop/s
(14,16,12) <- (7,1,3).*(2, 15+1,4): 31.096931 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 36.508723
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 12 14 16 16 12 14 12
<<< (M = 14, K = 16, N = 12) : 31.096931
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 15,4) :    33.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2163 (19.2%), 9087 (80.8%) left; Finishing by Sat Oct 21  6:34:17 2000

(14,12,9) <- (0,0,9).*(14, 11+1,1): 27.353429 Mflop/s
(14,12,15) <- (1,1,15).*(14, 11+1,1): 29.596183 Mflop/s

Testing m0 = 14, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 14  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 9 14 12 12 9 14 9
<<< (M = 14, K = 12, N = 9) : 27.353429
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 29.596183
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (14, 11,1) :    28.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2164 (19.2%), 9086 (80.8%) left; Finishing by Sat Oct 21  6:34:16 2000

(9,7,9) <- (9,1,1).*(1, 6+1,9): 106.609958 Mflop/s
(15,14,9) <- (15,2,1).*(1, 6+1,9): 133.903106 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 106.609958
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 133.903106
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,9) :   118.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2165 (19.2%), 9085 (80.8%) left; Finishing by Sat Oct 21  6:34:19 2000

(9,18,15) <- (9,9,0).*(1,1+1,15): 29.939018 Mflop/s
(15,30,15) <- (15,15,1).*(1,1+1,15): 29.247542 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 15 9 18 18 15 9 15
<<< (M = 9, K = 18, N = 15) : 29.939018
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 29.247542
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,15) :    29.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2166 (19.3%), 9084 (80.7%) left; Finishing by Sat Oct 21  6:34:18 2000

(15,7,9) <- (0,1,9).*(15, 6+1,1): 73.563875 Mflop/s
(15,14,15) <- (1,2,15).*(15, 6+1,1): 107.866362 Mflop/s

Testing m0 = 15, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 15  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 7 9 15 7 7 9 15 9
<<< (M = 15, K = 7, N = 9) : 73.563875
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 107.866362
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (15, 6,1) :    87.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2167 (19.3%), 9083 (80.7%) left; Finishing by Sat Oct 21  6:34:16 2000

(9,18,13) <- (9,9,0).*(1,1+1,13): 31.364163 Mflop/s
(15,30,13) <- (15,15,1).*(1,1+1,13): 29.452332 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 13 9 18 18 13 9 13
<<< (M = 9, K = 18, N = 13) : 31.364163
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 13 15 30 30 13 15 13
<<< (M = 15, K = 30, N = 13) : 29.452332
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,13) :    30.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2168 (19.3%), 9082 (80.7%) left; Finishing by Sat Oct 21  6:34:14 2000

(8,11,7) <- (4,0,1).*(2, 10+1,7): 29.322404 Mflop/s
(14,11,14) <- (7,1,2).*(2, 10+1,7): 29.540670 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  10 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 7 8 11 11 7 8 7
<<< (M = 8, K = 11, N = 7) : 29.322404
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 14 14 11 11 14 14 14
<<< (M = 14, K = 11, N = 14) : 29.540670
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 10,7) :    29.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2169 (19.3%), 9081 (80.7%) left; Finishing by Sat Oct 21  6:34:13 2000

(5,11,9) <- (1,0,9).*(5, 10+1,1): 66.875941 Mflop/s
(15,11,15) <- (3,1,15).*(5, 10+1,1): 78.222345 Mflop/s

Testing m0 = 5, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 11 9 5 11 11 9 5 9
<<< (M = 5, K = 11, N = 9) : 66.875941
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 78.222345
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 10,1) :    72.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2170 (19.3%), 9080 (80.7%) left; Finishing by Sat Oct 21  6:34:06 2000

(8,18,8) <- (2,9,4).*(4,1+1,2): 88.735921 Mflop/s
(12,30,14) <- (3,15,7).*(4,1+1,2): 107.684712 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 8 8 18 18 8 8 8
<<< (M = 8, K = 18, N = 8) : 88.735921
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 30 14 12 30 30 14 12 14
<<< (M = 12, K = 30, N = 14) : 107.684712
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4,1,2) :    97.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2171 (19.3%), 9079 (80.7%) left; Finishing by Sat Oct 21  6:34:04 2000

(12,6,9) <- (0,1,9).*(12, 5+1,1): 26.589048 Mflop/s
(12,18,15) <- (1,3,15).*(12, 5+1,1): 33.763295 Mflop/s

Testing m0 = 12, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 12  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 6 9 12 6 6 9 12 9
<<< (M = 12, K = 6, N = 9) : 26.589048
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 33.763295
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (12, 5,1) :    29.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2172 (19.3%), 9078 (80.7%) left; Finishing by Sat Oct 21  6:34:03 2000

(9,14,9) <- (3,0,3).*(3, 13+1,3): 123.420827 Mflop/s
(15,14,15) <- (5,1,5).*(3, 13+1,3): 124.459882 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 123.420827
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 124.459882
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 13,3) :   123.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2173 (19.3%), 9077 (80.7%) left; Finishing by Sat Oct 21  6:34:01 2000

(5,13,8) <- (1,0,4).*(5, 12+1,2): 30.833016 Mflop/s
(15,13,14) <- (3,1,7).*(5, 12+1,2): 32.040607 Mflop/s

Testing m0 = 5, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 13 8 5 13 13 8 5 8
<<< (M = 5, K = 13, N = 8) : 30.833016
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 32.040607
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 12,2) :    31.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2174 (19.3%), 9076 (80.7%) left; Finishing by Sat Oct 21  6:34:00 2000

(9,10,10) <- (9,2,0).*(1, 4+1,10): 130.384492 Mflop/s
(15,15,10) <- (15,3,1).*(1, 4+1,10): 144.164324 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 10 9 10 10 10 9 10
<<< (M = 9, K = 10, N = 10) : 130.384492
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 10 15 15 15 10 15 10
<<< (M = 15, K = 15, N = 10) : 144.164324
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,10) :   136.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2175 (19.3%), 9075 (80.7%) left; Finishing by Sat Oct 21  6:33:58 2000

(8,9,9) <- (2,1,9).*(4, 8+1,1): 159.002567 Mflop/s
(12,9,15) <- (3,1,15).*(4, 8+1,1): 162.417247 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 159.002567
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 162.417247
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 8,1) :   160.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2176 (19.3%), 9074 (80.7%) left; Finishing by Sat Oct 21  6:33:56 2000

(10,6,9) <- (0,1,9).*(10, 5+1,1): 27.894857 Mflop/s
(10,18,15) <- (1,3,15).*(10, 5+1,1): 32.854289 Mflop/s

Testing m0 = 10, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 10  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 6 9 10 6 6 9 10 9
<<< (M = 10, K = 6, N = 9) : 27.894857
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 18 15 10 18 18 15 10 15
<<< (M = 10, K = 18, N = 15) : 32.854289
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (10, 5,1) :    30.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2177 (19.4%), 9073 (80.6%) left; Finishing by Sat Oct 21  6:33:55 2000

(9,15,7) <- (9,0,1).*(1, 14+1,7): 129.562313 Mflop/s
(15,15,14) <- (15,1,2).*(1, 14+1,7): 133.102321 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 7 9 15 15 7 9 7
<<< (M = 9, K = 15, N = 7) : 129.562313
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 133.102321
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,7) :   131.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2178 (19.4%), 9072 (80.6%) left; Finishing by Sat Oct 21  6:33:53 2000

(9,10,11) <- (9,2,0).*(1, 4+1,11): 128.925527 Mflop/s
(15,15,11) <- (15,3,1).*(1, 4+1,11): 140.752417 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 11 9 10 10 11 9 11
<<< (M = 9, K = 10, N = 11) : 128.925527
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 11 15 15 15 11 15 11
<<< (M = 15, K = 15, N = 11) : 140.752417
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,11) :   134.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2179 (19.4%), 9071 (80.6%) left; Finishing by Sat Oct 21  6:33:52 2000

(9,15,9) <- (9,0,3).*(1, 14+1,3): 151.295726 Mflop/s
(15,15,15) <- (15,1,5).*(1, 14+1,3): 152.735904 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 151.295726
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 152.735904
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,3) :   152.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2180 (19.4%), 9070 (80.6%) left; Finishing by Sat Oct 21  6:33:50 2000

(8,8,6) <- (4,1,1).*(2, 7+1,6): 29.654314 Mflop/s
(14,16,12) <- (7,2,2).*(2, 7+1,6): 29.985570 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  7 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 6 8 8 8 6 8 6
<<< (M = 8, K = 8, N = 6) : 29.654314
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 12 14 16 16 12 14 12
<<< (M = 14, K = 16, N = 12) : 29.985570
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 7,6) :    29.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2181 (19.4%), 9069 (80.6%) left; Finishing by Sat Oct 21  6:33:48 2000

(12,12,9) <- (0,3,9).*(12, 3+1,1): 34.711782 Mflop/s
(12,20,15) <- (1,5,15).*(12, 3+1,1): 31.362478 Mflop/s

Testing m0 = 12, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 12  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 9 12 12 12 9 12 9
<<< (M = 12, K = 12, N = 9) : 34.711782
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 20 15 12 20 20 15 12 15
<<< (M = 12, K = 20, N = 15) : 31.362478
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (12, 3,1) :    33.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2182 (19.4%), 9068 (80.6%) left; Finishing by Sat Oct 21  6:33:47 2000

(10,15,9) <- (0,0,9).*(10, 14+1,1): 106.048247 Mflop/s
(10,15,15) <- (1,1,15).*(10, 14+1,1): 105.954485 Mflop/s

Testing m0 = 10, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 10  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 9 10 15 15 9 10 9
<<< (M = 10, K = 15, N = 9) : 106.048247
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 15 10 15 15 15 10 15
<<< (M = 10, K = 15, N = 15) : 105.954485
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (10, 14,1) :   106.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2183 (19.4%), 9067 (80.6%) left; Finishing by Sat Oct 21  6:33:45 2000

(13,12,9) <- (0,4,9).*(13, 2+1,1): 102.861992 Mflop/s
(13,21,15) <- (1,7,15).*(13, 2+1,1): 100.743448 Mflop/s

Testing m0 = 13, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 13  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 9 13 12 12 9 13 9
<<< (M = 13, K = 12, N = 9) : 102.861992
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 21 15 13 21 21 15 13 15
<<< (M = 13, K = 21, N = 15) : 100.743448
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (13, 2,1) :   101.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2184 (19.4%), 9066 (80.6%) left; Finishing by Sat Oct 21  6:33:44 2000

(9,12,9) <- (3,0,3).*(3, 11+1,3): 121.218957 Mflop/s
(15,12,15) <- (5,1,5).*(3, 11+1,3): 122.643511 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 121.218957
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 122.643511
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 11,3) :   121.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2185 (19.4%), 9065 (80.6%) left; Finishing by Sat Oct 21  6:33:47 2000

(9,9,11) <- (9,1,0).*(1, 8+1,11): 113.555509 Mflop/s
(15,9,11) <- (15,1,1).*(1, 8+1,11): 114.327117 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 11 9 9 9 11 9 11
<<< (M = 9, K = 9, N = 11) : 113.555509
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 11 15 9 9 11 15 11
<<< (M = 15, K = 9, N = 11) : 114.327117
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,11) :   113.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2186 (19.4%), 9064 (80.6%) left; Finishing by Sat Oct 21  6:33:41 2000

(9,13,16) <- (9,0,0).*(1, 12+1,16): 125.023203 Mflop/s
(15,13,16) <- (15,1,0).*(1, 12+1,16): 125.192855 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  12 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 16 9 13 13 16 9 16
<<< (M = 9, K = 13, N = 16) : 125.023203
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 16 15 13 13 16 15 16
<<< (M = 15, K = 13, N = 16) : 125.192855
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 12,16) :   125.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2187 (19.4%), 9063 (80.6%) left; Finishing by Sat Oct 21  6:33:44 2000

(13,13,9) <- (0,0,9).*(13, 12+1,1): 108.708391 Mflop/s
(13,13,15) <- (1,1,15).*(13, 12+1,1): 85.943599 Mflop/s

Testing m0 = 13, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 13  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 13 9 13 13 13 9 13 9
<<< (M = 13, K = 13, N = 9) : 108.708391
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 13 15 13 13 13 15 13 15
<<< (M = 13, K = 13, N = 15) : 85.943599
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (13, 12,1) :    96.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2188 (19.4%), 9062 (80.6%) left; Finishing by Sat Oct 21  6:33:48 2000

(9,12,9) <- (1,4,9).*(9, 2+1,1): 108.688967 Mflop/s
(9,21,15) <- (1,7,15).*(9, 2+1,1): 106.646805 Mflop/s

Testing m0 = 9, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 9  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 108.688967
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 21 15 9 21 21 15 9 15
<<< (M = 9, K = 21, N = 15) : 106.646805
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (9, 2,1) :   107.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2189 (19.5%), 9061 (80.5%) left; Finishing by Sat Oct 21  6:33:51 2000

(5,10,8) <- (1,1,4).*(5, 9+1,2): 30.027267 Mflop/s
(15,10,14) <- (3,1,7).*(5, 9+1,2): 31.192159 Mflop/s

Testing m0 = 5, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 8 5 10 10 8 5 8
<<< (M = 5, K = 10, N = 8) : 30.027267
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 31.192159
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 9,2) :    30.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2190 (19.5%), 9060 (80.5%) left; Finishing by Sat Oct 21  6:33:50 2000

(10,10,9) <- (0,1,9).*(10, 9+1,1): 96.940294 Mflop/s
(10,10,15) <- (1,1,15).*(10, 9+1,1): 98.433217 Mflop/s

Testing m0 = 10, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 10  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 10 9 10 10 10 9 10 9
<<< (M = 10, K = 10, N = 9) : 96.940294
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 10 15 10 10 10 15 10 15
<<< (M = 10, K = 10, N = 15) : 98.433217
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (10, 9,1) :    97.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2191 (19.5%), 9059 (80.5%) left; Finishing by Sat Oct 21  6:33:48 2000

(9,12,9) <- (9,4,9).*(1, 2+1,1): 113.999549 Mflop/s
(15,21,15) <- (15,7,15).*(1, 2+1,1): 105.903017 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 113.999549
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 105.903017
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,1) :   109.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2192 (19.5%), 9058 (80.5%) left; Finishing by Sat Oct 21  6:33:47 2000

(9,11,13) <- (9,0,0).*(1, 10+1,13): 119.586485 Mflop/s
(15,11,13) <- (15,1,1).*(1, 10+1,13): 120.835813 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 13 9 11 11 13 9 13
<<< (M = 9, K = 11, N = 13) : 119.586485
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 13 15 11 11 13 15 13
<<< (M = 15, K = 11, N = 13) : 120.835813
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,13) :   120.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2193 (19.5%), 9057 (80.5%) left; Finishing by Sat Oct 21  6:33:40 2000

(8,7,9) <- (4,1,9).*(2, 6+1,1): 136.669291 Mflop/s
(14,14,15) <- (7,2,15).*(2, 6+1,1): 181.977782 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 136.669291
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 181.977782
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 6,1) :   156.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2194 (19.5%), 9056 (80.5%) left; Finishing by Sat Oct 21  6:33:43 2000

(9,16,5) <- (9,0,1).*(1, 15+1,5): 139.511401 Mflop/s
(15,16,15) <- (15,1,3).*(1, 15+1,5): 144.792505 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  15 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 5 9 16 16 5 9 5
<<< (M = 9, K = 16, N = 5) : 139.511401
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 144.792505
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 15,5) :   142.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2195 (19.5%), 9055 (80.5%) left; Finishing by Sat Oct 21  6:33:47 2000

(11,6,9) <- (0,1,9).*(11, 5+1,1): 73.590483 Mflop/s
(11,18,15) <- (1,3,15).*(11, 5+1,1): 120.624808 Mflop/s

Testing m0 = 11, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 11  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 6 9 11 6 6 9 11 9
<<< (M = 11, K = 6, N = 9) : 73.590483
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 18 15 11 18 18 15 11 15
<<< (M = 11, K = 18, N = 15) : 120.624808
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (11, 5,1) :    91.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2196 (19.5%), 9054 (80.5%) left; Finishing by Sat Oct 21  6:33:45 2000

(14,12,9) <- (0,3,9).*(14, 3+1,1): 32.466451 Mflop/s
(14,20,15) <- (1,5,15).*(14, 3+1,1): 31.623642 Mflop/s

Testing m0 = 14, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 14  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 9 14 12 12 9 14 9
<<< (M = 14, K = 12, N = 9) : 32.466451
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 15 14 20 20 15 14 15
<<< (M = 14, K = 20, N = 15) : 31.623642
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (14, 3,1) :    32.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2197 (19.5%), 9053 (80.5%) left; Finishing by Sat Oct 21  6:33:44 2000

(6,12,8) <- (1,4,4).*(6, 2+1,2): 28.950277 Mflop/s
(12,21,14) <- (2,7,7).*(6, 2+1,2): 26.437963 Mflop/s

Testing m0 = 6, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 8 6 12 12 8 6 8
<<< (M = 6, K = 12, N = 8) : 28.950277
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 14 12 21 21 14 12 14
<<< (M = 12, K = 21, N = 14) : 26.437963
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 2,2) :    27.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2198 (19.5%), 9052 (80.5%) left; Finishing by Sat Oct 21  6:33:42 2000

(9,11,9) <- (3,0,3).*(3, 10+1,3): 119.713755 Mflop/s
(15,11,15) <- (5,1,5).*(3, 10+1,3): 121.725873 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 119.713755
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 121.725873
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 10,3) :   120.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2199 (19.5%), 9051 (80.5%) left; Finishing by Sat Oct 21  6:33:46 2000

(8,18,9) <- (2,9,9).*(4,1+1,1): 125.786274 Mflop/s
(12,30,15) <- (3,15,15).*(4,1+1,1): 136.053600 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 9 8 18 18 9 8 9
<<< (M = 8, K = 18, N = 9) : 125.786274
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 30 15 12 30 30 15 12 15
<<< (M = 12, K = 30, N = 15) : 136.053600
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4,1,1) :   130.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2200 (19.6%), 9050 (80.4%) left; Finishing by Sat Oct 21  6:33:39 2000

(8,10,9) <- (2,1,9).*(4, 9+1,1): 162.527775 Mflop/s
(12,10,15) <- (3,1,15).*(4, 9+1,1): 163.034151 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 162.527775
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 163.034151
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 9,1) :   162.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2201 (19.6%), 9049 (80.4%) left; Finishing by Sat Oct 21  6:33:43 2000

(9,10,6) <- (9,2,1).*(1, 4+1,6): 135.937231 Mflop/s
(15,15,12) <- (15,3,2).*(1, 4+1,6): 159.442362 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 6 9 10 10 6 9 6
<<< (M = 9, K = 10, N = 6) : 135.937231
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 159.442362
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,6) :   146.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2202 (19.6%), 9048 (80.4%) left; Finishing by Sat Oct 21  6:33:46 2000

(13,9,9) <- (0,1,9).*(13, 8+1,1): 101.829521 Mflop/s
(13,9,15) <- (1,1,15).*(13, 8+1,1): 102.355830 Mflop/s

Testing m0 = 13, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 13  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 9 9 13 9 9 9 13 9
<<< (M = 13, K = 9, N = 9) : 101.829521
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 9 15 13 9 9 15 13 15
<<< (M = 13, K = 9, N = 15) : 102.355830
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (13, 8,1) :   102.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2203 (19.6%), 9047 (80.4%) left; Finishing by Sat Oct 21  6:33:45 2000

(9,8,9) <- (3,1,3).*(3, 7+1,3): 108.261129 Mflop/s
(15,16,15) <- (5,2,5).*(3, 7+1,3): 132.403386 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 108.261129
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 132.403386
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 7,3) :   119.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2204 (19.6%), 9046 (80.4%) left; Finishing by Sat Oct 21  6:33:43 2000

(8,6,5) <- (4,1,1).*(2, 5+1,5): 28.686267 Mflop/s
(14,18,15) <- (7,3,3).*(2, 5+1,5): 35.605397 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  5 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 5 8 6 6 5 8 5
<<< (M = 8, K = 6, N = 5) : 28.686267
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 35.605397
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 5,5) :    31.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2205 (19.6%), 9045 (80.4%) left; Finishing by Sat Oct 21  6:33:47 2000

(9,12,11) <- (9,0,0).*(1, 11+1,11): 118.681412 Mflop/s
(15,12,11) <- (15,1,1).*(1, 11+1,11): 119.539702 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 11 9 12 12 11 9 11
<<< (M = 9, K = 12, N = 11) : 118.681412
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 11 15 12 12 11 15 11
<<< (M = 15, K = 12, N = 11) : 119.539702
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,11) :   119.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2206 (19.6%), 9044 (80.4%) left; Finishing by Sat Oct 21  6:33:45 2000

(9,6,9) <- (3,1,3).*(3, 5+1,3): 101.761445 Mflop/s
(15,18,15) <- (5,3,5).*(3, 5+1,3): 136.606021 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 101.761445
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 136.606021
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 5,3) :   116.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2207 (19.6%), 9043 (80.4%) left; Finishing by Sat Oct 21  6:33:49 2000

(8,12,8) <- (2,4,4).*(4, 2+1,2): 92.123679 Mflop/s
(12,21,14) <- (3,7,7).*(4, 2+1,2): 115.224984 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 4  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 92.123679
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 14 12 21 21 14 12 14
<<< (M = 12, K = 21, N = 14) : 115.224984
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (4, 2,2) :   102.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2208 (19.6%), 9042 (80.4%) left; Finishing by Sat Oct 21  6:33:42 2000

(8,12,8) <- (1,3,4).*(8, 3+1,2): 32.551372 Mflop/s
(8,20,14) <- (1,5,7).*(8, 3+1,2): 29.897549 Mflop/s

Testing m0 = 8, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 32.551372
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 20 14 8 20 20 14 8 14
<<< (M = 8, K = 20, N = 14) : 29.897549
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 3,2) :    31.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2209 (19.6%), 9041 (80.4%) left; Finishing by Sat Oct 21  6:33:40 2000

(11,11,9) <- (0,0,9).*(11, 10+1,1): 28.535708 Mflop/s
(11,11,15) <- (1,1,15).*(11, 10+1,1): 26.989973 Mflop/s

Testing m0 = 11, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 11  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 11 9 11 11 11 9 11 9
<<< (M = 11, K = 11, N = 9) : 28.535708
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 11 15 11 11 11 15 11 15
<<< (M = 11, K = 11, N = 15) : 26.989973
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (11, 10,1) :    27.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2210 (19.6%), 9040 (80.4%) left; Finishing by Sat Oct 21  6:33:39 2000

(9,7,8) <- (9,1,4).*(1, 6+1,2): 120.597713 Mflop/s
(15,14,14) <- (15,2,7).*(1, 6+1,2): 151.612038 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 120.597713
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 151.612038
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,2) :   134.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2211 (19.7%), 9039 (80.3%) left; Finishing by Sat Oct 21  6:33:42 2000

(8,10,7) <- (4,1,1).*(2, 9+1,7): 29.142825 Mflop/s
(14,10,14) <- (7,1,2).*(2, 9+1,7): 29.348930 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  9 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 7 8 10 10 7 8 7
<<< (M = 8, K = 10, N = 7) : 29.142825
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 14 14 10 10 14 14 14
<<< (M = 14, K = 10, N = 14) : 29.348930
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 9,7) :    29.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2212 (19.7%), 9038 (80.3%) left; Finishing by Sat Oct 21  6:33:41 2000

(9,10,14) <- (9,2,0).*(1, 4+1,14): 131.483561 Mflop/s
(15,15,14) <- (15,3,1).*(1, 4+1,14): 144.148835 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 14 9 10 10 14 9 14
<<< (M = 9, K = 10, N = 14) : 131.483561
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 144.148835
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,14) :   137.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2213 (19.7%), 9037 (80.3%) left; Finishing by Sat Oct 21  6:33:39 2000

(7,10,8) <- (1,1,4).*(7, 9+1,2): 24.361238 Mflop/s
(14,10,14) <- (2,1,7).*(7, 9+1,2): 26.606091 Mflop/s

Testing m0 = 7, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 7  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 10 8 7 10 10 8 7 8
<<< (M = 7, K = 10, N = 8) : 24.361238
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 14 14 10 10 14 14 14
<<< (M = 14, K = 10, N = 14) : 26.606091
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (7, 9,2) :    25.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2214 (19.7%), 9036 (80.3%) left; Finishing by Sat Oct 21  6:33:38 2000

(8,18,8) <- (4,9,4).*(2,1+1,2): 104.471010 Mflop/s
(14,30,14) <- (7,15,7).*(2,1+1,2): 43.245679 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 8 8 18 18 8 8 8
<<< (M = 8, K = 18, N = 8) : 104.471010
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 14 14 30 30 14 14 14
<<< (M = 14, K = 30, N = 14) : 43.245679
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2,1,2) :    61.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2215 (19.7%), 9035 (80.3%) left; Finishing by Sat Oct 21  6:33:31 2000

(9,18,12) <- (9,9,0).*(1,1+1,12): 31.102807 Mflop/s
(15,30,12) <- (15,15,1).*(1,1+1,12): 29.932901 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 12 9 18 18 12 9 12
<<< (M = 9, K = 18, N = 12) : 31.102807
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 12 15 30 30 12 15 12
<<< (M = 15, K = 30, N = 12) : 29.932901
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,12) :    30.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2216 (19.7%), 9034 (80.3%) left; Finishing by Sat Oct 21  6:33:29 2000

(8,6,9) <- (1,1,9).*(8, 5+1,1): 74.360956 Mflop/s
(8,18,15) <- (1,3,15).*(8, 5+1,1): 106.618350 Mflop/s

Testing m0 = 8, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 74.360956
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 15 8 18 18 15 8 15
<<< (M = 8, K = 18, N = 15) : 106.618350
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 5,1) :    87.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2217 (19.7%), 9033 (80.3%) left; Finishing by Sat Oct 21  6:33:33 2000

(5,12,9) <- (1,4,9).*(5, 2+1,1): 76.138429 Mflop/s
(15,21,15) <- (3,7,15).*(5, 2+1,1): 92.080889 Mflop/s

Testing m0 = 5, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 76.138429
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 92.080889
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 2,1) :    83.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2218 (19.7%), 9032 (80.3%) left; Finishing by Sat Oct 21  6:33:31 2000

(9,10,14) <- (9,1,0).*(1, 9+1,14): 118.688272 Mflop/s
(15,10,14) <- (15,1,1).*(1, 9+1,14): 119.653935 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 14 9 10 10 14 9 14
<<< (M = 9, K = 10, N = 14) : 118.688272
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 119.653935
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,14) :   119.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2219 (19.7%), 9031 (80.3%) left; Finishing by Sat Oct 21  6:33:30 2000

(6,12,9) <- (1,0,9).*(6, 11+1,1): 116.393040 Mflop/s
(12,12,15) <- (2,1,15).*(6, 11+1,1): 119.408800 Mflop/s

Testing m0 = 6, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 9 6 12 12 9 6 9
<<< (M = 6, K = 12, N = 9) : 116.393040
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 119.408800
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 11,1) :   117.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2220 (19.7%), 9030 (80.3%) left; Finishing by Sat Oct 21  6:33:28 2000

(5,12,9) <- (1,4,3).*(5, 2+1,3): 30.844403 Mflop/s
(15,21,15) <- (3,7,5).*(5, 2+1,3): 30.449709 Mflop/s

Testing m0 = 5, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 30.844403
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 30.449709
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 2,3) :    30.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2221 (19.7%), 9029 (80.3%) left; Finishing by Sat Oct 21  6:33:27 2000

(9,15,9) <- (9,0,9).*(1, 14+1,1): 140.543965 Mflop/s
(15,15,15) <- (15,1,15).*(1, 14+1,1): 144.102665 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 140.543965
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 144.102665
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 14,1) :   142.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2222 (19.8%), 9028 (80.2%) left; Finishing by Sat Oct 21  6:33:25 2000

(11,10,9) <- (0,2,9).*(11, 4+1,1): 111.565252 Mflop/s
(11,15,15) <- (1,3,15).*(11, 4+1,1): 124.585779 Mflop/s

Testing m0 = 11, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 11  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 10 9 11 10 10 9 11 9
<<< (M = 11, K = 10, N = 9) : 111.565252
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 15 11 15 15 15 11 15
<<< (M = 11, K = 15, N = 15) : 124.585779
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (11, 4,1) :   117.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2223 (19.8%), 9027 (80.2%) left; Finishing by Sat Oct 21  6:33:24 2000

(9,12,9) <- (1,0,9).*(9, 11+1,1): 32.118016 Mflop/s
(9,12,15) <- (1,1,15).*(9, 11+1,1): 32.174990 Mflop/s

Testing m0 = 9, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 9  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 32.118016
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 32.174990
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (9, 11,1) :    32.1 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2224 (19.8%), 9026 (80.2%) left; Finishing by Sat Oct 21  6:33:22 2000

(9,12,5) <- (9,3,1).*(1, 3+1,5): 150.814175 Mflop/s
(15,20,15) <- (15,5,3).*(1, 3+1,5): 140.276615 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  3 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 150.814175
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 140.276615
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 3,5) :   145.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2225 (19.8%), 9025 (80.2%) left; Finishing by Sat Oct 21  6:33:21 2000

(9,10,10) <- (9,1,0).*(1, 9+1,10): 119.146991 Mflop/s
(15,10,10) <- (15,1,1).*(1, 9+1,10): 119.667907 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  9 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 10 9 10 10 10 9 10
<<< (M = 9, K = 10, N = 10) : 119.146991
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 10 15 10 10 10 15 10
<<< (M = 15, K = 10, N = 10) : 119.667907
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 9,10) :   119.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2226 (19.8%), 9024 (80.2%) left; Finishing by Sat Oct 21  6:33:24 2000

(5,13,9) <- (1,0,9).*(5, 12+1,1): 71.404926 Mflop/s
(15,13,15) <- (3,1,15).*(5, 12+1,1): 87.103584 Mflop/s

Testing m0 = 5, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 5  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 13 9 5 13 13 9 5 9
<<< (M = 5, K = 13, N = 9) : 71.404926
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 87.103584
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (5, 12,1) :    78.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2227 (19.8%), 9023 (80.2%) left; Finishing by Sat Oct 21  6:33:23 2000

(9,7,15) <- (9,1,0).*(1, 6+1,15): 113.153041 Mflop/s
(15,14,15) <- (15,2,1).*(1, 6+1,15): 136.175773 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  6 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 15 9 7 7 15 9 15
<<< (M = 9, K = 7, N = 15) : 113.153041
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 136.175773
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 6,15) :   123.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2228 (19.8%), 9022 (80.2%) left; Finishing by Sat Oct 21  6:33:21 2000

(6,6,9) <- (1,1,9).*(6, 5+1,1): 83.491805 Mflop/s
(12,18,15) <- (2,3,15).*(6, 5+1,1): 131.735328 Mflop/s

Testing m0 = 6, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 6  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 6 9 6 6 6 9 6 9
<<< (M = 6, K = 6, N = 9) : 83.491805
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 131.735328
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (6, 5,1) :   102.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2229 (19.8%), 9021 (80.2%) left; Finishing by Sat Oct 21  6:33:19 2000

(8,12,9) <- (4,4,3).*(2, 2+1,3): 48.073867 Mflop/s
(14,21,15) <- (7,7,5).*(2, 2+1,3): 33.768093 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 48.073867
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 15 14 21 21 15 14 15
<<< (M = 14, K = 21, N = 15) : 33.768093
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 2,3) :    39.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2230 (19.8%), 9020 (80.2%) left; Finishing by Sat Oct 21  6:33:13 2000

(15,15,9) <- (0,0,9).*(15, 14+1,1): 89.811615 Mflop/s
(15,15,15) <- (1,1,15).*(15, 14+1,1): 110.670994 Mflop/s

Testing m0 = 15, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 15  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 89.811615
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 110.670994
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (15, 14,1) :    99.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2231 (19.8%), 9019 (80.2%) left; Finishing by Sat Oct 21  6:33:16 2000

(8,12,9) <- (4,0,3).*(2, 11+1,3): 48.520630 Mflop/s
(14,12,15) <- (7,1,5).*(2, 11+1,3): 36.429221 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 48.520630
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 36.429221
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 11,3) :    41.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2232 (19.8%), 9018 (80.2%) left; Finishing by Sat Oct 21  6:33:15 2000

(8,12,8) <- (4,3,2).*(2, 3+1,4): 41.503130 Mflop/s
(14,20,12) <- (7,5,3).*(2, 3+1,4): 33.652912 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 41.503130
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 12 14 20 20 12 14 12
<<< (M = 14, K = 20, N = 12) : 33.652912
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 3,4) :    37.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2233 (19.8%), 9017 (80.2%) left; Finishing by Sat Oct 21  6:33:08 2000

(9,18,7) <- (9,9,1).*(1,1+1,7): 116.184938 Mflop/s
(15,30,14) <- (15,15,2).*(1,1+1,7): 121.342405 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1 1 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 7 9 18 18 7 9 7
<<< (M = 9, K = 18, N = 7) : 116.184938
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 14 15 30 30 14 15 14
<<< (M = 15, K = 30, N = 14) : 121.342405
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1,1,7) :   118.7 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2234 (19.9%), 9016 (80.1%) left; Finishing by Sat Oct 21  6:33:07 2000

(9,11,5) <- (9,0,1).*(1, 10+1,5): 127.180257 Mflop/s
(15,11,15) <- (15,1,3).*(1, 10+1,5): 140.591451 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  10 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 5 9 11 11 5 9 5
<<< (M = 9, K = 11, N = 5) : 127.180257
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 140.591451
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 10,5) :   133.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2235 (19.9%), 9015 (80.1%) left; Finishing by Sat Oct 21  6:33:10 2000

(8,10,8) <- (4,1,2).*(2, 9+1,4): 34.857245 Mflop/s
(14,10,12) <- (7,1,3).*(2, 9+1,4): 29.934731 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 34.857245
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 12 14 10 10 12 14 12
<<< (M = 14, K = 10, N = 12) : 29.934731
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 9,4) :    32.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2236 (19.9%), 9014 (80.1%) left; Finishing by Sat Oct 21  6:33:09 2000

(9,12,16) <- (9,0,0).*(1, 11+1,16): 122.980834 Mflop/s
(15,12,16) <- (15,1,0).*(1, 11+1,16): 124.087512 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  11 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 16 9 12 12 16 9 16
<<< (M = 9, K = 12, N = 16) : 122.980834
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 16 15 12 12 16 15 16
<<< (M = 15, K = 12, N = 16) : 124.087512
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 11,16) :   123.5 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2237 (19.9%), 9013 (80.1%) left; Finishing by Sat Oct 21  6:33:07 2000

(9,12,8) <- (9,4,4).*(1, 2+1,2): 153.458887 Mflop/s
(15,21,14) <- (15,7,7).*(1, 2+1,2): 142.939763 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 153.458887
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 14 15 21 21 14 15 14
<<< (M = 15, K = 21, N = 14) : 142.939763
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 2,2) :   148.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2238 (19.9%), 9012 (80.1%) left; Finishing by Sat Oct 21  6:33:06 2000

(9,9,16) <- (9,1,0).*(1, 8+1,16): 119.850774 Mflop/s
(15,9,16) <- (15,1,0).*(1, 8+1,16): 120.921092 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 16 9 9 9 16 9 16
<<< (M = 9, K = 9, N = 16) : 119.850774
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 16 15 9 9 16 15 16
<<< (M = 15, K = 9, N = 16) : 120.921092
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,16) :   120.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2239 (19.9%), 9011 (80.1%) left; Finishing by Sat Oct 21  6:33:04 2000

(8,9,9) <- (1,1,9).*(8, 8+1,1): 90.886199 Mflop/s
(8,9,15) <- (1,1,15).*(8, 8+1,1): 91.723101 Mflop/s

Testing m0 = 8, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 8  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 90.886199
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 15 8 9 9 15 8 15
<<< (M = 8, K = 9, N = 15) : 91.723101
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (8, 8,1) :    91.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2240 (19.9%), 9010 (80.1%) left; Finishing by Sat Oct 21  6:33:08 2000

(9,15,8) <- (3,0,2).*(3, 14+1,4): 131.505957 Mflop/s
(15,15,12) <- (5,1,3).*(3, 14+1,4): 133.184268 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 131.505957
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 133.184268
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 14,4) :   132.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2241 (19.9%), 9009 (80.1%) left; Finishing by Sat Oct 21  6:33:06 2000

(9,6,5) <- (9,1,1).*(1, 5+1,5): 109.733819 Mflop/s
(15,18,15) <- (15,3,3).*(1, 5+1,5): 160.046498 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  5 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 5 9 6 6 5 9 5
<<< (M = 9, K = 6, N = 5) : 109.733819
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 160.046498
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 5,5) :   130.2 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2242 (19.9%), 9008 (80.1%) left; Finishing by Sat Oct 21  6:33:10 2000

(12,18,9) <- (0,9,9).*(12,1+1,1): 27.707716 Mflop/s
(12,30,15) <- (1,15,15).*(12,1+1,1): 27.432875 Mflop/s

Testing m0 = 12, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 12 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 9 12 18 18 9 12 9
<<< (M = 12, K = 18, N = 9) : 27.707716
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 30 15 12 30 30 15 12 15
<<< (M = 12, K = 30, N = 15) : 27.432875
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (12,1,1) :    27.6 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2243 (19.9%), 9007 (80.1%) left; Finishing by Sat Oct 21  6:33:03 2000

(8,10,6) <- (4,1,1).*(2, 9+1,6): 30.574069 Mflop/s
(14,10,12) <- (7,1,2).*(2, 9+1,6): 27.178367 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 2  9 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 6 8 10 10 6 8 6
<<< (M = 8, K = 10, N = 6) : 30.574069
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 12 14 10 10 12 14 12
<<< (M = 14, K = 10, N = 12) : 27.178367
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (2, 9,6) :    28.8 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2244 (19.9%), 9006 (80.1%) left; Finishing by Sat Oct 21  6:33:02 2000

(9,9,9) <- (9,1,1).*(1, 8+1,9): 115.151438 Mflop/s
(15,9,9) <- (15,1,1).*(1, 8+1,9): 117.532362 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  8 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 115.151438
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 9 15 9 9 9 15 9
<<< (M = 15, K = 9, N = 9) : 117.532362
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 8,9) :   116.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2245 (20.0%), 9005 (80.0%) left; Finishing by Sat Oct 21  6:33:00 2000

(16,7,9) <- (0,1,9).*(16, 6+1,1): 25.390150 Mflop/s
(16,14,15) <- (0,2,15).*(16, 6+1,1): 29.747332 Mflop/s

Testing m0 = 16, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 16  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 7 9 16 7 7 9 16 9
<<< (M = 16, K = 7, N = 9) : 25.390150
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 15 16 14 14 15 16 15
<<< (M = 16, K = 14, N = 15) : 29.747332
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (16, 6,1) :    27.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2246 (20.0%), 9004 (80.0%) left; Finishing by Sat Oct 21  6:32:59 2000

(9,10,9) <- (3,1,9).*(3, 9+1,1): 156.088985 Mflop/s
(15,10,15) <- (5,1,15).*(3, 9+1,1): 160.059415 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 3  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 156.088985
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 160.059415
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (3, 9,1) :   158.0 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2247 (20.0%), 9003 (80.0%) left; Finishing by Sat Oct 21  6:33:02 2000

(9,10,15) <- (9,2,0).*(1, 4+1,15): 132.860251 Mflop/s
(15,15,15) <- (15,3,1).*(1, 4+1,15): 147.715778 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  4 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 15 9 10 10 15 9 15
<<< (M = 9, K = 10, N = 15) : 132.860251
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 147.715778
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 4,15) :   139.9 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2248 (20.0%), 9002 (80.0%) left; Finishing by Sat Oct 21  6:33:01 2000

(13,6,9) <- (0,1,9).*(13, 5+1,1): 90.320511 Mflop/s
(13,18,15) <- (1,3,15).*(13, 5+1,1): 123.339139 Mflop/s

Testing m0 = 13, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 13  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 6 9 13 6 6 9 13 9
<<< (M = 13, K = 6, N = 9) : 90.320511
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 18 15 13 18 18 15 13 15
<<< (M = 13, K = 18, N = 15) : 123.339139
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (13, 5,1) :   104.3 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2249 (20.0%), 9001 (80.0%) left; Finishing by Sat Oct 21  6:33:04 2000

(9,8,6) <- (9,1,1).*(1, 7+1,6): 120.984076 Mflop/s
(15,16,12) <- (15,2,2).*(1, 7+1,6): 151.251369 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2lm -l0 1  7 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 6 9 8 8 6 9 6
<<< (M = 9, K = 8, N = 6) : 120.984076
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 151.251369
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2lm.CC (1, 7,6) :   134.4 MFLOPS.
Best Blocking for double.NN.1.2lm.CC so far : (4, 15,1) :   192.5 MFLOPS.
Done 2250 (20.0%), 9000 (80.0%) left; Finishing by Sat Oct 21  6:33:03 2000

(9,16,8) <- (3,0,4).*(3, 15+1,2): 134.187453 Mflop/s
(15,16,14) <- (5,1,7).*(3, 15+1,2): 135.046017 Mflop/s
Testing double.NN.1.2ma.CC (-O1)...

Testing m0 = 3, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 134.187453
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 135.046017
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 15,2) :   134.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (3, 15,2) :   134.6 MFLOPS.
Done 2251 (20.0%), 8999 (80.0%) left; Finishing by Sat Oct 21  6:33:06 2000

(7,8,9) <- (1,1,9).*(7, 7+1,1): 33.067245 Mflop/s
(14,16,15) <- (2,2,15).*(7, 7+1,1): 41.957764 Mflop/s

Testing m0 = 7, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 9 7 8 8 9 7 9
<<< (M = 7, K = 8, N = 9) : 33.067245
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 41.957764
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 7,1) :    37.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (3, 15,2) :   134.6 MFLOPS.
Done 2252 (20.0%), 8998 (80.0%) left; Finishing by Sat Oct 21  6:33:04 2000

(8,11,9) <- (4,0,3).*(2, 10+1,3): 48.323953 Mflop/s
(14,11,15) <- (7,1,5).*(2, 10+1,3): 35.936995 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 48.323953
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 35.936995
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 10,3) :    41.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (3, 15,2) :   134.6 MFLOPS.
Done 2253 (20.0%), 8997 (80.0%) left; Finishing by Sat Oct 21  6:33:03 2000

(9,12,11) <- (9,4,0).*(1, 2+1,11): 118.052142 Mflop/s
(15,21,11) <- (15,7,1).*(1, 2+1,11): 116.663829 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 11 9 12 12 11 9 11
<<< (M = 9, K = 12, N = 11) : 118.052142
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 11 15 21 21 11 15 11
<<< (M = 15, K = 21, N = 11) : 116.663829
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,11) :   117.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (3, 15,2) :   134.6 MFLOPS.
Done 2254 (20.0%), 8996 (80.0%) left; Finishing by Sat Oct 21  6:33:01 2000

(9,12,9) <- (9,3,3).*(1, 3+1,3): 200.759263 Mflop/s
(15,20,15) <- (15,5,5).*(1, 3+1,3): 178.741725 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 200.759263
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 178.741725
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,3) :   189.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 3,3) :   189.1 MFLOPS.
Done 2255 (20.0%), 8995 (80.0%) left; Finishing by Sat Oct 21  6:33:00 2000

(9,8,9) <- (1,1,9).*(9, 7+1,1): 25.874843 Mflop/s
(9,16,15) <- (1,2,15).*(9, 7+1,1): 30.401563 Mflop/s

Testing m0 = 9, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 9  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 25.874843
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 15 9 16 16 15 9 15
<<< (M = 9, K = 16, N = 15) : 30.401563
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (9, 7,1) :    28.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 3,3) :   189.1 MFLOPS.
Done 2256 (20.1%), 8994 (79.9%) left; Finishing by Sat Oct 21  6:32:58 2000

(9,10,9) <- (9,1,3).*(1, 9+1,3): 183.576361 Mflop/s
(15,10,15) <- (15,1,5).*(1, 9+1,3): 189.332583 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 183.576361
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 189.332583
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,3) :   186.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 3,3) :   189.1 MFLOPS.
Done 2257 (20.1%), 8993 (79.9%) left; Finishing by Sat Oct 21  6:33:02 2000

(9,8,5) <- (9,1,1).*(1, 7+1,5): 137.800723 Mflop/s
(15,16,15) <- (15,2,3).*(1, 7+1,5): 182.449207 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 137.800723
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 182.449207
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,5) :   157.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 3,3) :   189.1 MFLOPS.
Done 2258 (20.1%), 8992 (79.9%) left; Finishing by Sat Oct 21  6:33:05 2000

(9,8,6) <- (9,1,1).*(1, 7+1,6): 127.283609 Mflop/s
(15,16,12) <- (15,2,2).*(1, 7+1,6): 158.500920 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 6 9 8 8 6 9 6
<<< (M = 9, K = 8, N = 6) : 127.283609
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 158.500920
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,6) :   141.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 3,3) :   189.1 MFLOPS.
Done 2259 (20.1%), 8991 (79.9%) left; Finishing by Sat Oct 21  6:33:04 2000

(9,7,6) <- (9,1,1).*(1, 6+1,6): 121.205002 Mflop/s
(15,14,12) <- (15,2,2).*(1, 6+1,6): 157.051227 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 6 9 7 7 6 9 6
<<< (M = 9, K = 7, N = 6) : 121.205002
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 157.051227
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,6) :   136.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 3,3) :   189.1 MFLOPS.
Done 2260 (20.1%), 8990 (79.9%) left; Finishing by Sat Oct 21  6:33:07 2000

(5,14,9) <- (1,0,3).*(5, 13+1,3): 28.554105 Mflop/s
(15,14,15) <- (3,1,5).*(5, 13+1,3): 29.639832 Mflop/s

Testing m0 = 5, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 14 9 5 14 14 9 5 9
<<< (M = 5, K = 14, N = 9) : 28.554105
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 29.639832
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 13,3) :    29.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 3,3) :   189.1 MFLOPS.
Done 2261 (20.1%), 8989 (79.9%) left; Finishing by Sat Oct 21  6:33:06 2000

(9,9,7) <- (9,1,1).*(1, 8+1,7): 124.229293 Mflop/s
(15,9,14) <- (15,1,2).*(1, 8+1,7): 129.678318 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 7 9 9 9 7 9 7
<<< (M = 9, K = 9, N = 7) : 124.229293
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 129.678318
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,7) :   126.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 3,3) :   189.1 MFLOPS.
Done 2262 (20.1%), 8988 (79.9%) left; Finishing by Sat Oct 21  6:33:09 2000

(8,15,9) <- (4,0,9).*(2, 14+1,1): 172.101769 Mflop/s
(14,15,15) <- (7,1,15).*(2, 14+1,1): 175.144597 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 172.101769
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 175.144597
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 14,1) :   173.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 3,3) :   189.1 MFLOPS.
Done 2263 (20.1%), 8987 (79.9%) left; Finishing by Sat Oct 21  6:33:08 2000

(9,10,5) <- (3,2,1).*(3, 4+1,5): 122.168068 Mflop/s
(15,15,15) <- (5,3,3).*(3, 4+1,5): 140.716033 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  4 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 5 9 10 10 5 9 5
<<< (M = 9, K = 10, N = 5) : 122.168068
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 140.716033
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 4,5) :   130.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 3,3) :   189.1 MFLOPS.
Done 2264 (20.1%), 8986 (79.9%) left; Finishing by Sat Oct 21  6:33:11 2000

(8,16,9) <- (2,0,9).*(4, 15+1,1): 76.604620 Mflop/s
(12,16,15) <- (3,1,15).*(4, 15+1,1): 133.498316 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 76.604620
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 133.498316
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 15,1) :    97.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 3,3) :   189.1 MFLOPS.
Done 2265 (20.1%), 8985 (79.9%) left; Finishing by Sat Oct 21  6:33:10 2000

(5,12,9) <- (1,0,9).*(5, 11+1,1): 62.308613 Mflop/s
(15,12,15) <- (3,1,15).*(5, 11+1,1): 84.474393 Mflop/s

Testing m0 = 5, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 62.308613
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 84.474393
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 11,1) :    71.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 3,3) :   189.1 MFLOPS.
Done 2266 (20.1%), 8984 (79.9%) left; Finishing by Sat Oct 21  6:33:03 2000

(5,6,8) <- (1,1,4).*(5, 5+1,2): 27.747902 Mflop/s
(15,18,14) <- (3,3,7).*(5, 5+1,2): 36.010346 Mflop/s

Testing m0 = 5, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 6 8 5 6 6 8 5 8
<<< (M = 5, K = 6, N = 8) : 27.747902
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 36.010346
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 5,2) :    31.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 3,3) :   189.1 MFLOPS.
Done 2267 (20.2%), 8983 (79.8%) left; Finishing by Sat Oct 21  6:33:02 2000

(9,14,10) <- (9,0,0).*(1, 13+1,10): 115.310151 Mflop/s
(15,14,10) <- (15,1,1).*(1, 13+1,10): 116.651115 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 10 9 14 14 10 9 10
<<< (M = 9, K = 14, N = 10) : 115.310151
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 10 15 14 14 10 15 10
<<< (M = 15, K = 14, N = 10) : 116.651115
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,10) :   116.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 3,3) :   189.1 MFLOPS.
Done 2268 (20.2%), 8982 (79.8%) left; Finishing by Sat Oct 21  6:33:05 2000

(8,12,8) <- (1,4,4).*(8, 2+1,2): 28.764078 Mflop/s
(8,21,14) <- (1,7,7).*(8, 2+1,2): 27.521915 Mflop/s

Testing m0 = 8, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 28.764078
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 21 14 8 21 21 14 8 14
<<< (M = 8, K = 21, N = 14) : 27.521915
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 2,2) :    28.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 3,3) :   189.1 MFLOPS.
Done 2269 (20.2%), 8981 (79.8%) left; Finishing by Sat Oct 21  6:33:09 2000

(9,16,9) <- (9,0,3).*(1, 15+1,3): 203.248537 Mflop/s
(15,16,15) <- (15,1,5).*(1, 15+1,3): 206.698331 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 203.248537
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 206.698331
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,3) :   205.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2270 (20.2%), 8980 (79.8%) left; Finishing by Sat Oct 21  6:33:07 2000

(9,12,8) <- (9,4,2).*(1, 2+1,4): 172.521043 Mflop/s
(15,21,12) <- (15,7,3).*(1, 2+1,4): 167.700761 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 172.521043
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 12 15 21 21 12 15 12
<<< (M = 15, K = 21, N = 12) : 167.700761
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,4) :   170.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2271 (20.2%), 8979 (79.8%) left; Finishing by Sat Oct 21  6:33:11 2000

(9,10,14) <- (9,1,0).*(1, 9+1,14): 104.758787 Mflop/s
(15,10,14) <- (15,1,1).*(1, 9+1,14): 105.378465 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 14 9 10 10 14 9 14
<<< (M = 9, K = 10, N = 14) : 104.758787
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 105.378465
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,14) :   105.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2272 (20.2%), 8978 (79.8%) left; Finishing by Sat Oct 21  6:33:09 2000

(9,7,13) <- (9,1,0).*(1, 6+1,13): 99.984623 Mflop/s
(15,14,13) <- (15,2,1).*(1, 6+1,13): 120.130515 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 13 9 7 7 13 9 13
<<< (M = 9, K = 7, N = 13) : 99.984623
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 13 15 14 14 13 15 13
<<< (M = 15, K = 14, N = 13) : 120.130515
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,13) :   109.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2273 (20.2%), 8977 (79.8%) left; Finishing by Sat Oct 21  6:33:13 2000

(15,10,9) <- (0,2,9).*(15, 4+1,1): 86.555515 Mflop/s
(15,15,15) <- (1,3,15).*(15, 4+1,1): 98.621569 Mflop/s

Testing m0 = 15, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 15  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 9 15 10 10 9 15 9
<<< (M = 15, K = 10, N = 9) : 86.555515
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 98.621569
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (15, 4,1) :    92.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2274 (20.2%), 8976 (79.8%) left; Finishing by Sat Oct 21  6:33:11 2000

(7,12,9) <- (1,0,9).*(7, 11+1,1): 35.468302 Mflop/s
(14,12,15) <- (2,1,15).*(7, 11+1,1): 39.112911 Mflop/s

Testing m0 = 7, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 9 7 12 12 9 7 9
<<< (M = 7, K = 12, N = 9) : 35.468302
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 39.112911
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 11,1) :    37.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2275 (20.2%), 8975 (79.8%) left; Finishing by Sat Oct 21  6:33:10 2000

(8,10,8) <- (4,2,2).*(2, 4+1,4): 39.986303 Mflop/s
(14,15,12) <- (7,3,3).*(2, 4+1,4): 41.518898 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 39.986303
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 41.518898
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 4,4) :    40.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2276 (20.2%), 8974 (79.8%) left; Finishing by Sat Oct 21  6:33:08 2000

(5,9,8) <- (1,1,4).*(5, 8+1,2): 29.746674 Mflop/s
(15,9,14) <- (3,1,7).*(5, 8+1,2): 29.927513 Mflop/s

Testing m0 = 5, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 8 5 9 9 8 5 8
<<< (M = 5, K = 9, N = 8) : 29.746674
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 29.927513
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 8,2) :    29.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2277 (20.2%), 8973 (79.8%) left; Finishing by Sat Oct 21  6:33:02 2000

(8,9,8) <- (4,1,4).*(2, 8+1,2): 123.092804 Mflop/s
(14,9,14) <- (7,1,7).*(2, 8+1,2): 127.517008 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 123.092804
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 14 14 9 9 14 14 14
<<< (M = 14, K = 9, N = 14) : 127.517008
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 8,2) :   125.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2278 (20.2%), 8972 (79.8%) left; Finishing by Sat Oct 21  6:33:05 2000

(8,15,8) <- (4,0,2).*(2, 14+1,4): 35.919902 Mflop/s
(14,15,12) <- (7,1,3).*(2, 14+1,4): 32.159154 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 35.919902
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 32.159154
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 14,4) :    33.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2279 (20.3%), 8971 (79.7%) left; Finishing by Sat Oct 21  6:33:08 2000

(11,9,9) <- (0,1,9).*(11, 8+1,1): 81.811023 Mflop/s
(11,9,15) <- (1,1,15).*(11, 8+1,1): 82.082146 Mflop/s

Testing m0 = 11, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 11  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 9 9 11 9 9 9 11 9
<<< (M = 11, K = 9, N = 9) : 81.811023
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 9 15 11 9 9 15 11 15
<<< (M = 11, K = 9, N = 15) : 82.082146
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (11, 8,1) :    81.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2280 (20.3%), 8970 (79.7%) left; Finishing by Sat Oct 21  6:33:07 2000

(9,13,13) <- (9,0,0).*(1, 12+1,13): 110.487189 Mflop/s
(15,13,13) <- (15,1,1).*(1, 12+1,13): 111.213270 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 13 9 13 13 13 9 13
<<< (M = 9, K = 13, N = 13) : 110.487189
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 13 15 13 13 13 15 13
<<< (M = 15, K = 13, N = 13) : 111.213270
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,13) :   110.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2281 (20.3%), 8969 (79.7%) left; Finishing by Sat Oct 21  6:33:05 2000

(9,8,10) <- (9,1,0).*(1, 7+1,10): 107.343266 Mflop/s
(15,16,10) <- (15,2,1).*(1, 7+1,10): 124.533864 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 10 9 8 8 10 9 10
<<< (M = 9, K = 8, N = 10) : 107.343266
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 10 15 16 16 10 15 10
<<< (M = 15, K = 16, N = 10) : 124.533864
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,10) :   115.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2282 (20.3%), 8968 (79.7%) left; Finishing by Sat Oct 21  6:33:09 2000

(9,16,14) <- (9,0,0).*(1, 15+1,14): 112.208460 Mflop/s
(15,16,14) <- (15,1,1).*(1, 15+1,14): 112.574588 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 14 9 16 16 14 9 14
<<< (M = 9, K = 16, N = 14) : 112.208460
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 112.574588
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,14) :   112.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2283 (20.3%), 8967 (79.7%) left; Finishing by Sat Oct 21  6:33:07 2000

(9,12,9) <- (9,3,9).*(1, 3+1,1): 132.674679 Mflop/s
(15,20,15) <- (15,5,15).*(1, 3+1,1): 112.397516 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 132.674679
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 112.397516
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,1) :   121.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2284 (20.3%), 8966 (79.7%) left; Finishing by Sat Oct 21  6:33:06 2000

(9,7,5) <- (9,1,1).*(1, 6+1,5): 129.962428 Mflop/s
(15,14,15) <- (15,2,3).*(1, 6+1,5): 178.341024 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 5 9 7 7 5 9 5
<<< (M = 9, K = 7, N = 5) : 129.962428
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 178.341024
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,5) :   150.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2285 (20.3%), 8965 (79.7%) left; Finishing by Sat Oct 21  6:33:04 2000

(7,18,8) <- (1,9,4).*(7,1+1,2): 95.515638 Mflop/s
(14,30,14) <- (2,15,7).*(7,1+1,2): 99.167729 Mflop/s

Testing m0 = 7, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 18 8 7 18 18 8 7 8
<<< (M = 7, K = 18, N = 8) : 95.515638
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 14 14 30 30 14 14 14
<<< (M = 14, K = 30, N = 14) : 99.167729
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7,1,2) :    97.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2286 (20.3%), 8964 (79.7%) left; Finishing by Sat Oct 21  6:33:03 2000

(9,13,8) <- (9,0,2).*(1, 12+1,4): 177.240367 Mflop/s
(15,13,12) <- (15,1,3).*(1, 12+1,4): 182.683912 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 177.240367
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 182.683912
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,4) :   179.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2287 (20.3%), 8963 (79.7%) left; Finishing by Sat Oct 21  6:32:57 2000

(8,10,8) <- (4,1,1).*(2, 9+1,8): 28.433537 Mflop/s
(14,10,8) <- (7,1,1).*(2, 9+1,8): 28.472242 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  9 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 28.433537
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 8 14 10 10 8 14 8
<<< (M = 14, K = 10, N = 8) : 28.472242
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 9,8) :    28.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2288 (20.3%), 8962 (79.7%) left; Finishing by Sat Oct 21  6:33:00 2000

(9,12,8) <- (9,4,1).*(1, 2+1,8): 125.538551 Mflop/s
(15,21,8) <- (15,7,1).*(1, 2+1,8): 123.115866 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 125.538551
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 8 15 21 21 8 15 8
<<< (M = 15, K = 21, N = 8) : 123.115866
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,8) :   124.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2289 (20.3%), 8961 (79.7%) left; Finishing by Sat Oct 21  6:32:54 2000

(5,10,9) <- (1,2,3).*(5, 4+1,3): 30.479751 Mflop/s
(15,15,15) <- (3,3,5).*(5, 4+1,3): 34.116168 Mflop/s

Testing m0 = 5, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 9 5 10 10 9 5 9
<<< (M = 5, K = 10, N = 9) : 30.479751
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 34.116168
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 4,3) :    32.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2290 (20.4%), 8960 (79.6%) left; Finishing by Sat Oct 21  6:32:52 2000

(9,16,7) <- (9,0,1).*(1, 15+1,7): 139.689133 Mflop/s
(15,16,14) <- (15,1,2).*(1, 15+1,7): 142.139738 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 7 9 16 16 7 9 7
<<< (M = 9, K = 16, N = 7) : 139.689133
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 142.139738
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,7) :   140.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2291 (20.4%), 8959 (79.6%) left; Finishing by Sat Oct 21  6:32:51 2000

(9,11,10) <- (9,0,0).*(1, 10+1,10): 111.872124 Mflop/s
(15,11,10) <- (15,1,1).*(1, 10+1,10): 112.328658 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 10 9 11 11 10 9 10
<<< (M = 9, K = 11, N = 10) : 111.872124
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 10 15 11 11 10 15 10
<<< (M = 15, K = 11, N = 10) : 112.328658
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,10) :   112.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2292 (20.4%), 8958 (79.6%) left; Finishing by Sat Oct 21  6:32:49 2000

(9,10,12) <- (9,1,0).*(1, 9+1,12): 109.375303 Mflop/s
(15,10,12) <- (15,1,1).*(1, 9+1,12): 110.362966 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 12 9 10 10 12 9 12
<<< (M = 9, K = 10, N = 12) : 109.375303
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 110.362966
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,12) :   109.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2293 (20.4%), 8957 (79.6%) left; Finishing by Sat Oct 21  6:32:48 2000

(13,11,9) <- (0,0,9).*(13, 10+1,1): 83.862625 Mflop/s
(13,11,15) <- (1,1,15).*(13, 10+1,1): 101.861516 Mflop/s

Testing m0 = 13, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 13  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 11 9 13 11 11 9 13 9
<<< (M = 13, K = 11, N = 9) : 83.862625
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 11 15 13 11 11 15 13 15
<<< (M = 13, K = 11, N = 15) : 101.861516
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (13, 10,1) :    92.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2294 (20.4%), 8956 (79.6%) left; Finishing by Sat Oct 21  6:32:46 2000

(6,15,9) <- (1,0,9).*(6, 14+1,1): 116.924042 Mflop/s
(12,15,15) <- (2,1,15).*(6, 14+1,1): 81.596408 Mflop/s

Testing m0 = 6, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 15 9 6 15 15 9 6 9
<<< (M = 6, K = 15, N = 9) : 116.924042
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 81.596408
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 14,1) :    96.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2295 (20.4%), 8955 (79.6%) left; Finishing by Sat Oct 21  6:32:45 2000

(15,10,9) <- (0,1,9).*(15, 9+1,1): 81.872342 Mflop/s
(15,10,15) <- (1,1,15).*(15, 9+1,1): 99.672654 Mflop/s

Testing m0 = 15, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 15  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 9 15 10 10 9 15 9
<<< (M = 15, K = 10, N = 9) : 81.872342
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 99.672654
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (15, 9,1) :    89.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2296 (20.4%), 8954 (79.6%) left; Finishing by Sat Oct 21  6:32:43 2000

(5,12,9) <- (1,3,9).*(5, 3+1,1): 64.261720 Mflop/s
(15,20,15) <- (3,5,15).*(5, 3+1,1): 86.580600 Mflop/s

Testing m0 = 5, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 64.261720
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 86.580600
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 3,1) :    73.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2297 (20.4%), 8953 (79.6%) left; Finishing by Sat Oct 21  6:32:37 2000

(6,12,8) <- (1,0,4).*(6, 11+1,2): 115.850797 Mflop/s
(12,12,14) <- (2,1,7).*(6, 11+1,2): 81.778533 Mflop/s

Testing m0 = 6, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 8 6 12 12 8 6 8
<<< (M = 6, K = 12, N = 8) : 115.850797
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 81.778533
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 11,2) :    95.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2298 (20.4%), 8952 (79.6%) left; Finishing by Sat Oct 21  6:32:40 2000

(7,18,9) <- (1,9,9).*(7,1+1,1): 86.228223 Mflop/s
(14,30,15) <- (2,15,15).*(7,1+1,1): 89.451088 Mflop/s

Testing m0 = 7, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 18 9 7 18 18 9 7 9
<<< (M = 7, K = 18, N = 9) : 86.228223
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 15 14 30 30 15 14 15
<<< (M = 14, K = 30, N = 15) : 89.451088
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7,1,1) :    87.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2299 (20.4%), 8951 (79.6%) left; Finishing by Sat Oct 21  6:32:39 2000

(9,9,8) <- (3,1,2).*(3, 8+1,4): 123.045916 Mflop/s
(15,9,12) <- (5,1,3).*(3, 8+1,4): 125.662289 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 123.045916
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 125.662289
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 8,4) :   124.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2300 (20.4%), 8950 (79.6%) left; Finishing by Sat Oct 21  6:32:42 2000

(9,10,9) <- (9,2,9).*(1, 4+1,1): 137.049504 Mflop/s
(15,15,15) <- (15,3,15).*(1, 4+1,1): 160.186114 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 137.049504
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 160.186114
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,1) :   147.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2301 (20.5%), 8949 (79.5%) left; Finishing by Sat Oct 21  6:32:41 2000

(9,15,11) <- (9,0,0).*(1, 14+1,11): 116.195569 Mflop/s
(15,15,11) <- (15,1,1).*(1, 14+1,11): 117.364204 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 11 9 15 15 11 9 11
<<< (M = 9, K = 15, N = 11) : 116.195569
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 11 15 15 15 11 15 11
<<< (M = 15, K = 15, N = 11) : 117.364204
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,11) :   116.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2302 (20.5%), 8948 (79.5%) left; Finishing by Sat Oct 21  6:32:34 2000

(9,6,12) <- (9,1,0).*(1, 5+1,12): 97.352908 Mflop/s
(15,18,12) <- (15,3,1).*(1, 5+1,12): 129.668438 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 12 9 6 6 12 9 12
<<< (M = 9, K = 6, N = 12) : 97.352908
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 129.668438
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,12) :   111.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2303 (20.5%), 8947 (79.5%) left; Finishing by Sat Oct 21  6:32:33 2000

(8,15,8) <- (4,0,4).*(2, 14+1,2): 140.670352 Mflop/s
(14,15,14) <- (7,1,7).*(2, 14+1,2): 76.238372 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 140.670352
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 76.238372
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 14,2) :    98.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2304 (20.5%), 8946 (79.5%) left; Finishing by Sat Oct 21  6:32:31 2000

(8,10,5) <- (4,1,1).*(2, 9+1,5): 30.777978 Mflop/s
(14,10,15) <- (7,1,3).*(2, 9+1,5): 30.433194 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  9 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 5 8 10 10 5 8 5
<<< (M = 8, K = 10, N = 5) : 30.777978
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 30.433194
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 9,5) :    30.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2305 (20.5%), 8945 (79.5%) left; Finishing by Sat Oct 21  6:32:30 2000

(9,8,9) <- (9,1,3).*(1, 7+1,3): 169.844566 Mflop/s
(15,16,15) <- (15,2,5).*(1, 7+1,3): 216.199118 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 169.844566
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 216.199118
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,3) :   190.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2306 (20.5%), 8944 (79.5%) left; Finishing by Sat Oct 21  6:32:33 2000

(9,12,8) <- (9,3,4).*(1, 3+1,2): 163.083620 Mflop/s
(15,20,14) <- (15,5,7).*(1, 3+1,2): 142.748213 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 163.083620
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 14 15 20 20 14 15 14
<<< (M = 15, K = 20, N = 14) : 142.748213
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,2) :   152.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2307 (20.5%), 8943 (79.5%) left; Finishing by Sat Oct 21  6:32:27 2000

(9,13,8) <- (9,0,4).*(1, 12+1,2): 185.262145 Mflop/s
(15,13,14) <- (15,1,7).*(1, 12+1,2): 187.834269 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 185.262145
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 187.834269
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,2) :   186.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2308 (20.5%), 8942 (79.5%) left; Finishing by Sat Oct 21  6:32:30 2000

(13,6,9) <- (0,1,9).*(13, 5+1,1): 76.453588 Mflop/s
(13,18,15) <- (1,3,15).*(13, 5+1,1): 103.801801 Mflop/s

Testing m0 = 13, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 13  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 6 9 13 6 6 9 13 9
<<< (M = 13, K = 6, N = 9) : 76.453588
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 18 15 13 18 18 15 13 15
<<< (M = 13, K = 18, N = 15) : 103.801801
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (13, 5,1) :    88.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2309 (20.5%), 8941 (79.5%) left; Finishing by Sat Oct 21  6:32:29 2000

(14,10,9) <- (0,2,9).*(14, 4+1,1): 27.668880 Mflop/s
(14,15,15) <- (1,3,15).*(14, 4+1,1): 31.920984 Mflop/s

Testing m0 = 14, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 14  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 9 14 10 10 9 14 9
<<< (M = 14, K = 10, N = 9) : 27.668880
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 31.920984
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (14, 4,1) :    29.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2310 (20.5%), 8940 (79.5%) left; Finishing by Sat Oct 21  6:32:28 2000

(7,6,8) <- (1,1,4).*(7, 5+1,2): 21.794174 Mflop/s
(14,18,14) <- (2,3,7).*(7, 5+1,2): 31.556175 Mflop/s

Testing m0 = 7, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 6 8 7 6 6 8 7 8
<<< (M = 7, K = 6, N = 8) : 21.794174
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 14 14 18 18 14 14 14
<<< (M = 14, K = 18, N = 14) : 31.556175
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 5,2) :    25.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2311 (20.5%), 8939 (79.5%) left; Finishing by Sat Oct 21  6:32:26 2000

(8,12,8) <- (4,3,2).*(2, 3+1,4): 41.921923 Mflop/s
(14,20,12) <- (7,5,3).*(2, 3+1,4): 33.554360 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 41.921923
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 12 14 20 20 12 14 12
<<< (M = 14, K = 20, N = 12) : 33.554360
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 3,4) :    37.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2312 (20.6%), 8938 (79.4%) left; Finishing by Sat Oct 21  6:32:25 2000

(8,12,8) <- (4,0,2).*(2, 11+1,4): 34.806582 Mflop/s
(14,12,12) <- (7,1,3).*(2, 11+1,4): 30.895013 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 34.806582
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 30.895013
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 11,4) :    32.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2313 (20.6%), 8937 (79.4%) left; Finishing by Sat Oct 21  6:32:23 2000

(8,9,8) <- (2,1,2).*(4, 8+1,4): 23.187897 Mflop/s
(12,9,12) <- (3,1,3).*(4, 8+1,4): 23.317495 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 23.187897
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 12 12 9 9 12 12 12
<<< (M = 12, K = 9, N = 12) : 23.317495
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 8,4) :    23.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2314 (20.6%), 8936 (79.4%) left; Finishing by Sat Oct 21  6:32:22 2000

(9,6,9) <- (9,1,3).*(1, 5+1,3): 150.202982 Mflop/s
(15,18,15) <- (15,3,5).*(1, 5+1,3): 216.339995 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 150.202982
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 216.339995
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,3) :   177.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2315 (20.6%), 8935 (79.4%) left; Finishing by Sat Oct 21  6:32:25 2000

(13,15,9) <- (0,0,9).*(13, 14+1,1): 26.313496 Mflop/s
(13,15,15) <- (1,1,15).*(13, 14+1,1): 29.785203 Mflop/s

Testing m0 = 13, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 13  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 9 13 15 15 9 13 9
<<< (M = 13, K = 15, N = 9) : 26.313496
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 15 13 15 15 15 13 15
<<< (M = 13, K = 15, N = 15) : 29.785203
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (13, 14,1) :    27.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2316 (20.6%), 8934 (79.4%) left; Finishing by Sat Oct 21  6:32:24 2000

(9,13,9) <- (9,0,1).*(1, 12+1,9): 120.744826 Mflop/s
(15,13,9) <- (15,1,1).*(1, 12+1,9): 121.337747 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 120.744826
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 9 15 13 13 9 15 9
<<< (M = 15, K = 13, N = 9) : 121.337747
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,9) :   121.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2317 (20.6%), 8933 (79.4%) left; Finishing by Sat Oct 21  6:32:22 2000

(5,12,8) <- (1,4,4).*(5, 2+1,2): 32.988221 Mflop/s
(15,21,14) <- (3,7,7).*(5, 2+1,2): 32.890826 Mflop/s

Testing m0 = 5, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 8 5 12 12 8 5 8
<<< (M = 5, K = 12, N = 8) : 32.988221
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 14 15 21 21 14 15 14
<<< (M = 15, K = 21, N = 14) : 32.890826
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 2,2) :    32.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2318 (20.6%), 8932 (79.4%) left; Finishing by Sat Oct 21  6:32:21 2000

(8,7,9) <- (4,1,9).*(2, 6+1,1): 122.153317 Mflop/s
(14,14,15) <- (7,2,15).*(2, 6+1,1): 173.962670 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 122.153317
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 173.962670
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 6,1) :   143.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2319 (20.6%), 8931 (79.4%) left; Finishing by Sat Oct 21  6:32:24 2000

(9,13,16) <- (9,0,0).*(1, 12+1,16): 106.668929 Mflop/s
(15,13,16) <- (15,1,0).*(1, 12+1,16): 106.972619 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 16 9 13 13 16 9 16
<<< (M = 9, K = 13, N = 16) : 106.668929
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 16 15 13 13 16 15 16
<<< (M = 15, K = 13, N = 16) : 106.972619
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,16) :   106.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2320 (20.6%), 8930 (79.4%) left; Finishing by Sat Oct 21  6:32:23 2000

(10,8,9) <- (0,1,9).*(10, 7+1,1): 26.851460 Mflop/s
(10,16,15) <- (1,2,15).*(10, 7+1,1): 32.198722 Mflop/s

Testing m0 = 10, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 10  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 8 9 10 8 8 9 10 9
<<< (M = 10, K = 8, N = 9) : 26.851460
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 16 15 10 16 16 15 10 15
<<< (M = 10, K = 16, N = 15) : 32.198722
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (10, 7,1) :    29.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2321 (20.6%), 8929 (79.4%) left; Finishing by Sat Oct 21  6:32:21 2000

(15,7,9) <- (0,1,9).*(15, 6+1,1): 68.543121 Mflop/s
(15,14,15) <- (1,2,15).*(15, 6+1,1): 106.224306 Mflop/s

Testing m0 = 15, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 15  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 7 9 15 7 7 9 15 9
<<< (M = 15, K = 7, N = 9) : 68.543121
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 106.224306
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (15, 6,1) :    83.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2322 (20.6%), 8928 (79.4%) left; Finishing by Sat Oct 21  6:32:20 2000

(9,9,8) <- (3,1,4).*(3, 8+1,2): 121.879574 Mflop/s
(15,9,14) <- (5,1,7).*(3, 8+1,2): 124.180097 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 121.879574
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 124.180097
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 8,2) :   123.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2323 (20.6%), 8927 (79.4%) left; Finishing by Sat Oct 21  6:32:18 2000

(9,12,11) <- (9,0,0).*(1, 11+1,11): 111.138227 Mflop/s
(15,12,11) <- (15,1,1).*(1, 11+1,11): 112.997575 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 11 9 12 12 11 9 11
<<< (M = 9, K = 12, N = 11) : 111.138227
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 11 15 12 12 11 15 11
<<< (M = 15, K = 12, N = 11) : 112.997575
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,11) :   112.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2324 (20.7%), 8926 (79.3%) left; Finishing by Sat Oct 21  6:32:17 2000

(9,14,16) <- (9,0,0).*(1, 13+1,16): 107.610892 Mflop/s
(15,14,16) <- (15,1,0).*(1, 13+1,16): 107.752979 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 16 9 14 14 16 9 16
<<< (M = 9, K = 14, N = 16) : 107.610892
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 16 15 14 14 16 15 16
<<< (M = 15, K = 14, N = 16) : 107.752979
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,16) :   107.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2325 (20.7%), 8925 (79.3%) left; Finishing by Sat Oct 21  6:32:20 2000

(16,14,9) <- (0,0,9).*(16, 13+1,1): 25.780652 Mflop/s
(16,14,15) <- (0,1,15).*(16, 13+1,1): 27.808112 Mflop/s

Testing m0 = 16, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 16  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 9 16 14 14 9 16 9
<<< (M = 16, K = 14, N = 9) : 25.780652
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 15 16 14 14 15 16 15
<<< (M = 16, K = 14, N = 15) : 27.808112
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (16, 13,1) :    26.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2326 (20.7%), 8924 (79.3%) left; Finishing by Sat Oct 21  6:32:19 2000

(9,7,9) <- (3,1,3).*(3, 6+1,3): 111.781120 Mflop/s
(15,14,15) <- (5,2,5).*(3, 6+1,3): 137.026197 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 111.781120
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 137.026197
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 6,3) :   123.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2327 (20.7%), 8923 (79.3%) left; Finishing by Sat Oct 21  6:32:22 2000

(7,8,8) <- (1,1,4).*(7, 7+1,2): 22.830587 Mflop/s
(14,16,14) <- (2,2,7).*(7, 7+1,2): 29.845658 Mflop/s

Testing m0 = 7, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 8 7 8 8 8 7 8
<<< (M = 7, K = 8, N = 8) : 22.830587
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 29.845658
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 7,2) :    25.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2328 (20.7%), 8922 (79.3%) left; Finishing by Sat Oct 21  6:32:26 2000

(9,14,9) <- (9,0,1).*(1, 13+1,9): 120.175640 Mflop/s
(15,14,9) <- (15,1,1).*(1, 13+1,9): 121.382540 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 120.175640
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 121.382540
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,9) :   120.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2329 (20.7%), 8921 (79.3%) left; Finishing by Sat Oct 21  6:32:19 2000

(9,12,5) <- (3,4,1).*(3, 2+1,5): 30.354823 Mflop/s
(15,21,15) <- (5,7,3).*(3, 2+1,5): 29.586918 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  2 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 30.354823
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 29.586918
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 2,5) :    30.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2330 (20.7%), 8920 (79.3%) left; Finishing by Sat Oct 21  6:32:18 2000

(9,8,14) <- (9,1,0).*(1, 7+1,14): 101.526561 Mflop/s
(15,16,14) <- (15,2,1).*(1, 7+1,14): 120.261863 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 14 9 8 8 14 9 14
<<< (M = 9, K = 8, N = 14) : 101.526561
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 120.261863
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,14) :   110.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2331 (20.7%), 8919 (79.3%) left; Finishing by Sat Oct 21  6:32:16 2000

(9,15,9) <- (9,0,3).*(1, 14+1,3): 201.640441 Mflop/s
(15,15,15) <- (15,1,5).*(1, 14+1,3): 204.733584 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 201.640441
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 204.733584
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,3) :   203.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2332 (20.7%), 8918 (79.3%) left; Finishing by Sat Oct 21  6:32:20 2000

(8,14,9) <- (1,0,9).*(8, 13+1,1): 73.067605 Mflop/s
(8,14,15) <- (1,1,15).*(8, 13+1,1): 73.498984 Mflop/s

Testing m0 = 8, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 73.067605
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 15 8 14 14 15 8 15
<<< (M = 8, K = 14, N = 15) : 73.498984
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 13,1) :    73.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2333 (20.7%), 8917 (79.3%) left; Finishing by Sat Oct 21  6:32:18 2000

(13,12,9) <- (0,4,9).*(13, 2+1,1): 80.436457 Mflop/s
(13,21,15) <- (1,7,15).*(13, 2+1,1): 72.742657 Mflop/s

Testing m0 = 13, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 13  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 9 13 12 12 9 13 9
<<< (M = 13, K = 12, N = 9) : 80.436457
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 21 15 13 21 21 15 13 15
<<< (M = 13, K = 21, N = 15) : 72.742657
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (13, 2,1) :    76.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2334 (20.7%), 8916 (79.3%) left; Finishing by Sat Oct 21  6:32:12 2000

(8,9,9) <- (1,1,9).*(8, 8+1,1): 68.412893 Mflop/s
(8,9,15) <- (1,1,15).*(8, 8+1,1): 68.536366 Mflop/s

Testing m0 = 8, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 68.412893
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 15 8 9 9 15 8 15
<<< (M = 8, K = 9, N = 15) : 68.536366
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 8,1) :    68.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2335 (20.8%), 8915 (79.2%) left; Finishing by Sat Oct 21  6:32:11 2000

(8,8,9) <- (4,1,3).*(2, 7+1,3): 45.738046 Mflop/s
(14,16,15) <- (7,2,5).*(2, 7+1,3): 39.498957 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 45.738046
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 39.498957
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 7,3) :    42.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2336 (20.8%), 8914 (79.2%) left; Finishing by Sat Oct 21  6:32:09 2000

(9,10,5) <- (3,1,1).*(3, 9+1,5): 114.041886 Mflop/s
(15,10,15) <- (5,1,3).*(3, 9+1,5): 120.694133 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  9 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 5 9 10 10 5 9 5
<<< (M = 9, K = 10, N = 5) : 114.041886
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 120.694133
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 9,5) :   117.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2337 (20.8%), 8913 (79.2%) left; Finishing by Sat Oct 21  6:32:13 2000

(9,10,8) <- (9,1,1).*(1, 9+1,8): 114.052790 Mflop/s
(15,10,8) <- (15,1,1).*(1, 9+1,8): 117.145576 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 114.052790
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 8 15 10 10 8 15 8
<<< (M = 15, K = 10, N = 8) : 117.145576
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,8) :   115.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2338 (20.8%), 8912 (79.2%) left; Finishing by Sat Oct 21  6:32:11 2000

(9,14,8) <- (3,0,4).*(3, 13+1,2): 130.464067 Mflop/s
(15,14,14) <- (5,1,7).*(3, 13+1,2): 131.131011 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 130.464067
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 131.131011
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 13,2) :   130.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2339 (20.8%), 8911 (79.2%) left; Finishing by Sat Oct 21  6:32:10 2000

(8,9,8) <- (1,1,4).*(8, 8+1,2): 96.974193 Mflop/s
(8,9,14) <- (1,1,7).*(8, 8+1,2): 97.142668 Mflop/s

Testing m0 = 8, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 96.974193
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 14 8 9 9 14 8 14
<<< (M = 8, K = 9, N = 14) : 97.142668
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 8,2) :    97.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2340 (20.8%), 8910 (79.2%) left; Finishing by Sat Oct 21  6:32:08 2000

(9,12,9) <- (1,4,9).*(9, 2+1,1): 102.506605 Mflop/s
(9,21,15) <- (1,7,15).*(9, 2+1,1): 99.206445 Mflop/s

Testing m0 = 9, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 9  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 102.506605
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 21 15 9 21 21 15 9 15
<<< (M = 9, K = 21, N = 15) : 99.206445
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (9, 2,1) :   100.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2341 (20.8%), 8909 (79.2%) left; Finishing by Sat Oct 21  6:32:07 2000

(5,9,9) <- (1,1,9).*(5, 8+1,1): 57.900616 Mflop/s
(15,9,15) <- (3,1,15).*(5, 8+1,1): 57.414743 Mflop/s

Testing m0 = 5, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 57.900616
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 57.414743
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 8,1) :    57.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2342 (20.8%), 8908 (79.2%) left; Finishing by Sat Oct 21  6:32:05 2000

(8,10,8) <- (4,1,4).*(2, 9+1,2): 130.026114 Mflop/s
(14,10,14) <- (7,1,7).*(2, 9+1,2): 72.129200 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 130.026114
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 14 14 10 10 14 14 14
<<< (M = 14, K = 10, N = 14) : 72.129200
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 9,2) :    92.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2343 (20.8%), 8907 (79.2%) left; Finishing by Sat Oct 21  6:32:09 2000

(6,12,9) <- (1,3,9).*(6, 3+1,1): 130.575886 Mflop/s
(12,20,15) <- (2,5,15).*(6, 3+1,1): 126.228409 Mflop/s

Testing m0 = 6, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 9 6 12 12 9 6 9
<<< (M = 6, K = 12, N = 9) : 130.575886
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 20 15 12 20 20 15 12 15
<<< (M = 12, K = 20, N = 15) : 126.228409
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 3,1) :   128.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2344 (20.8%), 8906 (79.2%) left; Finishing by Sat Oct 21  6:32:12 2000

(9,11,9) <- (3,0,9).*(3, 10+1,1): 163.446640 Mflop/s
(15,11,15) <- (5,1,15).*(3, 10+1,1): 167.842861 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 163.446640
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 167.842861
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 10,1) :   165.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2345 (20.8%), 8905 (79.2%) left; Finishing by Sat Oct 21  6:32:11 2000

(6,16,8) <- (1,0,4).*(6, 15+1,2): 118.794163 Mflop/s
(12,16,14) <- (2,1,7).*(6, 15+1,2): 82.730836 Mflop/s

Testing m0 = 6, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 16 8 6 16 16 8 6 8
<<< (M = 6, K = 16, N = 8) : 118.794163
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 14 12 16 16 14 12 14
<<< (M = 12, K = 16, N = 14) : 82.730836
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 15,2) :    97.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2346 (20.9%), 8904 (79.1%) left; Finishing by Sat Oct 21  6:32:19 2000

(9,14,5) <- (9,0,1).*(1, 13+1,5): 160.360529 Mflop/s
(15,14,15) <- (15,1,3).*(1, 13+1,5): 171.319114 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 5 9 14 14 5 9 5
<<< (M = 9, K = 14, N = 5) : 160.360529
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 171.319114
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,5) :   165.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2347 (20.9%), 8903 (79.1%) left; Finishing by Sat Oct 21  6:32:17 2000

(8,6,5) <- (4,1,1).*(2, 5+1,5): 28.437152 Mflop/s
(14,18,15) <- (7,3,3).*(2, 5+1,5): 35.556277 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  5 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 5 8 6 6 5 8 5
<<< (M = 8, K = 6, N = 5) : 28.437152
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 35.556277
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 5,5) :    31.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2348 (20.9%), 8902 (79.1%) left; Finishing by Sat Oct 21  6:32:16 2000

(9,11,16) <- (9,0,0).*(1, 10+1,16): 104.710090 Mflop/s
(15,11,16) <- (15,1,0).*(1, 10+1,16): 105.175683 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 16 9 11 11 16 9 16
<<< (M = 9, K = 11, N = 16) : 104.710090
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 16 15 11 11 16 15 16
<<< (M = 15, K = 11, N = 16) : 105.175683
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,16) :   104.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2349 (20.9%), 8901 (79.1%) left; Finishing by Sat Oct 21  6:32:15 2000

(14,7,9) <- (0,1,9).*(14, 6+1,1): 23.665177 Mflop/s
(14,14,15) <- (1,2,15).*(14, 6+1,1): 30.785691 Mflop/s

Testing m0 = 14, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 14  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 7 9 14 7 7 9 14 9
<<< (M = 14, K = 7, N = 9) : 23.665177
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 30.785691
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (14, 6,1) :    26.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2350 (20.9%), 8900 (79.1%) left; Finishing by Sat Oct 21  6:32:13 2000

(9,16,6) <- (9,0,1).*(1, 15+1,6): 148.326451 Mflop/s
(15,16,12) <- (15,1,2).*(1, 15+1,6): 151.839946 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 6 9 16 16 6 9 6
<<< (M = 9, K = 16, N = 6) : 148.326451
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 151.839946
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,6) :   150.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2351 (20.9%), 8899 (79.1%) left; Finishing by Sat Oct 21  6:32:12 2000

(9,14,14) <- (9,0,0).*(1, 13+1,14): 110.188570 Mflop/s
(15,14,14) <- (15,1,1).*(1, 13+1,14): 110.813289 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 14 9 14 14 14 9 14
<<< (M = 9, K = 14, N = 14) : 110.188570
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 110.813289
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,14) :   110.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2352 (20.9%), 8898 (79.1%) left; Finishing by Sat Oct 21  6:32:10 2000

(9,9,14) <- (9,1,0).*(1, 8+1,14): 104.408353 Mflop/s
(15,9,14) <- (15,1,1).*(1, 8+1,14): 103.872452 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 14 9 9 9 14 9 14
<<< (M = 9, K = 9, N = 14) : 104.408353
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 103.872452
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,14) :   104.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2353 (20.9%), 8897 (79.1%) left; Finishing by Sat Oct 21  6:32:14 2000

(9,12,14) <- (9,4,0).*(1, 2+1,14): 116.685585 Mflop/s
(15,21,14) <- (15,7,1).*(1, 2+1,14): 112.486449 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 14 9 12 12 14 9 14
<<< (M = 9, K = 12, N = 14) : 116.685585
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 14 15 21 21 14 15 14
<<< (M = 15, K = 21, N = 14) : 112.486449
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,14) :   114.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2354 (20.9%), 8896 (79.1%) left; Finishing by Sat Oct 21  6:32:07 2000

(8,10,9) <- (2,1,9).*(4, 9+1,1): 69.499277 Mflop/s
(12,10,15) <- (3,1,15).*(4, 9+1,1): 117.554085 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 69.499277
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 117.554085
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 9,1) :    87.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2355 (20.9%), 8895 (79.1%) left; Finishing by Sat Oct 21  6:32:06 2000

(9,13,11) <- (9,0,0).*(1, 12+1,11): 114.200648 Mflop/s
(15,13,11) <- (15,1,1).*(1, 12+1,11): 114.777439 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 11 9 13 13 11 9 11
<<< (M = 9, K = 13, N = 11) : 114.200648
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 11 15 13 13 11 15 11
<<< (M = 15, K = 13, N = 11) : 114.777439
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,11) :   114.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2356 (20.9%), 8894 (79.1%) left; Finishing by Sat Oct 21  6:32:05 2000

(9,14,8) <- (9,0,1).*(1, 13+1,8): 121.491786 Mflop/s
(15,14,8) <- (15,1,1).*(1, 13+1,8): 122.196667 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 121.491786
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 8 15 14 14 8 15 8
<<< (M = 15, K = 14, N = 8) : 122.196667
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,8) :   121.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2357 (21.0%), 8893 (79.0%) left; Finishing by Sat Oct 21  6:32:03 2000

(9,11,5) <- (9,0,1).*(1, 10+1,5): 151.614930 Mflop/s
(15,11,15) <- (15,1,3).*(1, 10+1,5): 166.211724 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 5 9 11 11 5 9 5
<<< (M = 9, K = 11, N = 5) : 151.614930
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 166.211724
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,5) :   158.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2358 (21.0%), 8892 (79.0%) left; Finishing by Sat Oct 21  6:32:02 2000

(9,15,8) <- (9,0,4).*(1, 14+1,2): 187.756071 Mflop/s
(15,15,14) <- (15,1,7).*(1, 14+1,2): 184.745335 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 187.756071
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 184.745335
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,2) :   186.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2359 (21.0%), 8891 (79.0%) left; Finishing by Sat Oct 21  6:32:05 2000

(9,16,9) <- (1,0,9).*(9, 15+1,1): 29.698527 Mflop/s
(9,16,15) <- (1,1,15).*(9, 15+1,1): 29.687100 Mflop/s

Testing m0 = 9, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 9  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 29.698527
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 15 9 16 16 15 9 15
<<< (M = 9, K = 16, N = 15) : 29.687100
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (9, 15,1) :    29.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2360 (21.0%), 8890 (79.0%) left; Finishing by Sat Oct 21  6:32:04 2000

(8,11,8) <- (4,0,1).*(2, 10+1,8): 28.809158 Mflop/s
(14,11,8) <- (7,1,1).*(2, 10+1,8): 28.874003 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  10 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 28.809158
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 8 14 11 11 8 14 8
<<< (M = 14, K = 11, N = 8) : 28.874003
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 10,8) :    28.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2361 (21.0%), 8889 (79.0%) left; Finishing by Sat Oct 21  6:32:02 2000

(9,13,12) <- (9,0,0).*(1, 12+1,12): 113.831265 Mflop/s
(15,13,12) <- (15,1,1).*(1, 12+1,12): 114.768201 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 12 9 13 13 12 9 12
<<< (M = 9, K = 13, N = 12) : 113.831265
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 114.768201
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,12) :   114.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2362 (21.0%), 8888 (79.0%) left; Finishing by Sat Oct 21  6:32:01 2000

(7,15,9) <- (1,0,9).*(7, 14+1,1): 36.409015 Mflop/s
(14,15,15) <- (2,1,15).*(7, 14+1,1): 40.292427 Mflop/s

Testing m0 = 7, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 15 9 7 15 15 9 7 9
<<< (M = 7, K = 15, N = 9) : 36.409015
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 40.292427
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 14,1) :    38.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2363 (21.0%), 8887 (79.0%) left; Finishing by Sat Oct 21  6:31:59 2000

(5,16,9) <- (1,0,9).*(5, 15+1,1): 61.774451 Mflop/s
(15,16,15) <- (3,1,15).*(5, 15+1,1): 87.386178 Mflop/s

Testing m0 = 5, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 16 9 5 16 16 9 5 9
<<< (M = 5, K = 16, N = 9) : 61.774451
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 87.386178
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 15,1) :    72.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2364 (21.0%), 8886 (79.0%) left; Finishing by Sat Oct 21  6:31:58 2000

(9,18,7) <- (9,9,1).*(1,1+1,7): 117.684448 Mflop/s
(15,30,14) <- (15,15,2).*(1,1+1,7): 123.536724 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 7 9 18 18 7 9 7
<<< (M = 9, K = 18, N = 7) : 117.684448
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 14 15 30 30 14 15 14
<<< (M = 15, K = 30, N = 14) : 123.536724
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,7) :   120.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2365 (21.0%), 8885 (79.0%) left; Finishing by Sat Oct 21  6:31:57 2000

(9,7,8) <- (9,1,2).*(1, 6+1,4): 143.171571 Mflop/s
(15,14,12) <- (15,2,3).*(1, 6+1,4): 180.831858 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 143.171571
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 180.831858
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,4) :   159.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2366 (21.0%), 8884 (79.0%) left; Finishing by Sat Oct 21  6:31:55 2000

(9,8,15) <- (9,1,0).*(1, 7+1,15): 102.741696 Mflop/s
(15,16,15) <- (15,2,1).*(1, 7+1,15): 121.013049 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 15 9 8 8 15 9 15
<<< (M = 9, K = 8, N = 15) : 102.741696
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 121.013049
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,15) :   111.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2367 (21.0%), 8883 (79.0%) left; Finishing by Sat Oct 21  6:31:54 2000

(9,9,9) <- (3,1,9).*(3, 8+1,1): 140.862840 Mflop/s
(15,9,15) <- (5,1,15).*(3, 8+1,1): 144.581938 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 140.862840
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 144.581938
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 8,1) :   142.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2368 (21.0%), 8882 (79.0%) left; Finishing by Sat Oct 21  6:31:57 2000

(9,10,12) <- (9,2,0).*(1, 4+1,12): 118.777542 Mflop/s
(15,15,12) <- (15,3,1).*(1, 4+1,12): 129.335833 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 12 9 10 10 12 9 12
<<< (M = 9, K = 10, N = 12) : 118.777542
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 129.335833
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,12) :   123.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2369 (21.1%), 8881 (78.9%) left; Finishing by Sat Oct 21  6:31:56 2000

(9,16,11) <- (9,0,0).*(1, 15+1,11): 117.834884 Mflop/s
(15,16,11) <- (15,1,1).*(1, 15+1,11): 118.456522 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 11 9 16 16 11 9 11
<<< (M = 9, K = 16, N = 11) : 117.834884
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 11 15 16 16 11 15 11
<<< (M = 15, K = 16, N = 11) : 118.456522
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,11) :   118.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2370 (21.1%), 8880 (78.9%) left; Finishing by Sat Oct 21  6:31:54 2000

(9,10,8) <- (9,2,1).*(1, 4+1,8): 125.177988 Mflop/s
(15,15,8) <- (15,3,1).*(1, 4+1,8): 137.946710 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 125.177988
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 8 15 15 15 8 15 8
<<< (M = 15, K = 15, N = 8) : 137.946710
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,8) :   131.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2371 (21.1%), 8879 (78.9%) left; Finishing by Sat Oct 21  6:31:48 2000

(9,16,13) <- (9,0,0).*(1, 15+1,13): 112.993083 Mflop/s
(15,16,13) <- (15,1,1).*(1, 15+1,13): 113.693001 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 13 9 16 16 13 9 13
<<< (M = 9, K = 16, N = 13) : 112.993083
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 13 15 16 16 13 15 13
<<< (M = 15, K = 16, N = 13) : 113.693001
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,13) :   113.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2372 (21.1%), 8878 (78.9%) left; Finishing by Sat Oct 21  6:31:51 2000

(9,6,16) <- (9,1,0).*(1, 5+1,16): 95.076406 Mflop/s
(15,18,16) <- (15,3,0).*(1, 5+1,16): 123.959413 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 16 9 6 6 16 9 16
<<< (M = 9, K = 6, N = 16) : 95.076406
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 16 15 18 18 16 15 16
<<< (M = 15, K = 18, N = 16) : 123.959413
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,16) :   107.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2373 (21.1%), 8877 (78.9%) left; Finishing by Sat Oct 21  6:31:50 2000

(9,8,8) <- (3,1,4).*(3, 7+1,2): 114.961799 Mflop/s
(15,16,14) <- (5,2,7).*(3, 7+1,2): 144.181572 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 114.961799
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 144.181572
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 7,2) :   127.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2374 (21.1%), 8876 (78.9%) left; Finishing by Sat Oct 21  6:31:49 2000

(6,14,8) <- (1,0,4).*(6, 13+1,2): 119.195773 Mflop/s
(12,14,14) <- (2,1,7).*(6, 13+1,2): 82.585880 Mflop/s

Testing m0 = 6, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 14 8 6 14 14 8 6 8
<<< (M = 6, K = 14, N = 8) : 119.195773
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 82.585880
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 13,2) :    97.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2375 (21.1%), 8875 (78.9%) left; Finishing by Sat Oct 21  6:31:52 2000

(8,8,8) <- (4,1,4).*(2, 7+1,2): 121.846859 Mflop/s
(14,16,14) <- (7,2,7).*(2, 7+1,2): 81.705221 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 121.846859
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 81.705221
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 7,2) :    97.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2376 (21.1%), 8874 (78.9%) left; Finishing by Sat Oct 21  6:31:55 2000

(9,12,9) <- (3,4,3).*(3, 2+1,3): 33.515940 Mflop/s
(15,21,15) <- (5,7,5).*(3, 2+1,3): 30.225474 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 33.515940
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 30.225474
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 2,3) :    31.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2377 (21.1%), 8873 (78.9%) left; Finishing by Sat Oct 21  6:31:54 2000

(8,12,7) <- (4,4,1).*(2, 2+1,7): 32.250485 Mflop/s
(14,21,14) <- (7,7,2).*(2, 2+1,7): 30.044135 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  2 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 7 8 12 12 7 8 7
<<< (M = 8, K = 12, N = 7) : 32.250485
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 14 14 21 21 14 14 14
<<< (M = 14, K = 21, N = 14) : 30.044135
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 2,7) :    31.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2378 (21.1%), 8872 (78.9%) left; Finishing by Sat Oct 21  6:31:52 2000

(9,6,11) <- (9,1,0).*(1, 5+1,11): 98.207229 Mflop/s
(15,18,11) <- (15,3,1).*(1, 5+1,11): 131.688406 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 11 9 6 6 11 9 11
<<< (M = 9, K = 6, N = 11) : 98.207229
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 11 15 18 18 11 15 11
<<< (M = 15, K = 18, N = 11) : 131.688406
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,11) :   112.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2379 (21.1%), 8871 (78.9%) left; Finishing by Sat Oct 21  6:31:46 2000

(5,18,8) <- (1,9,4).*(5,1+1,2): 30.936296 Mflop/s
(15,30,14) <- (3,15,7).*(5,1+1,2): 32.468909 Mflop/s

Testing m0 = 5, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 18 8 5 18 18 8 5 8
<<< (M = 5, K = 18, N = 8) : 30.936296
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 14 15 30 30 14 15 14
<<< (M = 15, K = 30, N = 14) : 32.468909
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5,1,2) :    31.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2380 (21.2%), 8870 (78.8%) left; Finishing by Sat Oct 21  6:31:45 2000

(9,15,9) <- (3,0,9).*(3, 14+1,1): 178.923064 Mflop/s
(15,15,15) <- (5,1,15).*(3, 14+1,1): 182.633900 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 178.923064
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 182.633900
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 14,1) :   180.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2381 (21.2%), 8869 (78.8%) left; Finishing by Sat Oct 21  6:31:44 2000

(6,12,9) <- (1,0,9).*(6, 11+1,1): 105.323330 Mflop/s
(12,12,15) <- (2,1,15).*(6, 11+1,1): 79.291467 Mflop/s

Testing m0 = 6, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 9 6 12 12 9 6 9
<<< (M = 6, K = 12, N = 9) : 105.323330
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 79.291467
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 11,1) :    90.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2382 (21.2%), 8868 (78.8%) left; Finishing by Sat Oct 21  6:31:47 2000

(8,16,8) <- (1,0,4).*(8, 15+1,2): 109.345111 Mflop/s
(8,16,14) <- (1,1,7).*(8, 15+1,2): 109.347873 Mflop/s

Testing m0 = 8, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 109.345111
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 14 8 16 16 14 8 14
<<< (M = 8, K = 16, N = 14) : 109.347873
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 15,2) :   109.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2383 (21.2%), 8867 (78.8%) left; Finishing by Sat Oct 21  6:31:45 2000

(8,14,8) <- (1,0,4).*(8, 13+1,2): 107.255172 Mflop/s
(8,14,14) <- (1,1,7).*(8, 13+1,2): 107.720060 Mflop/s

Testing m0 = 8, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 107.255172
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 14 8 14 14 14 8 14
<<< (M = 8, K = 14, N = 14) : 107.720060
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 13,2) :   107.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2384 (21.2%), 8866 (78.8%) left; Finishing by Sat Oct 21  6:31:49 2000

(9,10,9) <- (3,1,9).*(3, 9+1,1): 145.647306 Mflop/s
(15,10,15) <- (5,1,15).*(3, 9+1,1): 147.387460 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 145.647306
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 147.387460
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 9,1) :   146.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2385 (21.2%), 8865 (78.8%) left; Finishing by Sat Oct 21  6:31:47 2000

(8,15,7) <- (4,0,1).*(2, 14+1,7): 30.256171 Mflop/s
(14,15,14) <- (7,1,2).*(2, 14+1,7): 29.735796 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  14 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 7 8 15 15 7 8 7
<<< (M = 8, K = 15, N = 7) : 30.256171
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 29.735796
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 14,7) :    30.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2386 (21.2%), 8864 (78.8%) left; Finishing by Sat Oct 21  6:31:46 2000

(9,9,8) <- (9,1,1).*(1, 8+1,8): 113.143703 Mflop/s
(15,9,8) <- (15,1,1).*(1, 8+1,8): 113.793004 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 113.143703
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 8 15 9 9 8 15 8
<<< (M = 15, K = 9, N = 8) : 113.793004
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,8) :   113.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2387 (21.2%), 8863 (78.8%) left; Finishing by Sat Oct 21  6:31:49 2000

(9,9,9) <- (9,1,3).*(1, 8+1,3): 178.305849 Mflop/s
(15,9,15) <- (15,1,5).*(1, 8+1,3): 185.892576 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 178.305849
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 185.892576
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,3) :   182.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2388 (21.2%), 8862 (78.8%) left; Finishing by Sat Oct 21  6:31:53 2000

(9,18,9) <- (3,9,9).*(3,1+1,1): 120.607971 Mflop/s
(15,30,15) <- (5,15,15).*(3,1+1,1): 129.661435 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 9 9 18 18 9 9 9
<<< (M = 9, K = 18, N = 9) : 120.607971
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 129.661435
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3,1,1) :   125.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2389 (21.2%), 8861 (78.8%) left; Finishing by Sat Oct 21  6:31:47 2000

(9,18,9) <- (9,9,9).*(1,1+1,1): 91.141190 Mflop/s
(15,30,15) <- (15,15,15).*(1,1+1,1): 103.322947 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 9 9 18 18 9 9 9
<<< (M = 9, K = 18, N = 9) : 91.141190
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 103.322947
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,1) :    96.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2390 (21.2%), 8860 (78.8%) left; Finishing by Sat Oct 21  6:31:45 2000

(11,16,9) <- (0,0,9).*(11, 15+1,1): 28.877039 Mflop/s
(11,16,15) <- (1,1,15).*(11, 15+1,1): 27.621365 Mflop/s

Testing m0 = 11, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 11  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 16 9 11 16 16 9 11 9
<<< (M = 11, K = 16, N = 9) : 28.877039
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 16 15 11 16 16 15 11 15
<<< (M = 11, K = 16, N = 15) : 27.621365
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (11, 15,1) :    28.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2391 (21.3%), 8859 (78.7%) left; Finishing by Sat Oct 21  6:31:44 2000

(9,16,15) <- (9,0,0).*(1, 15+1,15): 112.441283 Mflop/s
(15,16,15) <- (15,1,1).*(1, 15+1,15): 112.867006 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 15 9 16 16 15 9 15
<<< (M = 9, K = 16, N = 15) : 112.441283
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 112.867006
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,15) :   112.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2392 (21.3%), 8858 (78.7%) left; Finishing by Sat Oct 21  6:31:47 2000

(9,12,12) <- (9,4,0).*(1, 2+1,12): 117.441256 Mflop/s
(15,21,12) <- (15,7,1).*(1, 2+1,12): 111.683179 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 12 9 12 12 12 9 12
<<< (M = 9, K = 12, N = 12) : 117.441256
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 12 15 21 21 12 15 12
<<< (M = 15, K = 21, N = 12) : 111.683179
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,12) :   114.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2393 (21.3%), 8857 (78.7%) left; Finishing by Sat Oct 21  6:31:46 2000

(9,11,11) <- (9,0,0).*(1, 10+1,11): 111.318257 Mflop/s
(15,11,11) <- (15,1,1).*(1, 10+1,11): 112.582291 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 11 9 11 11 11 9 11
<<< (M = 9, K = 11, N = 11) : 111.318257
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 11 15 11 11 11 15 11
<<< (M = 15, K = 11, N = 11) : 112.582291
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,11) :   111.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2394 (21.3%), 8856 (78.7%) left; Finishing by Sat Oct 21  6:31:40 2000

(10,15,9) <- (0,0,9).*(10, 14+1,1): 79.682059 Mflop/s
(10,15,15) <- (1,1,15).*(10, 14+1,1): 104.701908 Mflop/s

Testing m0 = 10, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 10  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 9 10 15 15 9 10 9
<<< (M = 10, K = 15, N = 9) : 79.682059
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 15 10 15 15 15 10 15
<<< (M = 10, K = 15, N = 15) : 104.701908
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (10, 14,1) :    90.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2395 (21.3%), 8855 (78.7%) left; Finishing by Sat Oct 21  6:31:38 2000

(9,9,8) <- (9,1,4).*(1, 8+1,2): 157.667872 Mflop/s
(15,9,14) <- (15,1,7).*(1, 8+1,2): 161.378616 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 157.667872
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 14 15 9 9 14 15 14
<<< (M = 15, K = 9, N = 14) : 161.378616
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,2) :   159.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2396 (21.3%), 8854 (78.7%) left; Finishing by Sat Oct 21  6:31:41 2000

(9,10,5) <- (9,1,1).*(1, 9+1,5): 147.928336 Mflop/s
(15,10,15) <- (15,1,3).*(1, 9+1,5): 159.943579 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 5 9 10 10 5 9 5
<<< (M = 9, K = 10, N = 5) : 147.928336
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 159.943579
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,5) :   153.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2397 (21.3%), 8853 (78.7%) left; Finishing by Sat Oct 21  6:31:45 2000

(5,10,9) <- (1,1,3).*(5, 9+1,3): 27.496539 Mflop/s
(15,10,15) <- (3,1,5).*(5, 9+1,3): 28.790921 Mflop/s

Testing m0 = 5, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 9 5 10 10 9 5 9
<<< (M = 5, K = 10, N = 9) : 27.496539
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 28.790921
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 9,3) :    28.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2398 (21.3%), 8852 (78.7%) left; Finishing by Sat Oct 21  6:31:43 2000

(14,15,9) <- (0,0,9).*(14, 14+1,1): 82.160621 Mflop/s
(14,15,15) <- (1,1,15).*(14, 14+1,1): 101.658813 Mflop/s

Testing m0 = 14, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 14  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 9 14 15 15 9 14 9
<<< (M = 14, K = 15, N = 9) : 82.160621
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 101.658813
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (14, 14,1) :    90.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2399 (21.3%), 8851 (78.7%) left; Finishing by Sat Oct 21  6:31:42 2000

(7,12,8) <- (1,3,4).*(7, 3+1,2): 28.214677 Mflop/s
(14,20,14) <- (2,5,7).*(7, 3+1,2): 29.702225 Mflop/s

Testing m0 = 7, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 8 7 12 12 8 7 8
<<< (M = 7, K = 12, N = 8) : 28.214677
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 14 14 20 20 14 14 14
<<< (M = 14, K = 20, N = 14) : 29.702225
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 3,2) :    28.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2400 (21.3%), 8850 (78.7%) left; Finishing by Sat Oct 21  6:31:41 2000

(9,10,9) <- (3,1,3).*(3, 9+1,3): 123.437769 Mflop/s
(15,10,15) <- (5,1,5).*(3, 9+1,3): 124.755539 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 123.437769
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 124.755539
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 9,3) :   124.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2401 (21.3%), 8849 (78.7%) left; Finishing by Sat Oct 21  6:31:44 2000

(14,18,9) <- (0,9,9).*(14,1+1,1): 21.111659 Mflop/s
(14,30,15) <- (1,15,15).*(14,1+1,1): 23.030369 Mflop/s

Testing m0 = 14, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 14 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 9 14 18 18 9 14 9
<<< (M = 14, K = 18, N = 9) : 21.111659
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 15 14 30 30 15 14 15
<<< (M = 14, K = 30, N = 15) : 23.030369
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (14,1,1) :    22.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2402 (21.4%), 8848 (78.6%) left; Finishing by Sat Oct 21  6:31:43 2000

(8,7,9) <- (2,1,9).*(4, 6+1,1): 60.120064 Mflop/s
(12,14,15) <- (3,2,15).*(4, 6+1,1): 124.141967 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 60.120064
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 124.141967
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 6,1) :    81.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2403 (21.4%), 8847 (78.6%) left; Finishing by Sat Oct 21  6:31:41 2000

(9,10,8) <- (9,1,2).*(1, 9+1,4): 166.498895 Mflop/s
(15,10,12) <- (15,1,3).*(1, 9+1,4): 171.119241 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 166.498895
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 171.119241
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,4) :   168.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2404 (21.4%), 8846 (78.6%) left; Finishing by Sat Oct 21  6:31:40 2000

(12,15,9) <- (0,0,9).*(12, 14+1,1): 83.782006 Mflop/s
(12,15,15) <- (1,1,15).*(12, 14+1,1): 99.151817 Mflop/s

Testing m0 = 12, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 12  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 9 12 15 15 9 12 9
<<< (M = 12, K = 15, N = 9) : 83.782006
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 99.151817
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (12, 14,1) :    90.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2405 (21.4%), 8845 (78.6%) left; Finishing by Sat Oct 21  6:31:43 2000

(8,10,9) <- (4,2,9).*(2, 4+1,1): 158.203742 Mflop/s
(14,15,15) <- (7,3,15).*(2, 4+1,1): 185.644488 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 158.203742
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 185.644488
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 4,1) :   170.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2406 (21.4%), 8844 (78.6%) left; Finishing by Sat Oct 21  6:31:42 2000

(8,15,9) <- (4,0,3).*(2, 14+1,3): 49.701333 Mflop/s
(14,15,15) <- (7,1,5).*(2, 14+1,3): 37.135844 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 49.701333
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 37.135844
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 14,3) :    42.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2407 (21.4%), 8843 (78.6%) left; Finishing by Sat Oct 21  6:31:40 2000

(8,15,8) <- (4,0,1).*(2, 14+1,8): 29.539145 Mflop/s
(14,15,8) <- (7,1,1).*(2, 14+1,8): 29.546246 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  14 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 29.539145
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 8 14 15 15 8 14 8
<<< (M = 14, K = 15, N = 8) : 29.546246
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 14,8) :    29.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2408 (21.4%), 8842 (78.6%) left; Finishing by Sat Oct 21  6:31:39 2000

(8,7,8) <- (1,1,4).*(8, 6+1,2): 89.980435 Mflop/s
(8,14,14) <- (1,2,7).*(8, 6+1,2): 110.628100 Mflop/s

Testing m0 = 8, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 89.980435
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 14 8 14 14 14 8 14
<<< (M = 8, K = 14, N = 14) : 110.628100
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 6,2) :    99.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2409 (21.4%), 8841 (78.6%) left; Finishing by Sat Oct 21  6:31:38 2000

(9,7,9) <- (1,1,9).*(9, 6+1,1): 25.264257 Mflop/s
(9,14,15) <- (1,2,15).*(9, 6+1,1): 30.250633 Mflop/s

Testing m0 = 9, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 9  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 25.264257
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 30.250633
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (9, 6,1) :    27.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2410 (21.4%), 8840 (78.6%) left; Finishing by Sat Oct 21  6:31:36 2000

(8,6,7) <- (4,1,1).*(2, 5+1,7): 27.144679 Mflop/s
(14,18,14) <- (7,3,2).*(2, 5+1,7): 33.761014 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  5 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 7 8 6 6 7 8 7
<<< (M = 8, K = 6, N = 7) : 27.144679
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 14 14 18 18 14 14 14
<<< (M = 14, K = 18, N = 14) : 33.761014
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 5,7) :    30.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2411 (21.4%), 8839 (78.6%) left; Finishing by Sat Oct 21  6:31:35 2000

(9,11,14) <- (9,0,0).*(1, 10+1,14): 106.486317 Mflop/s
(15,11,14) <- (15,1,1).*(1, 10+1,14): 107.408933 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 14 9 11 11 14 9 14
<<< (M = 9, K = 11, N = 14) : 106.486317
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 107.408933
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,14) :   106.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2412 (21.4%), 8838 (78.6%) left; Finishing by Sat Oct 21  6:31:33 2000

(8,18,8) <- (1,9,4).*(8,1+1,2): 26.761950 Mflop/s
(8,30,14) <- (1,15,7).*(8,1+1,2): 27.376395 Mflop/s

Testing m0 = 8, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 8 8 18 18 8 8 8
<<< (M = 8, K = 18, N = 8) : 26.761950
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 30 14 8 30 30 14 8 14
<<< (M = 8, K = 30, N = 14) : 27.376395
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8,1,2) :    27.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2413 (21.4%), 8837 (78.6%) left; Finishing by Sat Oct 21  6:31:32 2000

(9,8,8) <- (9,1,2).*(1, 7+1,4): 154.452850 Mflop/s
(15,16,12) <- (15,2,3).*(1, 7+1,4): 195.317577 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 154.452850
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 195.317577
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,4) :   172.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2414 (21.5%), 8836 (78.5%) left; Finishing by Sat Oct 21  6:31:35 2000

(6,9,8) <- (1,1,4).*(6, 8+1,2): 109.471513 Mflop/s
(12,9,14) <- (2,1,7).*(6, 8+1,2): 110.429976 Mflop/s

Testing m0 = 6, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 8 6 9 9 8 6 8
<<< (M = 6, K = 9, N = 8) : 109.471513
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 14 12 9 9 14 12 14
<<< (M = 12, K = 9, N = 14) : 110.429976
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 8,2) :   109.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2415 (21.5%), 8835 (78.5%) left; Finishing by Sat Oct 21  6:31:34 2000

(9,14,15) <- (9,0,0).*(1, 13+1,15): 111.016099 Mflop/s
(15,14,15) <- (15,1,1).*(1, 13+1,15): 111.265189 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 111.016099
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 111.265189
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,15) :   111.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2416 (21.5%), 8834 (78.5%) left; Finishing by Sat Oct 21  6:31:37 2000

(8,18,5) <- (4,9,1).*(2,1+1,5): 122.240611 Mflop/s
(14,30,15) <- (7,15,3).*(2,1+1,5): 98.482253 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2 1 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 5 8 18 18 5 8 5
<<< (M = 8, K = 18, N = 5) : 122.240611
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 15 14 30 30 15 14 15
<<< (M = 14, K = 30, N = 15) : 98.482253
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2,1,5) :   109.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2417 (21.5%), 8833 (78.5%) left; Finishing by Sat Oct 21  6:31:36 2000

(9,10,9) <- (9,1,1).*(1, 9+1,9): 114.967861 Mflop/s
(15,10,9) <- (15,1,1).*(1, 9+1,9): 116.216502 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 114.967861
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 9 15 10 10 9 15 9
<<< (M = 15, K = 10, N = 9) : 116.216502
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,9) :   115.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2418 (21.5%), 8832 (78.5%) left; Finishing by Sat Oct 21  6:31:39 2000

(9,8,11) <- (9,1,0).*(1, 7+1,11): 104.985394 Mflop/s
(15,16,11) <- (15,2,1).*(1, 7+1,11): 124.750289 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 11 9 8 8 11 9 11
<<< (M = 9, K = 8, N = 11) : 104.985394
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 11 15 16 16 11 15 11
<<< (M = 15, K = 16, N = 11) : 124.750289
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,11) :   114.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2419 (21.5%), 8831 (78.5%) left; Finishing by Sat Oct 21  6:31:38 2000

(5,13,9) <- (1,0,9).*(5, 12+1,1): 62.495203 Mflop/s
(15,13,15) <- (3,1,15).*(5, 12+1,1): 87.607467 Mflop/s

Testing m0 = 5, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 13 9 5 13 13 9 5 9
<<< (M = 5, K = 13, N = 9) : 62.495203
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 87.607467
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 12,1) :    73.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2420 (21.5%), 8830 (78.5%) left; Finishing by Sat Oct 21  6:31:36 2000

(12,12,9) <- (0,4,9).*(12, 2+1,1): 28.885581 Mflop/s
(12,21,15) <- (1,7,15).*(12, 2+1,1): 25.424619 Mflop/s

Testing m0 = 12, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 12  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 9 12 12 12 9 12 9
<<< (M = 12, K = 12, N = 9) : 28.885581
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 15 12 21 21 15 12 15
<<< (M = 12, K = 21, N = 15) : 25.424619
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (12, 2,1) :    27.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2421 (21.5%), 8829 (78.5%) left; Finishing by Sat Oct 21  6:31:35 2000

(9,12,9) <- (3,3,9).*(3, 3+1,1): 163.137168 Mflop/s
(15,20,15) <- (5,5,15).*(3, 3+1,1): 157.684143 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 163.137168
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 157.684143
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 3,1) :   160.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2422 (21.5%), 8828 (78.5%) left; Finishing by Sat Oct 21  6:31:34 2000

(9,12,6) <- (9,4,1).*(1, 2+1,6): 142.549519 Mflop/s
(15,21,12) <- (15,7,2).*(1, 2+1,6): 145.636150 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 6 9 12 12 6 9 6
<<< (M = 9, K = 12, N = 6) : 142.549519
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 12 15 21 21 12 15 12
<<< (M = 15, K = 21, N = 12) : 145.636150
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,6) :   144.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2423 (21.5%), 8827 (78.5%) left; Finishing by Sat Oct 21  6:31:37 2000

(11,18,9) <- (0,9,9).*(11,1+1,1): 45.496591 Mflop/s
(11,30,15) <- (1,15,15).*(11,1+1,1): 61.156533 Mflop/s

Testing m0 = 11, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 11 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 18 9 11 18 18 9 11 9
<<< (M = 11, K = 18, N = 9) : 45.496591
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 30 15 11 30 30 15 11 15
<<< (M = 11, K = 30, N = 15) : 61.156533
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (11,1,1) :    52.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2424 (21.5%), 8826 (78.5%) left; Finishing by Sat Oct 21  6:31:36 2000

(8,9,5) <- (4,1,1).*(2, 8+1,5): 30.592485 Mflop/s
(14,9,15) <- (7,1,3).*(2, 8+1,5): 30.962253 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  8 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 5 8 9 9 5 8 5
<<< (M = 8, K = 9, N = 5) : 30.592485
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 30.962253
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 8,5) :    30.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2425 (21.6%), 8825 (78.4%) left; Finishing by Sat Oct 21  6:31:34 2000

(9,15,9) <- (1,0,9).*(9, 14+1,1): 29.395240 Mflop/s
(9,15,15) <- (1,1,15).*(9, 14+1,1): 29.455783 Mflop/s

Testing m0 = 9, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 9  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 29.395240
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 29.455783
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (9, 14,1) :    29.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2426 (21.6%), 8824 (78.4%) left; Finishing by Sat Oct 21  6:31:33 2000

(16,12,9) <- (0,4,9).*(16, 2+1,1): 25.272716 Mflop/s
(16,21,15) <- (0,7,15).*(16, 2+1,1): 24.768263 Mflop/s

Testing m0 = 16, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 16  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 9 16 12 12 9 16 9
<<< (M = 16, K = 12, N = 9) : 25.272716
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 21 15 16 21 21 15 16 15
<<< (M = 16, K = 21, N = 15) : 24.768263
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (16, 2,1) :    25.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2427 (21.6%), 8823 (78.4%) left; Finishing by Sat Oct 21  6:31:31 2000

(15,11,9) <- (0,0,9).*(15, 10+1,1): 84.559806 Mflop/s
(15,11,15) <- (1,1,15).*(15, 10+1,1): 103.094754 Mflop/s

Testing m0 = 15, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 15  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 9 15 11 11 9 15 9
<<< (M = 15, K = 11, N = 9) : 84.559806
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 103.094754
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (15, 10,1) :    92.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2428 (21.6%), 8822 (78.4%) left; Finishing by Sat Oct 21  6:31:30 2000

(8,14,9) <- (2,0,3).*(4, 13+1,3): 29.068017 Mflop/s
(12,14,15) <- (3,1,5).*(4, 13+1,3): 29.875224 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 29.068017
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 29.875224
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 13,3) :    29.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2429 (21.6%), 8821 (78.4%) left; Finishing by Sat Oct 21  6:31:29 2000

(8,11,8) <- (2,0,4).*(4, 10+1,2): 28.910550 Mflop/s
(12,11,14) <- (3,1,7).*(4, 10+1,2): 32.026771 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 28.910550
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 14 12 11 11 14 12 14
<<< (M = 12, K = 11, N = 14) : 32.026771
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 10,2) :    30.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2430 (21.6%), 8820 (78.4%) left; Finishing by Sat Oct 21  6:31:27 2000

(7,16,8) <- (1,0,4).*(7, 15+1,2): 24.544368 Mflop/s
(14,16,14) <- (2,1,7).*(7, 15+1,2): 28.364306 Mflop/s

Testing m0 = 7, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 16 8 7 16 16 8 7 8
<<< (M = 7, K = 16, N = 8) : 24.544368
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 28.364306
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 15,2) :    26.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2431 (21.6%), 8819 (78.4%) left; Finishing by Sat Oct 21  6:31:26 2000

(8,13,8) <- (1,0,4).*(8, 12+1,2): 105.376097 Mflop/s
(8,13,14) <- (1,1,7).*(8, 12+1,2): 106.475934 Mflop/s

Testing m0 = 8, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 105.376097
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 14 8 13 13 14 8 14
<<< (M = 8, K = 13, N = 14) : 106.475934
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 12,2) :   105.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2432 (21.6%), 8818 (78.4%) left; Finishing by Sat Oct 21  6:31:25 2000

(8,11,9) <- (2,0,9).*(4, 10+1,1): 70.639851 Mflop/s
(12,11,15) <- (3,1,15).*(4, 10+1,1): 120.395050 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 70.639851
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 120.395050
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 10,1) :    89.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2433 (21.6%), 8817 (78.4%) left; Finishing by Sat Oct 21  6:31:23 2000

(8,9,8) <- (4,1,1).*(2, 8+1,8): 28.028891 Mflop/s
(14,9,8) <- (7,1,1).*(2, 8+1,8): 28.120377 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  8 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 28.028891
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 8 14 9 9 8 14 8
<<< (M = 14, K = 9, N = 8) : 28.120377
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 8,8) :    28.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2434 (21.6%), 8816 (78.4%) left; Finishing by Sat Oct 21  6:31:22 2000

(11,12,9) <- (0,3,9).*(11, 3+1,1): 100.356699 Mflop/s
(11,20,15) <- (1,5,15).*(11, 3+1,1): 97.418198 Mflop/s

Testing m0 = 11, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 11  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 9 11 12 12 9 11 9
<<< (M = 11, K = 12, N = 9) : 100.356699
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 20 15 11 20 20 15 11 15
<<< (M = 11, K = 20, N = 15) : 97.418198
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (11, 3,1) :    98.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2435 (21.6%), 8815 (78.4%) left; Finishing by Sat Oct 21  6:31:21 2000

(8,12,9) <- (2,3,3).*(4, 3+1,3): 121.401702 Mflop/s
(12,20,15) <- (3,5,5).*(4, 3+1,3): 134.264946 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 121.401702
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 20 15 12 20 20 15 12 15
<<< (M = 12, K = 20, N = 15) : 134.264946
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 3,3) :   127.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2436 (21.7%), 8814 (78.3%) left; Finishing by Sat Oct 21  6:31:19 2000

(8,13,9) <- (4,0,9).*(2, 12+1,1): 166.522414 Mflop/s
(14,13,15) <- (7,1,15).*(2, 12+1,1): 171.017225 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 166.522414
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 171.017225
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 12,1) :   168.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2437 (21.7%), 8813 (78.3%) left; Finishing by Sat Oct 21  6:31:18 2000

(9,10,13) <- (9,1,0).*(1, 9+1,13): 107.569027 Mflop/s
(15,10,13) <- (15,1,1).*(1, 9+1,13): 108.474211 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 13 9 10 10 13 9 13
<<< (M = 9, K = 10, N = 13) : 107.569027
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 13 15 10 10 13 15 13
<<< (M = 15, K = 10, N = 13) : 108.474211
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,13) :   108.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2438 (21.7%), 8812 (78.3%) left; Finishing by Sat Oct 21  6:31:16 2000

(9,10,9) <- (1,2,9).*(9, 4+1,1): 110.576984 Mflop/s
(9,15,15) <- (1,3,15).*(9, 4+1,1): 123.250890 Mflop/s

Testing m0 = 9, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 9  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 110.576984
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 123.250890
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (9, 4,1) :   116.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2439 (21.7%), 8811 (78.3%) left; Finishing by Sat Oct 21  6:31:15 2000

(5,9,9) <- (1,1,3).*(5, 8+1,3): 27.243685 Mflop/s
(15,9,15) <- (3,1,5).*(5, 8+1,3): 27.489805 Mflop/s

Testing m0 = 5, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 27.243685
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 27.489805
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 8,3) :    27.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2440 (21.7%), 8810 (78.3%) left; Finishing by Sat Oct 21  6:31:14 2000

(12,10,9) <- (0,2,9).*(12, 4+1,1): 30.173687 Mflop/s
(12,15,15) <- (1,3,15).*(12, 4+1,1): 30.850331 Mflop/s

Testing m0 = 12, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 12  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 9 12 10 10 9 12 9
<<< (M = 12, K = 10, N = 9) : 30.173687
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 30.850331
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (12, 4,1) :    30.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2441 (21.7%), 8809 (78.3%) left; Finishing by Sat Oct 21  6:31:12 2000

(8,11,8) <- (4,0,2).*(2, 10+1,4): 34.515927 Mflop/s
(14,11,12) <- (7,1,3).*(2, 10+1,4): 31.261949 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 34.515927
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 12 14 11 11 12 14 12
<<< (M = 14, K = 11, N = 12) : 31.261949
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 10,4) :    32.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2442 (21.7%), 8808 (78.3%) left; Finishing by Sat Oct 21  6:31:06 2000

(9,7,9) <- (9,1,9).*(1, 6+1,1): 92.957098 Mflop/s
(15,14,15) <- (15,2,15).*(1, 6+1,1): 141.230460 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 92.957098
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 141.230460
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,1) :   112.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2443 (21.7%), 8807 (78.3%) left; Finishing by Sat Oct 21  6:31:05 2000

(9,12,5) <- (3,3,1).*(3, 3+1,5): 33.160897 Mflop/s
(15,20,15) <- (5,5,3).*(3, 3+1,5): 31.236024 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  3 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 33.160897
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 31.236024
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 3,5) :    32.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2444 (21.7%), 8806 (78.3%) left; Finishing by Sat Oct 21  6:31:04 2000

(12,18,9) <- (0,9,9).*(12,1+1,1): 23.034288 Mflop/s
(12,30,15) <- (1,15,15).*(12,1+1,1): 22.002428 Mflop/s

Testing m0 = 12, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 12 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 9 12 18 18 9 12 9
<<< (M = 12, K = 18, N = 9) : 23.034288
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 30 15 12 30 30 15 12 15
<<< (M = 12, K = 30, N = 15) : 22.002428
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (12,1,1) :    22.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2445 (21.7%), 8805 (78.3%) left; Finishing by Sat Oct 21  6:31:02 2000

(8,6,8) <- (4,1,1).*(2, 5+1,8): 26.327965 Mflop/s
(14,18,8) <- (7,3,1).*(2, 5+1,8): 33.617726 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  5 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 26.327965
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 8 14 18 18 8 14 8
<<< (M = 14, K = 18, N = 8) : 33.617726
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 5,8) :    29.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2446 (21.7%), 8804 (78.3%) left; Finishing by Sat Oct 21  6:31:01 2000

(8,18,9) <- (1,9,9).*(8,1+1,1): 23.831322 Mflop/s
(8,30,15) <- (1,15,15).*(8,1+1,1): 24.393098 Mflop/s

Testing m0 = 8, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 9 8 18 18 9 8 9
<<< (M = 8, K = 18, N = 9) : 23.831322
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 30 15 8 30 30 15 8 15
<<< (M = 8, K = 30, N = 15) : 24.393098
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8,1,1) :    24.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2447 (21.8%), 8803 (78.2%) left; Finishing by Sat Oct 21  6:30:55 2000

(9,8,16) <- (9,1,0).*(1, 7+1,16): 99.897311 Mflop/s
(15,16,16) <- (15,2,0).*(1, 7+1,16): 115.821104 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 16 9 8 8 16 9 16
<<< (M = 9, K = 8, N = 16) : 99.897311
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 16 15 16 16 16 15 16
<<< (M = 15, K = 16, N = 16) : 115.821104
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,16) :   107.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2448 (21.8%), 8802 (78.2%) left; Finishing by Sat Oct 21  6:30:54 2000

(12,16,9) <- (0,0,9).*(12, 15+1,1): 83.264745 Mflop/s
(12,16,15) <- (1,1,15).*(12, 15+1,1): 102.136273 Mflop/s

Testing m0 = 12, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 12  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 9 12 16 16 9 12 9
<<< (M = 12, K = 16, N = 9) : 83.264745
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 102.136273
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (12, 15,1) :    91.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2449 (21.8%), 8801 (78.2%) left; Finishing by Sat Oct 21  6:30:57 2000

(9,15,10) <- (9,0,0).*(1, 14+1,10): 117.618079 Mflop/s
(15,15,10) <- (15,1,1).*(1, 14+1,10): 118.509091 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 10 9 15 15 10 9 10
<<< (M = 9, K = 15, N = 10) : 117.618079
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 10 15 15 15 10 15 10
<<< (M = 15, K = 15, N = 10) : 118.509091
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,10) :   118.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2450 (21.8%), 8800 (78.2%) left; Finishing by Sat Oct 21  6:30:56 2000

(8,18,9) <- (4,9,3).*(2,1+1,3): 46.787100 Mflop/s
(14,30,15) <- (7,15,5).*(2,1+1,3): 36.667820 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 9 8 18 18 9 8 9
<<< (M = 8, K = 18, N = 9) : 46.787100
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 15 14 30 30 15 14 15
<<< (M = 14, K = 30, N = 15) : 36.667820
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2,1,3) :    41.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2451 (21.8%), 8799 (78.2%) left; Finishing by Sat Oct 21  6:30:50 2000

(8,12,9) <- (2,0,3).*(4, 11+1,3): 28.031509 Mflop/s
(12,12,15) <- (3,1,5).*(4, 11+1,3): 29.611290 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 28.031509
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 29.611290
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 11,3) :    28.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2452 (21.8%), 8798 (78.2%) left; Finishing by Sat Oct 21  6:30:48 2000

(9,9,16) <- (9,1,0).*(1, 8+1,16): 102.825722 Mflop/s
(15,9,16) <- (15,1,0).*(1, 8+1,16): 104.592954 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 16 9 9 9 16 9 16
<<< (M = 9, K = 9, N = 16) : 102.825722
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 16 15 9 9 16 15 16
<<< (M = 15, K = 9, N = 16) : 104.592954
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,16) :   103.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2453 (21.8%), 8797 (78.2%) left; Finishing by Sat Oct 21  6:30:47 2000

(9,12,8) <- (9,3,2).*(1, 3+1,4): 171.003345 Mflop/s
(15,20,12) <- (15,5,3).*(1, 3+1,4): 158.730664 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 171.003345
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 12 15 20 20 12 15 12
<<< (M = 15, K = 20, N = 12) : 158.730664
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,4) :   164.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2454 (21.8%), 8796 (78.2%) left; Finishing by Sat Oct 21  6:30:50 2000

(9,15,9) <- (9,0,9).*(1, 14+1,1): 141.279848 Mflop/s
(15,15,15) <- (15,1,15).*(1, 14+1,1): 145.253801 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 141.279848
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 145.253801
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,1) :   143.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2455 (21.8%), 8795 (78.2%) left; Finishing by Sat Oct 21  6:30:49 2000

(8,12,8) <- (2,4,4).*(4, 2+1,2): 94.652079 Mflop/s
(12,21,14) <- (3,7,7).*(4, 2+1,2): 124.015486 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 94.652079
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 14 12 21 21 14 12 14
<<< (M = 12, K = 21, N = 14) : 124.015486
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 2,2) :   107.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2456 (21.8%), 8794 (78.2%) left; Finishing by Sat Oct 21  6:30:43 2000

(8,12,5) <- (4,4,1).*(2, 2+1,5): 34.304315 Mflop/s
(14,21,15) <- (7,7,3).*(2, 2+1,5): 29.236659 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  2 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 5 8 12 12 5 8 5
<<< (M = 8, K = 12, N = 5) : 34.304315
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 15 14 21 21 15 14 15
<<< (M = 14, K = 21, N = 15) : 29.236659
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 2,5) :    31.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2457 (21.8%), 8793 (78.2%) left; Finishing by Sat Oct 21  6:30:42 2000

(9,10,13) <- (9,2,0).*(1, 4+1,13): 115.671524 Mflop/s
(15,15,13) <- (15,3,1).*(1, 4+1,13): 127.161714 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 13 9 10 10 13 9 13
<<< (M = 9, K = 10, N = 13) : 115.671524
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 13 15 15 15 13 15 13
<<< (M = 15, K = 15, N = 13) : 127.161714
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,13) :   121.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2458 (21.8%), 8792 (78.2%) left; Finishing by Sat Oct 21  6:30:40 2000

(8,18,8) <- (2,9,4).*(4,1+1,2): 79.937528 Mflop/s
(12,30,14) <- (3,15,7).*(4,1+1,2): 116.229885 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 8 8 18 18 8 8 8
<<< (M = 8, K = 18, N = 8) : 79.937528
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 30 14 12 30 30 14 12 14
<<< (M = 12, K = 30, N = 14) : 116.229885
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4,1,2) :    94.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2459 (21.9%), 8791 (78.1%) left; Finishing by Sat Oct 21  6:30:34 2000

(9,18,5) <- (3,9,1).*(3,1+1,5): 29.096619 Mflop/s
(15,30,15) <- (5,15,3).*(3,1+1,5): 30.304911 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3 1 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 5 9 18 18 5 9 5
<<< (M = 9, K = 18, N = 5) : 29.096619
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 30.304911
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3,1,5) :    29.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2460 (21.9%), 8790 (78.1%) left; Finishing by Sat Oct 21  6:30:33 2000

(9,6,5) <- (3,1,1).*(3, 5+1,5): 101.739539 Mflop/s
(15,18,15) <- (5,3,3).*(3, 5+1,5): 141.819073 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  5 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 5 9 6 6 5 9 5
<<< (M = 9, K = 6, N = 5) : 101.739539
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 141.819073
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 5,5) :   118.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2461 (21.9%), 8789 (78.1%) left; Finishing by Sat Oct 21  6:30:36 2000

(8,14,8) <- (2,0,4).*(4, 13+1,2): 29.938765 Mflop/s
(12,14,14) <- (3,1,7).*(4, 13+1,2): 32.857224 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 29.938765
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 32.857224
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 13,2) :    31.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2462 (21.9%), 8788 (78.1%) left; Finishing by Sat Oct 21  6:30:35 2000

(9,12,9) <- (9,3,1).*(1, 3+1,9): 136.381941 Mflop/s
(15,20,9) <- (15,5,1).*(1, 3+1,9): 127.879355 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 136.381941
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 9 15 20 20 9 15 9
<<< (M = 15, K = 20, N = 9) : 127.879355
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,9) :   132.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2463 (21.9%), 8787 (78.1%) left; Finishing by Sat Oct 21  6:30:29 2000

(9,12,13) <- (9,4,0).*(1, 2+1,13): 117.423312 Mflop/s
(15,21,13) <- (15,7,1).*(1, 2+1,13): 114.359833 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 13 9 12 12 13 9 13
<<< (M = 9, K = 12, N = 13) : 117.423312
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 13 15 21 21 13 15 13
<<< (M = 15, K = 21, N = 13) : 114.359833
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,13) :   115.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2464 (21.9%), 8786 (78.1%) left; Finishing by Sat Oct 21  6:30:28 2000

(6,18,8) <- (1,9,4).*(6,1+1,2): 26.609662 Mflop/s
(12,30,14) <- (2,15,7).*(6,1+1,2): 25.808035 Mflop/s

Testing m0 = 6, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 18 8 6 18 18 8 6 8
<<< (M = 6, K = 18, N = 8) : 26.609662
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 30 14 12 30 30 14 12 14
<<< (M = 12, K = 30, N = 14) : 25.808035
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6,1,2) :    26.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2465 (21.9%), 8785 (78.1%) left; Finishing by Sat Oct 21  6:30:27 2000

(8,10,7) <- (4,2,1).*(2, 4+1,7): 32.272957 Mflop/s
(14,15,14) <- (7,3,2).*(2, 4+1,7): 34.054608 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  4 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 7 8 10 10 7 8 7
<<< (M = 8, K = 10, N = 7) : 32.272957
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 34.054608
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 4,7) :    33.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2466 (21.9%), 8784 (78.1%) left; Finishing by Sat Oct 21  6:30:25 2000

(9,8,12) <- (9,1,0).*(1, 7+1,12): 103.869408 Mflop/s
(15,16,12) <- (15,2,1).*(1, 7+1,12): 123.166027 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 12 9 8 8 12 9 12
<<< (M = 9, K = 8, N = 12) : 103.869408
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 123.166027
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,12) :   112.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2467 (21.9%), 8783 (78.1%) left; Finishing by Sat Oct 21  6:30:19 2000

(11,14,9) <- (0,0,9).*(11, 13+1,1): 28.268226 Mflop/s
(11,14,15) <- (1,1,15).*(11, 13+1,1): 27.540310 Mflop/s

Testing m0 = 11, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 11  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 9 11 14 14 9 11 9
<<< (M = 11, K = 14, N = 9) : 28.268226
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 15 11 14 14 15 11 15
<<< (M = 11, K = 14, N = 15) : 27.540310
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (11, 13,1) :    27.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2468 (21.9%), 8782 (78.1%) left; Finishing by Sat Oct 21  6:30:23 2000

(5,13,8) <- (1,0,4).*(5, 12+1,2): 31.045949 Mflop/s
(15,13,14) <- (3,1,7).*(5, 12+1,2): 31.155140 Mflop/s

Testing m0 = 5, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 13 8 5 13 13 8 5 8
<<< (M = 5, K = 13, N = 8) : 31.045949
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 31.155140
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 12,2) :    31.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2469 (21.9%), 8781 (78.1%) left; Finishing by Sat Oct 21  6:30:21 2000

(10,10,9) <- (0,2,9).*(10, 4+1,1): 31.799459 Mflop/s
(10,15,15) <- (1,3,15).*(10, 4+1,1): 32.919564 Mflop/s

Testing m0 = 10, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 10  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 10 9 10 10 10 9 10 9
<<< (M = 10, K = 10, N = 9) : 31.799459
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 15 10 15 15 15 10 15
<<< (M = 10, K = 15, N = 15) : 32.919564
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (10, 4,1) :    32.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2470 (22.0%), 8780 (78.0%) left; Finishing by Sat Oct 21  6:30:20 2000

(9,11,15) <- (9,0,0).*(1, 10+1,15): 108.255600 Mflop/s
(15,11,15) <- (15,1,1).*(1, 10+1,15): 108.838748 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 15 9 11 11 15 9 15
<<< (M = 9, K = 11, N = 15) : 108.255600
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 108.838748
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,15) :   108.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2471 (22.0%), 8779 (78.0%) left; Finishing by Sat Oct 21  6:30:19 2000

(9,6,15) <- (9,1,0).*(1, 5+1,15): 96.686706 Mflop/s
(15,18,15) <- (15,3,1).*(1, 5+1,15): 125.961896 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 15 9 6 6 15 9 15
<<< (M = 9, K = 6, N = 15) : 96.686706
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 125.961896
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,15) :   109.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2472 (22.0%), 8778 (78.0%) left; Finishing by Sat Oct 21  6:30:13 2000

(9,16,9) <- (9,0,9).*(1, 15+1,1): 139.828709 Mflop/s
(15,16,15) <- (15,1,15).*(1, 15+1,1): 144.104803 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 139.828709
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 144.104803
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,1) :   141.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2473 (22.0%), 8777 (78.0%) left; Finishing by Sat Oct 21  6:30:11 2000

(16,10,9) <- (0,1,9).*(16, 9+1,1): 25.247839 Mflop/s
(16,10,15) <- (0,1,15).*(16, 9+1,1): 26.257278 Mflop/s

Testing m0 = 16, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 16  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 10 9 16 10 10 9 16 9
<<< (M = 16, K = 10, N = 9) : 25.247839
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 10 15 16 10 10 15 16 15
<<< (M = 16, K = 10, N = 15) : 26.257278
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (16, 9,1) :    25.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2474 (22.0%), 8776 (78.0%) left; Finishing by Sat Oct 21  6:30:15 2000

(8,12,8) <- (2,0,4).*(4, 11+1,2): 29.823264 Mflop/s
(12,12,14) <- (3,1,7).*(4, 11+1,2): 32.295632 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 29.823264
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 32.295632
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 11,2) :    31.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2475 (22.0%), 8775 (78.0%) left; Finishing by Sat Oct 21  6:30:13 2000

(10,10,9) <- (0,1,9).*(10, 9+1,1): 69.365976 Mflop/s
(10,10,15) <- (1,1,15).*(10, 9+1,1): 93.688327 Mflop/s

Testing m0 = 10, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 10  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 10 9 10 10 10 9 10 9
<<< (M = 10, K = 10, N = 9) : 69.365976
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 10 15 10 10 10 15 10 15
<<< (M = 10, K = 10, N = 15) : 93.688327
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (10, 9,1) :    79.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2476 (22.0%), 8774 (78.0%) left; Finishing by Sat Oct 21  6:30:12 2000

(5,12,9) <- (1,3,3).*(5, 3+1,3): 33.306781 Mflop/s
(15,20,15) <- (3,5,5).*(5, 3+1,3): 31.393769 Mflop/s

Testing m0 = 5, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 33.306781
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 31.393769
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 3,3) :    32.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2477 (22.0%), 8773 (78.0%) left; Finishing by Sat Oct 21  6:30:11 2000

(8,14,8) <- (4,0,1).*(2, 13+1,8): 29.405325 Mflop/s
(14,14,8) <- (7,1,1).*(2, 13+1,8): 29.450298 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  13 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 29.405325
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 8 14 14 14 8 14 8
<<< (M = 14, K = 14, N = 8) : 29.450298
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 13,8) :    29.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2478 (22.0%), 8772 (78.0%) left; Finishing by Sat Oct 21  6:30:09 2000

(9,18,13) <- (9,9,0).*(1,1+1,13): 25.007233 Mflop/s
(15,30,13) <- (15,15,1).*(1,1+1,13): 24.909620 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 13 9 18 18 13 9 13
<<< (M = 9, K = 18, N = 13) : 25.007233
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 13 15 30 30 13 15 13
<<< (M = 15, K = 30, N = 13) : 24.909620
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,13) :    25.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2479 (22.0%), 8771 (78.0%) left; Finishing by Sat Oct 21  6:30:08 2000

(9,18,14) <- (9,9,0).*(1,1+1,14): 25.804800 Mflop/s
(15,30,14) <- (15,15,1).*(1,1+1,14): 25.033264 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 14 9 18 18 14 9 14
<<< (M = 9, K = 18, N = 14) : 25.804800
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 14 15 30 30 14 15 14
<<< (M = 15, K = 30, N = 14) : 25.033264
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,14) :    25.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2480 (22.0%), 8770 (78.0%) left; Finishing by Sat Oct 21  6:30:02 2000

(9,12,7) <- (9,0,1).*(1, 11+1,7): 131.787392 Mflop/s
(15,12,14) <- (15,1,2).*(1, 11+1,7): 137.068356 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 7 9 12 12 7 9 7
<<< (M = 9, K = 12, N = 7) : 131.787392
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 137.068356
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,7) :   134.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2481 (22.1%), 8769 (77.9%) left; Finishing by Sat Oct 21  6:30:01 2000

(9,12,10) <- (9,4,0).*(1, 2+1,10): 120.084696 Mflop/s
(15,21,10) <- (15,7,1).*(1, 2+1,10): 115.673447 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 10 9 12 12 10 9 10
<<< (M = 9, K = 12, N = 10) : 120.084696
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 10 15 21 21 10 15 10
<<< (M = 15, K = 21, N = 10) : 115.673447
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,10) :   117.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2482 (22.1%), 8768 (77.9%) left; Finishing by Sat Oct 21  6:30:00 2000

(6,11,9) <- (1,0,9).*(6, 10+1,1): 107.999513 Mflop/s
(12,11,15) <- (2,1,15).*(6, 10+1,1): 76.141498 Mflop/s

Testing m0 = 6, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 11 9 6 11 11 9 6 9
<<< (M = 6, K = 11, N = 9) : 107.999513
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 76.141498
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 10,1) :    89.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2483 (22.1%), 8767 (77.9%) left; Finishing by Sat Oct 21  6:30:03 2000

(9,11,6) <- (9,0,1).*(1, 10+1,6): 139.724944 Mflop/s
(15,11,12) <- (15,1,2).*(1, 10+1,6): 145.424430 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 6 9 11 11 6 9 6
<<< (M = 9, K = 11, N = 6) : 139.724944
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 145.424430
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,6) :   142.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2484 (22.1%), 8766 (77.9%) left; Finishing by Sat Oct 21  6:30:02 2000

(9,12,16) <- (9,0,0).*(1, 11+1,16): 105.399355 Mflop/s
(15,12,16) <- (15,1,0).*(1, 11+1,16): 105.995739 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 16 9 12 12 16 9 16
<<< (M = 9, K = 12, N = 16) : 105.399355
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 16 15 12 12 16 15 16
<<< (M = 15, K = 12, N = 16) : 105.995739
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,16) :   105.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2485 (22.1%), 8765 (77.9%) left; Finishing by Sat Oct 21  6:30:00 2000

(13,18,9) <- (0,9,9).*(13,1+1,1): 49.253999 Mflop/s
(13,30,15) <- (1,15,15).*(13,1+1,1): 50.109250 Mflop/s

Testing m0 = 13, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 13 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 18 9 13 18 18 9 13 9
<<< (M = 13, K = 18, N = 9) : 49.253999
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 30 15 13 30 30 15 13 15
<<< (M = 13, K = 30, N = 15) : 50.109250
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (13,1,1) :    49.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2486 (22.1%), 8764 (77.9%) left; Finishing by Sat Oct 21  6:29:59 2000

(9,7,10) <- (9,1,0).*(1, 6+1,10): 102.515114 Mflop/s
(15,14,10) <- (15,2,1).*(1, 6+1,10): 125.845111 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 10 9 7 7 10 9 10
<<< (M = 9, K = 7, N = 10) : 102.515114
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 10 15 14 14 10 15 10
<<< (M = 15, K = 14, N = 10) : 125.845111
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,10) :   113.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2487 (22.1%), 8763 (77.9%) left; Finishing by Sat Oct 21  6:30:02 2000

(8,12,8) <- (2,4,2).*(4, 2+1,4): 68.876697 Mflop/s
(12,21,12) <- (3,7,3).*(4, 2+1,4): 125.170829 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 68.876697
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 12 12 21 21 12 12 12
<<< (M = 12, K = 21, N = 12) : 125.170829
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 2,4) :    88.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2488 (22.1%), 8762 (77.9%) left; Finishing by Sat Oct 21  6:30:01 2000

(9,12,11) <- (9,3,0).*(1, 3+1,11): 130.343263 Mflop/s
(15,20,11) <- (15,5,1).*(1, 3+1,11): 121.454469 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 11 9 12 12 11 9 11
<<< (M = 9, K = 12, N = 11) : 130.343263
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 11 15 20 20 11 15 11
<<< (M = 15, K = 20, N = 11) : 121.454469
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,11) :   125.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2489 (22.1%), 8761 (77.9%) left; Finishing by Sat Oct 21  6:30:00 2000

(9,16,5) <- (3,0,1).*(3, 15+1,5): 125.391398 Mflop/s
(15,16,15) <- (5,1,3).*(3, 15+1,5): 126.968635 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  15 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 5 9 16 16 5 9 5
<<< (M = 9, K = 16, N = 5) : 125.391398
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 126.968635
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 15,5) :   126.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2490 (22.1%), 8760 (77.9%) left; Finishing by Sat Oct 21  6:30:03 2000

(9,10,16) <- (9,2,0).*(1, 4+1,16): 114.162162 Mflop/s
(15,15,16) <- (15,3,0).*(1, 4+1,16): 125.840086 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 16 9 10 10 16 9 16
<<< (M = 9, K = 10, N = 16) : 114.162162
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 16 15 15 15 16 15 16
<<< (M = 15, K = 15, N = 16) : 125.840086
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,16) :   119.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2491 (22.1%), 8759 (77.9%) left; Finishing by Sat Oct 21  6:30:02 2000

(10,11,9) <- (0,0,9).*(10, 10+1,1): 73.550550 Mflop/s
(10,11,15) <- (1,1,15).*(10, 10+1,1): 96.409109 Mflop/s

Testing m0 = 10, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 10  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 11 9 10 11 11 9 10 9
<<< (M = 10, K = 11, N = 9) : 73.550550
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 11 15 10 11 11 15 10 15
<<< (M = 10, K = 11, N = 15) : 96.409109
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (10, 10,1) :    83.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2492 (22.2%), 8758 (77.8%) left; Finishing by Sat Oct 21  6:30:00 2000

(9,6,9) <- (9,1,1).*(1, 5+1,9): 99.122423 Mflop/s
(15,18,9) <- (15,3,1).*(1, 5+1,9): 136.472412 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 99.122423
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 9 15 18 18 9 15 9
<<< (M = 15, K = 18, N = 9) : 136.472412
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,9) :   114.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2493 (22.2%), 8757 (77.8%) left; Finishing by Sat Oct 21  6:30:04 2000

(9,14,6) <- (9,0,1).*(1, 13+1,6): 144.043214 Mflop/s
(15,14,12) <- (15,1,2).*(1, 13+1,6): 152.376464 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 6 9 14 14 6 9 6
<<< (M = 9, K = 14, N = 6) : 144.043214
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 152.376464
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,6) :   148.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2494 (22.2%), 8756 (77.8%) left; Finishing by Sat Oct 21  6:30:07 2000

(12,11,9) <- (0,0,9).*(12, 10+1,1): 26.610146 Mflop/s
(12,11,15) <- (1,1,15).*(12, 10+1,1): 27.935576 Mflop/s

Testing m0 = 12, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 12  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 9 12 11 11 9 12 9
<<< (M = 12, K = 11, N = 9) : 26.610146
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 27.935576
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (12, 10,1) :    27.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2495 (22.2%), 8755 (77.8%) left; Finishing by Sat Oct 21  6:30:10 2000

(9,10,8) <- (3,1,2).*(3, 9+1,4): 125.578729 Mflop/s
(15,10,12) <- (5,1,3).*(3, 9+1,4): 127.434278 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 125.578729
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 127.434278
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 9,4) :   126.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2496 (22.2%), 8754 (77.8%) left; Finishing by Sat Oct 21  6:30:09 2000

(8,14,6) <- (4,0,1).*(2, 13+1,6): 30.587102 Mflop/s
(14,14,12) <- (7,1,2).*(2, 13+1,6): 27.427727 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  13 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 6 8 14 14 6 8 6
<<< (M = 8, K = 14, N = 6) : 30.587102
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 27.427727
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 13,6) :    28.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2497 (22.2%), 8753 (77.8%) left; Finishing by Sat Oct 21  6:30:07 2000

(10,14,9) <- (0,0,9).*(10, 13+1,1): 77.142490 Mflop/s
(10,14,15) <- (1,1,15).*(10, 13+1,1): 103.436267 Mflop/s

Testing m0 = 10, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 10  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 9 10 14 14 9 10 9
<<< (M = 10, K = 14, N = 9) : 77.142490
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 15 10 14 14 15 10 15
<<< (M = 10, K = 14, N = 15) : 103.436267
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (10, 13,1) :    88.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2498 (22.2%), 8752 (77.8%) left; Finishing by Sat Oct 21  6:30:06 2000

(5,10,9) <- (1,1,9).*(5, 9+1,1): 55.176418 Mflop/s
(15,10,15) <- (3,1,15).*(5, 9+1,1): 79.362869 Mflop/s

Testing m0 = 5, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 9 5 10 10 9 5 9
<<< (M = 5, K = 10, N = 9) : 55.176418
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 79.362869
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 9,1) :    65.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2499 (22.2%), 8751 (77.8%) left; Finishing by Sat Oct 21  6:30:05 2000

(9,13,9) <- (1,0,9).*(9, 12+1,1): 28.007804 Mflop/s
(9,13,15) <- (1,1,15).*(9, 12+1,1): 28.117782 Mflop/s

Testing m0 = 9, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 9  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 28.007804
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 15 9 13 13 15 9 15
<<< (M = 9, K = 13, N = 15) : 28.117782
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (9, 12,1) :    28.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2500 (22.2%), 8750 (77.8%) left; Finishing by Sat Oct 21  6:30:08 2000

(9,12,8) <- (3,4,2).*(3, 2+1,4): 33.669450 Mflop/s
(15,21,12) <- (5,7,3).*(3, 2+1,4): 29.586974 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 33.669450
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 12 15 21 21 12 15 12
<<< (M = 15, K = 21, N = 12) : 29.586974
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 2,4) :    31.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2501 (22.2%), 8749 (77.8%) left; Finishing by Sat Oct 21  6:30:02 2000

(8,16,8) <- (2,0,2).*(4, 15+1,4): 24.880155 Mflop/s
(12,16,12) <- (3,1,3).*(4, 15+1,4): 29.544807 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 24.880155
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 12 12 16 16 12 12 12
<<< (M = 12, K = 16, N = 12) : 29.544807
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 15,4) :    27.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2502 (22.2%), 8748 (77.8%) left; Finishing by Sat Oct 21  6:30:05 2000

(9,15,13) <- (9,0,0).*(1, 14+1,13): 112.230122 Mflop/s
(15,15,13) <- (15,1,1).*(1, 14+1,13): 112.984611 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 13 9 15 15 13 9 13
<<< (M = 9, K = 15, N = 13) : 112.230122
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 13 15 15 15 13 15 13
<<< (M = 15, K = 15, N = 13) : 112.984611
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,13) :   112.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2503 (22.2%), 8747 (77.8%) left; Finishing by Sat Oct 21  6:30:04 2000

(8,15,9) <- (1,0,9).*(8, 14+1,1): 74.378835 Mflop/s
(8,15,15) <- (1,1,15).*(8, 14+1,1): 74.723726 Mflop/s

Testing m0 = 8, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 74.378835
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 15 8 15 15 15 8 15
<<< (M = 8, K = 15, N = 15) : 74.723726
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 14,1) :    74.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2504 (22.3%), 8746 (77.7%) left; Finishing by Sat Oct 21  6:30:03 2000

(8,12,8) <- (4,0,4).*(2, 11+1,2): 133.109318 Mflop/s
(14,12,14) <- (7,1,7).*(2, 11+1,2): 73.406090 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 133.109318
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 73.406090
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 11,2) :    94.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2505 (22.3%), 8745 (77.7%) left; Finishing by Sat Oct 21  6:30:02 2000

(8,6,8) <- (2,1,2).*(4, 5+1,4): 54.330442 Mflop/s
(12,18,12) <- (3,3,3).*(4, 5+1,4): 115.026801 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 54.330442
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 12 12 18 18 12 12 12
<<< (M = 12, K = 18, N = 12) : 115.026801
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 5,4) :    73.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2506 (22.3%), 8744 (77.7%) left; Finishing by Sat Oct 21  6:30:00 2000

(9,6,9) <- (1,1,9).*(9, 5+1,1): 63.640997 Mflop/s
(9,18,15) <- (1,3,15).*(9, 5+1,1): 86.734522 Mflop/s

Testing m0 = 9, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 9  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 63.640997
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 15 9 18 18 15 9 15
<<< (M = 9, K = 18, N = 15) : 86.734522
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (9, 5,1) :    73.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2507 (22.3%), 8743 (77.7%) left; Finishing by Sat Oct 21  6:29:59 2000

(6,11,8) <- (1,0,4).*(6, 10+1,2): 111.520087 Mflop/s
(12,11,14) <- (2,1,7).*(6, 10+1,2): 77.098910 Mflop/s

Testing m0 = 6, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 11 8 6 11 11 8 6 8
<<< (M = 6, K = 11, N = 8) : 111.520087
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 14 12 11 11 14 12 14
<<< (M = 12, K = 11, N = 14) : 77.098910
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 10,2) :    91.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2508 (22.3%), 8742 (77.7%) left; Finishing by Sat Oct 21  6:30:02 2000

(10,9,9) <- (0,1,9).*(10, 8+1,1): 70.434368 Mflop/s
(10,9,15) <- (1,1,15).*(10, 8+1,1): 70.898914 Mflop/s

Testing m0 = 10, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 10  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 9 9 10 9 9 9 10 9
<<< (M = 10, K = 9, N = 9) : 70.434368
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 9 15 10 9 9 15 10 15
<<< (M = 10, K = 9, N = 15) : 70.898914
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (10, 8,1) :    70.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2509 (22.3%), 8741 (77.7%) left; Finishing by Sat Oct 21  6:30:01 2000

(8,11,8) <- (1,0,4).*(8, 10+1,2): 105.144905 Mflop/s
(8,11,14) <- (1,1,7).*(8, 10+1,2): 106.243717 Mflop/s

Testing m0 = 8, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 105.144905
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 14 8 11 11 14 8 14
<<< (M = 8, K = 11, N = 14) : 106.243717
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 10,2) :   105.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2510 (22.3%), 8740 (77.7%) left; Finishing by Sat Oct 21  6:30:00 2000

(7,12,8) <- (1,0,4).*(7, 11+1,2): 23.994039 Mflop/s
(14,12,14) <- (2,1,7).*(7, 11+1,2): 27.682511 Mflop/s

Testing m0 = 7, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 8 7 12 12 8 7 8
<<< (M = 7, K = 12, N = 8) : 23.994039
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 27.682511
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 11,2) :    25.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2511 (22.3%), 8739 (77.7%) left; Finishing by Sat Oct 21  6:29:58 2000

(13,16,9) <- (0,0,9).*(13, 15+1,1): 26.524251 Mflop/s
(13,16,15) <- (1,1,15).*(13, 15+1,1): 29.818706 Mflop/s

Testing m0 = 13, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 13  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 16 9 13 16 16 9 13 9
<<< (M = 13, K = 16, N = 9) : 26.524251
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 16 15 13 16 16 15 13 15
<<< (M = 13, K = 16, N = 15) : 29.818706
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (13, 15,1) :    28.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2512 (22.3%), 8738 (77.7%) left; Finishing by Sat Oct 21  6:29:57 2000

(8,18,8) <- (4,9,4).*(2,1+1,2): 128.820024 Mflop/s
(14,30,14) <- (7,15,7).*(2,1+1,2): 69.332979 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 8 8 18 18 8 8 8
<<< (M = 8, K = 18, N = 8) : 128.820024
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 14 14 30 30 14 14 14
<<< (M = 14, K = 30, N = 14) : 69.332979
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2,1,2) :    90.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2513 (22.3%), 8737 (77.7%) left; Finishing by Sat Oct 21  6:29:56 2000

(8,10,8) <- (2,1,2).*(4, 9+1,4): 23.963103 Mflop/s
(12,10,12) <- (3,1,3).*(4, 9+1,4): 28.363334 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 23.963103
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 12 12 10 10 12 12 12
<<< (M = 12, K = 10, N = 12) : 28.363334
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 9,4) :    26.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2514 (22.3%), 8736 (77.7%) left; Finishing by Sat Oct 21  6:29:54 2000

(15,9,9) <- (0,1,9).*(15, 8+1,1): 79.287794 Mflop/s
(15,9,15) <- (1,1,15).*(15, 8+1,1): 79.912197 Mflop/s

Testing m0 = 15, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 15  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 9 15 9 9 9 15 9
<<< (M = 15, K = 9, N = 9) : 79.287794
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 79.912197
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (15, 8,1) :    79.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2515 (22.4%), 8735 (77.6%) left; Finishing by Sat Oct 21  6:29:58 2000

(9,11,9) <- (9,0,1).*(1, 10+1,9): 115.295031 Mflop/s
(15,11,9) <- (15,1,1).*(1, 10+1,9): 116.506095 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 115.295031
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 9 15 11 11 9 15 9
<<< (M = 15, K = 11, N = 9) : 116.506095
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,9) :   115.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2516 (22.4%), 8734 (77.6%) left; Finishing by Sat Oct 21  6:29:52 2000

(6,12,9) <- (1,4,9).*(6, 2+1,1): 42.804643 Mflop/s
(12,21,15) <- (2,7,15).*(6, 2+1,1): 47.652586 Mflop/s

Testing m0 = 6, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 9 6 12 12 9 6 9
<<< (M = 6, K = 12, N = 9) : 42.804643
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 15 12 21 21 15 12 15
<<< (M = 12, K = 21, N = 15) : 47.652586
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 2,1) :    45.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2517 (22.4%), 8733 (77.6%) left; Finishing by Sat Oct 21  6:29:51 2000

(9,12,8) <- (9,4,4).*(1, 2+1,2): 172.039431 Mflop/s
(15,21,14) <- (15,7,7).*(1, 2+1,2): 158.262579 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 172.039431
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 14 15 21 21 14 15 14
<<< (M = 15, K = 21, N = 14) : 158.262579
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,2) :   164.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2518 (22.4%), 8732 (77.6%) left; Finishing by Sat Oct 21  6:29:54 2000

(9,7,12) <- (9,1,0).*(1, 6+1,12): 102.057216 Mflop/s
(15,14,12) <- (15,2,1).*(1, 6+1,12): 122.698171 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 12 9 7 7 12 9 12
<<< (M = 9, K = 7, N = 12) : 102.057216
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 122.698171
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,12) :   111.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2519 (22.4%), 8731 (77.6%) left; Finishing by Sat Oct 21  6:29:53 2000

(15,16,9) <- (0,0,9).*(15, 15+1,1): 25.705635 Mflop/s
(15,16,15) <- (1,1,15).*(15, 15+1,1): 28.801559 Mflop/s

Testing m0 = 15, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 15  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 9 15 16 16 9 15 9
<<< (M = 15, K = 16, N = 9) : 25.705635
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 28.801559
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (15, 15,1) :    27.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2520 (22.4%), 8730 (77.6%) left; Finishing by Sat Oct 21  6:29:56 2000

(6,7,9) <- (1,1,9).*(6, 6+1,1): 92.726132 Mflop/s
(12,14,15) <- (2,2,15).*(6, 6+1,1): 83.126149 Mflop/s

Testing m0 = 6, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 7 9 6 7 7 9 6 9
<<< (M = 6, K = 7, N = 9) : 92.726132
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 83.126149
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 6,1) :    87.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2521 (22.4%), 8729 (77.6%) left; Finishing by Sat Oct 21  6:29:59 2000

(8,7,8) <- (4,1,1).*(2, 6+1,8): 26.536675 Mflop/s
(14,14,8) <- (7,2,1).*(2, 6+1,8): 30.835053 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  6 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 26.536675
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 8 14 14 14 8 14 8
<<< (M = 14, K = 14, N = 8) : 30.835053
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 6,8) :    28.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2522 (22.4%), 8728 (77.6%) left; Finishing by Sat Oct 21  6:29:53 2000

(11,11,9) <- (0,0,9).*(11, 10+1,1): 27.278655 Mflop/s
(11,11,15) <- (1,1,15).*(11, 10+1,1): 27.148887 Mflop/s

Testing m0 = 11, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 11  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 11 9 11 11 11 9 11 9
<<< (M = 11, K = 11, N = 9) : 27.278655
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 11 15 11 11 11 15 11 15
<<< (M = 11, K = 11, N = 15) : 27.148887
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (11, 10,1) :    27.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2523 (22.4%), 8727 (77.6%) left; Finishing by Sat Oct 21  6:29:56 2000

(8,12,9) <- (1,3,9).*(8, 3+1,1): 37.576611 Mflop/s
(8,20,15) <- (1,5,15).*(8, 3+1,1): 34.599505 Mflop/s

Testing m0 = 8, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 37.576611
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 20 15 8 20 20 15 8 15
<<< (M = 8, K = 20, N = 15) : 34.599505
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 3,1) :    36.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2524 (22.4%), 8726 (77.6%) left; Finishing by Sat Oct 21  6:29:55 2000

(9,12,9) <- (1,0,9).*(9, 11+1,1): 27.700947 Mflop/s
(9,12,15) <- (1,1,15).*(9, 11+1,1): 27.773677 Mflop/s

Testing m0 = 9, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 9  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 27.700947
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 27.773677
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (9, 11,1) :    27.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2525 (22.4%), 8725 (77.6%) left; Finishing by Sat Oct 21  6:29:54 2000

(9,10,8) <- (9,1,4).*(1, 9+1,2): 163.670786 Mflop/s
(15,10,14) <- (15,1,7).*(1, 9+1,2): 169.762607 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 163.670786
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 169.762607
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,2) :   166.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2526 (22.5%), 8724 (77.5%) left; Finishing by Sat Oct 21  6:30:01 2000

(9,12,8) <- (3,0,4).*(3, 11+1,2): 127.798762 Mflop/s
(15,12,14) <- (5,1,7).*(3, 11+1,2): 129.775888 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 127.798762
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 129.775888
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 11,2) :   128.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2527 (22.5%), 8723 (77.5%) left; Finishing by Sat Oct 21  6:29:56 2000

(8,7,9) <- (2,1,3).*(4, 6+1,3): 91.084566 Mflop/s
(12,14,15) <- (3,2,5).*(4, 6+1,3): 129.170804 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 91.084566
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 129.170804
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 6,3) :   106.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2528 (22.5%), 8722 (77.5%) left; Finishing by Sat Oct 21  6:29:59 2000

(8,10,9) <- (1,1,9).*(8, 9+1,1): 67.877121 Mflop/s
(8,10,15) <- (1,1,15).*(8, 9+1,1): 68.271407 Mflop/s

Testing m0 = 8, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 67.877121
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 15 8 10 10 15 8 15
<<< (M = 8, K = 10, N = 15) : 68.271407
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 9,1) :    68.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2529 (22.5%), 8721 (77.5%) left; Finishing by Sat Oct 21  6:29:58 2000

(8,9,8) <- (2,1,4).*(4, 8+1,2): 29.180354 Mflop/s
(12,9,14) <- (3,1,7).*(4, 8+1,2): 29.314634 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 29.180354
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 14 12 9 9 14 12 14
<<< (M = 12, K = 9, N = 14) : 29.314634
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 8,2) :    29.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2530 (22.5%), 8720 (77.5%) left; Finishing by Sat Oct 21  6:29:56 2000

(9,15,14) <- (9,0,0).*(1, 14+1,14): 110.768777 Mflop/s
(15,15,14) <- (15,1,1).*(1, 14+1,14): 111.123333 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 14 9 15 15 14 9 14
<<< (M = 9, K = 15, N = 14) : 110.768777
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 111.123333
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,14) :   110.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2531 (22.5%), 8719 (77.5%) left; Finishing by Sat Oct 21  6:29:55 2000

(13,14,9) <- (0,0,9).*(13, 13+1,1): 26.098590 Mflop/s
(13,14,15) <- (1,1,15).*(13, 13+1,1): 29.509373 Mflop/s

Testing m0 = 13, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 13  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 9 13 14 14 9 13 9
<<< (M = 13, K = 14, N = 9) : 26.098590
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 15 13 14 14 15 13 15
<<< (M = 13, K = 14, N = 15) : 29.509373
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (13, 13,1) :    27.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2532 (22.5%), 8718 (77.5%) left; Finishing by Sat Oct 21  6:29:54 2000

(6,8,8) <- (1,1,4).*(6, 7+1,2): 106.643013 Mflop/s
(12,16,14) <- (2,2,7).*(6, 7+1,2): 87.759949 Mflop/s

Testing m0 = 6, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 8 6 8 8 8 6 8
<<< (M = 6, K = 8, N = 8) : 106.643013
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 14 12 16 16 14 12 14
<<< (M = 12, K = 16, N = 14) : 87.759949
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 7,2) :    96.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2533 (22.5%), 8717 (77.5%) left; Finishing by Sat Oct 21  6:29:57 2000

(9,18,11) <- (9,9,0).*(1,1+1,11): 28.177705 Mflop/s
(15,30,11) <- (15,15,1).*(1,1+1,11): 25.848670 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 11 9 18 18 11 9 11
<<< (M = 9, K = 18, N = 11) : 28.177705
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 11 15 30 30 11 15 11
<<< (M = 15, K = 30, N = 11) : 25.848670
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,11) :    27.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2534 (22.5%), 8716 (77.5%) left; Finishing by Sat Oct 21  6:29:56 2000

(9,15,6) <- (9,0,1).*(1, 14+1,6): 145.936046 Mflop/s
(15,15,12) <- (15,1,2).*(1, 14+1,6): 153.202082 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 6 9 15 15 6 9 6
<<< (M = 9, K = 15, N = 6) : 145.936046
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 153.202082
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,6) :   149.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2535 (22.5%), 8715 (77.5%) left; Finishing by Sat Oct 21  6:29:59 2000

(7,13,9) <- (1,0,9).*(7, 12+1,1): 35.572827 Mflop/s
(14,13,15) <- (2,1,15).*(7, 12+1,1): 39.629017 Mflop/s

Testing m0 = 7, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 13 9 7 13 13 9 7 9
<<< (M = 7, K = 13, N = 9) : 35.572827
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 39.629017
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 12,1) :    37.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2536 (22.5%), 8714 (77.5%) left; Finishing by Sat Oct 21  6:29:58 2000

(8,15,8) <- (1,0,4).*(8, 14+1,2): 107.680775 Mflop/s
(8,15,14) <- (1,1,7).*(8, 14+1,2): 108.330786 Mflop/s

Testing m0 = 8, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 107.680775
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 14 8 15 15 14 8 14
<<< (M = 8, K = 15, N = 14) : 108.330786
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 14,2) :   108.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2537 (22.6%), 8713 (77.4%) left; Finishing by Sat Oct 21  6:30:01 2000

(8,13,9) <- (2,0,3).*(4, 12+1,3): 28.197650 Mflop/s
(12,13,15) <- (3,1,5).*(4, 12+1,3): 29.931749 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 28.197650
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 29.931749
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 12,3) :    29.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2538 (22.6%), 8712 (77.4%) left; Finishing by Sat Oct 21  6:29:59 2000

(8,11,8) <- (2,0,2).*(4, 10+1,4): 24.292417 Mflop/s
(12,11,12) <- (3,1,3).*(4, 10+1,4): 28.670645 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 24.292417
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 12 12 11 11 12 12 12
<<< (M = 12, K = 11, N = 12) : 28.670645
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 10,4) :    26.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2539 (22.6%), 8711 (77.4%) left; Finishing by Sat Oct 21  6:29:58 2000

(9,18,16) <- (9,9,0).*(1,1+1,16): 24.122101 Mflop/s
(15,30,16) <- (15,15,0).*(1,1+1,16): 24.688356 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 16 9 18 18 16 9 16
<<< (M = 9, K = 18, N = 16) : 24.122101
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 16 15 30 30 16 15 16
<<< (M = 15, K = 30, N = 16) : 24.688356
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,16) :    24.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2540 (22.6%), 8710 (77.4%) left; Finishing by Sat Oct 21  6:29:57 2000

(5,10,9) <- (1,2,9).*(5, 4+1,1): 61.923111 Mflop/s
(15,15,15) <- (3,3,15).*(5, 4+1,1): 93.141271 Mflop/s

Testing m0 = 5, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 9 5 10 10 9 5 9
<<< (M = 5, K = 10, N = 9) : 61.923111
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 93.141271
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 4,1) :    74.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2541 (22.6%), 8709 (77.4%) left; Finishing by Sat Oct 21  6:29:51 2000

(8,12,8) <- (2,3,4).*(4, 3+1,2): 103.161768 Mflop/s
(12,20,14) <- (3,5,7).*(4, 3+1,2): 130.895572 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 103.161768
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 20 14 12 20 20 14 12 14
<<< (M = 12, K = 20, N = 14) : 130.895572
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 3,2) :   115.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2542 (22.6%), 8708 (77.4%) left; Finishing by Sat Oct 21  6:29:54 2000

(8,12,8) <- (4,3,4).*(2, 3+1,2): 156.935150 Mflop/s
(14,20,14) <- (7,5,7).*(2, 3+1,2): 75.193118 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 156.935150
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 14 14 20 20 14 14 14
<<< (M = 14, K = 20, N = 14) : 75.193118
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 3,2) :   101.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2543 (22.6%), 8707 (77.4%) left; Finishing by Sat Oct 21  6:29:58 2000

(9,11,5) <- (3,0,1).*(3, 10+1,5): 116.992642 Mflop/s
(15,11,15) <- (5,1,3).*(3, 10+1,5): 122.189466 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  10 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 5 9 11 11 5 9 5
<<< (M = 9, K = 11, N = 5) : 116.992642
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 122.189466
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 10,5) :   119.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2544 (22.6%), 8706 (77.4%) left; Finishing by Sat Oct 21  6:30:01 2000

(9,12,13) <- (9,0,0).*(1, 11+1,13): 110.027261 Mflop/s
(15,12,13) <- (15,1,1).*(1, 11+1,13): 110.446583 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 13 9 12 12 13 9 13
<<< (M = 9, K = 12, N = 13) : 110.027261
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 13 15 12 12 13 15 13
<<< (M = 15, K = 12, N = 13) : 110.446583
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,13) :   110.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2545 (22.6%), 8705 (77.4%) left; Finishing by Sat Oct 21  6:29:59 2000

(9,18,10) <- (9,9,0).*(1,1+1,10): 27.881987 Mflop/s
(15,30,10) <- (15,15,1).*(1,1+1,10): 23.504907 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 10 9 18 18 10 9 10
<<< (M = 9, K = 18, N = 10) : 27.881987
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 10 15 30 30 10 15 10
<<< (M = 15, K = 30, N = 10) : 23.504907
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,10) :    25.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2546 (22.6%), 8704 (77.4%) left; Finishing by Sat Oct 21  6:29:58 2000

(7,7,9) <- (1,1,9).*(7, 6+1,1): 31.648496 Mflop/s
(14,14,15) <- (2,2,15).*(7, 6+1,1): 41.276854 Mflop/s

Testing m0 = 7, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 7 9 7 7 7 9 7 9
<<< (M = 7, K = 7, N = 9) : 31.648496
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 41.276854
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 6,1) :    35.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2547 (22.6%), 8703 (77.4%) left; Finishing by Sat Oct 21  6:29:57 2000

(8,18,6) <- (4,9,1).*(2,1+1,6): 106.711951 Mflop/s
(14,30,12) <- (7,15,2).*(2,1+1,6): 70.184190 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2 1 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 6 8 18 18 6 8 6
<<< (M = 8, K = 18, N = 6) : 106.711951
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 12 14 30 30 12 14 12
<<< (M = 14, K = 30, N = 12) : 70.184190
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2,1,6) :    84.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2548 (22.6%), 8702 (77.4%) left; Finishing by Sat Oct 21  6:29:56 2000

(9,12,9) <- (1,3,9).*(9, 3+1,1): 120.405427 Mflop/s
(9,20,15) <- (1,5,15).*(9, 3+1,1): 111.761906 Mflop/s

Testing m0 = 9, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 9  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 120.405427
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 20 15 9 20 20 15 9 15
<<< (M = 9, K = 20, N = 15) : 111.761906
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (9, 3,1) :   115.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2549 (22.7%), 8701 (77.3%) left; Finishing by Sat Oct 21  6:29:50 2000

(5,8,8) <- (1,1,4).*(5, 7+1,2): 28.977948 Mflop/s
(15,16,14) <- (3,2,7).*(5, 7+1,2): 33.843165 Mflop/s

Testing m0 = 5, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 8 5 8 8 8 5 8
<<< (M = 5, K = 8, N = 8) : 28.977948
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 33.843165
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 7,2) :    31.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2550 (22.7%), 8700 (77.3%) left; Finishing by Sat Oct 21  6:29:49 2000

(7,9,9) <- (1,1,9).*(7, 8+1,1): 33.265395 Mflop/s
(14,9,15) <- (2,1,15).*(7, 8+1,1): 33.584626 Mflop/s

Testing m0 = 7, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 9 7 9 9 9 7 9
<<< (M = 7, K = 9, N = 9) : 33.265395
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 33.584626
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 8,1) :    33.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2551 (22.7%), 8699 (77.3%) left; Finishing by Sat Oct 21  6:29:47 2000

(10,6,9) <- (0,1,9).*(10, 5+1,1): 25.235438 Mflop/s
(10,18,15) <- (1,3,15).*(10, 5+1,1): 33.501728 Mflop/s

Testing m0 = 10, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 10  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 6 9 10 6 6 9 10 9
<<< (M = 10, K = 6, N = 9) : 25.235438
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 18 15 10 18 18 15 10 15
<<< (M = 10, K = 18, N = 15) : 33.501728
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (10, 5,1) :    28.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2552 (22.7%), 8698 (77.3%) left; Finishing by Sat Oct 21  6:29:46 2000

(9,8,9) <- (9,1,9).*(1, 7+1,1): 113.187499 Mflop/s
(15,16,15) <- (15,2,15).*(1, 7+1,1): 149.932474 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 113.187499
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 149.932474
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,1) :   129.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2553 (22.7%), 8697 (77.3%) left; Finishing by Sat Oct 21  6:29:45 2000

(9,11,7) <- (9,0,1).*(1, 10+1,7): 130.308880 Mflop/s
(15,11,14) <- (15,1,2).*(1, 10+1,7): 134.900005 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 7 9 11 11 7 9 7
<<< (M = 9, K = 11, N = 7) : 130.308880
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 134.900005
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,7) :   132.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2554 (22.7%), 8696 (77.3%) left; Finishing by Sat Oct 21  6:29:44 2000

(8,18,8) <- (2,9,2).*(4,1+1,4): 117.251815 Mflop/s
(12,30,12) <- (3,15,3).*(4,1+1,4): 121.620435 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 8 8 18 18 8 8 8
<<< (M = 8, K = 18, N = 8) : 117.251815
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 30 12 12 30 30 12 12 12
<<< (M = 12, K = 30, N = 12) : 121.620435
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4,1,4) :   119.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2555 (22.7%), 8695 (77.3%) left; Finishing by Sat Oct 21  6:29:42 2000

(8,12,7) <- (4,3,1).*(2, 3+1,7): 35.382937 Mflop/s
(14,20,14) <- (7,5,2).*(2, 3+1,7): 31.633234 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  3 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 7 8 12 12 7 8 7
<<< (M = 8, K = 12, N = 7) : 35.382937
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 14 14 20 20 14 14 14
<<< (M = 14, K = 20, N = 14) : 31.633234
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 3,7) :    33.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2556 (22.7%), 8694 (77.3%) left; Finishing by Sat Oct 21  6:29:41 2000

(9,16,12) <- (9,0,0).*(1, 15+1,12): 116.610621 Mflop/s
(15,16,12) <- (15,1,1).*(1, 15+1,12): 117.025391 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 12 9 16 16 12 9 12
<<< (M = 9, K = 16, N = 12) : 116.610621
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 117.025391
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,12) :   116.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2557 (22.7%), 8693 (77.3%) left; Finishing by Sat Oct 21  6:29:40 2000

(8,12,6) <- (4,4,1).*(2, 2+1,6): 32.969158 Mflop/s
(14,21,12) <- (7,7,2).*(2, 2+1,6): 28.336888 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  2 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 6 8 12 12 6 8 6
<<< (M = 8, K = 12, N = 6) : 32.969158
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 12 14 21 21 12 14 12
<<< (M = 14, K = 21, N = 12) : 28.336888
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 2,6) :    30.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2558 (22.7%), 8692 (77.3%) left; Finishing by Sat Oct 21  6:29:34 2000

(5,7,8) <- (1,1,4).*(5, 6+1,2): 28.791646 Mflop/s
(15,14,14) <- (3,2,7).*(5, 6+1,2): 33.871092 Mflop/s

Testing m0 = 5, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 7 8 5 7 7 8 5 8
<<< (M = 5, K = 7, N = 8) : 28.791646
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 33.871092
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 6,2) :    31.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2559 (22.7%), 8691 (77.3%) left; Finishing by Sat Oct 21  6:29:33 2000

(9,11,12) <- (9,0,0).*(1, 10+1,12): 110.697865 Mflop/s
(15,11,12) <- (15,1,1).*(1, 10+1,12): 111.149427 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 12 9 11 11 12 9 12
<<< (M = 9, K = 11, N = 12) : 110.697865
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 111.149427
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,12) :   110.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2560 (22.8%), 8690 (77.2%) left; Finishing by Sat Oct 21  6:29:32 2000

(5,8,9) <- (1,1,9).*(5, 7+1,1): 54.087876 Mflop/s
(15,16,15) <- (3,2,15).*(5, 7+1,1): 89.979148 Mflop/s

Testing m0 = 5, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 54.087876
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 89.979148
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 7,1) :    67.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2561 (22.8%), 8689 (77.2%) left; Finishing by Sat Oct 21  6:29:35 2000

(8,10,8) <- (1,1,4).*(8, 9+1,2): 101.724025 Mflop/s
(8,10,14) <- (1,1,7).*(8, 9+1,2): 103.675410 Mflop/s

Testing m0 = 8, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 101.724025
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 14 8 10 10 14 8 14
<<< (M = 8, K = 10, N = 14) : 103.675410
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 9,2) :   102.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2562 (22.8%), 8688 (77.2%) left; Finishing by Sat Oct 21  6:29:34 2000

(15,12,9) <- (0,0,9).*(15, 11+1,1): 86.136523 Mflop/s
(15,12,15) <- (1,1,15).*(15, 11+1,1): 104.996680 Mflop/s

Testing m0 = 15, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 15  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 86.136523
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 104.996680
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (15, 11,1) :    94.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2563 (22.8%), 8687 (77.2%) left; Finishing by Sat Oct 21  6:29:32 2000

(9,9,10) <- (9,1,0).*(1, 8+1,10): 110.144018 Mflop/s
(15,9,10) <- (15,1,1).*(1, 8+1,10): 109.978544 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 10 9 9 9 10 9 10
<<< (M = 9, K = 9, N = 10) : 110.144018
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 10 15 9 9 10 15 10
<<< (M = 15, K = 9, N = 10) : 109.978544
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,10) :   110.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2564 (22.8%), 8686 (77.2%) left; Finishing by Sat Oct 21  6:29:31 2000

(5,6,9) <- (1,1,9).*(5, 5+1,1): 47.658110 Mflop/s
(15,18,15) <- (3,3,15).*(5, 5+1,1): 97.244604 Mflop/s

Testing m0 = 5, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 6 9 5 6 6 9 5 9
<<< (M = 5, K = 6, N = 9) : 47.658110
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 97.244604
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 5,1) :    64.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2565 (22.8%), 8685 (77.2%) left; Finishing by Sat Oct 21  6:29:30 2000

(9,14,8) <- (9,0,2).*(1, 13+1,4): 180.771239 Mflop/s
(15,14,12) <- (15,1,3).*(1, 13+1,4): 186.502265 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 180.771239
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 186.502265
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,4) :   183.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2566 (22.8%), 8684 (77.2%) left; Finishing by Sat Oct 21  6:29:33 2000

(8,10,8) <- (2,2,4).*(4, 4+1,2): 32.389772 Mflop/s
(12,15,14) <- (3,3,7).*(4, 4+1,2): 37.546721 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 32.389772
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 37.546721
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 4,2) :    34.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2567 (22.8%), 8683 (77.2%) left; Finishing by Sat Oct 21  6:29:32 2000

(7,14,9) <- (1,0,9).*(7, 13+1,1): 35.316566 Mflop/s
(14,14,15) <- (2,1,15).*(7, 13+1,1): 40.012389 Mflop/s

Testing m0 = 7, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 14 9 7 14 14 9 7 9
<<< (M = 7, K = 14, N = 9) : 35.316566
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 40.012389
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 13,1) :    37.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2568 (22.8%), 8682 (77.2%) left; Finishing by Sat Oct 21  6:29:31 2000

(9,8,9) <- (3,1,9).*(3, 7+1,1): 136.468952 Mflop/s
(15,16,15) <- (5,2,15).*(3, 7+1,1): 188.986354 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 136.468952
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 188.986354
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 7,1) :   158.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2569 (22.8%), 8681 (77.2%) left; Finishing by Sat Oct 21  6:29:34 2000

(9,13,10) <- (9,0,0).*(1, 12+1,10): 114.860585 Mflop/s
(15,13,10) <- (15,1,1).*(1, 12+1,10): 115.681142 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 10 9 13 13 10 9 10
<<< (M = 9, K = 13, N = 10) : 114.860585
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 10 15 13 13 10 15 10
<<< (M = 15, K = 13, N = 10) : 115.681142
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,10) :   115.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2570 (22.8%), 8680 (77.2%) left; Finishing by Sat Oct 21  6:29:32 2000

(8,13,8) <- (2,0,4).*(4, 12+1,2): 29.637588 Mflop/s
(12,13,14) <- (3,1,7).*(4, 12+1,2): 32.508692 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 29.637588
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 14 12 13 13 14 12 14
<<< (M = 12, K = 13, N = 14) : 32.508692
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 12,2) :    31.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2571 (22.9%), 8679 (77.1%) left; Finishing by Sat Oct 21  6:29:27 2000

(8,7,8) <- (4,1,4).*(2, 6+1,2): 119.562085 Mflop/s
(14,14,14) <- (7,2,7).*(2, 6+1,2): 79.643345 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 119.562085
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 79.643345
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 6,2) :    95.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2572 (22.9%), 8678 (77.1%) left; Finishing by Sat Oct 21  6:29:30 2000

(9,9,15) <- (9,1,0).*(1, 8+1,15): 103.956597 Mflop/s
(15,9,15) <- (15,1,1).*(1, 8+1,15): 104.433290 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 15 9 9 9 15 9 15
<<< (M = 9, K = 9, N = 15) : 103.956597
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 104.433290
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,15) :   104.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2573 (22.9%), 8677 (77.1%) left; Finishing by Sat Oct 21  6:29:29 2000

(5,12,8) <- (1,0,4).*(5, 11+1,2): 30.481367 Mflop/s
(15,12,14) <- (3,1,7).*(5, 11+1,2): 31.088175 Mflop/s

Testing m0 = 5, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 8 5 12 12 8 5 8
<<< (M = 5, K = 12, N = 8) : 30.481367
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 31.088175
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 11,2) :    30.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2574 (22.9%), 8676 (77.1%) left; Finishing by Sat Oct 21  6:29:27 2000

(8,12,8) <- (4,4,4).*(2, 2+1,2): 143.153541 Mflop/s
(14,21,14) <- (7,7,7).*(2, 2+1,2): 72.221198 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 143.153541
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 14 14 21 21 14 14 14
<<< (M = 14, K = 21, N = 14) : 72.221198
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 2,2) :    96.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2575 (22.9%), 8675 (77.1%) left; Finishing by Sat Oct 21  6:29:31 2000

(9,8,9) <- (9,1,1).*(1, 7+1,9): 108.041644 Mflop/s
(15,16,9) <- (15,2,1).*(1, 7+1,9): 132.054048 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 108.041644
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 9 15 16 16 9 15 9
<<< (M = 15, K = 16, N = 9) : 132.054048
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,9) :   118.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2576 (22.9%), 8674 (77.1%) left; Finishing by Sat Oct 21  6:29:25 2000

(9,12,16) <- (9,3,0).*(1, 3+1,16): 127.242866 Mflop/s
(15,20,16) <- (15,5,0).*(1, 3+1,16): 117.621454 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 16 9 12 12 16 9 16
<<< (M = 9, K = 12, N = 16) : 127.242866
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 16 15 20 20 16 15 16
<<< (M = 15, K = 20, N = 16) : 117.621454
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,16) :   122.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2577 (22.9%), 8673 (77.1%) left; Finishing by Sat Oct 21  6:29:24 2000

(8,10,6) <- (4,2,1).*(2, 4+1,6): 32.634113 Mflop/s
(14,15,12) <- (7,3,2).*(2, 4+1,6): 31.994555 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  4 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 6 8 10 10 6 8 6
<<< (M = 8, K = 10, N = 6) : 32.634113
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 31.994555
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 4,6) :    32.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2578 (22.9%), 8672 (77.1%) left; Finishing by Sat Oct 21  6:29:22 2000

(9,9,6) <- (9,1,1).*(1, 8+1,6): 131.289284 Mflop/s
(15,9,12) <- (15,1,2).*(1, 8+1,6): 139.369049 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 6 9 9 9 6 9 6
<<< (M = 9, K = 9, N = 6) : 131.289284
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 139.369049
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,6) :   135.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2579 (22.9%), 8671 (77.1%) left; Finishing by Sat Oct 21  6:29:26 2000

(9,16,5) <- (9,0,1).*(1, 15+1,5): 164.263550 Mflop/s
(15,16,15) <- (15,1,3).*(1, 15+1,5): 175.043728 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 5 9 16 16 5 9 5
<<< (M = 9, K = 16, N = 5) : 164.263550
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 175.043728
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,5) :   169.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2580 (22.9%), 8670 (77.1%) left; Finishing by Sat Oct 21  6:29:24 2000

(5,11,9) <- (1,0,9).*(5, 10+1,1): 57.980950 Mflop/s
(15,11,15) <- (3,1,15).*(5, 10+1,1): 82.146321 Mflop/s

Testing m0 = 5, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 11 9 5 11 11 9 5 9
<<< (M = 5, K = 11, N = 9) : 57.980950
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 82.146321
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 10,1) :    68.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2581 (22.9%), 8669 (77.1%) left; Finishing by Sat Oct 21  6:29:27 2000

(9,14,13) <- (9,0,0).*(1, 13+1,13): 111.848652 Mflop/s
(15,14,13) <- (15,1,1).*(1, 13+1,13): 112.428308 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 13 9 14 14 13 9 13
<<< (M = 9, K = 14, N = 13) : 111.848652
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 13 15 14 14 13 15 13
<<< (M = 15, K = 14, N = 13) : 112.428308
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,13) :   112.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2582 (23.0%), 8668 (77.0%) left; Finishing by Sat Oct 21  6:29:26 2000

(6,6,8) <- (1,1,4).*(6, 5+1,2): 96.986155 Mflop/s
(12,18,14) <- (2,3,7).*(6, 5+1,2): 92.219050 Mflop/s

Testing m0 = 6, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 6 8 6 6 6 8 6 8
<<< (M = 6, K = 6, N = 8) : 96.986155
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 14 12 18 18 14 12 14
<<< (M = 12, K = 18, N = 14) : 92.219050
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 5,2) :    94.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2583 (23.0%), 8667 (77.0%) left; Finishing by Sat Oct 21  6:29:29 2000

(8,7,6) <- (4,1,1).*(2, 6+1,6): 28.324874 Mflop/s
(14,14,12) <- (7,2,2).*(2, 6+1,6): 29.588497 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  6 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 6 8 7 7 6 8 6
<<< (M = 8, K = 7, N = 6) : 28.324874
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 29.588497
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 6,6) :    28.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2584 (23.0%), 8666 (77.0%) left; Finishing by Sat Oct 21  6:29:28 2000

(13,9,9) <- (0,1,9).*(13, 8+1,1): 81.445706 Mflop/s
(13,9,15) <- (1,1,15).*(13, 8+1,1): 81.996798 Mflop/s

Testing m0 = 13, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 13  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 9 9 13 9 9 9 13 9
<<< (M = 13, K = 9, N = 9) : 81.445706
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 9 15 13 9 9 15 13 15
<<< (M = 13, K = 9, N = 15) : 81.996798
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (13, 8,1) :    81.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2585 (23.0%), 8665 (77.0%) left; Finishing by Sat Oct 21  6:29:27 2000

(9,18,8) <- (3,9,4).*(3,1+1,2): 47.474174 Mflop/s
(15,30,14) <- (5,15,7).*(3,1+1,2): 39.493556 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 8 9 18 18 8 9 8
<<< (M = 9, K = 18, N = 8) : 47.474174
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 14 15 30 30 14 15 14
<<< (M = 15, K = 30, N = 14) : 39.493556
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3,1,2) :    43.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2586 (23.0%), 8664 (77.0%) left; Finishing by Sat Oct 21  6:29:21 2000

(9,12,15) <- (9,3,0).*(1, 3+1,15): 125.581966 Mflop/s
(15,20,15) <- (15,5,1).*(1, 3+1,15): 117.199788 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 125.581966
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 117.199788
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,15) :   121.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2587 (23.0%), 8663 (77.0%) left; Finishing by Sat Oct 21  6:29:20 2000

(12,7,9) <- (0,1,9).*(12, 6+1,1): 24.683855 Mflop/s
(12,14,15) <- (1,2,15).*(12, 6+1,1): 30.115118 Mflop/s

Testing m0 = 12, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 12  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 7 9 12 7 7 9 12 9
<<< (M = 12, K = 7, N = 9) : 24.683855
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 30.115118
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (12, 6,1) :    27.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2588 (23.0%), 8662 (77.0%) left; Finishing by Sat Oct 21  6:29:19 2000

(8,7,9) <- (1,1,9).*(8, 6+1,1): 66.016043 Mflop/s
(8,14,15) <- (1,2,15).*(8, 6+1,1): 82.599425 Mflop/s

Testing m0 = 8, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 66.016043
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 15 8 14 14 15 8 15
<<< (M = 8, K = 14, N = 15) : 82.599425
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 6,1) :    73.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2589 (23.0%), 8661 (77.0%) left; Finishing by Sat Oct 21  6:29:18 2000

(7,10,9) <- (1,1,9).*(7, 9+1,1): 34.081467 Mflop/s
(14,10,15) <- (2,1,15).*(7, 9+1,1): 38.005231 Mflop/s

Testing m0 = 7, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 10 9 7 10 10 9 7 9
<<< (M = 7, K = 10, N = 9) : 34.081467
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 38.005231
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 9,1) :    35.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2590 (23.0%), 8660 (77.0%) left; Finishing by Sat Oct 21  6:29:16 2000

(13,8,9) <- (0,1,9).*(13, 7+1,1): 77.099413 Mflop/s
(13,16,15) <- (1,2,15).*(13, 7+1,1): 109.971193 Mflop/s

Testing m0 = 13, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 13  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 8 9 13 8 8 9 13 9
<<< (M = 13, K = 8, N = 9) : 77.099413
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 16 15 13 16 16 15 13 15
<<< (M = 13, K = 16, N = 15) : 109.971193
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (13, 7,1) :    90.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2591 (23.0%), 8659 (77.0%) left; Finishing by Sat Oct 21  6:29:15 2000

(8,12,6) <- (4,3,1).*(2, 3+1,6): 35.818245 Mflop/s
(14,20,12) <- (7,5,2).*(2, 3+1,6): 29.884105 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  3 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 6 8 12 12 6 8 6
<<< (M = 8, K = 12, N = 6) : 35.818245
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 12 14 20 20 12 14 12
<<< (M = 14, K = 20, N = 12) : 29.884105
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 3,6) :    32.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2592 (23.0%), 8658 (77.0%) left; Finishing by Sat Oct 21  6:29:14 2000

(13,7,9) <- (0,1,9).*(13, 6+1,1): 74.019641 Mflop/s
(13,14,15) <- (1,2,15).*(13, 6+1,1): 108.809604 Mflop/s

Testing m0 = 13, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 13  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 7 9 13 7 7 9 13 9
<<< (M = 13, K = 7, N = 9) : 74.019641
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 15 13 14 14 15 13 15
<<< (M = 13, K = 14, N = 15) : 108.809604
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (13, 6,1) :    88.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2593 (23.0%), 8657 (77.0%) left; Finishing by Sat Oct 21  6:29:08 2000

(8,14,8) <- (4,0,4).*(2, 13+1,2): 138.356810 Mflop/s
(14,14,14) <- (7,1,7).*(2, 13+1,2): 76.432648 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 138.356810
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 76.432648
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 13,2) :    98.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 15,3) :   205.0 MFLOPS.
Done 2594 (23.1%), 8656 (76.9%) left; Finishing by Sat Oct 21  6:29:11 2000

(9,10,9) <- (9,2,3).*(1, 4+1,3): 194.022073 Mflop/s
(15,15,15) <- (15,3,5).*(1, 4+1,3): 225.545077 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 194.022073
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 225.545077
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,3) :   208.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2595 (23.1%), 8655 (76.9%) left; Finishing by Sat Oct 21  6:29:15 2000

(9,10,11) <- (9,2,0).*(1, 4+1,11): 120.943056 Mflop/s
(15,15,11) <- (15,3,1).*(1, 4+1,11): 132.345381 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 11 9 10 10 11 9 11
<<< (M = 9, K = 10, N = 11) : 120.943056
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 11 15 15 15 11 15 11
<<< (M = 15, K = 15, N = 11) : 132.345381
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,11) :   126.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2596 (23.1%), 8654 (76.9%) left; Finishing by Sat Oct 21  6:29:13 2000

(9,11,9) <- (9,0,9).*(1, 10+1,1): 128.780187 Mflop/s
(15,11,15) <- (15,1,15).*(1, 10+1,1): 133.641177 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 128.780187
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 133.641177
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,1) :   131.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2597 (23.1%), 8653 (76.9%) left; Finishing by Sat Oct 21  6:29:12 2000

(13,12,9) <- (0,0,9).*(13, 11+1,1): 85.429792 Mflop/s
(13,12,15) <- (1,1,15).*(13, 11+1,1): 100.235876 Mflop/s

Testing m0 = 13, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 13  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 9 13 12 12 9 13 9
<<< (M = 13, K = 12, N = 9) : 85.429792
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 15 13 12 12 15 13 15
<<< (M = 13, K = 12, N = 15) : 100.235876
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (13, 11,1) :    92.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2598 (23.1%), 8652 (76.9%) left; Finishing by Sat Oct 21  6:29:11 2000

(8,18,9) <- (2,9,9).*(4,1+1,1): 97.921483 Mflop/s
(12,30,15) <- (3,15,15).*(4,1+1,1): 104.104268 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 9 8 18 18 9 8 9
<<< (M = 8, K = 18, N = 9) : 97.921483
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 30 15 12 30 30 15 12 15
<<< (M = 12, K = 30, N = 15) : 104.104268
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4,1,1) :   100.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2599 (23.1%), 8651 (76.9%) left; Finishing by Sat Oct 21  6:29:10 2000

(9,18,8) <- (9,9,2).*(1,1+1,4): 139.454066 Mflop/s
(15,30,12) <- (15,15,3).*(1,1+1,4): 150.072690 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 8 9 18 18 8 9 8
<<< (M = 9, K = 18, N = 8) : 139.454066
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 12 15 30 30 12 15 12
<<< (M = 15, K = 30, N = 12) : 150.072690
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,4) :   144.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2600 (23.1%), 8650 (76.9%) left; Finishing by Sat Oct 21  6:29:08 2000

(6,8,9) <- (1,1,9).*(6, 7+1,1): 97.790031 Mflop/s
(12,16,15) <- (2,2,15).*(6, 7+1,1): 84.934184 Mflop/s

Testing m0 = 6, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 9 6 8 8 9 6 9
<<< (M = 6, K = 8, N = 9) : 97.790031
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 84.934184
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 7,1) :    90.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2601 (23.1%), 8649 (76.9%) left; Finishing by Sat Oct 21  6:29:12 2000

(9,9,9) <- (9,1,1).*(1, 8+1,9): 111.383766 Mflop/s
(15,9,9) <- (15,1,1).*(1, 8+1,9): 113.531884 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 111.383766
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 9 15 9 9 9 15 9
<<< (M = 15, K = 9, N = 9) : 113.531884
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,9) :   112.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2602 (23.1%), 8648 (76.9%) left; Finishing by Sat Oct 21  6:29:15 2000

(16,18,9) <- (0,9,9).*(16,1+1,1): 20.216238 Mflop/s
(16,30,15) <- (0,15,15).*(16,1+1,1): 22.003962 Mflop/s

Testing m0 = 16, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 16 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 18 9 16 18 18 9 16 9
<<< (M = 16, K = 18, N = 9) : 20.216238
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 30 15 16 30 30 15 16 15
<<< (M = 16, K = 30, N = 15) : 22.003962
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (16,1,1) :    21.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2603 (23.1%), 8647 (76.9%) left; Finishing by Sat Oct 21  6:29:13 2000

(9,18,8) <- (9,9,1).*(1,1+1,8): 118.863439 Mflop/s
(15,30,8) <- (15,15,1).*(1,1+1,8): 126.195050 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 8 9 18 18 8 9 8
<<< (M = 9, K = 18, N = 8) : 118.863439
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 8 15 30 30 8 15 8
<<< (M = 15, K = 30, N = 8) : 126.195050
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,8) :   122.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2604 (23.1%), 8646 (76.9%) left; Finishing by Sat Oct 21  6:29:08 2000

(9,6,9) <- (3,1,3).*(3, 5+1,3): 107.484303 Mflop/s
(15,18,15) <- (5,3,5).*(3, 5+1,3): 149.227646 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 107.484303
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 149.227646
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 5,3) :   125.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2605 (23.2%), 8645 (76.8%) left; Finishing by Sat Oct 21  6:29:11 2000

(9,11,8) <- (9,0,4).*(1, 10+1,2): 174.512327 Mflop/s
(15,11,14) <- (15,1,7).*(1, 10+1,2): 177.389457 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 174.512327
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 177.389457
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,2) :   175.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2606 (23.2%), 8644 (76.8%) left; Finishing by Sat Oct 21  6:29:14 2000

(9,18,9) <- (3,9,3).*(3,1+1,3): 31.677295 Mflop/s
(15,30,15) <- (5,15,5).*(3,1+1,3): 29.913924 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 9 9 18 18 9 9 9
<<< (M = 9, K = 18, N = 9) : 31.677295
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 29.913924
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3,1,3) :    30.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2607 (23.2%), 8643 (76.8%) left; Finishing by Sat Oct 21  6:29:13 2000

(9,9,13) <- (9,1,0).*(1, 8+1,13): 105.740605 Mflop/s
(15,9,13) <- (15,1,1).*(1, 8+1,13): 105.920780 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 13 9 9 9 13 9 13
<<< (M = 9, K = 9, N = 13) : 105.740605
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 13 15 9 9 13 15 13
<<< (M = 15, K = 9, N = 13) : 105.920780
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,13) :   105.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2608 (23.2%), 8642 (76.8%) left; Finishing by Sat Oct 21  6:29:07 2000

(8,10,9) <- (2,2,9).*(4, 4+1,1): 70.106487 Mflop/s
(12,15,15) <- (3,3,15).*(4, 4+1,1): 127.991724 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 70.106487
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 127.991724
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 4,1) :    90.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2609 (23.2%), 8641 (76.8%) left; Finishing by Sat Oct 21  6:29:06 2000

(8,12,8) <- (2,3,2).*(4, 3+1,4): 72.163230 Mflop/s
(12,20,12) <- (3,5,3).*(4, 3+1,4): 120.779860 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 72.163230
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 20 12 12 20 20 12 12 12
<<< (M = 12, K = 20, N = 12) : 120.779860
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 3,4) :    90.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2610 (23.2%), 8640 (76.8%) left; Finishing by Sat Oct 21  6:29:05 2000

(9,15,8) <- (9,0,2).*(1, 14+1,4): 183.435170 Mflop/s
(15,15,12) <- (15,1,3).*(1, 14+1,4): 188.801838 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 183.435170
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 188.801838
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,4) :   186.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2611 (23.2%), 8639 (76.8%) left; Finishing by Sat Oct 21  6:29:04 2000

(8,12,6) <- (4,0,1).*(2, 11+1,6): 30.211551 Mflop/s
(14,12,12) <- (7,1,2).*(2, 11+1,6): 27.102347 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  11 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 6 8 12 12 6 8 6
<<< (M = 8, K = 12, N = 6) : 30.211551
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 27.102347
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 11,6) :    28.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2612 (23.2%), 8638 (76.8%) left; Finishing by Sat Oct 21  6:29:02 2000

(9,12,8) <- (9,3,1).*(1, 3+1,8): 135.639690 Mflop/s
(15,20,8) <- (15,5,1).*(1, 3+1,8): 124.576809 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 135.639690
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 8 15 20 20 8 15 8
<<< (M = 15, K = 20, N = 8) : 124.576809
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,8) :   129.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2613 (23.2%), 8637 (76.8%) left; Finishing by Sat Oct 21  6:29:01 2000

(9,7,9) <- (3,1,9).*(3, 6+1,1): 137.154947 Mflop/s
(15,14,15) <- (5,2,15).*(3, 6+1,1): 178.138032 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 137.154947
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 178.138032
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 6,1) :   155.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2614 (23.2%), 8636 (76.8%) left; Finishing by Sat Oct 21  6:29:04 2000

(9,12,7) <- (9,4,1).*(1, 2+1,7): 133.595371 Mflop/s
(15,21,14) <- (15,7,2).*(1, 2+1,7): 133.783882 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 7 9 12 12 7 9 7
<<< (M = 9, K = 12, N = 7) : 133.595371
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 14 15 21 21 14 15 14
<<< (M = 15, K = 21, N = 14) : 133.783882
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,7) :   133.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2615 (23.2%), 8635 (76.8%) left; Finishing by Sat Oct 21  6:29:07 2000

(15,12,9) <- (0,3,9).*(15, 3+1,1): 90.961766 Mflop/s
(15,20,15) <- (1,5,15).*(15, 3+1,1): 87.451464 Mflop/s

Testing m0 = 15, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 15  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 90.961766
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 87.451464
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (15, 3,1) :    89.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2616 (23.3%), 8634 (76.7%) left; Finishing by Sat Oct 21  6:29:06 2000

(8,7,8) <- (2,1,2).*(4, 6+1,4): 55.711934 Mflop/s
(12,14,12) <- (3,2,3).*(4, 6+1,4): 111.422189 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 55.711934
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 12 12 14 14 12 12 12
<<< (M = 12, K = 14, N = 12) : 111.422189
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 6,4) :    74.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2617 (23.3%), 8633 (76.7%) left; Finishing by Sat Oct 21  6:29:01 2000

(8,8,8) <- (4,1,1).*(2, 7+1,8): 27.697624 Mflop/s
(14,16,8) <- (7,2,1).*(2, 7+1,8): 31.655400 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  7 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 27.697624
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 8 14 16 16 8 14 8
<<< (M = 14, K = 16, N = 8) : 31.655400
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 7,8) :    29.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2618 (23.3%), 8632 (76.7%) left; Finishing by Sat Oct 21  6:29:00 2000

(9,12,14) <- (9,3,0).*(1, 3+1,14): 127.128866 Mflop/s
(15,20,14) <- (15,5,1).*(1, 3+1,14): 117.513709 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 14 9 12 12 14 9 14
<<< (M = 9, K = 12, N = 14) : 127.128866
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 14 15 20 20 14 15 14
<<< (M = 15, K = 20, N = 14) : 117.513709
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,14) :   122.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2619 (23.3%), 8631 (76.7%) left; Finishing by Sat Oct 21  6:28:58 2000

(7,12,9) <- (1,3,9).*(7, 3+1,1): 40.523367 Mflop/s
(14,20,15) <- (2,5,15).*(7, 3+1,1): 41.997313 Mflop/s

Testing m0 = 7, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 9 7 12 12 9 7 9
<<< (M = 7, K = 12, N = 9) : 40.523367
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 15 14 20 20 15 14 15
<<< (M = 14, K = 20, N = 15) : 41.997313
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 3,1) :    41.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2620 (23.3%), 8630 (76.7%) left; Finishing by Sat Oct 21  6:28:57 2000

(9,16,8) <- (9,0,4).*(1, 15+1,2): 193.010908 Mflop/s
(15,16,14) <- (15,1,7).*(1, 15+1,2): 196.573015 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 193.010908
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 196.573015
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,2) :   194.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2621 (23.3%), 8629 (76.7%) left; Finishing by Sat Oct 21  6:28:52 2000

(9,12,9) <- (3,3,3).*(3, 3+1,3): 146.413978 Mflop/s
(15,20,15) <- (5,5,5).*(3, 3+1,3): 136.680200 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 146.413978
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 136.680200
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 3,3) :   141.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2622 (23.3%), 8628 (76.7%) left; Finishing by Sat Oct 21  6:28:50 2000

(8,12,9) <- (4,4,3).*(2, 2+1,3): 51.310353 Mflop/s
(14,21,15) <- (7,7,5).*(2, 2+1,3): 36.675472 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 51.310353
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 15 14 21 21 15 14 15
<<< (M = 14, K = 21, N = 15) : 36.675472
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 2,3) :    42.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2623 (23.3%), 8627 (76.7%) left; Finishing by Sat Oct 21  6:28:49 2000

(9,6,8) <- (3,1,2).*(3, 5+1,4): 110.622330 Mflop/s
(15,18,12) <- (5,3,3).*(3, 5+1,4): 151.834404 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 110.622330
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 151.834404
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 5,4) :   128.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2624 (23.3%), 8626 (76.7%) left; Finishing by Sat Oct 21  6:28:48 2000

(9,14,9) <- (1,0,9).*(9, 13+1,1): 29.204941 Mflop/s
(9,14,15) <- (1,1,15).*(9, 13+1,1): 29.215687 Mflop/s

Testing m0 = 9, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 9  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 29.204941
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 29.215687
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (9, 13,1) :    29.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2625 (23.3%), 8625 (76.7%) left; Finishing by Sat Oct 21  6:28:51 2000

(7,7,8) <- (1,1,4).*(7, 6+1,2): 22.253636 Mflop/s
(14,14,14) <- (2,2,7).*(7, 6+1,2): 29.553437 Mflop/s

Testing m0 = 7, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 7 8 7 7 7 8 7 8
<<< (M = 7, K = 7, N = 8) : 22.253636
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 29.553437
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 6,2) :    25.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2626 (23.3%), 8624 (76.7%) left; Finishing by Sat Oct 21  6:28:46 2000

(9,10,16) <- (9,1,0).*(1, 9+1,16): 103.806095 Mflop/s
(15,10,16) <- (15,1,0).*(1, 9+1,16): 103.691326 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 16 9 10 10 16 9 16
<<< (M = 9, K = 10, N = 16) : 103.806095
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 16 15 10 10 16 15 16
<<< (M = 15, K = 10, N = 16) : 103.691326
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,16) :   103.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2627 (23.4%), 8623 (76.6%) left; Finishing by Sat Oct 21  6:28:44 2000

(9,10,9) <- (3,2,3).*(3, 4+1,3): 132.674344 Mflop/s
(15,15,15) <- (5,3,5).*(3, 4+1,3): 148.924189 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 132.674344
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 148.924189
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 4,3) :   140.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2628 (23.4%), 8622 (76.6%) left; Finishing by Sat Oct 21  6:28:47 2000

(14,11,9) <- (0,0,9).*(14, 10+1,1): 25.385013 Mflop/s
(14,11,15) <- (1,1,15).*(14, 10+1,1): 28.330370 Mflop/s

Testing m0 = 14, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 14  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 9 14 11 11 9 14 9
<<< (M = 14, K = 11, N = 9) : 25.385013
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 28.330370
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (14, 10,1) :    26.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2629 (23.4%), 8621 (76.6%) left; Finishing by Sat Oct 21  6:28:46 2000

(16,15,9) <- (0,0,9).*(16, 14+1,1): 25.963776 Mflop/s
(16,15,15) <- (0,1,15).*(16, 14+1,1): 27.867995 Mflop/s

Testing m0 = 16, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 16  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 9 16 15 15 9 16 9
<<< (M = 16, K = 15, N = 9) : 25.963776
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 15 16 15 15 15 16 15
<<< (M = 16, K = 15, N = 15) : 27.867995
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (16, 14,1) :    26.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2630 (23.4%), 8620 (76.6%) left; Finishing by Sat Oct 21  6:28:49 2000

(9,9,5) <- (9,1,1).*(1, 8+1,5): 138.902570 Mflop/s
(15,9,15) <- (15,1,3).*(1, 8+1,5): 155.306658 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 138.902570
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 155.306658
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,5) :   146.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2631 (23.4%), 8619 (76.6%) left; Finishing by Sat Oct 21  6:28:48 2000

(8,8,8) <- (2,1,4).*(4, 7+1,2): 28.555151 Mflop/s
(12,16,14) <- (3,2,7).*(4, 7+1,2): 34.982488 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 28.555151
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 14 12 16 16 14 12 14
<<< (M = 12, K = 16, N = 14) : 34.982488
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 7,2) :    31.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2632 (23.4%), 8618 (76.6%) left; Finishing by Sat Oct 21  6:28:47 2000

(9,10,15) <- (9,2,0).*(1, 4+1,15): 115.695874 Mflop/s
(15,15,15) <- (15,3,1).*(1, 4+1,15): 128.507077 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 15 9 10 10 15 9 15
<<< (M = 9, K = 10, N = 15) : 115.695874
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 128.507077
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,15) :   121.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2633 (23.4%), 8617 (76.6%) left; Finishing by Sat Oct 21  6:28:46 2000

(8,10,9) <- (4,1,9).*(2, 9+1,1): 143.948292 Mflop/s
(14,10,15) <- (7,1,15).*(2, 9+1,1): 145.608109 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 143.948292
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 145.608109
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 9,1) :   144.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2634 (23.4%), 8616 (76.6%) left; Finishing by Sat Oct 21  6:28:49 2000

(14,12,9) <- (0,4,9).*(14, 2+1,1): 26.031222 Mflop/s
(14,21,15) <- (1,7,15).*(14, 2+1,1): 25.895329 Mflop/s

Testing m0 = 14, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 14  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 9 14 12 12 9 14 9
<<< (M = 14, K = 12, N = 9) : 26.031222
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 15 14 21 21 15 14 15
<<< (M = 14, K = 21, N = 15) : 25.895329
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (14, 2,1) :    26.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2635 (23.4%), 8615 (76.6%) left; Finishing by Sat Oct 21  6:28:48 2000

(8,13,9) <- (2,0,9).*(4, 12+1,1): 74.667672 Mflop/s
(12,13,15) <- (3,1,15).*(4, 12+1,1): 128.356621 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 74.667672
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 128.356621
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 12,1) :    94.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2636 (23.4%), 8614 (76.6%) left; Finishing by Sat Oct 21  6:28:42 2000

(8,16,9) <- (4,0,9).*(2, 15+1,1): 180.334124 Mflop/s
(14,16,15) <- (7,1,15).*(2, 15+1,1): 183.642152 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 180.334124
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 183.642152
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 15,1) :   182.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2637 (23.4%), 8613 (76.6%) left; Finishing by Sat Oct 21  6:28:41 2000

(8,10,8) <- (2,1,4).*(4, 9+1,2): 29.540799 Mflop/s
(12,10,14) <- (3,1,7).*(4, 9+1,2): 31.689239 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 29.540799
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 14 12 10 10 14 12 14
<<< (M = 12, K = 10, N = 14) : 31.689239
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 9,2) :    30.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2638 (23.4%), 8612 (76.6%) left; Finishing by Sat Oct 21  6:28:40 2000

(9,18,5) <- (9,9,1).*(1,1+1,5): 124.503834 Mflop/s
(15,30,15) <- (15,15,3).*(1,1+1,5): 133.810754 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 5 9 18 18 5 9 5
<<< (M = 9, K = 18, N = 5) : 124.503834
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 133.810754
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,5) :   129.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2639 (23.5%), 8611 (76.5%) left; Finishing by Sat Oct 21  6:28:39 2000

(9,10,7) <- (9,1,1).*(1, 9+1,7): 125.781456 Mflop/s
(15,10,14) <- (15,1,2).*(1, 9+1,7): 130.784749 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 7 9 10 10 7 9 7
<<< (M = 9, K = 10, N = 7) : 125.781456
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 130.784749
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,7) :   128.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2640 (23.5%), 8610 (76.5%) left; Finishing by Sat Oct 21  6:28:46 2000

(9,12,12) <- (9,0,0).*(1, 11+1,12): 113.064893 Mflop/s
(15,12,12) <- (15,1,1).*(1, 11+1,12): 113.558455 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 12 9 12 12 12 9 12
<<< (M = 9, K = 12, N = 12) : 113.064893
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 113.558455
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,12) :   113.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2641 (23.5%), 8609 (76.5%) left; Finishing by Sat Oct 21  6:28:45 2000

(8,11,9) <- (4,0,9).*(2, 10+1,1): 151.068570 Mflop/s
(14,11,15) <- (7,1,15).*(2, 10+1,1): 155.190492 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 151.068570
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 155.190492
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 10,1) :   153.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2642 (23.5%), 8608 (76.5%) left; Finishing by Sat Oct 21  6:28:44 2000

(7,10,9) <- (1,2,9).*(7, 4+1,1): 37.268924 Mflop/s
(14,15,15) <- (2,3,15).*(7, 4+1,1): 44.379800 Mflop/s

Testing m0 = 7, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 10 9 7 10 10 9 7 9
<<< (M = 7, K = 10, N = 9) : 37.268924
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 44.379800
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 4,1) :    40.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2643 (23.5%), 8607 (76.5%) left; Finishing by Sat Oct 21  6:28:38 2000

(9,18,12) <- (9,9,0).*(1,1+1,12): 23.494595 Mflop/s
(15,30,12) <- (15,15,1).*(1,1+1,12): 25.018009 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 12 9 18 18 12 9 12
<<< (M = 9, K = 18, N = 12) : 23.494595
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 12 15 30 30 12 15 12
<<< (M = 15, K = 30, N = 12) : 25.018009
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,12) :    24.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2644 (23.5%), 8606 (76.5%) left; Finishing by Sat Oct 21  6:28:37 2000

(15,14,9) <- (0,0,9).*(15, 13+1,1): 89.870789 Mflop/s
(15,14,15) <- (1,1,15).*(15, 13+1,1): 107.380360 Mflop/s

Testing m0 = 15, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 15  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 89.870789
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 107.380360
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (15, 13,1) :    97.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2645 (23.5%), 8605 (76.5%) left; Finishing by Sat Oct 21  6:28:36 2000

(9,18,9) <- (9,9,3).*(1,1+1,3): 129.673278 Mflop/s
(15,30,15) <- (15,15,5).*(1,1+1,3): 137.628908 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 9 9 18 18 9 9 9
<<< (M = 9, K = 18, N = 9) : 129.673278
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 137.628908
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,3) :   133.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2646 (23.5%), 8604 (76.5%) left; Finishing by Sat Oct 21  6:28:35 2000

(11,12,9) <- (0,4,9).*(11, 2+1,1): 82.817070 Mflop/s
(11,21,15) <- (1,7,15).*(11, 2+1,1): 81.392241 Mflop/s

Testing m0 = 11, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 11  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 9 11 12 12 9 11 9
<<< (M = 11, K = 12, N = 9) : 82.817070
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 21 15 11 21 21 15 11 15
<<< (M = 11, K = 21, N = 15) : 81.392241
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (11, 2,1) :    82.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2647 (23.5%), 8603 (76.5%) left; Finishing by Sat Oct 21  6:28:33 2000

(8,8,9) <- (2,1,9).*(4, 7+1,1): 64.710416 Mflop/s
(12,16,15) <- (3,2,15).*(4, 7+1,1): 139.071072 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 64.710416
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 139.071072
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 7,1) :    88.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2648 (23.5%), 8602 (76.5%) left; Finishing by Sat Oct 21  6:28:32 2000

(9,11,8) <- (9,0,2).*(1, 10+1,4): 169.238367 Mflop/s
(15,11,12) <- (15,1,3).*(1, 10+1,4): 176.817244 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 169.238367
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 176.817244
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,4) :   172.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2649 (23.5%), 8601 (76.5%) left; Finishing by Sat Oct 21  6:28:31 2000

(8,12,7) <- (4,0,1).*(2, 11+1,7): 29.753380 Mflop/s
(14,12,14) <- (7,1,2).*(2, 11+1,7): 29.243575 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  11 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 7 8 12 12 7 8 7
<<< (M = 8, K = 12, N = 7) : 29.753380
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 29.243575
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 11,7) :    29.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2650 (23.6%), 8600 (76.4%) left; Finishing by Sat Oct 21  6:28:30 2000

(12,8,9) <- (0,1,9).*(12, 7+1,1): 25.564633 Mflop/s
(12,16,15) <- (1,2,15).*(12, 7+1,1): 30.549022 Mflop/s

Testing m0 = 12, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 12  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 9 12 8 8 9 12 9
<<< (M = 12, K = 8, N = 9) : 25.564633
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 30.549022
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (12, 7,1) :    27.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2651 (23.6%), 8599 (76.4%) left; Finishing by Sat Oct 21  6:28:29 2000

(8,12,9) <- (1,4,9).*(8, 2+1,1): 33.260629 Mflop/s
(8,21,15) <- (1,7,15).*(8, 2+1,1): 31.976420 Mflop/s

Testing m0 = 8, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 33.260629
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 21 15 8 21 21 15 8 15
<<< (M = 8, K = 21, N = 15) : 31.976420
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 2,1) :    32.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2652 (23.6%), 8598 (76.4%) left; Finishing by Sat Oct 21  6:28:27 2000

(8,11,9) <- (2,0,3).*(4, 10+1,3): 27.910325 Mflop/s
(12,11,15) <- (3,1,5).*(4, 10+1,3): 29.505307 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 27.910325
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 29.505307
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 10,3) :    28.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2653 (23.6%), 8597 (76.4%) left; Finishing by Sat Oct 21  6:28:30 2000

(8,14,9) <- (4,0,3).*(2, 13+1,3): 49.490377 Mflop/s
(14,14,15) <- (7,1,5).*(2, 13+1,3): 36.798325 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 49.490377
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 36.798325
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 13,3) :    42.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2654 (23.6%), 8596 (76.4%) left; Finishing by Sat Oct 21  6:28:25 2000

(8,9,8) <- (4,1,2).*(2, 8+1,4): 33.891008 Mflop/s
(14,9,12) <- (7,1,3).*(2, 8+1,4): 34.901867 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 33.891008
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 12 14 9 9 12 14 12
<<< (M = 14, K = 9, N = 12) : 34.901867
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 8,4) :    34.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2655 (23.6%), 8595 (76.4%) left; Finishing by Sat Oct 21  6:28:24 2000

(9,18,9) <- (1,9,9).*(9,1+1,1): 55.472010 Mflop/s
(9,30,15) <- (1,15,15).*(9,1+1,1): 56.905885 Mflop/s

Testing m0 = 9, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 9 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 9 9 18 18 9 9 9
<<< (M = 9, K = 18, N = 9) : 55.472010
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 30 15 9 30 30 15 9 15
<<< (M = 9, K = 30, N = 15) : 56.905885
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (9,1,1) :    56.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2656 (23.6%), 8594 (76.4%) left; Finishing by Sat Oct 21  6:28:23 2000

(8,16,6) <- (4,0,1).*(2, 15+1,6): 30.944291 Mflop/s
(14,16,12) <- (7,1,2).*(2, 15+1,6): 27.681130 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  15 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 6 8 16 16 6 8 6
<<< (M = 8, K = 16, N = 6) : 30.944291
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 12 14 16 16 12 14 12
<<< (M = 14, K = 16, N = 12) : 27.681130
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 15,6) :    29.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2657 (23.6%), 8593 (76.4%) left; Finishing by Sat Oct 21  6:28:21 2000

(9,13,9) <- (9,0,3).*(1, 12+1,3): 194.636799 Mflop/s
(15,13,15) <- (15,1,5).*(1, 12+1,3): 195.823523 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 194.636799
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 195.823523
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,3) :   195.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2658 (23.6%), 8592 (76.4%) left; Finishing by Sat Oct 21  6:28:25 2000

(7,10,8) <- (1,1,4).*(7, 9+1,2): 24.043323 Mflop/s
(14,10,14) <- (2,1,7).*(7, 9+1,2): 27.548610 Mflop/s

Testing m0 = 7, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 10 8 7 10 10 8 7 8
<<< (M = 7, K = 10, N = 8) : 24.043323
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 14 14 10 10 14 14 14
<<< (M = 14, K = 10, N = 14) : 27.548610
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 9,2) :    25.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2659 (23.6%), 8591 (76.4%) left; Finishing by Sat Oct 21  6:28:28 2000

(9,8,9) <- (3,1,3).*(3, 7+1,3): 113.508250 Mflop/s
(15,16,15) <- (5,2,5).*(3, 7+1,3): 137.898680 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 113.508250
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 137.898680
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 7,3) :   124.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2660 (23.6%), 8590 (76.4%) left; Finishing by Sat Oct 21  6:28:26 2000

(8,12,8) <- (1,0,4).*(8, 11+1,2): 104.528892 Mflop/s
(8,12,14) <- (1,1,7).*(8, 11+1,2): 105.341529 Mflop/s

Testing m0 = 8, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 104.528892
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 14 8 12 12 14 8 14
<<< (M = 8, K = 12, N = 14) : 105.341529
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 11,2) :   104.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2661 (23.7%), 8589 (76.3%) left; Finishing by Sat Oct 21  6:28:25 2000

(9,14,7) <- (9,0,1).*(1, 13+1,7): 136.544728 Mflop/s
(15,14,14) <- (15,1,2).*(1, 13+1,7): 140.594484 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 7 9 14 14 7 9 7
<<< (M = 9, K = 14, N = 7) : 136.544728
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 140.594484
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,7) :   138.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2662 (23.7%), 8588 (76.3%) left; Finishing by Sat Oct 21  6:28:28 2000

(8,7,7) <- (4,1,1).*(2, 6+1,7): 27.645213 Mflop/s
(14,14,14) <- (7,2,2).*(2, 6+1,7): 31.922707 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  6 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 7 8 7 7 7 8 7
<<< (M = 8, K = 7, N = 7) : 27.645213
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 31.922707
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 6,7) :    29.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2663 (23.7%), 8587 (76.3%) left; Finishing by Sat Oct 21  6:28:27 2000

(9,11,8) <- (9,0,1).*(1, 10+1,8): 115.347788 Mflop/s
(15,11,8) <- (15,1,1).*(1, 10+1,8): 117.008475 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 115.347788
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 8 15 11 11 8 15 8
<<< (M = 15, K = 11, N = 8) : 117.008475
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,8) :   116.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2664 (23.7%), 8586 (76.3%) left; Finishing by Sat Oct 21  6:28:26 2000

(9,6,8) <- (9,1,4).*(1, 5+1,2): 136.432800 Mflop/s
(15,18,14) <- (15,3,7).*(1, 5+1,2): 200.963818 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 136.432800
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 200.963818
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,2) :   162.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2665 (23.7%), 8585 (76.3%) left; Finishing by Sat Oct 21  6:28:25 2000

(14,16,9) <- (0,0,9).*(14, 15+1,1): 82.860242 Mflop/s
(14,16,15) <- (1,1,15).*(14, 15+1,1): 103.303763 Mflop/s

Testing m0 = 14, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 14  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 9 14 16 16 9 14 9
<<< (M = 14, K = 16, N = 9) : 82.860242
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 103.303763
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (14, 15,1) :    92.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2666 (23.7%), 8584 (76.3%) left; Finishing by Sat Oct 21  6:28:28 2000

(9,10,9) <- (3,2,9).*(3, 4+1,1): 162.992407 Mflop/s
(15,15,15) <- (5,3,15).*(3, 4+1,1): 193.040796 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 162.992407
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 193.040796
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 4,1) :   176.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2667 (23.7%), 8583 (76.3%) left; Finishing by Sat Oct 21  6:28:31 2000

(8,12,8) <- (2,0,2).*(4, 11+1,4): 24.433953 Mflop/s
(12,12,12) <- (3,1,3).*(4, 11+1,4): 28.828824 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 24.433953
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 12 12 12 12 12 12 12
<<< (M = 12, K = 12, N = 12) : 28.828824
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 11,4) :    26.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2668 (23.7%), 8582 (76.3%) left; Finishing by Sat Oct 21  6:28:30 2000

(14,13,9) <- (0,0,9).*(14, 12+1,1): 25.259489 Mflop/s
(14,13,15) <- (1,1,15).*(14, 12+1,1): 29.094887 Mflop/s

Testing m0 = 14, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 14  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 9 14 13 13 9 14 9
<<< (M = 14, K = 13, N = 9) : 25.259489
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 29.094887
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (14, 12,1) :    27.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2669 (23.7%), 8581 (76.3%) left; Finishing by Sat Oct 21  6:28:29 2000

(5,14,8) <- (1,0,4).*(5, 13+1,2): 31.032674 Mflop/s
(15,14,14) <- (3,1,7).*(5, 13+1,2): 31.436676 Mflop/s

Testing m0 = 5, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 14 8 5 14 14 8 5 8
<<< (M = 5, K = 14, N = 8) : 31.032674
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 31.436676
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 13,2) :    31.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2670 (23.7%), 8580 (76.3%) left; Finishing by Sat Oct 21  6:28:27 2000

(11,6,9) <- (0,1,9).*(11, 5+1,1): 69.479798 Mflop/s
(11,18,15) <- (1,3,15).*(11, 5+1,1): 115.316093 Mflop/s

Testing m0 = 11, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 11  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 6 9 11 6 6 9 11 9
<<< (M = 11, K = 6, N = 9) : 69.479798
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 18 15 11 18 18 15 11 15
<<< (M = 11, K = 18, N = 15) : 115.316093
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (11, 5,1) :    86.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2671 (23.7%), 8579 (76.3%) left; Finishing by Sat Oct 21  6:28:26 2000

(8,12,9) <- (4,3,9).*(2, 3+1,1): 150.032140 Mflop/s
(14,20,15) <- (7,5,15).*(2, 3+1,1): 139.403932 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 150.032140
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 15 14 20 20 15 14 15
<<< (M = 14, K = 20, N = 15) : 139.403932
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 3,1) :   144.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2672 (23.8%), 8578 (76.2%) left; Finishing by Sat Oct 21  6:28:25 2000

(7,16,9) <- (1,0,9).*(7, 15+1,1): 35.972653 Mflop/s
(14,16,15) <- (2,1,15).*(7, 15+1,1): 40.435522 Mflop/s

Testing m0 = 7, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 16 9 7 16 16 9 7 9
<<< (M = 7, K = 16, N = 9) : 35.972653
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 40.435522
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 15,1) :    38.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2673 (23.8%), 8577 (76.2%) left; Finishing by Sat Oct 21  6:28:24 2000

(8,8,9) <- (1,1,9).*(8, 7+1,1): 63.313060 Mflop/s
(8,16,15) <- (1,2,15).*(8, 7+1,1): 76.477404 Mflop/s

Testing m0 = 8, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 63.313060
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 15 8 16 16 15 8 15
<<< (M = 8, K = 16, N = 15) : 76.477404
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 7,1) :    69.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2674 (23.8%), 8576 (76.2%) left; Finishing by Sat Oct 21  6:28:18 2000

(5,16,9) <- (1,0,3).*(5, 15+1,3): 28.887982 Mflop/s
(15,16,15) <- (3,1,5).*(5, 15+1,3): 29.986005 Mflop/s

Testing m0 = 5, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 16 9 5 16 16 9 5 9
<<< (M = 5, K = 16, N = 9) : 28.887982
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 29.986005
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 15,3) :    29.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2675 (23.8%), 8575 (76.2%) left; Finishing by Sat Oct 21  6:28:21 2000

(8,16,7) <- (4,0,1).*(2, 15+1,7): 30.389812 Mflop/s
(14,16,14) <- (7,1,2).*(2, 15+1,7): 29.882694 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  15 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 7 8 16 16 7 8 7
<<< (M = 8, K = 16, N = 7) : 30.389812
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 29.882694
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 15,7) :    30.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2676 (23.8%), 8574 (76.2%) left; Finishing by Sat Oct 21  6:28:20 2000

(9,8,8) <- (9,1,1).*(1, 7+1,8): 108.670577 Mflop/s
(15,16,8) <- (15,2,1).*(1, 7+1,8): 131.526202 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 108.670577
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 8 15 16 16 8 15 8
<<< (M = 15, K = 16, N = 8) : 131.526202
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,8) :   119.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2677 (23.8%), 8573 (76.2%) left; Finishing by Sat Oct 21  6:28:23 2000

(5,12,9) <- (1,4,3).*(5, 2+1,3): 30.190302 Mflop/s
(15,21,15) <- (3,7,5).*(5, 2+1,3): 29.329594 Mflop/s

Testing m0 = 5, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 30.190302
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 29.329594
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 2,3) :    29.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2678 (23.8%), 8572 (76.2%) left; Finishing by Sat Oct 21  6:28:22 2000

(8,12,5) <- (4,0,1).*(2, 11+1,5): 31.460570 Mflop/s
(14,12,15) <- (7,1,3).*(2, 11+1,5): 30.996118 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  11 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 5 8 12 12 5 8 5
<<< (M = 8, K = 12, N = 5) : 31.460570
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 30.996118
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 11,5) :    31.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2679 (23.8%), 8571 (76.2%) left; Finishing by Sat Oct 21  6:28:25 2000

(6,15,8) <- (1,0,4).*(6, 14+1,2): 119.003086 Mflop/s
(12,15,14) <- (2,1,7).*(6, 14+1,2): 82.904372 Mflop/s

Testing m0 = 6, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 15 8 6 15 15 8 6 8
<<< (M = 6, K = 15, N = 8) : 119.003086
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 82.904372
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 14,2) :    97.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2680 (23.8%), 8570 (76.2%) left; Finishing by Sat Oct 21  6:28:28 2000

(8,10,9) <- (4,2,3).*(2, 4+1,3): 51.476545 Mflop/s
(14,15,15) <- (7,3,5).*(2, 4+1,3): 41.866441 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 51.476545
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 41.866441
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 4,3) :    46.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2681 (23.8%), 8569 (76.2%) left; Finishing by Sat Oct 21  6:28:27 2000

(8,18,9) <- (2,9,3).*(4,1+1,3): 115.002290 Mflop/s
(12,30,15) <- (3,15,5).*(4,1+1,3): 120.229014 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 9 8 18 18 9 8 9
<<< (M = 8, K = 18, N = 9) : 115.002290
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 30 15 12 30 30 15 12 15
<<< (M = 12, K = 30, N = 15) : 120.229014
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4,1,3) :   117.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2682 (23.8%), 8568 (76.2%) left; Finishing by Sat Oct 21  6:28:26 2000

(8,6,9) <- (2,1,9).*(4, 5+1,1): 60.326550 Mflop/s
(12,18,15) <- (3,3,15).*(4, 5+1,1): 147.083543 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 60.326550
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 147.083543
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 5,1) :    85.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2683 (23.8%), 8567 (76.2%) left; Finishing by Sat Oct 21  6:28:21 2000

(16,12,9) <- (0,0,9).*(16, 11+1,1): 25.650680 Mflop/s
(16,12,15) <- (0,1,15).*(16, 11+1,1): 26.708130 Mflop/s

Testing m0 = 16, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 16  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 9 16 12 12 9 16 9
<<< (M = 16, K = 12, N = 9) : 25.650680
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 15 16 12 12 15 16 15
<<< (M = 16, K = 12, N = 15) : 26.708130
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (16, 11,1) :    26.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2684 (23.9%), 8566 (76.1%) left; Finishing by Sat Oct 21  6:28:24 2000

(9,10,8) <- (9,2,2).*(1, 4+1,4): 175.931703 Mflop/s
(15,15,12) <- (15,3,3).*(1, 4+1,4): 201.352813 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 175.931703
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 201.352813
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,4) :   187.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2685 (23.9%), 8565 (76.1%) left; Finishing by Sat Oct 21  6:28:27 2000

(16,10,9) <- (0,2,9).*(16, 4+1,1): 27.316354 Mflop/s
(16,15,15) <- (0,3,15).*(16, 4+1,1): 29.637048 Mflop/s

Testing m0 = 16, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 16  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 10 9 16 10 10 9 16 9
<<< (M = 16, K = 10, N = 9) : 27.316354
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 15 16 15 15 15 16 15
<<< (M = 16, K = 15, N = 15) : 29.637048
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (16, 4,1) :    28.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2686 (23.9%), 8564 (76.1%) left; Finishing by Sat Oct 21  6:28:25 2000

(8,18,7) <- (4,9,1).*(2,1+1,7): 114.793560 Mflop/s
(14,30,14) <- (7,15,2).*(2,1+1,7): 119.778884 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2 1 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 7 8 18 18 7 8 7
<<< (M = 8, K = 18, N = 7) : 114.793560
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 14 14 30 30 14 14 14
<<< (M = 14, K = 30, N = 14) : 119.778884
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2,1,7) :   117.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2687 (23.9%), 8563 (76.1%) left; Finishing by Sat Oct 21  6:28:24 2000

(9,18,8) <- (9,9,4).*(1,1+1,2): 120.153118 Mflop/s
(15,30,14) <- (15,15,7).*(1,1+1,2): 128.991407 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 8 9 18 18 8 9 8
<<< (M = 9, K = 18, N = 8) : 120.153118
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 14 15 30 30 14 15 14
<<< (M = 15, K = 30, N = 14) : 128.991407
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,2) :   124.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2688 (23.9%), 8562 (76.1%) left; Finishing by Sat Oct 21  6:28:23 2000

(9,10,10) <- (9,2,0).*(1, 4+1,10): 121.668801 Mflop/s
(15,15,10) <- (15,3,1).*(1, 4+1,10): 134.566101 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 10 9 10 10 10 9 10
<<< (M = 9, K = 10, N = 10) : 121.668801
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 10 15 15 15 10 15 10
<<< (M = 15, K = 15, N = 10) : 134.566101
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,10) :   127.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2689 (23.9%), 8561 (76.1%) left; Finishing by Sat Oct 21  6:28:22 2000

(11,15,9) <- (0,0,9).*(11, 14+1,1): 28.537136 Mflop/s
(11,15,15) <- (1,1,15).*(11, 14+1,1): 27.875318 Mflop/s

Testing m0 = 11, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 11  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 9 11 15 15 9 11 9
<<< (M = 11, K = 15, N = 9) : 28.537136
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 15 11 15 15 15 11 15
<<< (M = 11, K = 15, N = 15) : 27.875318
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (11, 14,1) :    28.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2690 (23.9%), 8560 (76.1%) left; Finishing by Sat Oct 21  6:28:21 2000

(12,6,9) <- (0,1,9).*(12, 5+1,1): 25.461666 Mflop/s
(12,18,15) <- (1,3,15).*(12, 5+1,1): 30.924980 Mflop/s

Testing m0 = 12, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 12  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 6 9 12 6 6 9 12 9
<<< (M = 12, K = 6, N = 9) : 25.461666
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 30.924980
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (12, 5,1) :    27.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2691 (23.9%), 8559 (76.1%) left; Finishing by Sat Oct 21  6:28:20 2000

(9,11,9) <- (9,0,3).*(1, 10+1,3): 185.918264 Mflop/s
(15,11,15) <- (15,1,5).*(1, 10+1,3): 191.251453 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 185.918264
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 191.251453
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,3) :   188.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2692 (23.9%), 8558 (76.1%) left; Finishing by Sat Oct 21  6:28:14 2000

(9,12,9) <- (9,4,9).*(1, 2+1,1): 116.822259 Mflop/s
(15,21,15) <- (15,7,15).*(1, 2+1,1): 103.969066 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 116.822259
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 103.969066
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,1) :   110.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2693 (23.9%), 8557 (76.1%) left; Finishing by Sat Oct 21  6:28:13 2000

(6,10,9) <- (1,2,9).*(6, 4+1,1): 113.153676 Mflop/s
(12,15,15) <- (2,3,15).*(6, 4+1,1): 89.195417 Mflop/s

Testing m0 = 6, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 10 9 6 10 10 9 6 9
<<< (M = 6, K = 10, N = 9) : 113.153676
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 89.195417
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 4,1) :    99.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2694 (23.9%), 8556 (76.1%) left; Finishing by Sat Oct 21  6:28:16 2000

(9,6,10) <- (9,1,0).*(1, 5+1,10): 97.258107 Mflop/s
(15,18,10) <- (15,3,1).*(1, 5+1,10): 134.116434 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 10 9 6 6 10 9 10
<<< (M = 9, K = 6, N = 10) : 97.258107
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 10 15 18 18 10 15 10
<<< (M = 15, K = 18, N = 10) : 134.116434
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,10) :   112.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2695 (24.0%), 8555 (76.0%) left; Finishing by Sat Oct 21  6:28:15 2000

(9,10,8) <- (9,2,4).*(1, 4+1,2): 179.310307 Mflop/s
(15,15,14) <- (15,3,7).*(1, 4+1,2): 208.494272 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 179.310307
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 208.494272
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,2) :   192.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2696 (24.0%), 8554 (76.0%) left; Finishing by Sat Oct 21  6:28:18 2000

(5,7,9) <- (1,1,3).*(5, 6+1,3): 26.464154 Mflop/s
(15,14,15) <- (3,2,5).*(5, 6+1,3): 32.074797 Mflop/s

Testing m0 = 5, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 7 9 5 7 7 9 5 9
<<< (M = 5, K = 7, N = 9) : 26.464154
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 32.074797
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 6,3) :    29.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2697 (24.0%), 8553 (76.0%) left; Finishing by Sat Oct 21  6:28:17 2000

(8,13,8) <- (2,0,2).*(4, 12+1,4): 24.621613 Mflop/s
(12,13,12) <- (3,1,3).*(4, 12+1,4): 29.057822 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 24.621613
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 12 12 13 13 12 12 12
<<< (M = 12, K = 13, N = 12) : 29.057822
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 12,4) :    26.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2698 (24.0%), 8552 (76.0%) left; Finishing by Sat Oct 21  6:28:16 2000

(10,12,9) <- (0,4,9).*(10, 2+1,1): 30.585762 Mflop/s
(10,21,15) <- (1,7,15).*(10, 2+1,1): 27.770705 Mflop/s

Testing m0 = 10, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 10  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 9 10 12 12 9 10 9
<<< (M = 10, K = 12, N = 9) : 30.585762
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 21 15 10 21 21 15 10 15
<<< (M = 10, K = 21, N = 15) : 27.770705
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (10, 2,1) :    29.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2699 (24.0%), 8551 (76.0%) left; Finishing by Sat Oct 21  6:28:14 2000

(9,6,13) <- (9,1,0).*(1, 5+1,13): 95.570059 Mflop/s
(15,18,13) <- (15,3,1).*(1, 5+1,13): 127.780274 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 13 9 6 6 13 9 13
<<< (M = 9, K = 6, N = 13) : 95.570059
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 13 15 18 18 13 15 13
<<< (M = 15, K = 18, N = 13) : 127.780274
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,13) :   109.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2700 (24.0%), 8550 (76.0%) left; Finishing by Sat Oct 21  6:28:18 2000

(9,12,14) <- (9,0,0).*(1, 11+1,14): 108.208525 Mflop/s
(15,12,14) <- (15,1,1).*(1, 11+1,14): 108.618442 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 14 9 12 12 14 9 14
<<< (M = 9, K = 12, N = 14) : 108.208525
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 108.618442
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,14) :   108.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2701 (24.0%), 8549 (76.0%) left; Finishing by Sat Oct 21  6:28:16 2000

(5,15,9) <- (1,0,9).*(5, 14+1,1): 62.813466 Mflop/s
(15,15,15) <- (3,1,15).*(5, 14+1,1): 86.582337 Mflop/s

Testing m0 = 5, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 9 5 15 15 9 5 9
<<< (M = 5, K = 15, N = 9) : 62.813466
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 86.582337
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 14,1) :    72.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2702 (24.0%), 8548 (76.0%) left; Finishing by Sat Oct 21  6:28:15 2000

(8,9,9) <- (2,1,9).*(4, 8+1,1): 66.399700 Mflop/s
(12,9,15) <- (3,1,15).*(4, 8+1,1): 67.569819 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 66.399700
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 67.569819
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 8,1) :    67.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2703 (24.0%), 8547 (76.0%) left; Finishing by Sat Oct 21  6:28:14 2000

(8,10,9) <- (1,2,9).*(8, 4+1,1): 106.801300 Mflop/s
(8,15,15) <- (1,3,15).*(8, 4+1,1): 122.053293 Mflop/s

Testing m0 = 8, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 106.801300
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 15 8 15 15 15 8 15
<<< (M = 8, K = 15, N = 15) : 122.053293
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 4,1) :   113.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2704 (24.0%), 8546 (76.0%) left; Finishing by Sat Oct 21  6:28:09 2000

(9,15,16) <- (9,0,0).*(1, 14+1,16): 108.061314 Mflop/s
(15,15,16) <- (15,1,0).*(1, 14+1,16): 108.748996 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 16 9 15 15 16 9 16
<<< (M = 9, K = 15, N = 16) : 108.061314
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 16 15 15 15 16 15 16
<<< (M = 15, K = 15, N = 16) : 108.748996
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,16) :   108.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2705 (24.0%), 8545 (76.0%) left; Finishing by Sat Oct 21  6:28:12 2000

(9,12,9) <- (3,4,9).*(3, 2+1,1): 141.473057 Mflop/s
(15,21,15) <- (5,7,15).*(3, 2+1,1): 138.216965 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 141.473057
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 138.216965
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 2,1) :   139.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2706 (24.1%), 8544 (75.9%) left; Finishing by Sat Oct 21  6:28:15 2000

(9,16,9) <- (3,0,3).*(3, 15+1,3): 130.047539 Mflop/s
(15,16,15) <- (5,1,5).*(3, 15+1,3): 132.587486 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 130.047539
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 132.587486
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 15,3) :   131.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2707 (24.1%), 8543 (75.9%) left; Finishing by Sat Oct 21  6:28:14 2000

(9,14,8) <- (3,0,2).*(3, 13+1,4): 128.876417 Mflop/s
(15,14,12) <- (5,1,3).*(3, 13+1,4): 131.433563 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 128.876417
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 131.433563
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 13,4) :   130.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2708 (24.1%), 8542 (75.9%) left; Finishing by Sat Oct 21  6:28:12 2000

(8,15,5) <- (4,0,1).*(2, 14+1,5): 32.110914 Mflop/s
(14,15,15) <- (7,1,3).*(2, 14+1,5): 31.626657 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  14 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 5 8 15 15 5 8 5
<<< (M = 8, K = 15, N = 5) : 32.110914
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 31.626657
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 14,5) :    31.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2709 (24.1%), 8541 (75.9%) left; Finishing by Sat Oct 21  6:28:11 2000

(9,15,7) <- (9,0,1).*(1, 14+1,7): 138.453382 Mflop/s
(15,15,14) <- (15,1,2).*(1, 14+1,7): 140.708080 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 7 9 15 15 7 9 7
<<< (M = 9, K = 15, N = 7) : 138.453382
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 140.708080
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,7) :   139.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2710 (24.1%), 8540 (75.9%) left; Finishing by Sat Oct 21  6:28:14 2000

(7,11,8) <- (1,0,4).*(7, 10+1,2): 24.136805 Mflop/s
(14,11,14) <- (2,1,7).*(7, 10+1,2): 27.798594 Mflop/s

Testing m0 = 7, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 11 8 7 11 11 8 7 8
<<< (M = 7, K = 11, N = 8) : 24.136805
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 14 14 11 11 14 14 14
<<< (M = 14, K = 11, N = 14) : 27.798594
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 10,2) :    25.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2711 (24.1%), 8539 (75.9%) left; Finishing by Sat Oct 21  6:28:13 2000

(16,11,9) <- (0,0,9).*(16, 10+1,1): 25.576918 Mflop/s
(16,11,15) <- (0,1,15).*(16, 10+1,1): 26.400943 Mflop/s

Testing m0 = 16, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 16  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 11 9 16 11 11 9 16 9
<<< (M = 16, K = 11, N = 9) : 25.576918
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 11 15 16 11 11 15 16 15
<<< (M = 16, K = 11, N = 15) : 26.400943
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (16, 10,1) :    26.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2712 (24.1%), 8538 (75.9%) left; Finishing by Sat Oct 21  6:28:16 2000

(9,12,9) <- (9,4,3).*(1, 2+1,3): 193.435312 Mflop/s
(15,21,15) <- (15,7,5).*(1, 2+1,3): 177.507438 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 193.435312
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 177.507438
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,3) :   185.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2713 (24.1%), 8537 (75.9%) left; Finishing by Sat Oct 21  6:28:15 2000

(15,8,9) <- (0,1,9).*(15, 7+1,1): 77.070559 Mflop/s
(15,16,15) <- (1,2,15).*(15, 7+1,1): 112.313247 Mflop/s

Testing m0 = 15, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 15  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 9 15 8 8 9 15 9
<<< (M = 15, K = 8, N = 9) : 77.070559
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 112.313247
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (15, 7,1) :    91.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2714 (24.1%), 8536 (75.9%) left; Finishing by Sat Oct 21  6:28:14 2000

(5,12,9) <- (1,0,3).*(5, 11+1,3): 28.146400 Mflop/s
(15,12,15) <- (3,1,5).*(5, 11+1,3): 29.243170 Mflop/s

Testing m0 = 5, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 28.146400
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 29.243170
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 11,3) :    28.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2715 (24.1%), 8535 (75.9%) left; Finishing by Sat Oct 21  6:28:13 2000

(8,16,9) <- (1,0,9).*(8, 15+1,1): 75.497998 Mflop/s
(8,16,15) <- (1,1,15).*(8, 15+1,1): 75.981803 Mflop/s

Testing m0 = 8, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 75.497998
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 15 8 16 16 15 8 15
<<< (M = 8, K = 16, N = 15) : 75.981803
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 15,1) :    75.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2716 (24.1%), 8534 (75.9%) left; Finishing by Sat Oct 21  6:28:12 2000

(11,12,9) <- (0,0,9).*(11, 11+1,1): 28.059962 Mflop/s
(11,12,15) <- (1,1,15).*(11, 11+1,1): 26.815722 Mflop/s

Testing m0 = 11, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 11  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 9 11 12 12 9 11 9
<<< (M = 11, K = 12, N = 9) : 28.059962
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 15 11 12 12 15 11 15
<<< (M = 11, K = 12, N = 15) : 26.815722
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (11, 11,1) :    27.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2717 (24.2%), 8533 (75.8%) left; Finishing by Sat Oct 21  6:28:10 2000

(8,6,9) <- (1,1,9).*(8, 5+1,1): 56.618858 Mflop/s
(8,18,15) <- (1,3,15).*(8, 5+1,1): 80.063262 Mflop/s

Testing m0 = 8, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 56.618858
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 15 8 18 18 15 8 15
<<< (M = 8, K = 18, N = 15) : 80.063262
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 5,1) :    66.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2718 (24.2%), 8532 (75.8%) left; Finishing by Sat Oct 21  6:28:09 2000

(7,12,8) <- (1,4,4).*(7, 2+1,2): 104.610618 Mflop/s
(14,21,14) <- (2,7,7).*(7, 2+1,2): 103.057913 Mflop/s

Testing m0 = 7, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 8 7 12 12 8 7 8
<<< (M = 7, K = 12, N = 8) : 104.610618
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 14 14 21 21 14 14 14
<<< (M = 14, K = 21, N = 14) : 103.057913
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 2,2) :   103.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2719 (24.2%), 8531 (75.8%) left; Finishing by Sat Oct 21  6:28:12 2000

(5,10,8) <- (1,2,4).*(5, 4+1,2): 33.025306 Mflop/s
(15,15,14) <- (3,3,7).*(5, 4+1,2): 36.570411 Mflop/s

Testing m0 = 5, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 8 5 10 10 8 5 8
<<< (M = 5, K = 10, N = 8) : 33.025306
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 36.570411
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 4,2) :    34.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2720 (24.2%), 8530 (75.8%) left; Finishing by Sat Oct 21  6:28:11 2000

(8,10,6) <- (4,1,1).*(2, 9+1,6): 29.712640 Mflop/s
(14,10,12) <- (7,1,2).*(2, 9+1,6): 26.627584 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  9 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 6 8 10 10 6 8 6
<<< (M = 8, K = 10, N = 6) : 29.712640
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 12 14 10 10 12 14 12
<<< (M = 14, K = 10, N = 12) : 26.627584
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 9,6) :    28.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2721 (24.2%), 8529 (75.8%) left; Finishing by Sat Oct 21  6:28:10 2000

(5,16,8) <- (1,0,4).*(5, 15+1,2): 31.375974 Mflop/s
(15,16,14) <- (3,1,7).*(5, 15+1,2): 31.750297 Mflop/s

Testing m0 = 5, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 16 8 5 16 16 8 5 8
<<< (M = 5, K = 16, N = 8) : 31.375974
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 31.750297
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 15,2) :    31.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2722 (24.2%), 8528 (75.8%) left; Finishing by Sat Oct 21  6:28:09 2000

(9,10,7) <- (9,2,1).*(1, 4+1,7): 133.849075 Mflop/s
(15,15,14) <- (15,3,2).*(1, 4+1,7): 150.836092 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 7 9 10 10 7 9 7
<<< (M = 9, K = 10, N = 7) : 133.849075
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 150.836092
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,7) :   141.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2723 (24.2%), 8527 (75.8%) left; Finishing by Sat Oct 21  6:28:08 2000

(8,9,7) <- (4,1,1).*(2, 8+1,7): 28.856324 Mflop/s
(14,9,14) <- (7,1,2).*(2, 8+1,7): 29.030099 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  8 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 7 8 9 9 7 8 7
<<< (M = 8, K = 9, N = 7) : 28.856324
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 14 14 9 9 14 14 14
<<< (M = 14, K = 9, N = 14) : 29.030099
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 8,7) :    28.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2724 (24.2%), 8526 (75.8%) left; Finishing by Sat Oct 21  6:28:06 2000

(11,10,9) <- (0,2,9).*(11, 4+1,1): 96.386046 Mflop/s
(11,15,15) <- (1,3,15).*(11, 4+1,1): 108.265736 Mflop/s

Testing m0 = 11, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 11  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 10 9 11 10 10 9 11 9
<<< (M = 11, K = 10, N = 9) : 96.386046
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 15 11 15 15 15 11 15
<<< (M = 11, K = 15, N = 15) : 108.265736
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (11, 4,1) :   102.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2725 (24.2%), 8525 (75.8%) left; Finishing by Sat Oct 21  6:28:05 2000

(9,16,8) <- (9,0,1).*(1, 15+1,8): 123.286683 Mflop/s
(15,16,8) <- (15,1,1).*(1, 15+1,8): 124.658192 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 123.286683
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 8 15 16 16 8 15 8
<<< (M = 15, K = 16, N = 8) : 124.658192
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,8) :   124.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2726 (24.2%), 8524 (75.8%) left; Finishing by Sat Oct 21  6:28:04 2000

(9,7,8) <- (3,1,2).*(3, 6+1,4): 115.566062 Mflop/s
(15,14,12) <- (5,2,3).*(3, 6+1,4): 141.600183 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 115.566062
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 141.600183
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 6,4) :   127.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2727 (24.2%), 8523 (75.8%) left; Finishing by Sat Oct 21  6:28:07 2000

(9,6,5) <- (9,1,1).*(1, 5+1,5): 119.173343 Mflop/s
(15,18,15) <- (15,3,3).*(1, 5+1,5): 189.052030 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 5 9 6 6 5 9 5
<<< (M = 9, K = 6, N = 5) : 119.173343
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 189.052030
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,5) :   146.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2728 (24.2%), 8522 (75.8%) left; Finishing by Sat Oct 21  6:28:06 2000

(6,12,8) <- (1,4,4).*(6, 2+1,2): 28.502760 Mflop/s
(12,21,14) <- (2,7,7).*(6, 2+1,2): 25.998377 Mflop/s

Testing m0 = 6, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 8 6 12 12 8 6 8
<<< (M = 6, K = 12, N = 8) : 28.502760
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 14 12 21 21 14 12 14
<<< (M = 12, K = 21, N = 14) : 25.998377
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 2,2) :    27.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2729 (24.3%), 8521 (75.7%) left; Finishing by Sat Oct 21  6:28:05 2000

(9,7,8) <- (3,1,4).*(3, 6+1,2): 116.522397 Mflop/s
(15,14,14) <- (5,2,7).*(3, 6+1,2): 147.083793 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 116.522397
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 147.083793
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 6,2) :   130.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2730 (24.3%), 8520 (75.7%) left; Finishing by Sat Oct 21  6:28:08 2000

(9,7,14) <- (9,1,0).*(1, 6+1,14): 100.047727 Mflop/s
(15,14,14) <- (15,2,1).*(1, 6+1,14): 119.597775 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 14 9 7 7 14 9 14
<<< (M = 9, K = 7, N = 14) : 100.047727
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 119.597775
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,14) :   109.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2731 (24.3%), 8519 (75.7%) left; Finishing by Sat Oct 21  6:28:11 2000

(9,10,5) <- (9,2,1).*(1, 4+1,5): 154.865574 Mflop/s
(15,15,15) <- (15,3,3).*(1, 4+1,5): 187.660223 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 5 9 10 10 5 9 5
<<< (M = 9, K = 10, N = 5) : 154.865574
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 187.660223
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,5) :   169.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2732 (24.3%), 8518 (75.7%) left; Finishing by Sat Oct 21  6:28:10 2000

(9,8,13) <- (9,1,0).*(1, 7+1,13): 102.927168 Mflop/s
(15,16,13) <- (15,2,1).*(1, 7+1,13): 120.694087 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 13 9 8 8 13 9 13
<<< (M = 9, K = 8, N = 13) : 102.927168
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 13 15 16 16 13 15 13
<<< (M = 15, K = 16, N = 13) : 120.694087
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,13) :   111.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2733 (24.3%), 8517 (75.7%) left; Finishing by Sat Oct 21  6:28:09 2000

(9,10,14) <- (9,2,0).*(1, 4+1,14): 114.316821 Mflop/s
(15,15,14) <- (15,3,1).*(1, 4+1,14): 126.326367 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 14 9 10 10 14 9 14
<<< (M = 9, K = 10, N = 14) : 114.316821
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 126.326367
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,14) :   120.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2734 (24.3%), 8516 (75.7%) left; Finishing by Sat Oct 21  6:28:07 2000

(9,7,7) <- (9,1,1).*(1, 6+1,7): 112.296899 Mflop/s
(15,14,14) <- (15,2,2).*(1, 6+1,7): 145.935701 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 7 9 7 7 7 9 7
<<< (M = 9, K = 7, N = 7) : 112.296899
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 145.935701
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,7) :   126.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2735 (24.3%), 8515 (75.7%) left; Finishing by Sat Oct 21  6:28:06 2000

(6,14,9) <- (1,0,9).*(6, 13+1,1): 113.810738 Mflop/s
(12,14,15) <- (2,1,15).*(6, 13+1,1): 79.860317 Mflop/s

Testing m0 = 6, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 14 9 6 14 14 9 6 9
<<< (M = 6, K = 14, N = 9) : 113.810738
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 79.860317
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 13,1) :    93.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2736 (24.3%), 8514 (75.7%) left; Finishing by Sat Oct 21  6:28:05 2000

(9,12,8) <- (3,0,2).*(3, 11+1,4): 127.488213 Mflop/s
(15,12,12) <- (5,1,3).*(3, 11+1,4): 129.160653 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 127.488213
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 129.160653
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 11,4) :   128.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2737 (24.3%), 8513 (75.7%) left; Finishing by Sat Oct 21  6:28:04 2000

(8,10,8) <- (4,2,1).*(2, 4+1,8): 31.687371 Mflop/s
(14,15,8) <- (7,3,1).*(2, 4+1,8): 34.250821 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  4 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 31.687371
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 8 14 15 15 8 14 8
<<< (M = 14, K = 15, N = 8) : 34.250821
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 4,8) :    32.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2738 (24.3%), 8512 (75.7%) left; Finishing by Sat Oct 21  6:28:03 2000

(6,13,9) <- (1,0,9).*(6, 12+1,1): 114.266823 Mflop/s
(12,13,15) <- (2,1,15).*(6, 12+1,1): 80.403266 Mflop/s

Testing m0 = 6, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 13 9 6 13 13 9 6 9
<<< (M = 6, K = 13, N = 9) : 114.266823
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 80.403266
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 12,1) :    94.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2739 (24.3%), 8511 (75.7%) left; Finishing by Sat Oct 21  6:28:06 2000

(13,13,9) <- (0,0,9).*(13, 12+1,1): 25.708323 Mflop/s
(13,13,15) <- (1,1,15).*(13, 12+1,1): 29.061702 Mflop/s

Testing m0 = 13, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 13  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 13 9 13 13 13 9 13 9
<<< (M = 13, K = 13, N = 9) : 25.708323
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 13 15 13 13 13 15 13 15
<<< (M = 13, K = 13, N = 15) : 29.061702
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (13, 12,1) :    27.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2740 (24.4%), 8510 (75.6%) left; Finishing by Sat Oct 21  6:28:05 2000

(14,6,9) <- (0,1,9).*(14, 5+1,1): 23.170252 Mflop/s
(14,18,15) <- (1,3,15).*(14, 5+1,1): 31.490195 Mflop/s

Testing m0 = 14, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 14  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 6 9 14 6 6 9 14 9
<<< (M = 14, K = 6, N = 9) : 23.170252
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 31.490195
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (14, 5,1) :    26.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2741 (24.4%), 8509 (75.6%) left; Finishing by Sat Oct 21  6:28:04 2000

(9,14,9) <- (3,0,3).*(3, 13+1,3): 127.986717 Mflop/s
(15,14,15) <- (5,1,5).*(3, 13+1,3): 129.645251 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 127.986717
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 129.645251
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 13,3) :   128.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2742 (24.4%), 8508 (75.6%) left; Finishing by Sat Oct 21  6:28:02 2000

(8,13,8) <- (4,0,4).*(2, 12+1,2): 137.135411 Mflop/s
(14,13,14) <- (7,1,7).*(2, 12+1,2): 75.023191 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 137.135411
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 14 14 13 13 14 14 14
<<< (M = 14, K = 13, N = 14) : 75.023191
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 12,2) :    97.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2743 (24.4%), 8507 (75.6%) left; Finishing by Sat Oct 21  6:28:05 2000

(9,7,11) <- (9,1,0).*(1, 6+1,11): 102.468488 Mflop/s
(15,14,11) <- (15,2,1).*(1, 6+1,11): 124.707785 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 11 9 7 7 11 9 11
<<< (M = 9, K = 7, N = 11) : 102.468488
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 11 15 14 14 11 15 11
<<< (M = 15, K = 14, N = 11) : 124.707785
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,11) :   112.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2744 (24.4%), 8506 (75.6%) left; Finishing by Sat Oct 21  6:28:08 2000

(9,10,10) <- (9,1,0).*(1, 9+1,10): 110.174839 Mflop/s
(15,10,10) <- (15,1,1).*(1, 9+1,10): 111.165471 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 10 9 10 10 10 9 10
<<< (M = 9, K = 10, N = 10) : 110.174839
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 10 15 10 10 10 15 10
<<< (M = 15, K = 10, N = 10) : 111.165471
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,10) :   110.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2745 (24.4%), 8505 (75.6%) left; Finishing by Sat Oct 21  6:28:11 2000

(8,13,9) <- (1,0,9).*(8, 12+1,1): 70.080275 Mflop/s
(8,13,15) <- (1,1,15).*(8, 12+1,1): 70.557024 Mflop/s

Testing m0 = 8, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 70.080275
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 15 8 13 13 15 8 15
<<< (M = 8, K = 13, N = 15) : 70.557024
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 12,1) :    70.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2746 (24.4%), 8504 (75.6%) left; Finishing by Sat Oct 21  6:28:10 2000

(9,16,16) <- (9,0,0).*(1, 15+1,16): 109.044593 Mflop/s
(15,16,16) <- (15,1,0).*(1, 15+1,16): 109.325024 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 16 9 16 16 16 9 16
<<< (M = 9, K = 16, N = 16) : 109.044593
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 16 15 16 16 16 15 16
<<< (M = 15, K = 16, N = 16) : 109.325024
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,16) :   109.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2747 (24.4%), 8503 (75.6%) left; Finishing by Sat Oct 21  6:28:17 2000

(9,18,8) <- (3,9,2).*(3,1+1,4): 31.201019 Mflop/s
(15,30,12) <- (5,15,3).*(3,1+1,4): 29.194210 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 8 9 18 18 8 9 8
<<< (M = 9, K = 18, N = 8) : 31.201019
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 12 15 30 30 12 15 12
<<< (M = 15, K = 30, N = 12) : 29.194210
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3,1,4) :    30.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2748 (24.4%), 8502 (75.6%) left; Finishing by Sat Oct 21  6:28:20 2000

(10,13,9) <- (0,0,9).*(10, 12+1,1): 76.347778 Mflop/s
(10,13,15) <- (1,1,15).*(10, 12+1,1): 100.514509 Mflop/s

Testing m0 = 10, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 10  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 13 9 10 13 13 9 10 9
<<< (M = 10, K = 13, N = 9) : 76.347778
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 13 15 10 13 13 15 10 15
<<< (M = 10, K = 13, N = 15) : 100.514509
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (10, 12,1) :    86.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2749 (24.4%), 8501 (75.6%) left; Finishing by Sat Oct 21  6:28:19 2000

(6,16,9) <- (1,0,9).*(6, 15+1,1): 118.625081 Mflop/s
(12,16,15) <- (2,1,15).*(6, 15+1,1): 81.924288 Mflop/s

Testing m0 = 6, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 16 9 6 16 16 9 6 9
<<< (M = 6, K = 16, N = 9) : 118.625081
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 81.924288
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 15,1) :    96.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2750 (24.4%), 8500 (75.6%) left; Finishing by Sat Oct 21  6:28:26 2000

(14,14,9) <- (0,0,9).*(14, 13+1,1): 26.057819 Mflop/s
(14,14,15) <- (1,1,15).*(14, 13+1,1): 29.314682 Mflop/s

Testing m0 = 14, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 14  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 9 14 14 14 9 14 9
<<< (M = 14, K = 14, N = 9) : 26.057819
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 29.314682
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (14, 13,1) :    27.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2751 (24.5%), 8499 (75.5%) left; Finishing by Sat Oct 21  6:28:25 2000

(13,12,9) <- (0,3,9).*(13, 3+1,1): 94.720596 Mflop/s
(13,20,15) <- (1,5,15).*(13, 3+1,1): 87.265342 Mflop/s

Testing m0 = 13, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 13  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 9 13 12 12 9 13 9
<<< (M = 13, K = 12, N = 9) : 94.720596
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 20 15 13 20 20 15 13 15
<<< (M = 13, K = 20, N = 15) : 87.265342
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (13, 3,1) :    90.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2752 (24.5%), 8498 (75.5%) left; Finishing by Sat Oct 21  6:28:24 2000

(8,12,8) <- (4,4,1).*(2, 2+1,8): 31.427092 Mflop/s
(14,21,8) <- (7,7,1).*(2, 2+1,8): 30.365599 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  2 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 31.427092
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 8 14 21 21 8 14 8
<<< (M = 14, K = 21, N = 8) : 30.365599
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 2,8) :    30.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2753 (24.5%), 8497 (75.5%) left; Finishing by Sat Oct 21  6:28:23 2000

(9,12,9) <- (9,4,1).*(1, 2+1,9): 124.246988 Mflop/s
(15,21,9) <- (15,7,1).*(1, 2+1,9): 120.037257 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 124.246988
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 9 15 21 21 9 15 9
<<< (M = 15, K = 21, N = 9) : 120.037257
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,9) :   122.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2754 (24.5%), 8496 (75.5%) left; Finishing by Sat Oct 21  6:28:22 2000

(14,10,9) <- (0,1,9).*(14, 9+1,1): 25.021392 Mflop/s
(14,10,15) <- (1,1,15).*(14, 9+1,1): 28.023939 Mflop/s

Testing m0 = 14, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 14  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 9 14 10 10 9 14 9
<<< (M = 14, K = 10, N = 9) : 25.021392
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 28.023939
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (14, 9,1) :    26.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2755 (24.5%), 8495 (75.5%) left; Finishing by Sat Oct 21  6:28:25 2000

(12,12,9) <- (0,0,9).*(12, 11+1,1): 79.944507 Mflop/s
(12,12,15) <- (1,1,15).*(12, 11+1,1): 98.893600 Mflop/s

Testing m0 = 12, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 12  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 9 12 12 12 9 12 9
<<< (M = 12, K = 12, N = 9) : 79.944507
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 98.893600
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (12, 11,1) :    88.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2756 (24.5%), 8494 (75.5%) left; Finishing by Sat Oct 21  6:28:23 2000

(9,15,9) <- (9,0,1).*(1, 14+1,9): 120.016211 Mflop/s
(15,15,9) <- (15,1,1).*(1, 14+1,9): 120.774567 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 120.016211
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 120.774567
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,9) :   120.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2757 (24.5%), 8493 (75.5%) left; Finishing by Sat Oct 21  6:28:26 2000

(9,14,9) <- (9,0,9).*(1, 13+1,1): 132.705362 Mflop/s
(15,14,15) <- (15,1,15).*(1, 13+1,1): 138.248166 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 132.705362
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 138.248166
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,1) :   135.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2758 (24.5%), 8492 (75.5%) left; Finishing by Sat Oct 21  6:28:33 2000

(9,13,14) <- (9,0,0).*(1, 12+1,14): 109.510424 Mflop/s
(15,13,14) <- (15,1,1).*(1, 12+1,14): 109.795802 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 14 9 13 13 14 9 14
<<< (M = 9, K = 13, N = 14) : 109.510424
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 109.795802
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,14) :   109.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2759 (24.5%), 8491 (75.5%) left; Finishing by Sat Oct 21  6:28:40 2000

(8,8,8) <- (4,1,2).*(2, 7+1,4): 33.089446 Mflop/s
(14,16,12) <- (7,2,3).*(2, 7+1,4): 33.698064 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 33.089446
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 12 14 16 16 12 14 12
<<< (M = 14, K = 16, N = 12) : 33.698064
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 7,4) :    33.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2760 (24.5%), 8490 (75.5%) left; Finishing by Sat Oct 21  6:28:43 2000

(8,14,9) <- (2,0,9).*(4, 13+1,1): 75.138097 Mflop/s
(12,14,15) <- (3,1,15).*(4, 13+1,1): 132.163221 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 75.138097
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 132.163221
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 13,1) :    95.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2761 (24.5%), 8489 (75.5%) left; Finishing by Sat Oct 21  6:28:42 2000

(9,11,13) <- (9,0,0).*(1, 10+1,13): 108.691419 Mflop/s
(15,11,13) <- (15,1,1).*(1, 10+1,13): 109.182970 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  10 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 13 9 11 11 13 9 13
<<< (M = 9, K = 11, N = 13) : 108.691419
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 13 15 11 11 13 15 13
<<< (M = 15, K = 11, N = 13) : 109.182970
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 10,13) :   108.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2762 (24.6%), 8488 (75.4%) left; Finishing by Sat Oct 21  6:28:45 2000

(6,13,8) <- (1,0,4).*(6, 12+1,2): 117.231589 Mflop/s
(12,13,14) <- (2,1,7).*(6, 12+1,2): 83.048185 Mflop/s

Testing m0 = 6, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 13 8 6 13 13 8 6 8
<<< (M = 6, K = 13, N = 8) : 117.231589
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 14 12 13 13 14 12 14
<<< (M = 12, K = 13, N = 14) : 83.048185
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 12,2) :    97.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2763 (24.6%), 8487 (75.4%) left; Finishing by Sat Oct 21  6:28:52 2000

(9,9,12) <- (9,1,0).*(1, 8+1,12): 107.992723 Mflop/s
(15,9,12) <- (15,1,1).*(1, 8+1,12): 108.356253 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 12 9 9 9 12 9 12
<<< (M = 9, K = 9, N = 12) : 107.992723
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 108.356253
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,12) :   108.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2764 (24.6%), 8486 (75.4%) left; Finishing by Sat Oct 21  6:28:51 2000

(14,12,9) <- (0,0,9).*(14, 11+1,1): 25.065052 Mflop/s
(14,12,15) <- (1,1,15).*(14, 11+1,1): 28.866132 Mflop/s

Testing m0 = 14, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 14  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 9 14 12 12 9 14 9
<<< (M = 14, K = 12, N = 9) : 25.065052
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 28.866132
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (14, 11,1) :    26.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2765 (24.6%), 8485 (75.4%) left; Finishing by Sat Oct 21  6:28:54 2000

(9,8,8) <- (3,1,2).*(3, 7+1,4): 118.216388 Mflop/s
(15,16,12) <- (5,2,3).*(3, 7+1,4): 143.399153 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 118.216388
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 143.399153
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 7,4) :   129.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2766 (24.6%), 8484 (75.4%) left; Finishing by Sat Oct 21  6:28:53 2000

(9,12,6) <- (9,0,1).*(1, 11+1,6): 138.691506 Mflop/s
(15,12,12) <- (15,1,2).*(1, 11+1,6): 146.459250 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 6 9 12 12 6 9 6
<<< (M = 9, K = 12, N = 6) : 138.691506
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 146.459250
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,6) :   142.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2767 (24.6%), 8483 (75.4%) left; Finishing by Sat Oct 21  6:28:56 2000

(8,12,9) <- (4,0,9).*(2, 11+1,1): 158.457450 Mflop/s
(14,12,15) <- (7,1,15).*(2, 11+1,1): 162.182389 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 158.457450
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 162.182389
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 11,1) :   160.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2768 (24.6%), 8482 (75.4%) left; Finishing by Sat Oct 21  6:28:59 2000

(5,6,9) <- (1,1,3).*(5, 5+1,3): 25.771154 Mflop/s
(15,18,15) <- (3,3,5).*(5, 5+1,3): 33.429701 Mflop/s

Testing m0 = 5, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 6 9 5 6 6 9 5 9
<<< (M = 5, K = 6, N = 9) : 25.771154
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 33.429701
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 5,3) :    29.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2769 (24.6%), 8481 (75.4%) left; Finishing by Sat Oct 21  6:28:57 2000

(8,15,6) <- (4,0,1).*(2, 14+1,6): 30.790249 Mflop/s
(14,15,12) <- (7,1,2).*(2, 14+1,6): 27.590752 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  14 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 6 8 15 15 6 8 6
<<< (M = 8, K = 15, N = 6) : 30.790249
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 27.590752
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 14,6) :    29.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2770 (24.6%), 8480 (75.4%) left; Finishing by Sat Oct 21  6:28:56 2000

(16,8,9) <- (0,1,9).*(16, 7+1,1): 23.840312 Mflop/s
(16,16,15) <- (0,2,15).*(16, 7+1,1): 29.431986 Mflop/s

Testing m0 = 16, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 16  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 8 9 16 8 8 9 16 9
<<< (M = 16, K = 8, N = 9) : 23.840312
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 16 15 16 16 16 15 16 15
<<< (M = 16, K = 16, N = 15) : 29.431986
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (16, 7,1) :    26.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2771 (24.6%), 8479 (75.4%) left; Finishing by Sat Oct 21  6:28:59 2000

(7,13,8) <- (1,0,4).*(7, 12+1,2): 24.129673 Mflop/s
(14,13,14) <- (2,1,7).*(7, 12+1,2): 27.860537 Mflop/s

Testing m0 = 7, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 13 8 7 13 13 8 7 8
<<< (M = 7, K = 13, N = 8) : 24.129673
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 14 14 13 13 14 14 14
<<< (M = 14, K = 13, N = 14) : 27.860537
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 12,2) :    25.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2772 (24.6%), 8478 (75.4%) left; Finishing by Sat Oct 21  6:28:58 2000

(9,16,10) <- (9,0,0).*(1, 15+1,10): 117.928471 Mflop/s
(15,16,10) <- (15,1,1).*(1, 15+1,10): 118.347436 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 10 9 16 16 10 9 10
<<< (M = 9, K = 16, N = 10) : 117.928471
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 10 15 16 16 10 15 10
<<< (M = 15, K = 16, N = 10) : 118.347436
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,10) :   118.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2773 (24.6%), 8477 (75.4%) left; Finishing by Sat Oct 21  6:28:57 2000

(9,18,9) <- (9,9,1).*(1,1+1,9): 29.724290 Mflop/s
(15,30,9) <- (15,15,1).*(1,1+1,9): 30.383008 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 9 9 18 18 9 9 9
<<< (M = 9, K = 18, N = 9) : 29.724290
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 9 15 30 30 9 15 9
<<< (M = 15, K = 30, N = 9) : 30.383008
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,9) :    30.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2774 (24.7%), 8476 (75.3%) left; Finishing by Sat Oct 21  6:28:52 2000

(8,8,6) <- (4,1,1).*(2, 7+1,6): 28.858932 Mflop/s
(14,16,12) <- (7,2,2).*(2, 7+1,6): 29.623705 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  7 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 6 8 8 8 6 8 6
<<< (M = 8, K = 8, N = 6) : 28.858932
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 12 14 16 16 12 14 12
<<< (M = 14, K = 16, N = 12) : 29.623705
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 7,6) :    29.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2775 (24.7%), 8475 (75.3%) left; Finishing by Sat Oct 21  6:28:51 2000

(12,9,9) <- (0,1,9).*(12, 8+1,1): 26.618272 Mflop/s
(12,9,15) <- (1,1,15).*(12, 8+1,1): 26.709143 Mflop/s

Testing m0 = 12, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 12  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 9 12 9 9 9 12 9
<<< (M = 12, K = 9, N = 9) : 26.618272
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 26.709143
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (12, 8,1) :    26.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2776 (24.7%), 8474 (75.3%) left; Finishing by Sat Oct 21  6:28:49 2000

(9,11,9) <- (3,0,3).*(3, 10+1,3): 124.216348 Mflop/s
(15,11,15) <- (5,1,5).*(3, 10+1,3): 126.148463 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 124.216348
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 126.148463
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 10,3) :   125.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2777 (24.7%), 8473 (75.3%) left; Finishing by Sat Oct 21  6:28:48 2000

(8,12,8) <- (4,3,1).*(2, 3+1,8): 33.877000 Mflop/s
(14,20,8) <- (7,5,1).*(2, 3+1,8): 31.092537 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  3 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 33.877000
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 8 14 20 20 8 14 8
<<< (M = 14, K = 20, N = 8) : 31.092537
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 3,8) :    32.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2778 (24.7%), 8472 (75.3%) left; Finishing by Sat Oct 21  6:28:47 2000

(9,14,9) <- (3,0,9).*(3, 13+1,1): 178.301766 Mflop/s
(15,14,15) <- (5,1,15).*(3, 13+1,1): 181.106774 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 178.301766
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 181.106774
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 13,1) :   179.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2779 (24.7%), 8471 (75.3%) left; Finishing by Sat Oct 21  6:28:50 2000

(9,7,15) <- (9,1,0).*(1, 6+1,15): 99.327970 Mflop/s
(15,14,15) <- (15,2,1).*(1, 6+1,15): 118.104772 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 15 9 7 7 15 9 15
<<< (M = 9, K = 7, N = 15) : 99.327970
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 118.104772
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,15) :   107.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2780 (24.7%), 8470 (75.3%) left; Finishing by Sat Oct 21  6:28:45 2000

(8,14,5) <- (4,0,1).*(2, 13+1,5): 31.926336 Mflop/s
(14,14,15) <- (7,1,3).*(2, 13+1,5): 31.490792 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  13 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 5 8 14 14 5 8 5
<<< (M = 8, K = 14, N = 5) : 31.926336
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 31.490792
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 13,5) :    31.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2781 (24.7%), 8469 (75.3%) left; Finishing by Sat Oct 21  6:28:44 2000

(9,7,16) <- (9,1,0).*(1, 6+1,16): 98.472603 Mflop/s
(15,14,16) <- (15,2,0).*(1, 6+1,16): 115.977187 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 16 9 7 7 16 9 16
<<< (M = 9, K = 7, N = 16) : 98.472603
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 16 15 14 14 16 15 16
<<< (M = 15, K = 14, N = 16) : 115.977187
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,16) :   106.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2782 (24.7%), 8468 (75.3%) left; Finishing by Sat Oct 21  6:28:43 2000

(9,10,8) <- (3,2,2).*(3, 4+1,4): 134.996447 Mflop/s
(15,15,12) <- (5,3,3).*(3, 4+1,4): 150.081569 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 134.996447
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 150.081569
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 4,4) :   142.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2783 (24.7%), 8467 (75.3%) left; Finishing by Sat Oct 21  6:28:42 2000

(9,13,9) <- (3,0,9).*(3, 12+1,1): 166.964338 Mflop/s
(15,13,15) <- (5,1,15).*(3, 12+1,1): 171.000761 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 166.964338
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 171.000761
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 12,1) :   169.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2784 (24.7%), 8466 (75.3%) left; Finishing by Sat Oct 21  6:28:40 2000

(8,13,7) <- (4,0,1).*(2, 12+1,7): 29.921671 Mflop/s
(14,13,14) <- (7,1,2).*(2, 12+1,7): 29.491114 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  12 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 7 8 13 13 7 8 7
<<< (M = 8, K = 13, N = 7) : 29.921671
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 14 14 13 13 14 14 14
<<< (M = 14, K = 13, N = 14) : 29.491114
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 12,7) :    29.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2785 (24.8%), 8465 (75.2%) left; Finishing by Sat Oct 21  6:28:39 2000

(9,12,9) <- (9,0,3).*(1, 11+1,3): 193.793883 Mflop/s
(15,12,15) <- (15,1,5).*(1, 11+1,3): 199.237842 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 193.793883
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 199.237842
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,3) :   196.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2786 (24.8%), 8464 (75.2%) left; Finishing by Sat Oct 21  6:28:42 2000

(16,13,9) <- (0,0,9).*(16, 12+1,1): 25.857626 Mflop/s
(16,13,15) <- (0,1,15).*(16, 12+1,1): 27.030979 Mflop/s

Testing m0 = 16, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 16  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 13 9 16 13 13 9 16 9
<<< (M = 16, K = 13, N = 9) : 25.857626
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 13 15 16 13 13 15 16 15
<<< (M = 16, K = 13, N = 15) : 27.030979
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (16, 12,1) :    26.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2787 (24.8%), 8463 (75.2%) left; Finishing by Sat Oct 21  6:28:41 2000

(12,12,9) <- (0,3,9).*(12, 3+1,1): 32.588416 Mflop/s
(12,20,15) <- (1,5,15).*(12, 3+1,1): 28.272921 Mflop/s

Testing m0 = 12, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 12  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 9 12 12 12 9 12 9
<<< (M = 12, K = 12, N = 9) : 32.588416
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 20 15 12 20 20 15 12 15
<<< (M = 12, K = 20, N = 15) : 28.272921
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (12, 3,1) :    30.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2788 (24.8%), 8462 (75.2%) left; Finishing by Sat Oct 21  6:28:40 2000

(9,12,7) <- (9,3,1).*(1, 3+1,7): 148.192132 Mflop/s
(15,20,14) <- (15,5,2).*(1, 3+1,7): 141.860353 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 7 9 12 12 7 9 7
<<< (M = 9, K = 12, N = 7) : 148.192132
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 14 15 20 20 14 15 14
<<< (M = 15, K = 20, N = 14) : 141.860353
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,7) :   145.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2789 (24.8%), 8461 (75.2%) left; Finishing by Sat Oct 21  6:28:43 2000

(9,8,5) <- (3,1,1).*(3, 7+1,5): 107.295777 Mflop/s
(15,16,15) <- (5,2,3).*(3, 7+1,5): 135.031473 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  7 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 107.295777
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 135.031473
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 7,5) :   119.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2790 (24.8%), 8460 (75.2%) left; Finishing by Sat Oct 21  6:28:46 2000

(8,8,8) <- (2,1,2).*(4, 7+1,4): 63.347027 Mflop/s
(12,16,12) <- (3,2,3).*(4, 7+1,4): 135.845351 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 63.347027
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 12 12 16 16 12 12 12
<<< (M = 12, K = 16, N = 12) : 135.845351
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 7,4) :    86.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2791 (24.8%), 8459 (75.2%) left; Finishing by Sat Oct 21  6:28:45 2000

(8,12,9) <- (4,4,9).*(2, 2+1,1): 145.098347 Mflop/s
(14,21,15) <- (7,7,15).*(2, 2+1,1): 135.047555 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 145.098347
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 15 14 21 21 15 14 15
<<< (M = 14, K = 21, N = 15) : 135.047555
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 2,1) :   139.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2792 (24.8%), 8458 (75.2%) left; Finishing by Sat Oct 21  6:28:43 2000

(6,10,8) <- (1,2,4).*(6, 4+1,2): 121.266144 Mflop/s
(12,15,14) <- (2,3,7).*(6, 4+1,2): 94.737517 Mflop/s

Testing m0 = 6, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 10 8 6 10 10 8 6 8
<<< (M = 6, K = 10, N = 8) : 121.266144
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 94.737517
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 4,2) :   106.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2793 (24.8%), 8457 (75.2%) left; Finishing by Sat Oct 21  6:28:46 2000

(9,7,9) <- (9,1,3).*(1, 6+1,3): 156.430910 Mflop/s
(15,14,15) <- (15,2,5).*(1, 6+1,3): 188.054119 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 156.430910
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 188.054119
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,3) :   170.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2794 (24.8%), 8456 (75.2%) left; Finishing by Sat Oct 21  6:28:49 2000

(15,13,9) <- (0,0,9).*(15, 12+1,1): 87.824092 Mflop/s
(15,13,15) <- (1,1,15).*(15, 12+1,1): 105.297641 Mflop/s

Testing m0 = 15, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 15  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 9 15 13 13 9 15 9
<<< (M = 15, K = 13, N = 9) : 87.824092
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 105.297641
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (15, 12,1) :    95.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2795 (24.8%), 8455 (75.2%) left; Finishing by Sat Oct 21  6:28:48 2000

(8,6,8) <- (2,1,4).*(4, 5+1,2): 26.788463 Mflop/s
(12,18,14) <- (3,3,7).*(4, 5+1,2): 37.287148 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 26.788463
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 14 12 18 18 14 12 14
<<< (M = 12, K = 18, N = 14) : 37.287148
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 5,2) :    31.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2796 (24.9%), 8454 (75.1%) left; Finishing by Sat Oct 21  6:28:47 2000

(8,14,9) <- (4,0,9).*(2, 13+1,1): 166.912460 Mflop/s
(14,14,15) <- (7,1,15).*(2, 13+1,1): 168.776850 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 166.912460
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 168.776850
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 13,1) :   167.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2797 (24.9%), 8453 (75.1%) left; Finishing by Sat Oct 21  6:28:50 2000

(8,8,9) <- (4,1,9).*(2, 7+1,1): 136.451060 Mflop/s
(14,16,15) <- (7,2,15).*(2, 7+1,1): 178.213651 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 136.451060
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 178.213651
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 7,1) :   154.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2798 (24.9%), 8452 (75.1%) left; Finishing by Sat Oct 21  6:28:53 2000

(9,8,8) <- (9,1,4).*(1, 7+1,2): 152.598021 Mflop/s
(15,16,14) <- (15,2,7).*(1, 7+1,2): 193.020358 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 152.598021
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 193.020358
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,2) :   170.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2799 (24.9%), 8451 (75.1%) left; Finishing by Sat Oct 21  6:28:56 2000

(8,10,9) <- (2,2,3).*(4, 4+1,3): 109.159436 Mflop/s
(12,15,15) <- (3,3,5).*(4, 4+1,3): 147.471920 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 109.159436
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 147.471920
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 4,3) :   125.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2800 (24.9%), 8450 (75.1%) left; Finishing by Sat Oct 21  6:28:55 2000

(11,13,9) <- (0,0,9).*(11, 12+1,1): 28.407004 Mflop/s
(11,13,15) <- (1,1,15).*(11, 12+1,1): 26.765886 Mflop/s

Testing m0 = 11, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 11  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 13 9 11 13 13 9 11 9
<<< (M = 11, K = 13, N = 9) : 28.407004
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 13 15 11 13 13 15 11 15
<<< (M = 11, K = 13, N = 15) : 26.765886
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (11, 12,1) :    27.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2801 (24.9%), 8449 (75.1%) left; Finishing by Sat Oct 21  6:28:53 2000

(8,9,9) <- (4,1,9).*(2, 8+1,1): 124.091345 Mflop/s
(14,9,15) <- (7,1,15).*(2, 8+1,1): 130.353681 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 124.091345
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 130.353681
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 8,1) :   127.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2802 (24.9%), 8448 (75.1%) left; Finishing by Sat Oct 21  6:28:56 2000

(16,7,9) <- (0,1,9).*(16, 6+1,1): 23.248951 Mflop/s
(16,14,15) <- (0,2,15).*(16, 6+1,1): 29.112270 Mflop/s

Testing m0 = 16, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 16  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 7 9 16 7 7 9 16 9
<<< (M = 16, K = 7, N = 9) : 23.248951
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 15 16 14 14 15 16 15
<<< (M = 16, K = 14, N = 15) : 29.112270
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (16, 6,1) :    25.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2803 (24.9%), 8447 (75.1%) left; Finishing by Sat Oct 21  6:28:55 2000

(9,15,5) <- (3,0,1).*(3, 14+1,5): 121.914380 Mflop/s
(15,15,15) <- (5,1,3).*(3, 14+1,5): 126.450655 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  14 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 5 9 15 15 5 9 5
<<< (M = 9, K = 15, N = 5) : 121.914380
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 126.450655
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 14,5) :   124.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2804 (24.9%), 8446 (75.1%) left; Finishing by Sat Oct 21  6:28:58 2000

(9,12,5) <- (9,0,1).*(1, 11+1,5): 154.270253 Mflop/s
(15,12,15) <- (15,1,3).*(1, 11+1,5): 164.865729 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 154.270253
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 164.865729
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,5) :   159.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2805 (24.9%), 8445 (75.1%) left; Finishing by Sat Oct 21  6:29:01 2000

(9,14,9) <- (9,0,3).*(1, 13+1,3): 197.226622 Mflop/s
(15,14,15) <- (15,1,5).*(1, 13+1,3): 203.242779 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 197.226622
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 203.242779
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,3) :   200.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2806 (24.9%), 8444 (75.1%) left; Finishing by Sat Oct 21  6:29:04 2000

(8,13,9) <- (4,0,3).*(2, 12+1,3): 49.154349 Mflop/s
(14,13,15) <- (7,1,5).*(2, 12+1,3): 36.470012 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 49.154349
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 36.470012
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 12,3) :    41.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2807 (25.0%), 8443 (75.0%) left; Finishing by Sat Oct 21  6:29:03 2000

(8,15,8) <- (2,0,2).*(4, 14+1,4): 24.871569 Mflop/s
(12,15,12) <- (3,1,3).*(4, 14+1,4): 29.381544 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 24.871569
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 12 12 15 15 12 12 12
<<< (M = 12, K = 15, N = 12) : 29.381544
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 14,4) :    26.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2808 (25.0%), 8442 (75.0%) left; Finishing by Sat Oct 21  6:29:02 2000

(7,14,8) <- (1,0,4).*(7, 13+1,2): 24.949427 Mflop/s
(14,14,14) <- (2,1,7).*(7, 13+1,2): 28.387694 Mflop/s

Testing m0 = 7, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 14 8 7 14 14 8 7 8
<<< (M = 7, K = 14, N = 8) : 24.949427
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 28.387694
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 13,2) :    26.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2809 (25.0%), 8441 (75.0%) left; Finishing by Sat Oct 21  6:29:00 2000

(5,12,9) <- (1,4,9).*(5, 2+1,1): 63.199554 Mflop/s
(15,21,15) <- (3,7,15).*(5, 2+1,1): 89.672550 Mflop/s

Testing m0 = 5, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 63.199554
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 89.672550
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 2,1) :    74.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2810 (25.0%), 8440 (75.0%) left; Finishing by Sat Oct 21  6:28:55 2000

(10,12,9) <- (0,0,9).*(10, 11+1,1): 74.095314 Mflop/s
(10,12,15) <- (1,1,15).*(10, 11+1,1): 101.356770 Mflop/s

Testing m0 = 10, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 10  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 9 10 12 12 9 10 9
<<< (M = 10, K = 12, N = 9) : 74.095314
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 15 10 12 12 15 10 15
<<< (M = 10, K = 12, N = 15) : 101.356770
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (10, 11,1) :    85.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2811 (25.0%), 8439 (75.0%) left; Finishing by Sat Oct 21  6:28:54 2000

(9,13,9) <- (9,0,9).*(1, 12+1,1): 135.686822 Mflop/s
(15,13,15) <- (15,1,15).*(1, 12+1,1): 138.865978 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 135.686822
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 138.865978
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,1) :   137.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2812 (25.0%), 8438 (75.0%) left; Finishing by Sat Oct 21  6:28:53 2000

(8,8,7) <- (4,1,1).*(2, 7+1,7): 28.385352 Mflop/s
(14,16,14) <- (7,2,2).*(2, 7+1,7): 31.843524 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  7 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 7 8 8 8 7 8 7
<<< (M = 8, K = 8, N = 7) : 28.385352
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 31.843524
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 7,7) :    30.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2813 (25.0%), 8437 (75.0%) left; Finishing by Sat Oct 21  6:28:52 2000

(8,7,8) <- (4,1,2).*(2, 6+1,4): 32.677464 Mflop/s
(14,14,12) <- (7,2,3).*(2, 6+1,4): 33.775348 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 32.677464
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 33.775348
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 6,4) :    33.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2814 (25.0%), 8436 (75.0%) left; Finishing by Sat Oct 21  6:28:51 2000

(9,12,16) <- (9,4,0).*(1, 2+1,16): 116.235551 Mflop/s
(15,21,16) <- (15,7,0).*(1, 2+1,16): 112.518867 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 16 9 12 12 16 9 16
<<< (M = 9, K = 12, N = 16) : 116.235551
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 16 15 21 21 16 15 16
<<< (M = 15, K = 21, N = 16) : 112.518867
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,16) :   114.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2815 (25.0%), 8435 (75.0%) left; Finishing by Sat Oct 21  6:28:46 2000

(8,12,5) <- (4,3,1).*(2, 3+1,5): 37.377402 Mflop/s
(14,20,15) <- (7,5,3).*(2, 3+1,5): 33.165153 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  3 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 5 8 12 12 5 8 5
<<< (M = 8, K = 12, N = 5) : 37.377402
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 15 14 20 20 15 14 15
<<< (M = 14, K = 20, N = 15) : 33.165153
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 3,5) :    35.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2816 (25.0%), 8434 (75.0%) left; Finishing by Sat Oct 21  6:28:45 2000

(9,11,8) <- (3,0,2).*(3, 10+1,4): 126.593422 Mflop/s
(15,11,12) <- (5,1,3).*(3, 10+1,4): 128.798871 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 126.593422
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 128.798871
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 10,4) :   127.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2817 (25.0%), 8433 (75.0%) left; Finishing by Sat Oct 21  6:28:43 2000

(12,14,9) <- (0,0,9).*(12, 13+1,1): 81.595414 Mflop/s
(12,14,15) <- (1,1,15).*(12, 13+1,1): 99.133095 Mflop/s

Testing m0 = 12, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 12  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 9 12 14 14 9 12 9
<<< (M = 12, K = 14, N = 9) : 81.595414
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 99.133095
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (12, 13,1) :    89.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2818 (25.0%), 8432 (75.0%) left; Finishing by Sat Oct 21  6:28:42 2000

(9,13,7) <- (9,0,1).*(1, 12+1,7): 133.276011 Mflop/s
(15,13,14) <- (15,1,2).*(1, 12+1,7): 138.998123 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 7 9 13 13 7 9 7
<<< (M = 9, K = 13, N = 7) : 133.276011
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 138.998123
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,7) :   136.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2819 (25.1%), 8431 (74.9%) left; Finishing by Sat Oct 21  6:28:45 2000

(8,8,9) <- (2,1,3).*(4, 7+1,3): 92.943589 Mflop/s
(12,16,15) <- (3,2,5).*(4, 7+1,3): 131.143534 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 92.943589
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 131.143534
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 7,3) :   108.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2820 (25.1%), 8430 (74.9%) left; Finishing by Sat Oct 21  6:28:48 2000

(6,10,8) <- (1,1,4).*(6, 9+1,2): 110.685415 Mflop/s
(12,10,14) <- (2,1,7).*(6, 9+1,2): 79.194163 Mflop/s

Testing m0 = 6, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 10 8 6 10 10 8 6 8
<<< (M = 6, K = 10, N = 8) : 110.685415
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 14 12 10 10 14 12 14
<<< (M = 12, K = 10, N = 14) : 79.194163
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 9,2) :    92.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2821 (25.1%), 8429 (74.9%) left; Finishing by Sat Oct 21  6:28:47 2000

(9,12,8) <- (3,3,4).*(3, 3+1,2): 152.281922 Mflop/s
(15,20,14) <- (5,5,7).*(3, 3+1,2): 144.351708 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 152.281922
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 14 15 20 20 14 15 14
<<< (M = 15, K = 20, N = 14) : 144.351708
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 3,2) :   148.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2822 (25.1%), 8428 (74.9%) left; Finishing by Sat Oct 21  6:28:46 2000

(9,12,5) <- (3,0,1).*(3, 11+1,5): 116.059612 Mflop/s
(15,12,15) <- (5,1,3).*(3, 11+1,5): 123.107720 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  11 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 116.059612
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 123.107720
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 11,5) :   119.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2823 (25.1%), 8427 (74.9%) left; Finishing by Sat Oct 21  6:28:49 2000

(9,10,11) <- (9,1,0).*(1, 9+1,11): 111.242425 Mflop/s
(15,10,11) <- (15,1,1).*(1, 9+1,11): 110.742277 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 11 9 10 10 11 9 11
<<< (M = 9, K = 10, N = 11) : 111.242425
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 11 15 10 10 11 15 11
<<< (M = 15, K = 10, N = 11) : 110.742277
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,11) :   111.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2824 (25.1%), 8426 (74.9%) left; Finishing by Sat Oct 21  6:28:48 2000

(9,12,10) <- (9,3,0).*(1, 3+1,10): 133.695678 Mflop/s
(15,20,10) <- (15,5,1).*(1, 3+1,10): 123.888066 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 10 9 12 12 10 9 10
<<< (M = 9, K = 12, N = 10) : 133.695678
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 10 15 20 20 10 15 10
<<< (M = 15, K = 20, N = 10) : 123.888066
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,10) :   128.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2825 (25.1%), 8425 (74.9%) left; Finishing by Sat Oct 21  6:28:46 2000

(9,12,9) <- (3,0,9).*(3, 11+1,1): 160.962470 Mflop/s
(15,12,15) <- (5,1,15).*(3, 11+1,1): 164.078642 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 160.962470
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 164.078642
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 11,1) :   162.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2826 (25.1%), 8424 (74.9%) left; Finishing by Sat Oct 21  6:28:45 2000

(9,15,5) <- (9,0,1).*(1, 14+1,5): 165.780251 Mflop/s
(15,15,15) <- (15,1,3).*(1, 14+1,5): 174.686112 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 5 9 15 15 5 9 5
<<< (M = 9, K = 15, N = 5) : 165.780251
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 174.686112
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,5) :   170.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2827 (25.1%), 8423 (74.9%) left; Finishing by Sat Oct 21  6:28:48 2000

(7,9,8) <- (1,1,4).*(7, 8+1,2): 22.999991 Mflop/s
(14,9,14) <- (2,1,7).*(7, 8+1,2): 23.232561 Mflop/s

Testing m0 = 7, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 8 7 9 9 8 7 8
<<< (M = 7, K = 9, N = 8) : 22.999991
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 14 14 9 9 14 14 14
<<< (M = 14, K = 9, N = 14) : 23.232561
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 8,2) :    23.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2828 (25.1%), 8422 (74.9%) left; Finishing by Sat Oct 21  6:28:47 2000

(8,10,8) <- (4,2,4).*(2, 4+1,2): 136.142718 Mflop/s
(14,15,14) <- (7,3,7).*(2, 4+1,2): 84.583175 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 136.142718
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 84.583175
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 4,2) :   104.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2829 (25.1%), 8421 (74.9%) left; Finishing by Sat Oct 21  6:28:50 2000

(7,12,9) <- (1,4,9).*(7, 2+1,1): 103.885541 Mflop/s
(14,21,15) <- (2,7,15).*(7, 2+1,1): 101.837425 Mflop/s

Testing m0 = 7, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 9 7 12 12 9 7 9
<<< (M = 7, K = 12, N = 9) : 103.885541
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 15 14 21 21 15 14 15
<<< (M = 14, K = 21, N = 15) : 101.837425
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 2,1) :   102.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2830 (25.2%), 8420 (74.8%) left; Finishing by Sat Oct 21  6:28:45 2000

(5,7,9) <- (1,1,9).*(5, 6+1,1): 51.977935 Mflop/s
(15,14,15) <- (3,2,15).*(5, 6+1,1): 89.524897 Mflop/s

Testing m0 = 5, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 7 9 5 7 7 9 5 9
<<< (M = 5, K = 7, N = 9) : 51.977935
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 89.524897
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 6,1) :    65.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2831 (25.2%), 8419 (74.8%) left; Finishing by Sat Oct 21  6:28:48 2000

(9,12,8) <- (9,0,1).*(1, 11+1,8): 119.812223 Mflop/s
(15,12,8) <- (15,1,1).*(1, 11+1,8): 121.343412 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 119.812223
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 8 15 12 12 8 15 8
<<< (M = 15, K = 12, N = 8) : 121.343412
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,8) :   120.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2832 (25.2%), 8418 (74.8%) left; Finishing by Sat Oct 21  6:28:47 2000

(16,16,9) <- (0,0,9).*(16, 15+1,1): 26.043003 Mflop/s
(16,16,15) <- (0,1,15).*(16, 15+1,1): 27.967118 Mflop/s

Testing m0 = 16, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 16  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 16 9 16 16 16 9 16 9
<<< (M = 16, K = 16, N = 9) : 26.043003
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 16 15 16 16 16 15 16 15
<<< (M = 16, K = 16, N = 15) : 27.967118
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (16, 15,1) :    27.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2833 (25.2%), 8417 (74.8%) left; Finishing by Sat Oct 21  6:28:46 2000

(9,16,9) <- (3,0,9).*(3, 15+1,1): 187.396224 Mflop/s
(15,16,15) <- (5,1,15).*(3, 15+1,1): 190.692552 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 187.396224
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 190.692552
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 15,1) :   189.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2834 (25.2%), 8416 (74.8%) left; Finishing by Sat Oct 21  6:28:48 2000

(8,8,5) <- (4,1,1).*(2, 7+1,5): 30.064284 Mflop/s
(14,16,15) <- (7,2,3).*(2, 7+1,5): 33.847487 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  7 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 5 8 8 8 5 8 5
<<< (M = 8, K = 8, N = 5) : 30.064284
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 33.847487
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 7,5) :    31.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2835 (25.2%), 8415 (74.8%) left; Finishing by Sat Oct 21  6:28:47 2000

(9,12,9) <- (3,0,3).*(3, 11+1,3): 125.987340 Mflop/s
(15,12,15) <- (5,1,5).*(3, 11+1,3): 127.211100 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 125.987340
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 127.211100
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 11,3) :   126.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2836 (25.2%), 8414 (74.8%) left; Finishing by Sat Oct 21  6:28:46 2000

(6,18,9) <- (1,9,9).*(6,1+1,1): 30.801124 Mflop/s
(12,30,15) <- (2,15,15).*(6,1+1,1): 36.495843 Mflop/s

Testing m0 = 6, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 18 9 6 18 18 9 6 9
<<< (M = 6, K = 18, N = 9) : 30.801124
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 30 15 12 30 30 15 12 15
<<< (M = 12, K = 30, N = 15) : 36.495843
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6,1,1) :    33.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2837 (25.2%), 8413 (74.8%) left; Finishing by Sat Oct 21  6:28:41 2000

(15,15,9) <- (0,0,9).*(15, 14+1,1): 91.110925 Mflop/s
(15,15,15) <- (1,1,15).*(15, 14+1,1): 108.892936 Mflop/s

Testing m0 = 15, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 15  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 91.110925
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 108.892936
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (15, 14,1) :    99.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2838 (25.2%), 8412 (74.8%) left; Finishing by Sat Oct 21  6:28:44 2000

(16,12,9) <- (0,3,9).*(16, 3+1,1): 29.312154 Mflop/s
(16,20,15) <- (0,5,15).*(16, 3+1,1): 26.898024 Mflop/s

Testing m0 = 16, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 16  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 9 16 12 12 9 16 9
<<< (M = 16, K = 12, N = 9) : 29.312154
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 20 15 16 20 20 15 16 15
<<< (M = 16, K = 20, N = 15) : 26.898024
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (16, 3,1) :    28.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2839 (25.2%), 8411 (74.8%) left; Finishing by Sat Oct 21  6:28:43 2000

(9,12,15) <- (9,4,0).*(1, 2+1,15): 112.381700 Mflop/s
(15,21,15) <- (15,7,1).*(1, 2+1,15): 108.813670 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 112.381700
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 108.813670
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,15) :   110.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2840 (25.2%), 8410 (74.8%) left; Finishing by Sat Oct 21  6:28:38 2000

(8,13,8) <- (4,0,1).*(2, 12+1,8): 29.189541 Mflop/s
(14,13,8) <- (7,1,1).*(2, 12+1,8): 29.344571 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  12 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 29.189541
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 8 14 13 13 8 14 8
<<< (M = 14, K = 13, N = 8) : 29.344571
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 12,8) :    29.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2841 (25.3%), 8409 (74.7%) left; Finishing by Sat Oct 21  6:28:41 2000

(9,12,5) <- (9,3,1).*(1, 3+1,5): 169.966446 Mflop/s
(15,20,15) <- (15,5,3).*(1, 3+1,5): 168.066146 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 169.966446
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 15 15 20 20 15 15 15
<<< (M = 15, K = 20, N = 15) : 168.066146
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,5) :   169.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2842 (25.3%), 8408 (74.7%) left; Finishing by Sat Oct 21  6:28:43 2000

(9,11,9) <- (1,0,9).*(9, 10+1,1): 28.163198 Mflop/s
(9,11,15) <- (1,1,15).*(9, 10+1,1): 28.233452 Mflop/s

Testing m0 = 9, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 9  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 28.163198
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 15 9 11 11 15 9 15
<<< (M = 9, K = 11, N = 15) : 28.233452
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (9, 10,1) :    28.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2843 (25.3%), 8407 (74.7%) left; Finishing by Sat Oct 21  6:28:42 2000

(6,10,9) <- (1,1,9).*(6, 9+1,1): 105.361043 Mflop/s
(12,10,15) <- (2,1,15).*(6, 9+1,1): 74.320208 Mflop/s

Testing m0 = 6, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 10 9 6 10 10 9 6 9
<<< (M = 6, K = 10, N = 9) : 105.361043
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 74.320208
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 9,1) :    87.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2844 (25.3%), 8406 (74.7%) left; Finishing by Sat Oct 21  6:28:45 2000

(16,9,9) <- (0,1,9).*(16, 8+1,1): 24.474606 Mflop/s
(16,9,15) <- (0,1,15).*(16, 8+1,1): 24.505063 Mflop/s

Testing m0 = 16, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 16  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 9 9 16 9 9 9 16 9
<<< (M = 16, K = 9, N = 9) : 24.474606
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 9 15 16 9 9 15 16 15
<<< (M = 16, K = 9, N = 15) : 24.505063
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (16, 8,1) :    24.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2845 (25.3%), 8405 (74.7%) left; Finishing by Sat Oct 21  6:28:44 2000

(8,16,9) <- (2,0,3).*(4, 15+1,3): 29.470996 Mflop/s
(12,16,15) <- (3,1,5).*(4, 15+1,3): 30.027730 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 29.470996
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 30.027730
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 15,3) :    29.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2846 (25.3%), 8404 (74.7%) left; Finishing by Sat Oct 21  6:28:47 2000

(9,18,15) <- (9,9,0).*(1,1+1,15): 25.091947 Mflop/s
(15,30,15) <- (15,15,1).*(1,1+1,15): 24.752149 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 15 9 18 18 15 9 15
<<< (M = 9, K = 18, N = 15) : 25.091947
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 24.752149
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,15) :    24.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2847 (25.3%), 8403 (74.7%) left; Finishing by Sat Oct 21  6:28:46 2000

(5,11,9) <- (1,0,3).*(5, 10+1,3): 27.884664 Mflop/s
(15,11,15) <- (3,1,5).*(5, 10+1,3): 29.159200 Mflop/s

Testing m0 = 5, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 11 9 5 11 11 9 5 9
<<< (M = 5, K = 11, N = 9) : 27.884664
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 29.159200
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 10,3) :    28.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2848 (25.3%), 8402 (74.7%) left; Finishing by Sat Oct 21  6:28:45 2000

(8,14,8) <- (4,0,2).*(2, 13+1,4): 35.614180 Mflop/s
(14,14,12) <- (7,1,3).*(2, 13+1,4): 31.411933 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 35.614180
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 31.411933
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 13,4) :    33.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2849 (25.3%), 8401 (74.7%) left; Finishing by Sat Oct 21  6:28:44 2000

(9,13,8) <- (3,0,2).*(3, 12+1,4): 128.128367 Mflop/s
(15,13,12) <- (5,1,3).*(3, 12+1,4): 129.772577 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 128.128367
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 129.772577
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 12,4) :   128.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2850 (25.3%), 8400 (74.7%) left; Finishing by Sat Oct 21  6:28:43 2000

(8,16,8) <- (4,0,4).*(2, 15+1,2): 143.177271 Mflop/s
(14,16,14) <- (7,1,7).*(2, 15+1,2): 77.556837 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 143.177271
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 77.556837
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 15,2) :   100.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2851 (25.3%), 8399 (74.7%) left; Finishing by Sat Oct 21  6:28:37 2000

(6,7,8) <- (1,1,4).*(6, 6+1,2): 99.360236 Mflop/s
(12,14,14) <- (2,2,7).*(6, 6+1,2): 87.179892 Mflop/s

Testing m0 = 6, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 7 8 6 7 7 8 6 8
<<< (M = 6, K = 7, N = 8) : 99.360236
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 87.179892
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 6,2) :    92.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2852 (25.4%), 8398 (74.6%) left; Finishing by Sat Oct 21  6:28:40 2000

(8,12,9) <- (4,3,3).*(2, 3+1,3): 57.143212 Mflop/s
(14,20,15) <- (7,5,5).*(2, 3+1,3): 38.712408 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 57.143212
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 15 14 20 20 15 14 15
<<< (M = 14, K = 20, N = 15) : 38.712408
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 3,3) :    46.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2853 (25.4%), 8397 (74.6%) left; Finishing by Sat Oct 21  6:28:39 2000

(9,15,8) <- (9,0,1).*(1, 14+1,8): 122.143953 Mflop/s
(15,15,8) <- (15,1,1).*(1, 14+1,8): 122.304795 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 122.143953
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 8 15 15 15 8 15 8
<<< (M = 15, K = 15, N = 8) : 122.304795
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,8) :   122.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2854 (25.4%), 8396 (74.6%) left; Finishing by Sat Oct 21  6:28:38 2000

(9,15,8) <- (3,0,4).*(3, 14+1,2): 130.961685 Mflop/s
(15,15,14) <- (5,1,7).*(3, 14+1,2): 132.376547 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 130.961685
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 132.376547
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 14,2) :   131.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2855 (25.4%), 8395 (74.6%) left; Finishing by Sat Oct 21  6:28:37 2000

(9,9,9) <- (1,1,9).*(9, 8+1,1): 28.287827 Mflop/s
(9,9,15) <- (1,1,15).*(9, 8+1,1): 28.430964 Mflop/s

Testing m0 = 9, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 9  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 28.287827
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 15 9 9 9 15 9 15
<<< (M = 9, K = 9, N = 15) : 28.430964
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (9, 8,1) :    28.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2856 (25.4%), 8394 (74.6%) left; Finishing by Sat Oct 21  6:28:36 2000

(9,6,8) <- (3,1,4).*(3, 5+1,2): 114.915276 Mflop/s
(15,18,14) <- (5,3,7).*(3, 5+1,2): 160.309826 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 114.915276
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 160.309826
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 5,2) :   133.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2857 (25.4%), 8393 (74.6%) left; Finishing by Sat Oct 21  6:28:43 2000

(8,11,8) <- (4,0,4).*(2, 10+1,2): 132.907449 Mflop/s
(14,11,14) <- (7,1,7).*(2, 10+1,2): 73.650599 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 132.907449
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 14 14 11 11 14 14 14
<<< (M = 14, K = 11, N = 14) : 73.650599
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 10,2) :    94.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2858 (25.4%), 8392 (74.6%) left; Finishing by Sat Oct 21  6:28:42 2000

(8,16,8) <- (4,0,1).*(2, 15+1,8): 29.622871 Mflop/s
(14,16,8) <- (7,1,1).*(2, 15+1,8): 29.718820 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  15 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 29.622871
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 8 14 16 16 8 14 8
<<< (M = 14, K = 16, N = 8) : 29.718820
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 15,8) :    29.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2859 (25.4%), 8391 (74.6%) left; Finishing by Sat Oct 21  6:28:44 2000

(5,12,8) <- (1,3,4).*(5, 3+1,2): 36.242397 Mflop/s
(15,20,14) <- (3,5,7).*(5, 3+1,2): 34.117206 Mflop/s

Testing m0 = 5, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 8 5 12 12 8 5 8
<<< (M = 5, K = 12, N = 8) : 36.242397
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 14 15 20 20 14 15 14
<<< (M = 15, K = 20, N = 14) : 34.117206
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 3,2) :    35.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2860 (25.4%), 8390 (74.6%) left; Finishing by Sat Oct 21  6:28:39 2000

(9,12,13) <- (9,3,0).*(1, 3+1,13): 128.001446 Mflop/s
(15,20,13) <- (15,5,1).*(1, 3+1,13): 117.158944 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 13 9 12 12 13 9 13
<<< (M = 9, K = 12, N = 13) : 128.001446
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 13 15 20 20 13 15 13
<<< (M = 15, K = 20, N = 13) : 117.158944
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,13) :   122.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2861 (25.4%), 8389 (74.6%) left; Finishing by Sat Oct 21  6:28:38 2000

(9,6,14) <- (9,1,0).*(1, 5+1,14): 94.521873 Mflop/s
(15,18,14) <- (15,3,1).*(1, 5+1,14): 127.331871 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 14 9 6 6 14 9 14
<<< (M = 9, K = 6, N = 14) : 94.521873
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 127.331871
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,14) :   108.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2862 (25.4%), 8388 (74.6%) left; Finishing by Sat Oct 21  6:28:37 2000

(9,6,6) <- (9,1,1).*(1, 5+1,6): 114.413002 Mflop/s
(15,18,12) <- (15,3,2).*(1, 5+1,6): 175.960129 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 6 9 6 6 6 9 6
<<< (M = 9, K = 6, N = 6) : 114.413002
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 175.960129
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,6) :   138.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2863 (25.4%), 8387 (74.6%) left; Finishing by Sat Oct 21  6:28:36 2000

(8,16,5) <- (4,0,1).*(2, 15+1,5): 32.242204 Mflop/s
(14,16,15) <- (7,1,3).*(2, 15+1,5): 31.777579 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  15 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 5 8 16 16 5 8 5
<<< (M = 8, K = 16, N = 5) : 32.242204
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 31.777579
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 15,5) :    32.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2864 (25.5%), 8386 (74.5%) left; Finishing by Sat Oct 21  6:28:39 2000

(8,13,5) <- (4,0,1).*(2, 12+1,5): 31.729863 Mflop/s
(14,13,15) <- (7,1,3).*(2, 12+1,5): 31.237718 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  12 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 5 8 13 13 5 8 5
<<< (M = 8, K = 13, N = 5) : 31.729863
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 31.237718
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 12,5) :    31.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2865 (25.5%), 8385 (74.5%) left; Finishing by Sat Oct 21  6:28:38 2000

(7,11,9) <- (1,0,9).*(7, 10+1,1): 35.193005 Mflop/s
(14,11,15) <- (2,1,15).*(7, 10+1,1): 38.592238 Mflop/s

Testing m0 = 7, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 11 9 7 11 11 9 7 9
<<< (M = 7, K = 11, N = 9) : 35.193005
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 38.592238
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 10,1) :    36.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2866 (25.5%), 8384 (74.5%) left; Finishing by Sat Oct 21  6:28:37 2000

(9,9,9) <- (3,1,3).*(3, 8+1,3): 120.349690 Mflop/s
(15,9,15) <- (5,1,5).*(3, 8+1,3): 122.622803 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 120.349690
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 122.622803
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 8,3) :   121.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2867 (25.5%), 8383 (74.5%) left; Finishing by Sat Oct 21  6:28:40 2000

(8,7,9) <- (4,1,3).*(2, 6+1,3): 45.233125 Mflop/s
(14,14,15) <- (7,2,5).*(2, 6+1,3): 39.159398 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 45.233125
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 39.159398
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 6,3) :    42.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2868 (25.5%), 8382 (74.5%) left; Finishing by Sat Oct 21  6:28:34 2000

(8,6,9) <- (2,1,3).*(4, 5+1,3): 87.315698 Mflop/s
(12,18,15) <- (3,3,5).*(4, 5+1,3): 138.507070 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 87.315698
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 138.507070
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 5,3) :   107.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2869 (25.5%), 8381 (74.5%) left; Finishing by Sat Oct 21  6:28:37 2000

(9,9,5) <- (3,1,1).*(3, 8+1,5): 112.827024 Mflop/s
(15,9,15) <- (5,1,3).*(3, 8+1,5): 117.246795 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  8 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 112.827024
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 117.246795
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 8,5) :   115.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2870 (25.5%), 8380 (74.5%) left; Finishing by Sat Oct 21  6:28:40 2000

(9,10,9) <- (1,1,9).*(9, 9+1,1): 27.577828 Mflop/s
(9,10,15) <- (1,1,15).*(9, 9+1,1): 27.614653 Mflop/s

Testing m0 = 9, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 9  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 27.577828
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 15 9 10 10 15 9 15
<<< (M = 9, K = 10, N = 15) : 27.614653
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (9, 9,1) :    27.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2871 (25.5%), 8379 (74.5%) left; Finishing by Sat Oct 21  6:28:47 2000

(9,10,8) <- (3,2,4).*(3, 4+1,2): 144.807702 Mflop/s
(15,15,14) <- (5,3,7).*(3, 4+1,2): 158.932384 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 144.807702
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 158.932384
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 4,2) :   151.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2872 (25.5%), 8378 (74.5%) left; Finishing by Sat Oct 21  6:28:46 2000

(8,12,8) <- (4,0,1).*(2, 11+1,8): 28.993919 Mflop/s
(14,12,8) <- (7,1,1).*(2, 11+1,8): 28.998213 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  11 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 28.993919
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 8 14 12 12 8 14 8
<<< (M = 14, K = 12, N = 8) : 28.998213
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 11,8) :    29.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2873 (25.5%), 8377 (74.5%) left; Finishing by Sat Oct 21  6:28:49 2000

(10,18,9) <- (0,9,9).*(10,1+1,1): 21.719165 Mflop/s
(10,30,15) <- (1,15,15).*(10,1+1,1): 23.739964 Mflop/s

Testing m0 = 10, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 10 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 18 9 10 18 18 9 10 9
<<< (M = 10, K = 18, N = 9) : 21.719165
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 30 15 10 30 30 15 10 15
<<< (M = 10, K = 30, N = 15) : 23.739964
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (10,1,1) :    22.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2874 (25.5%), 8376 (74.5%) left; Finishing by Sat Oct 21  6:28:48 2000

(9,13,6) <- (9,0,1).*(1, 12+1,6): 142.603974 Mflop/s
(15,13,12) <- (15,1,2).*(1, 12+1,6): 148.633848 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 6 9 13 13 6 9 6
<<< (M = 9, K = 13, N = 6) : 142.603974
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 148.633848
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,6) :   145.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2875 (25.6%), 8375 (74.4%) left; Finishing by Sat Oct 21  6:28:46 2000

(9,10,15) <- (9,1,0).*(1, 9+1,15): 106.143255 Mflop/s
(15,10,15) <- (15,1,1).*(1, 9+1,15): 106.671239 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 15 9 10 10 15 9 15
<<< (M = 9, K = 10, N = 15) : 106.143255
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 106.671239
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,15) :   106.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2876 (25.6%), 8374 (74.4%) left; Finishing by Sat Oct 21  6:28:45 2000

(8,9,9) <- (2,1,3).*(4, 8+1,3): 27.238733 Mflop/s
(12,9,15) <- (3,1,5).*(4, 8+1,3): 27.349788 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 27.238733
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 27.349788
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 8,3) :    27.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2877 (25.6%), 8373 (74.4%) left; Finishing by Sat Oct 21  6:28:44 2000

(8,16,8) <- (4,0,2).*(2, 15+1,4): 36.016046 Mflop/s
(14,16,12) <- (7,1,3).*(2, 15+1,4): 31.680925 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 36.016046
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 12 14 16 16 12 14 12
<<< (M = 14, K = 16, N = 12) : 31.680925
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 15,4) :    33.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2878 (25.6%), 8372 (74.4%) left; Finishing by Sat Oct 21  6:28:47 2000

(5,11,8) <- (1,0,4).*(5, 10+1,2): 30.671159 Mflop/s
(15,11,14) <- (3,1,7).*(5, 10+1,2): 30.812368 Mflop/s

Testing m0 = 5, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 11 8 5 11 11 8 5 8
<<< (M = 5, K = 11, N = 8) : 30.671159
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 30.812368
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 10,2) :    30.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2879 (25.6%), 8371 (74.4%) left; Finishing by Sat Oct 21  6:28:46 2000

(9,14,11) <- (9,0,0).*(1, 13+1,11): 114.815541 Mflop/s
(15,14,11) <- (15,1,1).*(1, 13+1,11): 115.131424 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 11 9 14 14 11 9 11
<<< (M = 9, K = 14, N = 11) : 114.815541
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 11 15 14 14 11 15 11
<<< (M = 15, K = 14, N = 11) : 115.131424
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,11) :   115.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2880 (25.6%), 8370 (74.4%) left; Finishing by Sat Oct 21  6:28:45 2000

(8,13,8) <- (4,0,2).*(2, 12+1,4): 35.321421 Mflop/s
(14,13,12) <- (7,1,3).*(2, 12+1,4): 31.818473 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 35.321421
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 12 14 13 13 12 14 12
<<< (M = 14, K = 13, N = 12) : 31.818473
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 12,4) :    33.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2881 (25.6%), 8369 (74.4%) left; Finishing by Sat Oct 21  6:28:44 2000

(9,15,9) <- (3,0,3).*(3, 14+1,3): 129.102047 Mflop/s
(15,15,15) <- (5,1,5).*(3, 14+1,3): 131.184813 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 129.102047
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 131.184813
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 14,3) :   130.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2882 (25.6%), 8368 (74.4%) left; Finishing by Sat Oct 21  6:28:43 2000

(9,12,12) <- (9,3,0).*(1, 3+1,12): 129.910141 Mflop/s
(15,20,12) <- (15,5,1).*(1, 3+1,12): 121.163366 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 12 9 12 12 12 9 12
<<< (M = 9, K = 12, N = 12) : 129.910141
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 12 15 20 20 12 15 12
<<< (M = 15, K = 20, N = 12) : 121.163366
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,12) :   125.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2883 (25.6%), 8367 (74.4%) left; Finishing by Sat Oct 21  6:28:42 2000

(9,13,5) <- (3,0,1).*(3, 12+1,5): 119.428356 Mflop/s
(15,13,15) <- (5,1,3).*(3, 12+1,5): 123.002523 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  12 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 5 9 13 13 5 9 5
<<< (M = 9, K = 13, N = 5) : 119.428356
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 123.002523
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 12,5) :   121.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2884 (25.6%), 8366 (74.4%) left; Finishing by Sat Oct 21  6:28:44 2000

(8,10,9) <- (4,1,3).*(2, 9+1,3): 48.157823 Mflop/s
(14,10,15) <- (7,1,5).*(2, 9+1,3): 35.529667 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 48.157823
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 35.529667
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 9,3) :    40.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2885 (25.6%), 8365 (74.4%) left; Finishing by Sat Oct 21  6:28:43 2000

(11,7,9) <- (0,1,9).*(11, 6+1,1): 74.185690 Mflop/s
(11,14,15) <- (1,2,15).*(11, 6+1,1): 111.445614 Mflop/s

Testing m0 = 11, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 11  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 7 9 11 7 7 9 11 9
<<< (M = 11, K = 7, N = 9) : 74.185690
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 15 11 14 14 15 11 15
<<< (M = 11, K = 14, N = 15) : 111.445614
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (11, 6,1) :    89.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2886 (25.7%), 8364 (74.3%) left; Finishing by Sat Oct 21  6:28:38 2000

(5,18,9) <- (1,9,9).*(5,1+1,1): 53.329707 Mflop/s
(15,30,15) <- (3,15,15).*(5,1+1,1): 63.904586 Mflop/s

Testing m0 = 5, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 18 9 5 18 18 9 5 9
<<< (M = 5, K = 18, N = 9) : 53.329707
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 63.904586
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5,1,1) :    58.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2887 (25.7%), 8363 (74.3%) left; Finishing by Sat Oct 21  6:28:37 2000

(6,9,9) <- (1,1,9).*(6, 8+1,1): 103.398302 Mflop/s
(12,9,15) <- (2,1,15).*(6, 8+1,1): 105.492441 Mflop/s

Testing m0 = 6, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 9 6 9 9 9 6 9
<<< (M = 6, K = 9, N = 9) : 103.398302
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 15 12 9 9 15 12 15
<<< (M = 12, K = 9, N = 15) : 105.492441
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 8,1) :   104.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2888 (25.7%), 8362 (74.3%) left; Finishing by Sat Oct 21  6:28:40 2000

(8,12,8) <- (1,3,4).*(8, 3+1,2): 31.515161 Mflop/s
(8,20,14) <- (1,5,7).*(8, 3+1,2): 28.940388 Mflop/s

Testing m0 = 8, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 31.515161
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 20 14 8 20 20 14 8 14
<<< (M = 8, K = 20, N = 14) : 28.940388
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 3,2) :    30.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2889 (25.7%), 8361 (74.3%) left; Finishing by Sat Oct 21  6:28:39 2000

(8,8,8) <- (1,1,4).*(8, 7+1,2): 98.292592 Mflop/s
(8,16,14) <- (1,2,7).*(8, 7+1,2): 116.229087 Mflop/s

Testing m0 = 8, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 98.292592
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 14 8 16 16 14 8 14
<<< (M = 8, K = 16, N = 14) : 116.229087
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 7,2) :   106.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2890 (25.7%), 8360 (74.3%) left; Finishing by Sat Oct 21  6:28:42 2000

(8,14,7) <- (4,0,1).*(2, 13+1,7): 30.177602 Mflop/s
(14,14,14) <- (7,1,2).*(2, 13+1,7): 29.619222 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  13 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 7 8 14 14 7 8 7
<<< (M = 8, K = 14, N = 7) : 30.177602
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 29.619222
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 13,7) :    29.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2891 (25.7%), 8359 (74.3%) left; Finishing by Sat Oct 21  6:28:45 2000

(9,13,8) <- (9,0,1).*(1, 12+1,8): 119.751497 Mflop/s
(15,13,8) <- (15,1,1).*(1, 12+1,8): 120.543600 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 119.751497
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 8 15 13 13 8 15 8
<<< (M = 15, K = 13, N = 8) : 120.543600
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,8) :   120.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2892 (25.7%), 8358 (74.3%) left; Finishing by Sat Oct 21  6:28:43 2000

(9,6,8) <- (9,1,2).*(1, 5+1,4): 138.606988 Mflop/s
(15,18,12) <- (15,3,3).*(1, 5+1,4): 202.940184 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 138.606988
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 202.940184
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,4) :   164.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2893 (25.7%), 8357 (74.3%) left; Finishing by Sat Oct 21  6:28:46 2000

(9,12,5) <- (9,4,1).*(1, 2+1,5): 150.688784 Mflop/s
(15,21,15) <- (15,7,3).*(1, 2+1,5): 146.087287 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  2 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 150.688784
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 146.087287
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 2,5) :   148.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2894 (25.7%), 8356 (74.3%) left; Finishing by Sat Oct 21  6:28:49 2000

(9,12,8) <- (9,0,4).*(1, 11+1,2): 177.055652 Mflop/s
(15,12,14) <- (15,1,7).*(1, 11+1,2): 176.704476 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 177.055652
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 176.704476
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,2) :   176.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2895 (25.7%), 8355 (74.3%) left; Finishing by Sat Oct 21  6:28:48 2000

(9,13,8) <- (3,0,4).*(3, 12+1,2): 128.684241 Mflop/s
(15,13,14) <- (5,1,7).*(3, 12+1,2): 130.920625 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 128.684241
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 130.920625
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 12,2) :   129.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2896 (25.7%), 8354 (74.3%) left; Finishing by Sat Oct 21  6:28:47 2000

(8,12,9) <- (2,4,9).*(4, 2+1,1): 61.533451 Mflop/s
(12,21,15) <- (3,7,15).*(4, 2+1,1): 99.559148 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 61.533451
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 15 12 21 21 15 12 15
<<< (M = 12, K = 21, N = 15) : 99.559148
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 2,1) :    76.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2897 (25.8%), 8353 (74.2%) left; Finishing by Sat Oct 21  6:28:46 2000

(8,15,9) <- (2,0,9).*(4, 14+1,1): 76.018736 Mflop/s
(12,15,15) <- (3,1,15).*(4, 14+1,1): 132.683242 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 76.018736
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 132.683242
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 14,1) :    96.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2898 (25.8%), 8352 (74.2%) left; Finishing by Sat Oct 21  6:28:41 2000

(9,7,9) <- (9,1,1).*(1, 6+1,9): 105.846391 Mflop/s
(15,14,9) <- (15,2,1).*(1, 6+1,9): 129.052398 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 105.846391
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 129.052398
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,9) :   116.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2899 (25.8%), 8351 (74.2%) left; Finishing by Sat Oct 21  6:28:44 2000

(8,14,8) <- (2,0,2).*(4, 13+1,4): 24.700293 Mflop/s
(12,14,12) <- (3,1,3).*(4, 13+1,4): 29.275444 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 24.700293
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 12 12 14 14 12 12 12
<<< (M = 12, K = 14, N = 12) : 29.275444
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 13,4) :    26.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2900 (25.8%), 8350 (74.2%) left; Finishing by Sat Oct 21  6:28:43 2000

(5,8,9) <- (1,1,3).*(5, 7+1,3): 26.892962 Mflop/s
(15,16,15) <- (3,2,5).*(5, 7+1,3): 31.698759 Mflop/s

Testing m0 = 5, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 26.892962
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 31.698759
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 7,3) :    29.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2901 (25.8%), 8349 (74.2%) left; Finishing by Sat Oct 21  6:28:41 2000

(9,18,6) <- (9,9,1).*(1,1+1,6): 122.788408 Mflop/s
(15,30,12) <- (15,15,2).*(1,1+1,6): 131.445106 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 1 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 6 9 18 18 6 9 6
<<< (M = 9, K = 18, N = 6) : 122.788408
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 12 15 30 30 12 15 12
<<< (M = 15, K = 30, N = 12) : 131.445106
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1,1,6) :   127.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2902 (25.8%), 8348 (74.2%) left; Finishing by Sat Oct 21  6:28:44 2000

(9,6,9) <- (3,1,9).*(3, 5+1,1): 116.869207 Mflop/s
(15,18,15) <- (5,3,15).*(3, 5+1,1): 192.134007 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 116.869207
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 192.134007
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 5,1) :   145.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2903 (25.8%), 8347 (74.2%) left; Finishing by Sat Oct 21  6:28:47 2000

(9,13,5) <- (9,0,1).*(1, 12+1,5): 155.970022 Mflop/s
(15,13,15) <- (15,1,3).*(1, 12+1,5): 168.834874 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 5 9 13 13 5 9 5
<<< (M = 9, K = 13, N = 5) : 155.970022
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 168.834874
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,5) :   162.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2904 (25.8%), 8346 (74.2%) left; Finishing by Sat Oct 21  6:28:50 2000

(5,18,9) <- (1,9,3).*(5,1+1,3): 28.671400 Mflop/s
(15,30,15) <- (3,15,5).*(5,1+1,3): 29.645146 Mflop/s

Testing m0 = 5, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 18 9 5 18 18 9 5 9
<<< (M = 5, K = 18, N = 9) : 28.671400
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 29.645146
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5,1,3) :    29.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2905 (25.8%), 8345 (74.2%) left; Finishing by Sat Oct 21  6:28:45 2000

(8,18,8) <- (4,9,1).*(2,1+1,8): 79.551323 Mflop/s
(14,30,8) <- (7,15,1).*(2,1+1,8): 81.628343 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2 1 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 8 8 18 18 8 8 8
<<< (M = 8, K = 18, N = 8) : 79.551323
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 8 14 30 30 8 14 8
<<< (M = 14, K = 30, N = 8) : 81.628343
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2,1,8) :    80.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2906 (25.8%), 8344 (74.2%) left; Finishing by Sat Oct 21  6:28:44 2000

(9,14,12) <- (9,0,0).*(1, 13+1,12): 114.768324 Mflop/s
(15,14,12) <- (15,1,1).*(1, 13+1,12): 115.727212 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 12 9 14 14 12 9 12
<<< (M = 9, K = 14, N = 12) : 114.768324
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 115.727212
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,12) :   115.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2907 (25.8%), 8343 (74.2%) left; Finishing by Sat Oct 21  6:28:43 2000

(8,6,8) <- (4,1,2).*(2, 5+1,4): 31.486601 Mflop/s
(14,18,12) <- (7,3,3).*(2, 5+1,4): 35.779736 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 31.486601
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 12 14 18 18 12 14 12
<<< (M = 14, K = 18, N = 12) : 35.779736
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 5,4) :    33.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2908 (25.8%), 8342 (74.2%) left; Finishing by Sat Oct 21  6:28:42 2000

(14,8,9) <- (0,1,9).*(14, 7+1,1): 24.152024 Mflop/s
(14,16,15) <- (1,2,15).*(14, 7+1,1): 31.050227 Mflop/s

Testing m0 = 14, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 14  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 9 14 8 8 9 14 9
<<< (M = 14, K = 8, N = 9) : 24.152024
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 31.050227
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (14, 7,1) :    27.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2909 (25.9%), 8341 (74.1%) left; Finishing by Sat Oct 21  6:28:40 2000

(13,10,9) <- (0,2,9).*(13, 4+1,1): 93.512304 Mflop/s
(13,15,15) <- (1,3,15).*(13, 4+1,1): 97.720547 Mflop/s

Testing m0 = 13, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 13  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 10 9 13 10 10 9 13 9
<<< (M = 13, K = 10, N = 9) : 93.512304
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 15 13 15 15 15 13 15
<<< (M = 13, K = 15, N = 15) : 97.720547
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (13, 4,1) :    95.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2910 (25.9%), 8340 (74.1%) left; Finishing by Sat Oct 21  6:28:39 2000

(9,14,5) <- (3,0,1).*(3, 13+1,5): 121.235395 Mflop/s
(15,14,15) <- (5,1,3).*(3, 13+1,5): 125.154512 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  13 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 5 9 14 14 5 9 5
<<< (M = 9, K = 14, N = 5) : 121.235395
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 125.154512
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 13,5) :   123.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2911 (25.9%), 8339 (74.1%) left; Finishing by Sat Oct 21  6:28:42 2000

(8,11,6) <- (4,0,1).*(2, 10+1,6): 29.916939 Mflop/s
(14,11,12) <- (7,1,2).*(2, 10+1,6): 26.935494 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  10 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 6 8 11 11 6 8 6
<<< (M = 8, K = 11, N = 6) : 29.916939
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 12 14 11 11 12 14 12
<<< (M = 14, K = 11, N = 12) : 26.935494
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 10,6) :    28.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2912 (25.9%), 8338 (74.1%) left; Finishing by Sat Oct 21  6:28:41 2000

(8,10,7) <- (4,1,1).*(2, 9+1,7): 29.182583 Mflop/s
(14,10,14) <- (7,1,2).*(2, 9+1,7): 28.748828 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  9 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 7 8 10 10 7 8 7
<<< (M = 8, K = 10, N = 7) : 29.182583
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 14 14 10 10 14 14 14
<<< (M = 14, K = 10, N = 14) : 28.748828
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 9,7) :    29.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2913 (25.9%), 8337 (74.1%) left; Finishing by Sat Oct 21  6:28:40 2000

(5,15,9) <- (1,0,3).*(5, 14+1,3): 28.729079 Mflop/s
(15,15,15) <- (3,1,5).*(5, 14+1,3): 29.841668 Mflop/s

Testing m0 = 5, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 9 5 15 15 9 5 9
<<< (M = 5, K = 15, N = 9) : 28.729079
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 29.841668
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 14,3) :    29.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2914 (25.9%), 8336 (74.1%) left; Finishing by Sat Oct 21  6:28:39 2000

(12,13,9) <- (0,0,9).*(12, 12+1,1): 81.964829 Mflop/s
(12,13,15) <- (1,1,15).*(12, 12+1,1): 101.003511 Mflop/s

Testing m0 = 12, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 12  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 9 12 13 13 9 12 9
<<< (M = 12, K = 13, N = 9) : 81.964829
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 101.003511
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (12, 12,1) :    90.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2915 (25.9%), 8335 (74.1%) left; Finishing by Sat Oct 21  6:28:38 2000

(8,16,8) <- (2,0,4).*(4, 15+1,2): 31.023206 Mflop/s
(12,16,14) <- (3,1,7).*(4, 15+1,2): 32.952381 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 31.023206
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 14 12 16 16 14 12 14
<<< (M = 12, K = 16, N = 14) : 32.952381
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 15,2) :    32.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2916 (25.9%), 8334 (74.1%) left; Finishing by Sat Oct 21  6:28:37 2000

(9,15,8) <- (3,0,2).*(3, 14+1,4): 130.932496 Mflop/s
(15,15,12) <- (5,1,3).*(3, 14+1,4): 133.974820 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 130.932496
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 133.974820
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 14,4) :   132.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2917 (25.9%), 8333 (74.1%) left; Finishing by Sat Oct 21  6:28:36 2000

(8,18,8) <- (4,9,2).*(2,1+1,4): 33.583706 Mflop/s
(14,30,12) <- (7,15,3).*(2,1+1,4): 28.119790 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 8 8 18 18 8 8 8
<<< (M = 8, K = 18, N = 8) : 33.583706
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 12 14 30 30 12 14 12
<<< (M = 14, K = 30, N = 12) : 28.119790
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2,1,4) :    30.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2918 (25.9%), 8332 (74.1%) left; Finishing by Sat Oct 21  6:28:35 2000

(5,14,9) <- (1,0,9).*(5, 13+1,1): 60.962986 Mflop/s
(15,14,15) <- (3,1,15).*(5, 13+1,1): 85.245932 Mflop/s

Testing m0 = 5, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 14 9 5 14 14 9 5 9
<<< (M = 5, K = 14, N = 9) : 60.962986
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 85.245932
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 13,1) :    71.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2919 (25.9%), 8331 (74.1%) left; Finishing by Sat Oct 21  6:28:34 2000

(8,18,9) <- (4,9,9).*(2,1+1,1): 91.471061 Mflop/s
(14,30,15) <- (7,15,15).*(2,1+1,1): 96.804855 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 9 8 18 18 9 8 9
<<< (M = 8, K = 18, N = 9) : 91.471061
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 30 15 14 30 30 15 14 15
<<< (M = 14, K = 30, N = 15) : 96.804855
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2,1,1) :    94.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2920 (26.0%), 8330 (74.0%) left; Finishing by Sat Oct 21  6:28:29 2000

(9,10,9) <- (9,1,9).*(1, 9+1,1): 128.522121 Mflop/s
(15,10,15) <- (15,1,15).*(1, 9+1,1): 134.055029 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 128.522121
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 134.055029
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,1) :   131.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2921 (26.0%), 8329 (74.0%) left; Finishing by Sat Oct 21  6:28:28 2000

(8,10,8) <- (1,2,4).*(8, 4+1,2): 108.612884 Mflop/s
(8,15,14) <- (1,3,7).*(8, 4+1,2): 120.852237 Mflop/s

Testing m0 = 8, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 108.612884
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 14 8 15 15 14 8 14
<<< (M = 8, K = 15, N = 14) : 120.852237
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 4,2) :   114.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2922 (26.0%), 8328 (74.0%) left; Finishing by Sat Oct 21  6:28:30 2000

(8,11,5) <- (4,0,1).*(2, 10+1,5): 31.104954 Mflop/s
(14,11,15) <- (7,1,3).*(2, 10+1,5): 30.742574 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  10 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 5 8 11 11 5 8 5
<<< (M = 8, K = 11, N = 5) : 31.104954
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 30.742574
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 10,5) :    30.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2923 (26.0%), 8327 (74.0%) left; Finishing by Sat Oct 21  6:28:29 2000

(11,8,9) <- (0,1,9).*(11, 7+1,1): 76.262856 Mflop/s
(11,16,15) <- (1,2,15).*(11, 7+1,1): 109.611242 Mflop/s

Testing m0 = 11, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 11  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 8 9 11 8 8 9 11 9
<<< (M = 11, K = 8, N = 9) : 76.262856
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 16 15 11 16 16 15 11 15
<<< (M = 11, K = 16, N = 15) : 109.611242
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (11, 7,1) :    89.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2924 (26.0%), 8326 (74.0%) left; Finishing by Sat Oct 21  6:28:24 2000

(10,12,9) <- (0,3,9).*(10, 3+1,1): 34.274594 Mflop/s
(10,20,15) <- (1,5,15).*(10, 3+1,1): 30.048893 Mflop/s

Testing m0 = 10, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 10  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 9 10 12 12 9 10 9
<<< (M = 10, K = 12, N = 9) : 34.274594
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 20 15 10 20 20 15 10 15
<<< (M = 10, K = 20, N = 15) : 30.048893
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (10, 3,1) :    32.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2925 (26.0%), 8325 (74.0%) left; Finishing by Sat Oct 21  6:28:23 2000

(9,6,9) <- (9,1,9).*(1, 5+1,1): 102.361158 Mflop/s
(15,18,15) <- (15,3,15).*(1, 5+1,1): 158.610346 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 9 9 6 6 9 9 9
<<< (M = 9, K = 6, N = 9) : 102.361158
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 158.610346
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,1) :   124.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2926 (26.0%), 8324 (74.0%) left; Finishing by Sat Oct 21  6:28:26 2000

(5,15,8) <- (1,0,4).*(5, 14+1,2): 31.604506 Mflop/s
(15,15,14) <- (3,1,7).*(5, 14+1,2): 31.546909 Mflop/s

Testing m0 = 5, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 8 5 15 15 8 5 8
<<< (M = 5, K = 15, N = 8) : 31.604506
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 31.546909
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 14,2) :    31.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2927 (26.0%), 8323 (74.0%) left; Finishing by Sat Oct 21  6:28:25 2000

(8,9,9) <- (4,1,3).*(2, 8+1,3): 46.837263 Mflop/s
(14,9,15) <- (7,1,5).*(2, 8+1,3): 47.439138 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 46.837263
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 47.439138
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 8,3) :    47.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2928 (26.0%), 8322 (74.0%) left; Finishing by Sat Oct 21  6:28:24 2000

(9,8,7) <- (9,1,1).*(1, 7+1,7): 117.837466 Mflop/s
(15,16,14) <- (15,2,2).*(1, 7+1,7): 146.095098 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  7 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 7 9 8 8 7 9 7
<<< (M = 9, K = 8, N = 7) : 117.837466
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 146.095098
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 7,7) :   130.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2929 (26.0%), 8321 (74.0%) left; Finishing by Sat Oct 21  6:28:23 2000

(9,15,12) <- (9,0,0).*(1, 14+1,12): 115.660921 Mflop/s
(15,15,12) <- (15,1,1).*(1, 14+1,12): 116.138163 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 12 9 15 15 12 9 12
<<< (M = 9, K = 15, N = 12) : 115.660921
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 116.138163
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,12) :   115.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2930 (26.0%), 8320 (74.0%) left; Finishing by Sat Oct 21  6:28:26 2000

(11,10,9) <- (0,1,9).*(11, 9+1,1): 26.776847 Mflop/s
(11,10,15) <- (1,1,15).*(11, 9+1,1): 26.543209 Mflop/s

Testing m0 = 11, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 11  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 10 9 11 10 10 9 11 9
<<< (M = 11, K = 10, N = 9) : 26.776847
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 10 15 11 10 10 15 11 15
<<< (M = 11, K = 10, N = 15) : 26.543209
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (11, 9,1) :    26.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2931 (26.1%), 8319 (73.9%) left; Finishing by Sat Oct 21  6:28:25 2000

(8,15,8) <- (2,0,4).*(4, 14+1,2): 29.883585 Mflop/s
(12,15,14) <- (3,1,7).*(4, 14+1,2): 33.199395 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 29.883585
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 33.199395
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 14,2) :    31.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2932 (26.1%), 8318 (73.9%) left; Finishing by Sat Oct 21  6:28:23 2000

(8,10,8) <- (2,2,2).*(4, 4+1,4): 70.815713 Mflop/s
(12,15,12) <- (3,3,3).*(4, 4+1,4): 142.479546 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 70.815713
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 12 12 15 15 12 12 12
<<< (M = 12, K = 15, N = 12) : 142.479546
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 4,4) :    94.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2933 (26.1%), 8317 (73.9%) left; Finishing by Sat Oct 21  6:28:19 2000

(16,6,9) <- (0,1,9).*(16, 5+1,1): 22.983874 Mflop/s
(16,18,15) <- (0,3,15).*(16, 5+1,1): 29.338221 Mflop/s

Testing m0 = 16, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 16  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 6 9 16 6 6 9 16 9
<<< (M = 16, K = 6, N = 9) : 22.983874
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 18 15 16 18 18 15 16 15
<<< (M = 16, K = 18, N = 15) : 29.338221
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (16, 5,1) :    25.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2934 (26.1%), 8316 (73.9%) left; Finishing by Sat Oct 21  6:28:18 2000

(9,16,9) <- (9,0,1).*(1, 15+1,9): 123.684833 Mflop/s
(15,16,9) <- (15,1,1).*(1, 15+1,9): 125.261456 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 123.684833
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 9 15 16 16 9 15 9
<<< (M = 15, K = 16, N = 9) : 125.261456
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,9) :   124.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2935 (26.1%), 8315 (73.9%) left; Finishing by Sat Oct 21  6:28:16 2000

(8,12,8) <- (4,4,2).*(2, 2+1,4): 35.992270 Mflop/s
(14,21,12) <- (7,7,3).*(2, 2+1,4): 28.367681 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 35.992270
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 12 14 21 21 12 14 12
<<< (M = 14, K = 21, N = 12) : 28.367681
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 2,4) :    31.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2936 (26.1%), 8314 (73.9%) left; Finishing by Sat Oct 21  6:28:15 2000

(8,6,8) <- (1,1,4).*(8, 5+1,2): 88.900828 Mflop/s
(8,18,14) <- (1,3,7).*(8, 5+1,2): 120.804397 Mflop/s

Testing m0 = 8, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 88.900828
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 14 8 18 18 14 8 14
<<< (M = 8, K = 18, N = 14) : 120.804397
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 5,2) :   102.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2937 (26.1%), 8313 (73.9%) left; Finishing by Sat Oct 21  6:28:18 2000

(8,6,9) <- (4,1,3).*(2, 5+1,3): 44.062572 Mflop/s
(14,18,15) <- (7,3,5).*(2, 5+1,3): 41.759453 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 44.062572
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 41.759453
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 5,3) :    42.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2938 (26.1%), 8312 (73.9%) left; Finishing by Sat Oct 21  6:28:17 2000

(9,10,6) <- (9,1,1).*(1, 9+1,6): 134.394044 Mflop/s
(15,10,12) <- (15,1,2).*(1, 9+1,6): 141.059455 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  9 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 6 9 10 10 6 9 6
<<< (M = 9, K = 10, N = 6) : 134.394044
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 141.059455
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 9,6) :   137.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2939 (26.1%), 8311 (73.9%) left; Finishing by Sat Oct 21  6:28:16 2000

(15,18,9) <- (0,9,9).*(15,1+1,1): 43.083785 Mflop/s
(15,30,15) <- (1,15,15).*(15,1+1,1): 54.002703 Mflop/s

Testing m0 = 15, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 15 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 9 15 18 18 9 15 9
<<< (M = 15, K = 18, N = 9) : 43.083785
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 30 15 15 30 30 15 15 15
<<< (M = 15, K = 30, N = 15) : 54.002703
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (15,1,1) :    47.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2940 (26.1%), 8310 (73.9%) left; Finishing by Sat Oct 21  6:28:15 2000

(7,10,8) <- (1,2,4).*(7, 4+1,2): 25.695679 Mflop/s
(14,15,14) <- (2,3,7).*(7, 4+1,2): 31.908683 Mflop/s

Testing m0 = 7, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 10 8 7 10 10 8 7 8
<<< (M = 7, K = 10, N = 8) : 25.695679
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 31.908683
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 4,2) :    28.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2941 (26.1%), 8309 (73.9%) left; Finishing by Sat Oct 21  6:28:14 2000

(9,12,8) <- (3,3,2).*(3, 3+1,4): 36.752520 Mflop/s
(15,20,12) <- (5,5,3).*(3, 3+1,4): 30.579594 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 36.752520
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 12 15 20 20 12 15 12
<<< (M = 15, K = 20, N = 12) : 30.579594
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 3,4) :    33.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2942 (26.2%), 8308 (73.8%) left; Finishing by Sat Oct 21  6:28:13 2000

(12,10,9) <- (0,1,9).*(12, 9+1,1): 26.104938 Mflop/s
(12,10,15) <- (1,1,15).*(12, 9+1,1): 27.321443 Mflop/s

Testing m0 = 12, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 12  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 9 12 10 10 9 12 9
<<< (M = 12, K = 10, N = 9) : 26.104938
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 27.321443
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (12, 9,1) :    26.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2943 (26.2%), 8307 (73.8%) left; Finishing by Sat Oct 21  6:28:12 2000

(8,12,9) <- (4,0,3).*(2, 11+1,3): 48.915529 Mflop/s
(14,12,15) <- (7,1,5).*(2, 11+1,3): 36.184562 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 48.915529
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 36.184562
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 11,3) :    41.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2944 (26.2%), 8306 (73.8%) left; Finishing by Sat Oct 21  6:28:11 2000

(7,15,8) <- (1,0,4).*(7, 14+1,2): 24.877168 Mflop/s
(14,15,14) <- (2,1,7).*(7, 14+1,2): 28.542473 Mflop/s

Testing m0 = 7, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 15 8 7 15 15 8 7 8
<<< (M = 7, K = 15, N = 8) : 24.877168
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 28.542473
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 14,2) :    26.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2945 (26.2%), 8305 (73.8%) left; Finishing by Sat Oct 21  6:28:10 2000

(8,6,6) <- (4,1,1).*(2, 5+1,6): 27.484313 Mflop/s
(14,18,12) <- (7,3,2).*(2, 5+1,6): 31.383891 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  5 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 6 8 6 6 6 8 6
<<< (M = 8, K = 6, N = 6) : 27.484313
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 12 14 18 18 12 14 12
<<< (M = 14, K = 18, N = 12) : 31.383891
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 5,6) :    29.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2946 (26.2%), 8304 (73.8%) left; Finishing by Sat Oct 21  6:28:09 2000

(8,16,9) <- (4,0,3).*(2, 15+1,3): 50.133509 Mflop/s
(14,16,15) <- (7,1,5).*(2, 15+1,3): 37.168736 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 50.133509
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 37.168736
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 15,3) :    42.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2947 (26.2%), 8303 (73.8%) left; Finishing by Sat Oct 21  6:28:08 2000

(8,13,6) <- (4,0,1).*(2, 12+1,6): 30.484018 Mflop/s
(14,13,12) <- (7,1,2).*(2, 12+1,6): 27.287202 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  12 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 6 8 13 13 6 8 6
<<< (M = 8, K = 13, N = 6) : 30.484018
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 12 14 13 13 12 14 12
<<< (M = 14, K = 13, N = 12) : 27.287202
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 12,6) :    28.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2948 (26.2%), 8302 (73.8%) left; Finishing by Sat Oct 21  6:28:06 2000

(9,9,8) <- (9,1,2).*(1, 8+1,4): 157.298345 Mflop/s
(15,9,12) <- (15,1,3).*(1, 8+1,4): 162.354575 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 157.298345
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 12 15 9 9 12 15 12
<<< (M = 15, K = 9, N = 12) : 162.354575
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,4) :   159.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2949 (26.2%), 8301 (73.8%) left; Finishing by Sat Oct 21  6:28:05 2000

(5,13,9) <- (1,0,3).*(5, 12+1,3): 28.337026 Mflop/s
(15,13,15) <- (3,1,5).*(5, 12+1,3): 29.642099 Mflop/s

Testing m0 = 5, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 13 9 5 13 13 9 5 9
<<< (M = 5, K = 13, N = 9) : 28.337026
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 29.642099
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 12,3) :    29.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2950 (26.2%), 8300 (73.8%) left; Finishing by Sat Oct 21  6:28:04 2000

(9,11,8) <- (3,0,4).*(3, 10+1,2): 124.392782 Mflop/s
(15,11,14) <- (5,1,7).*(3, 10+1,2): 125.770706 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 124.392782
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 125.770706
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 10,2) :   125.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2951 (26.2%), 8299 (73.8%) left; Finishing by Sat Oct 21  6:28:03 2000

(15,12,9) <- (0,4,9).*(15, 2+1,1): 72.857907 Mflop/s
(15,21,15) <- (1,7,15).*(15, 2+1,1): 72.621819 Mflop/s

Testing m0 = 15, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 15  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 72.857907
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 72.621819
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (15, 2,1) :    72.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2952 (26.2%), 8298 (73.8%) left; Finishing by Sat Oct 21  6:28:02 2000

(9,12,15) <- (9,0,0).*(1, 11+1,15): 109.389597 Mflop/s
(15,12,15) <- (15,1,1).*(1, 11+1,15): 109.840256 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 109.389597
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 109.840256
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,15) :   109.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2953 (26.2%), 8297 (73.8%) left; Finishing by Sat Oct 21  6:28:01 2000

(9,12,10) <- (9,0,0).*(1, 11+1,10): 113.676076 Mflop/s
(15,12,10) <- (15,1,1).*(1, 11+1,10): 113.519644 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 10 9 12 12 10 9 10
<<< (M = 9, K = 12, N = 10) : 113.676076
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 10 15 12 12 10 15 10
<<< (M = 15, K = 12, N = 10) : 113.519644
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,10) :   113.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2954 (26.3%), 8296 (73.7%) left; Finishing by Sat Oct 21  6:28:00 2000

(8,7,5) <- (4,1,1).*(2, 6+1,5): 29.267724 Mflop/s
(14,14,15) <- (7,2,3).*(2, 6+1,5): 33.721017 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  6 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 5 8 7 7 5 8 5
<<< (M = 8, K = 7, N = 5) : 29.267724
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 33.721017
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 6,5) :    31.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2955 (26.3%), 8295 (73.7%) left; Finishing by Sat Oct 21  6:27:59 2000

(9,12,9) <- (9,0,1).*(1, 11+1,9): 118.236120 Mflop/s
(15,12,9) <- (15,1,1).*(1, 11+1,9): 119.904170 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 118.236120
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 119.904170
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,9) :   119.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2956 (26.3%), 8294 (73.7%) left; Finishing by Sat Oct 21  6:27:54 2000

(9,13,15) <- (9,0,0).*(1, 12+1,15): 110.123285 Mflop/s
(15,13,15) <- (15,1,1).*(1, 12+1,15): 110.766491 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  12 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 15 9 13 13 15 9 15
<<< (M = 9, K = 13, N = 15) : 110.123285
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 110.766491
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 12,15) :   110.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2957 (26.3%), 8293 (73.7%) left; Finishing by Sat Oct 21  6:27:57 2000

(8,10,9) <- (2,1,3).*(4, 9+1,3): 27.671740 Mflop/s
(12,10,15) <- (3,1,5).*(4, 9+1,3): 29.133754 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 27.671740
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 29.133754
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 9,3) :    28.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2958 (26.3%), 8292 (73.7%) left; Finishing by Sat Oct 21  6:27:56 2000

(5,10,8) <- (1,1,4).*(5, 9+1,2): 29.984021 Mflop/s
(15,10,14) <- (3,1,7).*(5, 9+1,2): 30.537211 Mflop/s

Testing m0 = 5, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 5  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 8 5 10 10 8 5 8
<<< (M = 5, K = 10, N = 8) : 29.984021
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 30.537211
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (5, 9,2) :    30.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2959 (26.3%), 8291 (73.7%) left; Finishing by Sat Oct 21  6:27:51 2000

(9,10,8) <- (3,1,4).*(3, 9+1,2): 125.643952 Mflop/s
(15,10,14) <- (5,1,7).*(3, 9+1,2): 127.126183 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 125.643952
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 127.126183
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 9,2) :   126.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2960 (26.3%), 8290 (73.7%) left; Finishing by Sat Oct 21  6:27:54 2000

(8,12,9) <- (2,4,3).*(4, 2+1,3): 106.476183 Mflop/s
(12,21,15) <- (3,7,5).*(4, 2+1,3): 124.751690 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 106.476183
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 15 12 21 21 15 12 15
<<< (M = 12, K = 21, N = 15) : 124.751690
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 2,3) :   114.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2961 (26.3%), 8289 (73.7%) left; Finishing by Sat Oct 21  6:27:53 2000

(8,11,7) <- (4,0,1).*(2, 10+1,7): 29.578319 Mflop/s
(14,11,14) <- (7,1,2).*(2, 10+1,7): 28.977056 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  10 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 7 8 11 11 7 8 7
<<< (M = 8, K = 11, N = 7) : 29.578319
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 14 14 11 11 14 14 14
<<< (M = 14, K = 11, N = 14) : 28.977056
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 10,7) :    29.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2962 (26.3%), 8288 (73.7%) left; Finishing by Sat Oct 21  6:27:52 2000

(9,9,11) <- (9,1,0).*(1, 8+1,11): 106.470876 Mflop/s
(15,9,11) <- (15,1,1).*(1, 8+1,11): 108.728378 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 11 9 9 9 11 9 11
<<< (M = 9, K = 9, N = 11) : 106.470876
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 11 15 9 9 11 15 11
<<< (M = 15, K = 9, N = 11) : 108.728378
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,11) :   107.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2963 (26.3%), 8287 (73.7%) left; Finishing by Sat Oct 21  6:27:51 2000

(14,9,9) <- (0,1,9).*(14, 8+1,1): 24.255277 Mflop/s
(14,9,15) <- (1,1,15).*(14, 8+1,1): 24.329820 Mflop/s

Testing m0 = 14, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 14  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 9 14 9 9 9 14 9
<<< (M = 14, K = 9, N = 9) : 24.255277
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 15 14 9 9 15 14 15
<<< (M = 14, K = 9, N = 15) : 24.329820
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (14, 8,1) :    24.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2964 (26.3%), 8286 (73.7%) left; Finishing by Sat Oct 21  6:27:50 2000

(14,12,9) <- (0,3,9).*(14, 3+1,1): 29.395546 Mflop/s
(14,20,15) <- (1,5,15).*(14, 3+1,1): 29.102776 Mflop/s

Testing m0 = 14, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 14  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 9 14 12 12 9 14 9
<<< (M = 14, K = 12, N = 9) : 29.395546
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 20 15 14 20 20 15 14 15
<<< (M = 14, K = 20, N = 15) : 29.102776
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (14, 3,1) :    29.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2965 (26.4%), 8285 (73.6%) left; Finishing by Sat Oct 21  6:27:49 2000

(9,7,5) <- (3,1,1).*(3, 6+1,5): 104.177354 Mflop/s
(15,14,15) <- (5,2,3).*(3, 6+1,5): 133.560389 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  6 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 5 9 7 7 5 9 5
<<< (M = 9, K = 7, N = 5) : 104.177354
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 133.560389
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 6,5) :   117.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2966 (26.4%), 8284 (73.6%) left; Finishing by Sat Oct 21  6:27:51 2000

(7,6,9) <- (1,1,9).*(7, 5+1,1): 30.827953 Mflop/s
(14,18,15) <- (2,3,15).*(7, 5+1,1): 44.168647 Mflop/s

Testing m0 = 7, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 7  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 6 9 7 6 6 9 7 9
<<< (M = 7, K = 6, N = 9) : 30.827953
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 44.168647
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (7, 5,1) :    36.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2967 (26.4%), 8283 (73.6%) left; Finishing by Sat Oct 21  6:27:47 2000

(15,6,9) <- (0,1,9).*(15, 5+1,1): 71.523523 Mflop/s
(15,18,15) <- (1,3,15).*(15, 5+1,1): 102.775387 Mflop/s

Testing m0 = 15, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 15  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 6 9 15 6 6 9 15 9
<<< (M = 15, K = 6, N = 9) : 71.523523
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 102.775387
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (15, 5,1) :    84.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2968 (26.4%), 8282 (73.6%) left; Finishing by Sat Oct 21  6:27:45 2000

(6,6,9) <- (1,1,9).*(6, 5+1,1): 84.107294 Mflop/s
(12,18,15) <- (2,3,15).*(6, 5+1,1): 90.246361 Mflop/s

Testing m0 = 6, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 6 9 6 6 6 9 6 9
<<< (M = 6, K = 6, N = 9) : 84.107294
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 90.246361
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 5,1) :    87.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2969 (26.4%), 8281 (73.6%) left; Finishing by Sat Oct 21  6:27:48 2000

(9,12,9) <- (9,0,9).*(1, 11+1,1): 133.141461 Mflop/s
(15,12,15) <- (15,1,15).*(1, 11+1,1): 137.326915 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 133.141461
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 137.326915
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,1) :   135.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2970 (26.4%), 8280 (73.6%) left; Finishing by Sat Oct 21  6:27:47 2000

(9,10,9) <- (9,2,1).*(1, 4+1,9): 122.923680 Mflop/s
(15,15,9) <- (15,3,1).*(1, 4+1,9): 137.665462 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 122.923680
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 137.665462
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,9) :   129.9 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2971 (26.4%), 8279 (73.6%) left; Finishing by Sat Oct 21  6:27:50 2000

(6,12,8) <- (1,3,4).*(6, 3+1,2): 132.963688 Mflop/s
(12,20,14) <- (2,5,7).*(6, 3+1,2): 87.736736 Mflop/s

Testing m0 = 6, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 6  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 8 6 12 12 8 6 8
<<< (M = 6, K = 12, N = 8) : 132.963688
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 20 14 12 20 20 14 12 14
<<< (M = 12, K = 20, N = 14) : 87.736736
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (6, 3,2) :   105.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2972 (26.4%), 8278 (73.6%) left; Finishing by Sat Oct 21  6:27:49 2000

(9,16,8) <- (9,0,2).*(1, 15+1,4): 184.804297 Mflop/s
(15,16,12) <- (15,1,3).*(1, 15+1,4): 189.547335 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 184.804297
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 189.547335
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 15,4) :   187.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2973 (26.4%), 8277 (73.6%) left; Finishing by Sat Oct 21  6:27:48 2000

(9,13,9) <- (3,0,3).*(3, 12+1,3): 126.857786 Mflop/s
(15,13,15) <- (5,1,5).*(3, 12+1,3): 128.369735 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 126.857786
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 128.369735
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 12,3) :   127.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2974 (26.4%), 8276 (73.6%) left; Finishing by Sat Oct 21  6:27:47 2000

(8,6,9) <- (4,1,9).*(2, 5+1,1): 114.334621 Mflop/s
(14,18,15) <- (7,3,15).*(2, 5+1,1): 171.228090 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 9 8 6 6 9 8 9
<<< (M = 8, K = 6, N = 9) : 114.334621
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 171.228090
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 5,1) :   137.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2975 (26.4%), 8275 (73.6%) left; Finishing by Sat Oct 21  6:27:46 2000

(8,12,9) <- (2,3,9).*(4, 3+1,1): 69.107326 Mflop/s
(12,20,15) <- (3,5,15).*(4, 3+1,1): 103.268640 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 69.107326
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 20 15 12 20 20 15 12 15
<<< (M = 12, K = 20, N = 15) : 103.268640
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 3,1) :    82.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2976 (26.5%), 8274 (73.5%) left; Finishing by Sat Oct 21  6:27:45 2000

(8,15,9) <- (2,0,3).*(4, 14+1,3): 29.358657 Mflop/s
(12,15,15) <- (3,1,5).*(4, 14+1,3): 30.029908 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 29.358657
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 30.029908
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 14,3) :    29.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2977 (26.5%), 8273 (73.5%) left; Finishing by Sat Oct 21  6:27:44 2000

(9,12,8) <- (3,4,4).*(3, 2+1,2): 142.261794 Mflop/s
(15,21,14) <- (5,7,7).*(3, 2+1,2): 140.163164 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 142.261794
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 14 15 21 21 14 15 14
<<< (M = 15, K = 21, N = 14) : 140.163164
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 2,2) :   141.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2978 (26.5%), 8272 (73.5%) left; Finishing by Sat Oct 21  6:27:46 2000

(8,10,5) <- (4,2,1).*(2, 4+1,5): 34.472399 Mflop/s
(14,15,15) <- (7,3,3).*(2, 4+1,5): 35.977921 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  4 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 5 8 10 10 5 8 5
<<< (M = 8, K = 10, N = 5) : 34.472399
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 35.977921
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 4,5) :    35.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2979 (26.5%), 8271 (73.5%) left; Finishing by Sat Oct 21  6:27:45 2000

(8,9,6) <- (4,1,1).*(2, 8+1,6): 29.403939 Mflop/s
(14,9,12) <- (7,1,2).*(2, 8+1,6): 29.629700 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  8 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 6 8 9 9 6 8 6
<<< (M = 8, K = 9, N = 6) : 29.403939
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 12 14 9 9 12 14 12
<<< (M = 14, K = 9, N = 12) : 29.629700
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 8,6) :    29.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2980 (26.5%), 8270 (73.5%) left; Finishing by Sat Oct 21  6:27:41 2000

(9,12,8) <- (9,0,2).*(1, 11+1,4): 174.641679 Mflop/s
(15,12,12) <- (15,1,3).*(1, 11+1,4): 180.424492 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 174.641679
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 180.424492
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 11,4) :   177.5 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2981 (26.5%), 8269 (73.5%) left; Finishing by Sat Oct 21  6:27:43 2000

(9,10,6) <- (9,2,1).*(1, 4+1,6): 141.103548 Mflop/s
(15,15,12) <- (15,3,2).*(1, 4+1,6): 165.035999 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  4 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 6 9 10 10 6 9 6
<<< (M = 9, K = 10, N = 6) : 141.103548
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 165.035999
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 4,6) :   152.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2982 (26.5%), 8268 (73.5%) left; Finishing by Sat Oct 21  6:27:46 2000

(10,7,9) <- (0,1,9).*(10, 6+1,1): 26.026366 Mflop/s
(10,14,15) <- (1,2,15).*(10, 6+1,1): 31.362301 Mflop/s

Testing m0 = 10, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 10  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 7 9 10 7 7 9 10 9
<<< (M = 10, K = 7, N = 9) : 26.026366
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 15 10 14 14 15 10 15
<<< (M = 10, K = 14, N = 15) : 31.362301
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (10, 6,1) :    28.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2983 (26.5%), 8267 (73.5%) left; Finishing by Sat Oct 21  6:27:45 2000

(8,12,9) <- (2,0,9).*(4, 11+1,1): 71.714256 Mflop/s
(12,12,15) <- (3,1,15).*(4, 11+1,1): 122.387742 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 71.714256
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 122.387742
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 11,1) :    90.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2984 (26.5%), 8266 (73.5%) left; Finishing by Sat Oct 21  6:27:40 2000

(8,6,8) <- (4,1,4).*(2, 5+1,2): 108.018257 Mflop/s
(14,18,14) <- (7,3,7).*(2, 5+1,2): 85.155468 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 6 8 8 6 6 8 8 8
<<< (M = 8, K = 6, N = 8) : 108.018257
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 14 14 18 18 14 14 14
<<< (M = 14, K = 18, N = 14) : 85.155468
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 5,2) :    95.2 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2985 (26.5%), 8265 (73.5%) left; Finishing by Sat Oct 21  6:27:43 2000

(8,11,9) <- (1,0,9).*(8, 10+1,1): 68.522709 Mflop/s
(8,11,15) <- (1,1,15).*(8, 10+1,1): 68.948115 Mflop/s

Testing m0 = 8, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 68.522709
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 15 8 11 11 15 8 15
<<< (M = 8, K = 11, N = 15) : 68.948115
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 10,1) :    68.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2986 (26.5%), 8264 (73.5%) left; Finishing by Sat Oct 21  6:27:42 2000

(10,16,9) <- (0,0,9).*(10, 15+1,1): 80.608851 Mflop/s
(10,16,15) <- (1,1,15).*(10, 15+1,1): 103.928341 Mflop/s

Testing m0 = 10, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 10  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 16 9 10 16 16 9 10 9
<<< (M = 10, K = 16, N = 9) : 80.608851
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 16 15 10 16 16 15 10 15
<<< (M = 10, K = 16, N = 15) : 103.928341
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (10, 15,1) :    90.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2987 (26.6%), 8263 (73.4%) left; Finishing by Sat Oct 21  6:27:41 2000

(13,10,9) <- (0,1,9).*(13, 9+1,1): 83.485476 Mflop/s
(13,10,15) <- (1,1,15).*(13, 9+1,1): 98.987612 Mflop/s

Testing m0 = 13, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 13  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 10 9 13 10 10 9 13 9
<<< (M = 13, K = 10, N = 9) : 83.485476
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 10 15 13 10 10 15 13 15
<<< (M = 13, K = 10, N = 15) : 98.987612
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (13, 9,1) :    90.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2988 (26.6%), 8262 (73.4%) left; Finishing by Sat Oct 21  6:27:40 2000

(8,10,8) <- (4,1,2).*(2, 9+1,4): 34.472523 Mflop/s
(14,10,12) <- (7,1,3).*(2, 9+1,4): 30.346263 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 2  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 34.472523
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 12 14 10 10 12 14 12
<<< (M = 14, K = 10, N = 12) : 30.346263
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (2, 9,4) :    32.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2989 (26.6%), 8261 (73.4%) left; Finishing by Sat Oct 21  6:27:39 2000

(9,7,8) <- (9,1,4).*(1, 6+1,2): 130.555287 Mflop/s
(15,14,14) <- (15,2,7).*(1, 6+1,2): 186.530095 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 130.555287
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 186.530095
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,2) :   153.6 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2990 (26.6%), 8260 (73.4%) left; Finishing by Sat Oct 21  6:27:38 2000

(9,15,15) <- (9,0,0).*(1, 14+1,15): 112.163348 Mflop/s
(15,15,15) <- (15,1,1).*(1, 14+1,15): 112.710592 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  14 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 112.163348
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 112.710592
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 14,15) :   112.4 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2991 (26.6%), 8259 (73.4%) left; Finishing by Sat Oct 21  6:27:41 2000

(9,12,6) <- (9,3,1).*(1, 3+1,6): 158.586328 Mflop/s
(15,20,12) <- (15,5,2).*(1, 3+1,6): 154.991744 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  3 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 6 9 12 12 6 9 6
<<< (M = 9, K = 12, N = 6) : 158.586328
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 20 12 15 20 20 12 15 12
<<< (M = 15, K = 20, N = 12) : 154.991744
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 3,6) :   156.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2992 (26.6%), 8258 (73.4%) left; Finishing by Sat Oct 21  6:27:39 2000

(8,12,9) <- (1,0,9).*(8, 11+1,1): 68.879982 Mflop/s
(8,12,15) <- (1,1,15).*(8, 11+1,1): 69.248422 Mflop/s

Testing m0 = 8, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 8  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 68.879982
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 15 8 12 12 15 8 15
<<< (M = 8, K = 12, N = 15) : 69.248422
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (8, 11,1) :    69.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2993 (26.6%), 8257 (73.4%) left; Finishing by Sat Oct 21  6:27:38 2000

(9,7,8) <- (9,1,1).*(1, 6+1,8): 105.702867 Mflop/s
(15,14,8) <- (15,2,1).*(1, 6+1,8): 126.187909 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  6 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 105.702867
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 8 15 14 14 8 15 8
<<< (M = 15, K = 14, N = 8) : 126.187909
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 6,8) :   115.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2994 (26.6%), 8256 (73.4%) left; Finishing by Sat Oct 21  6:27:41 2000

(8,7,8) <- (2,1,4).*(4, 6+1,2): 28.195308 Mflop/s
(12,14,14) <- (3,2,7).*(4, 6+1,2): 35.172137 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 4  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 28.195308
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 35.172137
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (4, 6,2) :    31.3 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2995 (26.6%), 8255 (73.4%) left; Finishing by Sat Oct 21  6:27:40 2000

(9,9,9) <- (9,1,9).*(1, 8+1,1): 121.293266 Mflop/s
(15,9,15) <- (15,1,15).*(1, 8+1,1): 125.056821 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 121.293266
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 15 15 9 9 15 15 15
<<< (M = 15, K = 9, N = 15) : 125.056821
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 8,1) :   123.1 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2996 (26.6%), 8254 (73.4%) left; Finishing by Sat Oct 21  6:27:39 2000

(9,16,8) <- (3,0,2).*(3, 15+1,4): 133.228025 Mflop/s
(15,16,12) <- (5,1,3).*(3, 15+1,4): 134.761230 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 3  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 133.228025
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 134.761230
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (3, 15,4) :   134.0 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2997 (26.6%), 8253 (73.4%) left; Finishing by Sat Oct 21  6:27:38 2000

(9,6,7) <- (9,1,1).*(1, 5+1,7): 107.098743 Mflop/s
(15,18,14) <- (15,3,2).*(1, 5+1,7): 155.212066 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 7 9 6 6 7 9 7
<<< (M = 9, K = 6, N = 7) : 107.098743
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 155.212066
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,7) :   126.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2998 (26.6%), 8252 (73.4%) left; Finishing by Sat Oct 21  6:27:41 2000

(9,14,8) <- (9,0,4).*(1, 13+1,2): 184.616581 Mflop/s
(15,14,14) <- (15,1,7).*(1, 13+1,2): 188.817285 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 184.616581
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 188.817285
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 13,2) :   186.7 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 2999 (26.7%), 8251 (73.3%) left; Finishing by Sat Oct 21  6:27:44 2000

(9,6,8) <- (9,1,1).*(1, 5+1,8): 100.060295 Mflop/s
(15,18,8) <- (15,3,1).*(1, 5+1,8): 140.289964 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1  5 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 6 8 9 6 6 8 9 8
<<< (M = 9, K = 6, N = 8) : 100.060295
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 8 15 18 18 8 15 8
<<< (M = 15, K = 18, N = 8) : 140.289964
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.2ma.CC (1, 5,8) :   116.8 MFLOPS.
Best Blocking for double.NN.1.2ma.CC so far : (1, 4,3) :   208.6 MFLOPS.
Done 3000 (26.7%), 8250 (73.3%) left; Finishing by Sat Oct 21  6:27:46 2000

(8,12,8) <- (4,0,2).*(2, 10+2,4): 29.347753 Mflop/s
(14,12,12) <- (7,1,3).*(2, 10+2,4): 26.298235 Mflop/s
Testing double.NN.1.3.CC (-O1)...

Testing m0 = 2, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 29.347753
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 26.298235
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 10,4) :    27.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 10,4) :    27.7 MFLOPS.
Done 3001 (26.7%), 8249 (73.3%) left; Finishing by Sat Oct 21  6:27:45 2000

(8,13,8) <- (1,0,4).*(8, 11+2,2): 102.610454 Mflop/s
(8,13,14) <- (1,1,7).*(8, 11+2,2): 103.565074 Mflop/s

Testing m0 = 8, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 102.610454
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 14 8 13 13 14 8 14
<<< (M = 8, K = 13, N = 14) : 103.565074
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 11,2) :   103.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (8, 11,2) :   103.1 MFLOPS.
Done 3002 (26.7%), 8248 (73.3%) left; Finishing by Sat Oct 21  6:27:44 2000

(8,14,8) <- (1,0,4).*(8, 12+2,2): 103.184592 Mflop/s
(8,14,14) <- (1,1,7).*(8, 12+2,2): 103.367028 Mflop/s

Testing m0 = 8, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 103.184592
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 14 8 14 14 14 8 14
<<< (M = 8, K = 14, N = 14) : 103.367028
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 12,2) :   103.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (8, 12,2) :   103.3 MFLOPS.
Done 3003 (26.7%), 8247 (73.3%) left; Finishing by Sat Oct 21  6:27:43 2000

(5,16,9) <- (1,0,3).*(5, 14+2,3): 25.076841 Mflop/s
(15,16,15) <- (3,1,5).*(5, 14+2,3): 25.864951 Mflop/s

Testing m0 = 5, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 16 9 5 16 16 9 5 9
<<< (M = 5, K = 16, N = 9) : 25.076841
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 25.864951
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 14,3) :    25.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (8, 12,2) :   103.3 MFLOPS.
Done 3004 (26.7%), 8246 (73.3%) left; Finishing by Sat Oct 21  6:27:46 2000

(9,16,11) <- (9,0,0).*(1, 14+2,11): 98.716571 Mflop/s
(15,16,11) <- (15,1,1).*(1, 14+2,11): 82.312326 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 11 9 16 16 11 9 11
<<< (M = 9, K = 16, N = 11) : 98.716571
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 11 15 16 16 11 15 11
<<< (M = 15, K = 16, N = 11) : 82.312326
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,11) :    89.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (8, 12,2) :   103.3 MFLOPS.
Done 3005 (26.7%), 8245 (73.3%) left; Finishing by Sat Oct 21  6:27:45 2000

(6,12,8) <- (1,0,4).*(6, 10+2,2): 103.027277 Mflop/s
(12,12,14) <- (2,1,7).*(6, 10+2,2): 104.558353 Mflop/s

Testing m0 = 6, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 8 6 12 12 8 6 8
<<< (M = 6, K = 12, N = 8) : 103.027277
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 104.558353
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 10,2) :   103.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (6, 10,2) :   103.8 MFLOPS.
Done 3006 (26.7%), 8244 (73.3%) left; Finishing by Sat Oct 21  6:27:48 2000

(9,16,9) <- (9,4,1).*(1, 2+2,9): 78.210629 Mflop/s
(15,28,9) <- (15,7,1).*(1, 2+2,9): 79.870273 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 78.210629
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 9 15 28 28 9 15 9
<<< (M = 15, K = 28, N = 9) : 79.870273
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,9) :    79.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (6, 10,2) :   103.8 MFLOPS.
Done 3007 (26.7%), 8243 (73.3%) left; Finishing by Sat Oct 21  6:27:47 2000

(5,8,8) <- (1,1,4).*(5, 6+2,2): 24.162185 Mflop/s
(15,16,14) <- (3,2,7).*(5, 6+2,2): 31.376944 Mflop/s

Testing m0 = 5, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 8 5 8 8 8 5 8
<<< (M = 5, K = 8, N = 8) : 24.162185
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 31.376944
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 6,2) :    27.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (6, 10,2) :   103.8 MFLOPS.
Done 3008 (26.7%), 8242 (73.3%) left; Finishing by Sat Oct 21  6:27:46 2000

(8,12,7) <- (4,0,1).*(2, 10+2,7): 25.395458 Mflop/s
(14,12,14) <- (7,1,2).*(2, 10+2,7): 22.923287 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  10 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 7 8 12 12 7 8 7
<<< (M = 8, K = 12, N = 7) : 25.395458
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 22.923287
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 10,7) :    24.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (6, 10,2) :   103.8 MFLOPS.
Done 3009 (26.7%), 8241 (73.3%) left; Finishing by Sat Oct 21  6:27:44 2000

(8,7,9) <- (4,1,3).*(2, 5+2,3): 30.474336 Mflop/s
(14,21,15) <- (7,3,5).*(2, 5+2,3): 29.720211 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 30.474336
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 15 14 21 21 15 14 15
<<< (M = 14, K = 21, N = 15) : 29.720211
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 5,3) :    30.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (6, 10,2) :   103.8 MFLOPS.
Done 3010 (26.8%), 8240 (73.2%) left; Finishing by Sat Oct 21  6:27:43 2000

(9,7,9) <- (1,1,9).*(9, 5+2,1): 28.646666 Mflop/s
(9,21,15) <- (1,3,15).*(9, 5+2,1): 40.202611 Mflop/s

Testing m0 = 9, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 9  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 28.646666
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 21 15 9 21 21 15 9 15
<<< (M = 9, K = 21, N = 15) : 40.202611
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (9, 5,1) :    33.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (6, 10,2) :   103.8 MFLOPS.
Done 3011 (26.8%), 8239 (73.2%) left; Finishing by Sat Oct 21  6:27:42 2000

(11,12,9) <- (0,0,9).*(11, 10+2,1): 27.467839 Mflop/s
(11,12,15) <- (1,1,15).*(11, 10+2,1): 26.089737 Mflop/s

Testing m0 = 11, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 11  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 9 11 12 12 9 11 9
<<< (M = 11, K = 12, N = 9) : 27.467839
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 15 11 12 12 15 11 15
<<< (M = 11, K = 12, N = 15) : 26.089737
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (11, 10,1) :    26.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (6, 10,2) :   103.8 MFLOPS.
Done 3012 (26.8%), 8238 (73.2%) left; Finishing by Sat Oct 21  6:27:41 2000

(12,16,9) <- (0,4,9).*(12, 2+2,1): 25.024028 Mflop/s
(12,28,15) <- (1,7,15).*(12, 2+2,1): 25.837949 Mflop/s

Testing m0 = 12, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 12  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 9 12 16 16 9 12 9
<<< (M = 12, K = 16, N = 9) : 25.024028
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 28 15 12 28 28 15 12 15
<<< (M = 12, K = 28, N = 15) : 25.837949
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (12, 2,1) :    25.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (6, 10,2) :   103.8 MFLOPS.
Done 3013 (26.8%), 8237 (73.2%) left; Finishing by Sat Oct 21  6:27:40 2000

(9,17,16) <- (9,0,0).*(1, 15+2,16): 98.751252 Mflop/s
(15,17,16) <- (15,1,0).*(1, 15+2,16): 98.910776 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 16 9 17 17 16 9 16
<<< (M = 9, K = 17, N = 16) : 98.751252
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 16 15 17 17 16 15 16
<<< (M = 15, K = 17, N = 16) : 98.910776
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,16) :    98.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (6, 10,2) :   103.8 MFLOPS.
Done 3014 (26.8%), 8236 (73.2%) left; Finishing by Sat Oct 21  6:27:43 2000

(9,11,11) <- (9,1,0).*(1, 9+2,11): 94.143916 Mflop/s
(15,11,11) <- (15,1,1).*(1, 9+2,11): 80.851401 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 11 9 11 11 11 9 11
<<< (M = 9, K = 11, N = 11) : 94.143916
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 11 15 11 11 11 15 11
<<< (M = 15, K = 11, N = 11) : 80.851401
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,11) :    87.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (6, 10,2) :   103.8 MFLOPS.
Done 3015 (26.8%), 8235 (73.2%) left; Finishing by Sat Oct 21  6:27:42 2000

(14,15,9) <- (0,3,9).*(14, 3+2,1): 25.444142 Mflop/s
(14,25,15) <- (1,5,15).*(14, 3+2,1): 27.933174 Mflop/s

Testing m0 = 14, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 14  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 9 14 15 15 9 14 9
<<< (M = 14, K = 15, N = 9) : 25.444142
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 25 15 14 25 25 15 14 15
<<< (M = 14, K = 25, N = 15) : 27.933174
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (14, 3,1) :    26.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (6, 10,2) :   103.8 MFLOPS.
Done 3016 (26.8%), 8234 (73.2%) left; Finishing by Sat Oct 21  6:27:41 2000

(8,11,9) <- (1,1,9).*(8, 9+2,1): 91.157664 Mflop/s
(8,11,15) <- (1,1,15).*(8, 9+2,1): 91.774059 Mflop/s

Testing m0 = 8, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 91.157664
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 15 8 11 11 15 8 15
<<< (M = 8, K = 11, N = 15) : 91.774059
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 9,1) :    91.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (6, 10,2) :   103.8 MFLOPS.
Done 3017 (26.8%), 8233 (73.2%) left; Finishing by Sat Oct 21  6:27:40 2000

(9,12,9) <- (3,2,3).*(3, 4+2,3): 131.644036 Mflop/s
(15,18,15) <- (5,3,5).*(3, 4+2,3): 119.044660 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 131.644036
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 119.044660
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 4,3) :   125.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 4,3) :   125.0 MFLOPS.
Done 3018 (26.8%), 8232 (73.2%) left; Finishing by Sat Oct 21  6:27:43 2000

(8,13,5) <- (4,0,1).*(2, 11+2,5): 24.467946 Mflop/s
(14,13,15) <- (7,1,3).*(2, 11+2,5): 26.315910 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  11 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 5 8 13 13 5 8 5
<<< (M = 8, K = 13, N = 5) : 24.467946
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 26.315910
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 11,5) :    25.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 4,3) :   125.0 MFLOPS.
Done 3019 (26.8%), 8231 (73.2%) left; Finishing by Sat Oct 21  6:27:42 2000

(9,17,9) <- (3,0,9).*(3, 15+2,1): 173.851489 Mflop/s
(15,17,15) <- (5,1,15).*(3, 15+2,1): 176.677178 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 9 9 17 17 9 9 9
<<< (M = 9, K = 17, N = 9) : 173.851489
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 15 15 17 17 15 15 15
<<< (M = 15, K = 17, N = 15) : 176.677178
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 15,1) :   175.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3020 (26.8%), 8230 (73.2%) left; Finishing by Sat Oct 21  6:27:48 2000

(5,12,9) <- (1,2,9).*(5, 4+2,1): 57.455346 Mflop/s
(15,18,15) <- (3,3,15).*(5, 4+2,1): 58.581681 Mflop/s

Testing m0 = 5, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 57.455346
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 58.581681
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 4,1) :    58.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3021 (26.9%), 8229 (73.1%) left; Finishing by Sat Oct 21  6:27:47 2000

(7,10,9) <- (1,1,9).*(7, 8+2,1): 28.150399 Mflop/s
(14,10,15) <- (2,1,15).*(7, 8+2,1): 31.653903 Mflop/s

Testing m0 = 7, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 10 9 7 10 10 9 7 9
<<< (M = 7, K = 10, N = 9) : 28.150399
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 31.653903
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 8,1) :    29.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3022 (26.9%), 8228 (73.1%) left; Finishing by Sat Oct 21  6:27:46 2000

(5,11,8) <- (1,1,4).*(5, 9+2,2): 25.207860 Mflop/s
(15,11,14) <- (3,1,7).*(5, 9+2,2): 26.819207 Mflop/s

Testing m0 = 5, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 11 8 5 11 11 8 5 8
<<< (M = 5, K = 11, N = 8) : 25.207860
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 26.819207
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 9,2) :    26.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3023 (26.9%), 8227 (73.1%) left; Finishing by Sat Oct 21  6:27:45 2000

(8,8,8) <- (2,1,4).*(4, 6+2,2): 26.089160 Mflop/s
(12,16,14) <- (3,2,7).*(4, 6+2,2): 33.025154 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 26.089160
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 14 12 16 16 14 12 14
<<< (M = 12, K = 16, N = 14) : 33.025154
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 6,2) :    29.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3024 (26.9%), 8226 (73.1%) left; Finishing by Sat Oct 21  6:27:44 2000

(8,9,9) <- (2,1,9).*(4, 7+2,1): 107.182763 Mflop/s
(12,18,15) <- (3,2,15).*(4, 7+2,1): 152.079421 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 107.182763
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 152.079421
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 7,1) :   125.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3025 (26.9%), 8225 (73.1%) left; Finishing by Sat Oct 21  6:27:47 2000

(10,13,9) <- (0,0,9).*(10, 11+2,1): 93.504727 Mflop/s
(10,13,15) <- (1,1,15).*(10, 11+2,1): 99.195930 Mflop/s

Testing m0 = 10, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 10  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 13 9 10 13 13 9 10 9
<<< (M = 10, K = 13, N = 9) : 93.504727
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 13 15 10 13 13 15 10 15
<<< (M = 10, K = 13, N = 15) : 99.195930
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (10, 11,1) :    96.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3026 (26.9%), 8224 (73.1%) left; Finishing by Sat Oct 21  6:27:46 2000

(8,9,9) <- (4,1,3).*(2, 7+2,3): 31.353627 Mflop/s
(14,18,15) <- (7,2,5).*(2, 7+2,3): 27.026743 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 31.353627
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 27.026743
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 7,3) :    29.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3027 (26.9%), 8223 (73.1%) left; Finishing by Sat Oct 21  6:27:45 2000

(5,8,9) <- (1,1,9).*(5, 6+2,1): 48.233079 Mflop/s
(15,16,15) <- (3,2,15).*(5, 6+2,1): 68.906881 Mflop/s

Testing m0 = 5, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 48.233079
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 68.906881
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 6,1) :    56.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3028 (26.9%), 8222 (73.1%) left; Finishing by Sat Oct 21  6:27:44 2000

(9,12,8) <- (9,2,4).*(1, 4+2,2): 161.674160 Mflop/s
(15,18,14) <- (15,3,7).*(1, 4+2,2): 150.902898 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 161.674160
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 150.902898
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,2) :   156.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3029 (26.9%), 8221 (73.1%) left; Finishing by Sat Oct 21  6:27:46 2000

(8,15,8) <- (1,3,4).*(8, 3+2,2): 108.660816 Mflop/s
(8,25,14) <- (1,5,7).*(8, 3+2,2): 114.886657 Mflop/s

Testing m0 = 8, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 108.660816
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 25 14 8 25 25 14 8 14
<<< (M = 8, K = 25, N = 14) : 114.886657
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 3,2) :   111.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3030 (26.9%), 8220 (73.1%) left; Finishing by Sat Oct 21  6:27:45 2000

(8,10,8) <- (2,1,2).*(4, 8+2,4): 24.944753 Mflop/s
(12,10,12) <- (3,1,3).*(4, 8+2,4): 24.988950 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 24.944753
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 12 12 10 10 12 12 12
<<< (M = 12, K = 10, N = 12) : 24.988950
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 8,4) :    25.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3031 (26.9%), 8219 (73.1%) left; Finishing by Sat Oct 21  6:27:44 2000

(12,16,9) <- (0,0,9).*(12, 14+2,1): 95.466139 Mflop/s
(12,16,15) <- (1,1,15).*(12, 14+2,1): 97.985356 Mflop/s

Testing m0 = 12, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 12  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 9 12 16 16 9 12 9
<<< (M = 12, K = 16, N = 9) : 95.466139
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 97.985356
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (12, 14,1) :    96.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3032 (27.0%), 8218 (73.0%) left; Finishing by Sat Oct 21  6:27:47 2000

(8,11,8) <- (2,1,4).*(4, 9+2,2): 26.834219 Mflop/s
(12,11,14) <- (3,1,7).*(4, 9+2,2): 28.429728 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 26.834219
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 14 12 11 11 14 12 14
<<< (M = 12, K = 11, N = 14) : 28.429728
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 9,2) :    27.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3033 (27.0%), 8217 (73.0%) left; Finishing by Sat Oct 21  6:27:46 2000

(8,7,8) <- (2,1,2).*(4, 5+2,4): 103.264848 Mflop/s
(12,21,12) <- (3,3,3).*(4, 5+2,4): 147.361081 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 103.264848
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 12 12 21 21 12 12 12
<<< (M = 12, K = 21, N = 12) : 147.361081
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 5,4) :   121.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3034 (27.0%), 8216 (73.0%) left; Finishing by Sat Oct 21  6:27:49 2000

(5,10,8) <- (1,1,4).*(5, 8+2,2): 24.899511 Mflop/s
(15,10,14) <- (3,1,7).*(5, 8+2,2): 26.674993 Mflop/s

Testing m0 = 5, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 8 5 10 10 8 5 8
<<< (M = 5, K = 10, N = 8) : 24.899511
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 26.674993
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 8,2) :    25.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3035 (27.0%), 8215 (73.0%) left; Finishing by Sat Oct 21  6:27:48 2000

(8,10,7) <- (4,1,1).*(2, 8+2,7): 25.078725 Mflop/s
(14,10,14) <- (7,1,2).*(2, 8+2,7): 22.635081 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  8 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 7 8 10 10 7 8 7
<<< (M = 8, K = 10, N = 7) : 25.078725
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 14 14 10 10 14 14 14
<<< (M = 14, K = 10, N = 14) : 22.635081
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 8,7) :    23.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3036 (27.0%), 8214 (73.0%) left; Finishing by Sat Oct 21  6:27:47 2000

(8,17,7) <- (4,0,1).*(2, 15+2,7): 25.933745 Mflop/s
(14,17,14) <- (7,1,2).*(2, 15+2,7): 23.467980 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  15 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 7 8 17 17 7 8 7
<<< (M = 8, K = 17, N = 7) : 25.933745
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 17 14 14 17 17 14 14 14
<<< (M = 14, K = 17, N = 14) : 23.467980
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 15,7) :    24.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3037 (27.0%), 8213 (73.0%) left; Finishing by Sat Oct 21  6:27:49 2000

(9,15,9) <- (3,0,3).*(3, 13+2,3): 117.824528 Mflop/s
(15,15,15) <- (5,1,5).*(3, 13+2,3): 119.031961 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 117.824528
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 119.031961
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 13,3) :   118.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3038 (27.0%), 8212 (73.0%) left; Finishing by Sat Oct 21  6:27:48 2000

(9,27,16) <- (9,9,0).*(1,1+2,16): 21.170403 Mflop/s
(15,45,16) <- (15,15,0).*(1,1+2,16): 22.140753 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 16 9 27 27 16 9 16
<<< (M = 9, K = 27, N = 16) : 21.170403
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 16 15 45 45 16 15 16
<<< (M = 15, K = 45, N = 16) : 22.140753
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,16) :    21.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3039 (27.0%), 8211 (73.0%) left; Finishing by Sat Oct 21  6:27:47 2000

(12,14,9) <- (0,0,9).*(12, 12+2,1): 93.968412 Mflop/s
(12,14,15) <- (1,1,15).*(12, 12+2,1): 96.161546 Mflop/s

Testing m0 = 12, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 12  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 9 12 14 14 9 12 9
<<< (M = 12, K = 14, N = 9) : 93.968412
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 96.161546
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (12, 12,1) :    95.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3040 (27.0%), 8210 (73.0%) left; Finishing by Sat Oct 21  6:27:50 2000

(15,10,9) <- (0,1,9).*(15, 8+2,1): 99.784290 Mflop/s
(15,10,15) <- (1,1,15).*(15, 8+2,1): 100.280551 Mflop/s

Testing m0 = 15, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 15  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 9 15 10 10 9 15 9
<<< (M = 15, K = 10, N = 9) : 99.784290
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 100.280551
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (15, 8,1) :   100.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3041 (27.0%), 8209 (73.0%) left; Finishing by Sat Oct 21  6:27:49 2000

(8,14,8) <- (4,0,2).*(2, 12+2,4): 29.790072 Mflop/s
(14,14,12) <- (7,1,3).*(2, 12+2,4): 26.632173 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 29.790072
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 26.632173
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 12,4) :    28.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3042 (27.0%), 8208 (73.0%) left; Finishing by Sat Oct 21  6:27:52 2000

(9,15,15) <- (9,0,0).*(1, 13+2,15): 98.101698 Mflop/s
(15,15,15) <- (15,1,1).*(1, 13+2,15): 89.045145 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 98.101698
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 89.045145
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,15) :    93.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3043 (27.0%), 8207 (73.0%) left; Finishing by Sat Oct 21  6:27:51 2000

(9,14,15) <- (9,0,0).*(1, 12+2,15): 97.393798 Mflop/s
(15,14,15) <- (15,1,1).*(1, 12+2,15): 89.539797 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 97.393798
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 89.539797
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,15) :    93.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3044 (27.1%), 8206 (72.9%) left; Finishing by Sat Oct 21  6:27:50 2000

(5,17,9) <- (1,0,3).*(5, 15+2,3): 25.250510 Mflop/s
(15,17,15) <- (3,1,5).*(5, 15+2,3): 25.922152 Mflop/s

Testing m0 = 5, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 17 9 5 17 17 9 5 9
<<< (M = 5, K = 17, N = 9) : 25.250510
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 15 15 17 17 15 15 15
<<< (M = 15, K = 17, N = 15) : 25.922152
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 15,3) :    25.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3045 (27.1%), 8205 (72.9%) left; Finishing by Sat Oct 21  6:27:52 2000

(8,12,8) <- (2,2,2).*(4, 4+2,4): 133.838091 Mflop/s
(12,18,12) <- (3,3,3).*(4, 4+2,4): 120.027930 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 133.838091
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 12 12 18 18 12 12 12
<<< (M = 12, K = 18, N = 12) : 120.027930
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 4,4) :   126.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3046 (27.1%), 8204 (72.9%) left; Finishing by Sat Oct 21  6:27:48 2000

(9,8,8) <- (9,1,1).*(1, 6+2,8): 97.309443 Mflop/s
(15,16,8) <- (15,2,1).*(1, 6+2,8): 121.914894 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 97.309443
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 8 15 16 16 8 15 8
<<< (M = 15, K = 16, N = 8) : 121.914894
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,8) :   108.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3047 (27.1%), 8203 (72.9%) left; Finishing by Sat Oct 21  6:27:47 2000

(9,10,15) <- (9,1,0).*(1, 8+2,15): 94.768624 Mflop/s
(15,10,15) <- (15,1,1).*(1, 8+2,15): 87.582065 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 15 9 10 10 15 9 15
<<< (M = 9, K = 10, N = 15) : 94.768624
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 87.582065
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,15) :    91.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3048 (27.1%), 8202 (72.9%) left; Finishing by Sat Oct 21  6:27:46 2000

(15,12,9) <- (0,2,9).*(15, 4+2,1): 89.249146 Mflop/s
(15,18,15) <- (1,3,15).*(15, 4+2,1): 80.188379 Mflop/s

Testing m0 = 15, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 15  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 89.249146
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 80.188379
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (15, 4,1) :    84.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3049 (27.1%), 8201 (72.9%) left; Finishing by Sat Oct 21  6:27:48 2000

(14,12,9) <- (0,2,9).*(14, 4+2,1): 29.094347 Mflop/s
(14,18,15) <- (1,3,15).*(14, 4+2,1): 26.935872 Mflop/s

Testing m0 = 14, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 14  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 9 14 12 12 9 14 9
<<< (M = 14, K = 12, N = 9) : 29.094347
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 26.935872
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (14, 4,1) :    28.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3050 (27.1%), 8200 (72.9%) left; Finishing by Sat Oct 21  6:27:47 2000

(9,27,6) <- (9,9,1).*(1,1+2,6): 101.321227 Mflop/s
(15,45,12) <- (15,15,2).*(1,1+2,6): 104.093567 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 6 9 27 27 6 9 6
<<< (M = 9, K = 27, N = 6) : 101.321227
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 12 15 45 45 12 15 12
<<< (M = 15, K = 45, N = 12) : 104.093567
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,6) :   102.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3051 (27.1%), 8199 (72.9%) left; Finishing by Sat Oct 21  6:27:46 2000

(8,13,9) <- (4,0,3).*(2, 11+2,3): 32.414578 Mflop/s
(14,13,15) <- (7,1,5).*(2, 11+2,3): 23.645408 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 32.414578
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 23.645408
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 11,3) :    27.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3052 (27.1%), 8198 (72.9%) left; Finishing by Sat Oct 21  6:27:49 2000

(9,17,8) <- (3,0,2).*(3, 15+2,4): 118.343616 Mflop/s
(15,17,12) <- (5,1,3).*(3, 15+2,4): 119.456819 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 8 9 17 17 8 9 8
<<< (M = 9, K = 17, N = 8) : 118.343616
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 12 15 17 17 12 15 12
<<< (M = 15, K = 17, N = 12) : 119.456819
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 15,4) :   118.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3053 (27.1%), 8197 (72.9%) left; Finishing by Sat Oct 21  6:27:48 2000

(9,27,8) <- (9,9,2).*(1,1+2,4): 111.429898 Mflop/s
(15,45,12) <- (15,15,3).*(1,1+2,4): 113.342158 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 8 9 27 27 8 9 8
<<< (M = 9, K = 27, N = 8) : 111.429898
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 12 15 45 45 12 15 12
<<< (M = 15, K = 45, N = 12) : 113.342158
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,4) :   112.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3054 (27.1%), 8196 (72.9%) left; Finishing by Sat Oct 21  6:27:43 2000

(9,10,5) <- (9,1,1).*(1, 8+2,5): 59.649900 Mflop/s
(15,10,15) <- (15,1,3).*(1, 8+2,5): 109.500014 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 5 9 10 10 5 9 5
<<< (M = 9, K = 10, N = 5) : 59.649900
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 109.500014
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,5) :    77.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3055 (27.2%), 8195 (72.8%) left; Finishing by Sat Oct 21  6:27:46 2000

(9,8,11) <- (9,1,0).*(1, 6+2,11): 91.941359 Mflop/s
(15,16,11) <- (15,2,1).*(1, 6+2,11): 95.935630 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 11 9 8 8 11 9 11
<<< (M = 9, K = 8, N = 11) : 91.941359
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 11 15 16 16 11 15 11
<<< (M = 15, K = 16, N = 11) : 95.935630
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,11) :    93.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3056 (27.2%), 8194 (72.8%) left; Finishing by Sat Oct 21  6:27:45 2000

(9,10,11) <- (9,1,0).*(1, 8+2,11): 94.302048 Mflop/s
(15,10,11) <- (15,1,1).*(1, 8+2,11): 80.953745 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 11 9 10 10 11 9 11
<<< (M = 9, K = 10, N = 11) : 94.302048
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 11 15 10 10 11 15 11
<<< (M = 15, K = 10, N = 11) : 80.953745
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,11) :    87.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3057 (27.2%), 8193 (72.8%) left; Finishing by Sat Oct 21  6:27:44 2000

(9,17,9) <- (9,0,9).*(1, 15+2,1): 133.137834 Mflop/s
(15,17,15) <- (15,1,15).*(1, 15+2,1): 135.523173 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 9 9 17 17 9 9 9
<<< (M = 9, K = 17, N = 9) : 133.137834
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 15 15 17 17 15 15 15
<<< (M = 15, K = 17, N = 15) : 135.523173
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,1) :   134.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3058 (27.2%), 8192 (72.8%) left; Finishing by Sat Oct 21  6:27:39 2000

(9,15,8) <- (9,0,1).*(1, 13+2,8): 108.364897 Mflop/s
(15,15,8) <- (15,1,1).*(1, 13+2,8): 108.792841 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 108.364897
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 8 15 15 15 8 15 8
<<< (M = 15, K = 15, N = 8) : 108.792841
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,8) :   108.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3059 (27.2%), 8191 (72.8%) left; Finishing by Sat Oct 21  6:27:38 2000

(7,15,9) <- (1,3,9).*(7, 3+2,1): 29.913502 Mflop/s
(14,25,15) <- (2,5,15).*(7, 3+2,1): 35.654690 Mflop/s

Testing m0 = 7, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 15 9 7 15 15 9 7 9
<<< (M = 7, K = 15, N = 9) : 29.913502
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 25 15 14 25 25 15 14 15
<<< (M = 14, K = 25, N = 15) : 35.654690
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 3,1) :    32.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3060 (27.2%), 8190 (72.8%) left; Finishing by Sat Oct 21  6:27:37 2000

(8,15,5) <- (4,0,1).*(2, 13+2,5): 24.695752 Mflop/s
(14,15,15) <- (7,1,3).*(2, 13+2,5): 26.537405 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  13 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 5 8 15 15 5 8 5
<<< (M = 8, K = 15, N = 5) : 24.695752
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 26.537405
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 13,5) :    25.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3061 (27.2%), 8189 (72.8%) left; Finishing by Sat Oct 21  6:27:36 2000

(9,12,5) <- (3,2,1).*(3, 4+2,5): 132.383393 Mflop/s
(15,18,15) <- (5,3,3).*(3, 4+2,5): 120.096127 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  4 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 132.383393
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 120.096127
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 4,5) :   125.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3062 (27.2%), 8188 (72.8%) left; Finishing by Sat Oct 21  6:27:39 2000

(9,15,11) <- (9,0,0).*(1, 13+2,11): 98.460215 Mflop/s
(15,15,11) <- (15,1,1).*(1, 13+2,11): 82.657498 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 11 9 15 15 11 9 11
<<< (M = 9, K = 15, N = 11) : 98.460215
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 11 15 15 15 11 15 11
<<< (M = 15, K = 15, N = 11) : 82.657498
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,11) :    89.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3063 (27.2%), 8187 (72.8%) left; Finishing by Sat Oct 21  6:27:38 2000

(8,7,9) <- (2,1,9).*(4, 5+2,1): 98.490701 Mflop/s
(12,21,15) <- (3,3,15).*(4, 5+2,1): 163.164807 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 98.490701
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 15 12 21 21 15 12 15
<<< (M = 12, K = 21, N = 15) : 163.164807
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 5,1) :   122.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3064 (27.2%), 8186 (72.8%) left; Finishing by Sat Oct 21  6:27:40 2000

(7,12,8) <- (1,2,4).*(7, 4+2,2): 26.053510 Mflop/s
(14,18,14) <- (2,3,7).*(7, 4+2,2): 25.404626 Mflop/s

Testing m0 = 7, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 8 7 12 12 8 7 8
<<< (M = 7, K = 12, N = 8) : 26.053510
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 14 14 18 18 14 14 14
<<< (M = 14, K = 18, N = 14) : 25.404626
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 4,2) :    25.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3065 (27.2%), 8185 (72.8%) left; Finishing by Sat Oct 21  6:27:39 2000

(8,10,9) <- (4,1,9).*(2, 8+2,1): 142.640977 Mflop/s
(14,10,15) <- (7,1,15).*(2, 8+2,1): 147.112131 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 142.640977
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 147.112131
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 8,1) :   144.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3066 (27.3%), 8184 (72.7%) left; Finishing by Sat Oct 21  6:27:42 2000

(15,9,9) <- (0,1,9).*(15, 7+2,1): 96.952589 Mflop/s
(15,18,15) <- (1,2,15).*(15, 7+2,1): 121.030978 Mflop/s

Testing m0 = 15, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 15  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 9 9 15 9 9 9 15 9
<<< (M = 15, K = 9, N = 9) : 96.952589
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 121.030978
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (15, 7,1) :   107.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3067 (27.3%), 8183 (72.7%) left; Finishing by Sat Oct 21  6:27:41 2000

(9,14,8) <- (3,0,2).*(3, 12+2,4): 116.147357 Mflop/s
(15,14,12) <- (5,1,3).*(3, 12+2,4): 117.052199 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 116.147357
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 117.052199
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 12,4) :   116.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3068 (27.3%), 8182 (72.7%) left; Finishing by Sat Oct 21  6:27:40 2000

(9,12,9) <- (3,2,9).*(3, 4+2,1): 171.805886 Mflop/s
(15,18,15) <- (5,3,15).*(3, 4+2,1): 161.059413 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 171.805886
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 161.059413
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 4,1) :   166.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3069 (27.3%), 8181 (72.7%) left; Finishing by Sat Oct 21  6:27:39 2000

(8,9,9) <- (4,1,9).*(2, 7+2,1): 142.229819 Mflop/s
(14,18,15) <- (7,2,15).*(2, 7+2,1): 190.766748 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 142.229819
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 190.766748
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 7,1) :   163.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3070 (27.3%), 8180 (72.7%) left; Finishing by Sat Oct 21  6:27:42 2000

(9,12,9) <- (1,2,9).*(9, 4+2,1): 117.386469 Mflop/s
(9,18,15) <- (1,3,15).*(9, 4+2,1): 109.474338 Mflop/s

Testing m0 = 9, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 9  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 117.386469
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 15 9 18 18 15 9 15
<<< (M = 9, K = 18, N = 15) : 109.474338
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (9, 4,1) :   113.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3071 (27.3%), 8179 (72.7%) left; Finishing by Sat Oct 21  6:27:41 2000

(9,9,9) <- (1,1,9).*(9, 7+2,1): 30.518312 Mflop/s
(9,18,15) <- (1,2,15).*(9, 7+2,1): 36.976037 Mflop/s

Testing m0 = 9, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 9  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 30.518312
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 18 15 9 18 18 15 9 15
<<< (M = 9, K = 18, N = 15) : 36.976037
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (9, 7,1) :    33.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3072 (27.3%), 8178 (72.7%) left; Finishing by Sat Oct 21  6:27:40 2000

(10,15,9) <- (0,0,9).*(10, 13+2,1): 94.311886 Mflop/s
(10,15,15) <- (1,1,15).*(10, 13+2,1): 100.320833 Mflop/s

Testing m0 = 10, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 10  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 9 10 15 15 9 10 9
<<< (M = 10, K = 15, N = 9) : 94.311886
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 15 10 15 15 15 10 15
<<< (M = 10, K = 15, N = 15) : 100.320833
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (10, 13,1) :    97.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3073 (27.3%), 8177 (72.7%) left; Finishing by Sat Oct 21  6:27:39 2000

(8,27,9) <- (1,9,9).*(8,1+2,1): 23.750312 Mflop/s
(8,45,15) <- (1,15,15).*(8,1+2,1): 24.240203 Mflop/s

Testing m0 = 8, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 27 9 8 27 27 9 8 9
<<< (M = 8, K = 27, N = 9) : 23.750312
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 45 15 8 45 45 15 8 15
<<< (M = 8, K = 45, N = 15) : 24.240203
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8,1,1) :    24.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3074 (27.3%), 8176 (72.7%) left; Finishing by Sat Oct 21  6:27:38 2000

(9,16,5) <- (3,0,1).*(3, 14+2,5): 115.966775 Mflop/s
(15,16,15) <- (5,1,3).*(3, 14+2,5): 118.619588 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  14 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 5 9 16 16 5 9 5
<<< (M = 9, K = 16, N = 5) : 115.966775
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 118.619588
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 14,5) :   117.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3075 (27.3%), 8175 (72.7%) left; Finishing by Sat Oct 21  6:27:37 2000

(9,15,10) <- (9,0,0).*(1, 13+2,10): 98.602788 Mflop/s
(15,15,10) <- (15,1,1).*(1, 13+2,10): 99.134667 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 10 9 15 15 10 9 10
<<< (M = 9, K = 15, N = 10) : 98.602788
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 10 15 15 15 10 15 10
<<< (M = 15, K = 15, N = 10) : 99.134667
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,10) :    98.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3076 (27.3%), 8174 (72.7%) left; Finishing by Sat Oct 21  6:27:36 2000

(9,12,7) <- (9,0,1).*(1, 10+2,7): 110.624337 Mflop/s
(15,12,14) <- (15,1,2).*(1, 10+2,7): 69.956801 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 7 9 12 12 7 9 7
<<< (M = 9, K = 12, N = 7) : 110.624337
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 69.956801
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,7) :    85.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3077 (27.4%), 8173 (72.6%) left; Finishing by Sat Oct 21  6:27:35 2000

(8,16,9) <- (2,0,3).*(4, 14+2,3): 26.437807 Mflop/s
(12,16,15) <- (3,1,5).*(4, 14+2,3): 28.105425 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 26.437807
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 28.105425
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 14,3) :    27.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3078 (27.4%), 8172 (72.6%) left; Finishing by Sat Oct 21  6:27:34 2000

(9,14,12) <- (9,0,0).*(1, 12+2,12): 96.101458 Mflop/s
(15,14,12) <- (15,1,1).*(1, 12+2,12): 96.298482 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 12 9 14 14 12 9 12
<<< (M = 9, K = 14, N = 12) : 96.101458
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 96.298482
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,12) :    96.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3079 (27.4%), 8171 (72.6%) left; Finishing by Sat Oct 21  6:27:36 2000

(8,8,8) <- (1,1,4).*(8, 6+2,2): 92.189881 Mflop/s
(8,16,14) <- (1,2,7).*(8, 6+2,2): 116.245539 Mflop/s

Testing m0 = 8, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 92.189881
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 14 8 16 16 14 8 14
<<< (M = 8, K = 16, N = 14) : 116.245539
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 6,2) :   102.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3080 (27.4%), 8170 (72.6%) left; Finishing by Sat Oct 21  6:27:35 2000

(9,16,6) <- (9,4,1).*(1, 2+2,6): 108.942012 Mflop/s
(15,28,12) <- (15,7,2).*(1, 2+2,6): 115.422078 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 6 9 16 16 6 9 6
<<< (M = 9, K = 16, N = 6) : 108.942012
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 12 15 28 28 12 15 12
<<< (M = 15, K = 28, N = 12) : 115.422078
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,6) :   112.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3081 (27.4%), 8169 (72.6%) left; Finishing by Sat Oct 21  6:27:38 2000

(12,13,9) <- (0,0,9).*(12, 11+2,1): 92.329934 Mflop/s
(12,13,15) <- (1,1,15).*(12, 11+2,1): 94.155421 Mflop/s

Testing m0 = 12, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 12  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 9 12 13 13 9 12 9
<<< (M = 12, K = 13, N = 9) : 92.329934
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 94.155421
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (12, 11,1) :    93.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3082 (27.4%), 8168 (72.6%) left; Finishing by Sat Oct 21  6:27:41 2000

(7,16,9) <- (1,4,9).*(7, 2+2,1): 62.961601 Mflop/s
(14,28,15) <- (2,7,15).*(7, 2+2,1): 67.552501 Mflop/s

Testing m0 = 7, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 16 9 7 16 16 9 7 9
<<< (M = 7, K = 16, N = 9) : 62.961601
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 28 15 14 28 28 15 14 15
<<< (M = 14, K = 28, N = 15) : 67.552501
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 2,1) :    65.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3083 (27.4%), 8167 (72.6%) left; Finishing by Sat Oct 21  6:27:36 2000

(8,13,9) <- (2,0,3).*(4, 11+2,3): 26.092252 Mflop/s
(12,13,15) <- (3,1,5).*(4, 11+2,3): 27.600801 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 26.092252
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 27.600801
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 11,3) :    26.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3084 (27.4%), 8166 (72.6%) left; Finishing by Sat Oct 21  6:27:39 2000

(9,10,7) <- (9,1,1).*(1, 8+2,7): 107.946789 Mflop/s
(15,10,14) <- (15,1,2).*(1, 8+2,7): 67.805807 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 7 9 10 10 7 9 7
<<< (M = 9, K = 10, N = 7) : 107.946789
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 67.805807
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,7) :    83.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3085 (27.4%), 8165 (72.6%) left; Finishing by Sat Oct 21  6:27:34 2000

(9,8,6) <- (9,1,1).*(1, 6+2,6): 101.561906 Mflop/s
(15,16,12) <- (15,2,2).*(1, 6+2,6): 130.048104 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 6 9 8 8 6 9 6
<<< (M = 9, K = 8, N = 6) : 101.561906
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 130.048104
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,6) :   114.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3086 (27.4%), 8164 (72.6%) left; Finishing by Sat Oct 21  6:27:37 2000

(5,12,8) <- (1,2,4).*(5, 4+2,2): 30.242960 Mflop/s
(15,18,14) <- (3,3,7).*(5, 4+2,2): 28.041913 Mflop/s

Testing m0 = 5, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 8 5 12 12 8 5 8
<<< (M = 5, K = 12, N = 8) : 30.242960
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 28.041913
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 4,2) :    29.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3087 (27.4%), 8163 (72.6%) left; Finishing by Sat Oct 21  6:27:36 2000

(8,17,8) <- (2,0,4).*(4, 15+2,2): 27.400558 Mflop/s
(12,17,14) <- (3,1,7).*(4, 15+2,2): 29.320472 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 8 8 17 17 8 8 8
<<< (M = 8, K = 17, N = 8) : 27.400558
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 17 14 12 17 17 14 12 14
<<< (M = 12, K = 17, N = 14) : 29.320472
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 15,2) :    28.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3088 (27.4%), 8162 (72.6%) left; Finishing by Sat Oct 21  6:27:35 2000

(8,17,8) <- (4,0,4).*(2, 15+2,2): 38.462312 Mflop/s
(14,17,14) <- (7,1,7).*(2, 15+2,2): 36.746638 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 8 8 17 17 8 8 8
<<< (M = 8, K = 17, N = 8) : 38.462312
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 17 14 14 17 17 14 14 14
<<< (M = 14, K = 17, N = 14) : 36.746638
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 15,2) :    37.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3089 (27.5%), 8161 (72.5%) left; Finishing by Sat Oct 21  6:27:34 2000

(9,27,15) <- (9,9,0).*(1,1+2,15): 23.024258 Mflop/s
(15,45,15) <- (15,15,1).*(1,1+2,15): 21.029478 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 15 9 27 27 15 9 15
<<< (M = 9, K = 27, N = 15) : 23.024258
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 15 15 45 45 15 15 15
<<< (M = 15, K = 45, N = 15) : 21.029478
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,15) :    22.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3090 (27.5%), 8160 (72.5%) left; Finishing by Sat Oct 21  6:27:33 2000

(5,13,9) <- (1,0,3).*(5, 11+2,3): 24.866877 Mflop/s
(15,13,15) <- (3,1,5).*(5, 11+2,3): 25.510437 Mflop/s

Testing m0 = 5, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 13 9 5 13 13 9 5 9
<<< (M = 5, K = 13, N = 9) : 24.866877
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 25.510437
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 11,3) :    25.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3091 (27.5%), 8159 (72.5%) left; Finishing by Sat Oct 21  6:27:32 2000

(9,16,6) <- (9,0,1).*(1, 14+2,6): 121.415210 Mflop/s
(15,16,12) <- (15,1,2).*(1, 14+2,6): 123.952767 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 6 9 16 16 6 9 6
<<< (M = 9, K = 16, N = 6) : 121.415210
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 123.952767
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,6) :   122.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3092 (27.5%), 8158 (72.5%) left; Finishing by Sat Oct 21  6:27:31 2000

(9,17,9) <- (9,0,3).*(1, 15+2,3): 131.085959 Mflop/s
(15,17,15) <- (15,1,5).*(1, 15+2,3): 122.972468 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 9 9 17 17 9 9 9
<<< (M = 9, K = 17, N = 9) : 131.085959
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 15 15 17 17 15 15 15
<<< (M = 15, K = 17, N = 15) : 122.972468
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,3) :   126.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3093 (27.5%), 8157 (72.5%) left; Finishing by Sat Oct 21  6:27:30 2000

(9,7,12) <- (9,1,0).*(1, 5+2,12): 88.535857 Mflop/s
(15,21,12) <- (15,3,1).*(1, 5+2,12): 121.485427 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 12 9 7 7 12 9 12
<<< (M = 9, K = 7, N = 12) : 88.535857
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 12 15 21 21 12 15 12
<<< (M = 15, K = 21, N = 12) : 121.485427
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,12) :   102.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3094 (27.5%), 8156 (72.5%) left; Finishing by Sat Oct 21  6:27:29 2000

(9,15,9) <- (1,3,9).*(9, 3+2,1): 75.402058 Mflop/s
(9,25,15) <- (1,5,15).*(9, 3+2,1): 80.830682 Mflop/s

Testing m0 = 9, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 9  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 75.402058
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 25 15 9 25 25 15 9 15
<<< (M = 9, K = 25, N = 15) : 80.830682
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (9, 3,1) :    78.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3095 (27.5%), 8155 (72.5%) left; Finishing by Sat Oct 21  6:27:28 2000

(8,8,8) <- (2,1,2).*(4, 6+2,4): 106.074160 Mflop/s
(12,16,12) <- (3,2,3).*(4, 6+2,4): 131.879084 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 106.074160
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 12 12 16 16 12 12 12
<<< (M = 12, K = 16, N = 12) : 131.879084
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 6,4) :   117.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3096 (27.5%), 8154 (72.5%) left; Finishing by Sat Oct 21  6:27:30 2000

(10,16,9) <- (0,0,9).*(10, 14+2,1): 96.479070 Mflop/s
(10,16,15) <- (1,1,15).*(10, 14+2,1): 98.922396 Mflop/s

Testing m0 = 10, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 10  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 16 9 10 16 16 9 10 9
<<< (M = 10, K = 16, N = 9) : 96.479070
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 16 15 10 16 16 15 10 15
<<< (M = 10, K = 16, N = 15) : 98.922396
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (10, 14,1) :    97.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3097 (27.5%), 8153 (72.5%) left; Finishing by Sat Oct 21  6:27:29 2000

(8,8,6) <- (4,1,1).*(2, 6+2,6): 23.857447 Mflop/s
(14,16,12) <- (7,2,2).*(2, 6+2,6): 27.636117 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  6 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 6 8 8 8 6 8 6
<<< (M = 8, K = 8, N = 6) : 23.857447
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 12 14 16 16 12 14 12
<<< (M = 14, K = 16, N = 12) : 27.636117
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 6,6) :    25.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3098 (27.5%), 8152 (72.5%) left; Finishing by Sat Oct 21  6:27:28 2000

(8,12,9) <- (4,0,9).*(2, 10+2,1): 156.994319 Mflop/s
(14,12,15) <- (7,1,15).*(2, 10+2,1): 162.272998 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 156.994319
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 162.272998
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 10,1) :   159.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3099 (27.5%), 8151 (72.5%) left; Finishing by Sat Oct 21  6:27:31 2000

(8,12,9) <- (2,2,3).*(4, 4+2,3): 130.390391 Mflop/s
(12,18,15) <- (3,3,5).*(4, 4+2,3): 116.406907 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 130.390391
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 116.406907
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 4,3) :   123.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3100 (27.6%), 8150 (72.4%) left; Finishing by Sat Oct 21  6:27:34 2000

(6,16,8) <- (1,4,4).*(6, 2+2,2): 103.207626 Mflop/s
(12,28,14) <- (2,7,7).*(6, 2+2,2): 109.441769 Mflop/s

Testing m0 = 6, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 16 8 6 16 16 8 6 8
<<< (M = 6, K = 16, N = 8) : 103.207626
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 28 14 12 28 28 14 12 14
<<< (M = 12, K = 28, N = 14) : 109.441769
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 2,2) :   106.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3101 (27.6%), 8149 (72.4%) left; Finishing by Sat Oct 21  6:27:36 2000

(9,9,16) <- (9,1,0).*(1, 7+2,16): 93.304693 Mflop/s
(15,18,16) <- (15,2,0).*(1, 7+2,16): 112.827558 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 16 9 9 9 16 9 16
<<< (M = 9, K = 9, N = 16) : 93.304693
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 16 15 18 18 16 15 16
<<< (M = 15, K = 18, N = 16) : 112.827558
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,16) :   102.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3102 (27.6%), 8148 (72.4%) left; Finishing by Sat Oct 21  6:27:35 2000

(9,12,7) <- (9,2,1).*(1, 4+2,7): 127.444902 Mflop/s
(15,18,14) <- (15,3,2).*(1, 4+2,7): 70.144163 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 7 9 12 12 7 9 7
<<< (M = 9, K = 12, N = 7) : 127.444902
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 70.144163
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,7) :    90.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3103 (27.6%), 8147 (72.4%) left; Finishing by Sat Oct 21  6:27:38 2000

(8,27,8) <- (1,9,4).*(8,1+2,2): 24.638848 Mflop/s
(8,45,14) <- (1,15,7).*(8,1+2,2): 24.913181 Mflop/s

Testing m0 = 8, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 27 8 8 27 27 8 8 8
<<< (M = 8, K = 27, N = 8) : 24.638848
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 45 14 8 45 45 14 8 14
<<< (M = 8, K = 45, N = 14) : 24.913181
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8,1,2) :    24.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3104 (27.6%), 8146 (72.4%) left; Finishing by Sat Oct 21  6:27:37 2000

(9,7,11) <- (9,1,0).*(1, 5+2,11): 88.699661 Mflop/s
(15,21,11) <- (15,3,1).*(1, 5+2,11): 105.762702 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 11 9 7 7 11 9 11
<<< (M = 9, K = 7, N = 11) : 88.699661
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 11 15 21 21 11 15 11
<<< (M = 15, K = 21, N = 11) : 105.762702
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,11) :    96.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3105 (27.6%), 8145 (72.4%) left; Finishing by Sat Oct 21  6:27:36 2000

(9,17,5) <- (3,0,1).*(3, 15+2,5): 116.526131 Mflop/s
(15,17,15) <- (5,1,3).*(3, 15+2,5): 119.265587 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  15 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 5 9 17 17 5 9 5
<<< (M = 9, K = 17, N = 5) : 116.526131
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 15 15 17 17 15 15 15
<<< (M = 15, K = 17, N = 15) : 119.265587
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 15,5) :   117.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3106 (27.6%), 8144 (72.4%) left; Finishing by Sat Oct 21  6:27:38 2000

(9,16,15) <- (9,4,0).*(1, 2+2,15): 97.506081 Mflop/s
(15,28,15) <- (15,7,1).*(1, 2+2,15): 91.291077 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 15 9 16 16 15 9 15
<<< (M = 9, K = 16, N = 15) : 97.506081
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 15 15 28 28 15 15 15
<<< (M = 15, K = 28, N = 15) : 91.291077
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,15) :    94.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3107 (27.6%), 8143 (72.4%) left; Finishing by Sat Oct 21  6:27:34 2000

(8,27,8) <- (4,9,2).*(2,1+2,4): 116.486833 Mflop/s
(14,45,12) <- (7,15,3).*(2,1+2,4): 119.630251 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 27 8 8 27 27 8 8 8
<<< (M = 8, K = 27, N = 8) : 116.486833
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 45 12 14 45 45 12 14 12
<<< (M = 14, K = 45, N = 12) : 119.630251
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2,1,4) :   118.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3108 (27.6%), 8142 (72.4%) left; Finishing by Sat Oct 21  6:27:33 2000

(9,8,9) <- (9,1,1).*(1, 6+2,9): 74.438506 Mflop/s
(15,16,9) <- (15,2,1).*(1, 6+2,9): 91.578061 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 74.438506
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 9 15 16 16 9 15 9
<<< (M = 15, K = 16, N = 9) : 91.578061
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,9) :    82.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3109 (27.6%), 8141 (72.4%) left; Finishing by Sat Oct 21  6:27:35 2000

(9,13,9) <- (3,0,9).*(3, 11+2,1): 160.283583 Mflop/s
(15,13,15) <- (5,1,15).*(3, 11+2,1): 164.604767 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 160.283583
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 164.604767
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 11,1) :   162.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3110 (27.6%), 8140 (72.4%) left; Finishing by Sat Oct 21  6:27:38 2000

(9,27,11) <- (9,9,0).*(1,1+2,11): 25.656292 Mflop/s
(15,45,11) <- (15,15,1).*(1,1+2,11): 22.354451 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 11 9 27 27 11 9 11
<<< (M = 9, K = 27, N = 11) : 25.656292
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 11 15 45 45 11 15 11
<<< (M = 15, K = 45, N = 11) : 22.354451
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,11) :    23.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3111 (27.7%), 8139 (72.3%) left; Finishing by Sat Oct 21  6:27:37 2000

(7,8,8) <- (1,1,4).*(7, 6+2,2): 21.040190 Mflop/s
(14,16,14) <- (2,2,7).*(7, 6+2,2): 28.430407 Mflop/s

Testing m0 = 7, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 8 7 8 8 8 7 8
<<< (M = 7, K = 8, N = 8) : 21.040190
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 28.430407
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 6,2) :    24.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3112 (27.7%), 8138 (72.3%) left; Finishing by Sat Oct 21  6:27:36 2000

(10,7,9) <- (0,1,9).*(10, 5+2,1): 29.043244 Mflop/s
(10,21,15) <- (1,3,15).*(10, 5+2,1): 34.859533 Mflop/s

Testing m0 = 10, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 10  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 7 9 10 7 7 9 10 9
<<< (M = 10, K = 7, N = 9) : 29.043244
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 21 15 10 21 21 15 10 15
<<< (M = 10, K = 21, N = 15) : 34.859533
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (10, 5,1) :    31.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3113 (27.7%), 8137 (72.3%) left; Finishing by Sat Oct 21  6:27:35 2000

(8,7,9) <- (1,1,9).*(8, 5+2,1): 75.322645 Mflop/s
(8,21,15) <- (1,3,15).*(8, 5+2,1): 111.596102 Mflop/s

Testing m0 = 8, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 75.322645
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 21 15 8 21 21 15 8 15
<<< (M = 8, K = 21, N = 15) : 111.596102
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 5,1) :    89.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3114 (27.7%), 8136 (72.3%) left; Finishing by Sat Oct 21  6:27:38 2000

(8,16,6) <- (4,4,1).*(2, 2+2,6): 25.298470 Mflop/s
(14,28,12) <- (7,7,2).*(2, 2+2,6): 24.536253 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  2 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 6 8 16 16 6 8 6
<<< (M = 8, K = 16, N = 6) : 25.298470
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 28 12 14 28 28 12 14 12
<<< (M = 14, K = 28, N = 12) : 24.536253
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 2,6) :    24.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3115 (27.7%), 8135 (72.3%) left; Finishing by Sat Oct 21  6:27:37 2000

(8,10,9) <- (4,1,3).*(2, 8+2,3): 31.553043 Mflop/s
(14,10,15) <- (7,1,5).*(2, 8+2,3): 23.183475 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 31.553043
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 23.183475
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 8,3) :    26.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3116 (27.7%), 8134 (72.3%) left; Finishing by Sat Oct 21  6:27:32 2000

(9,12,9) <- (9,0,1).*(1, 10+2,9): 78.475899 Mflop/s
(15,12,9) <- (15,1,1).*(1, 10+2,9): 78.637647 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 78.475899
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 78.637647
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,9) :    78.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3117 (27.7%), 8133 (72.3%) left; Finishing by Sat Oct 21  6:27:31 2000

(8,10,9) <- (2,1,3).*(4, 8+2,3): 25.714618 Mflop/s
(12,10,15) <- (3,1,5).*(4, 8+2,3): 26.980824 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 25.714618
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 26.980824
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 8,3) :    26.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3118 (27.7%), 8132 (72.3%) left; Finishing by Sat Oct 21  6:27:30 2000

(8,8,9) <- (2,1,3).*(4, 6+2,3): 103.009762 Mflop/s
(12,16,15) <- (3,2,5).*(4, 6+2,3): 130.028709 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 103.009762
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 130.028709
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 6,3) :   115.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3119 (27.7%), 8131 (72.3%) left; Finishing by Sat Oct 21  6:27:33 2000

(9,9,8) <- (9,1,4).*(1, 7+2,2): 135.216160 Mflop/s
(15,18,14) <- (15,2,7).*(1, 7+2,2): 171.573433 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 135.216160
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 171.573433
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,2) :   151.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3120 (27.7%), 8130 (72.3%) left; Finishing by Sat Oct 21  6:27:35 2000

(9,7,9) <- (9,1,1).*(1, 5+2,9): 74.268048 Mflop/s
(15,21,9) <- (15,3,1).*(1, 5+2,9): 100.145002 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 74.268048
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 9 15 21 21 9 15 9
<<< (M = 15, K = 21, N = 9) : 100.145002
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,9) :    85.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3121 (27.7%), 8129 (72.3%) left; Finishing by Sat Oct 21  6:27:34 2000

(5,8,9) <- (1,1,3).*(5, 6+2,3): 23.916628 Mflop/s
(15,16,15) <- (3,2,5).*(5, 6+2,3): 29.398965 Mflop/s

Testing m0 = 5, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 8 9 5 8 8 9 5 9
<<< (M = 5, K = 8, N = 9) : 23.916628
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 29.398965
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 6,3) :    26.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3122 (27.8%), 8128 (72.2%) left; Finishing by Sat Oct 21  6:27:33 2000

(15,15,9) <- (0,3,9).*(15, 3+2,1): 73.034913 Mflop/s
(15,25,15) <- (1,5,15).*(15, 3+2,1): 76.857847 Mflop/s

Testing m0 = 15, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 15  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 73.034913
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 15 15 25 25 15 15 15
<<< (M = 15, K = 25, N = 15) : 76.857847
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (15, 3,1) :    74.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3123 (27.8%), 8127 (72.2%) left; Finishing by Sat Oct 21  6:27:32 2000

(9,13,8) <- (3,0,2).*(3, 11+2,4): 115.013873 Mflop/s
(15,13,12) <- (5,1,3).*(3, 11+2,4): 115.621788 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 115.013873
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 115.621788
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 11,4) :   115.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3124 (27.8%), 8126 (72.2%) left; Finishing by Sat Oct 21  6:27:28 2000

(9,14,8) <- (9,0,1).*(1, 12+2,8): 107.121199 Mflop/s
(15,14,8) <- (15,1,1).*(1, 12+2,8): 107.835875 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 107.121199
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 8 15 14 14 8 15 8
<<< (M = 15, K = 14, N = 8) : 107.835875
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,8) :   107.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3125 (27.8%), 8125 (72.2%) left; Finishing by Sat Oct 21  6:27:27 2000

(9,7,8) <- (9,1,4).*(1, 5+2,2): 124.691836 Mflop/s
(15,21,14) <- (15,3,7).*(1, 5+2,2): 186.634677 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 124.691836
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 14 15 21 21 14 15 14
<<< (M = 15, K = 21, N = 14) : 186.634677
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,2) :   149.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3126 (27.8%), 8124 (72.2%) left; Finishing by Sat Oct 21  6:27:30 2000

(7,12,9) <- (1,0,9).*(7, 10+2,1): 29.087341 Mflop/s
(14,12,15) <- (2,1,15).*(7, 10+2,1): 31.367079 Mflop/s

Testing m0 = 7, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 9 7 12 12 9 7 9
<<< (M = 7, K = 12, N = 9) : 29.087341
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 31.367079
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 10,1) :    30.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3127 (27.8%), 8123 (72.2%) left; Finishing by Sat Oct 21  6:27:29 2000

(9,10,9) <- (3,1,3).*(3, 8+2,3): 113.049207 Mflop/s
(15,10,15) <- (5,1,5).*(3, 8+2,3): 114.894817 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 113.049207
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 114.894817
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 8,3) :   114.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3128 (27.8%), 8122 (72.2%) left; Finishing by Sat Oct 21  6:27:31 2000

(5,17,8) <- (1,0,4).*(5, 15+2,2): 26.461584 Mflop/s
(15,17,14) <- (3,1,7).*(5, 15+2,2): 27.498244 Mflop/s

Testing m0 = 5, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 17 8 5 17 17 8 5 8
<<< (M = 5, K = 17, N = 8) : 26.461584
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 14 15 17 17 14 15 14
<<< (M = 15, K = 17, N = 14) : 27.498244
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 15,2) :    27.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3129 (27.8%), 8121 (72.2%) left; Finishing by Sat Oct 21  6:27:30 2000

(8,27,6) <- (4,9,1).*(2,1+2,6): 112.227012 Mflop/s
(14,45,12) <- (7,15,2).*(2,1+2,6): 116.272412 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2 1 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 27 6 8 27 27 6 8 6
<<< (M = 8, K = 27, N = 6) : 112.227012
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 45 12 14 45 45 12 14 12
<<< (M = 14, K = 45, N = 12) : 116.272412
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2,1,6) :   114.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3130 (27.8%), 8120 (72.2%) left; Finishing by Sat Oct 21  6:27:29 2000

(8,17,8) <- (2,0,2).*(4, 15+2,4): 26.207256 Mflop/s
(12,17,12) <- (3,1,3).*(4, 15+2,4): 26.050769 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 8 8 17 17 8 8 8
<<< (M = 8, K = 17, N = 8) : 26.207256
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 17 12 12 17 17 12 12 12
<<< (M = 12, K = 17, N = 12) : 26.050769
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 15,4) :    26.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3131 (27.8%), 8119 (72.2%) left; Finishing by Sat Oct 21  6:27:28 2000

(7,9,9) <- (1,1,9).*(7, 7+2,1): 27.553254 Mflop/s
(14,18,15) <- (2,2,15).*(7, 7+2,1): 36.825401 Mflop/s

Testing m0 = 7, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 9 7 9 9 9 7 9
<<< (M = 7, K = 9, N = 9) : 27.553254
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 36.825401
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 7,1) :    31.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3132 (27.8%), 8118 (72.2%) left; Finishing by Sat Oct 21  6:27:27 2000

(8,12,9) <- (2,0,3).*(4, 10+2,3): 25.873566 Mflop/s
(12,12,15) <- (3,1,5).*(4, 10+2,3): 27.495758 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 25.873566
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 27.495758
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 10,3) :    26.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3133 (27.8%), 8117 (72.2%) left; Finishing by Sat Oct 21  6:27:26 2000

(11,12,9) <- (0,2,9).*(11, 4+2,1): 116.617381 Mflop/s
(11,18,15) <- (1,3,15).*(11, 4+2,1): 105.880211 Mflop/s

Testing m0 = 11, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 11  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 12 9 11 12 12 9 11 9
<<< (M = 11, K = 12, N = 9) : 116.617381
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 18 15 11 18 18 15 11 15
<<< (M = 11, K = 18, N = 15) : 105.880211
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (11, 4,1) :   111.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3134 (27.9%), 8116 (72.1%) left; Finishing by Sat Oct 21  6:27:22 2000

(9,11,13) <- (9,1,0).*(1, 9+2,13): 83.172911 Mflop/s
(15,11,13) <- (15,1,1).*(1, 9+2,13): 96.868051 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 13 9 11 11 13 9 13
<<< (M = 9, K = 11, N = 13) : 83.172911
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 13 15 11 11 13 15 13
<<< (M = 15, K = 11, N = 13) : 96.868051
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,13) :    89.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3135 (27.9%), 8115 (72.1%) left; Finishing by Sat Oct 21  6:27:21 2000

(9,15,6) <- (9,0,1).*(1, 13+2,6): 117.994016 Mflop/s
(15,15,12) <- (15,1,2).*(1, 13+2,6): 120.693642 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 6 9 15 15 6 9 6
<<< (M = 9, K = 15, N = 6) : 117.994016
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 120.693642
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,6) :   119.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3136 (27.9%), 8114 (72.1%) left; Finishing by Sat Oct 21  6:27:20 2000

(9,10,8) <- (9,1,2).*(1, 8+2,4): 108.829481 Mflop/s
(15,10,12) <- (15,1,3).*(1, 8+2,4): 110.838408 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 108.829481
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 110.838408
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,4) :   109.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3137 (27.9%), 8113 (72.1%) left; Finishing by Sat Oct 21  6:27:22 2000

(9,12,8) <- (3,2,2).*(3, 4+2,4): 135.184326 Mflop/s
(15,18,12) <- (5,3,3).*(3, 4+2,4): 120.609575 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 135.184326
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 120.609575
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 4,4) :   127.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3138 (27.9%), 8112 (72.1%) left; Finishing by Sat Oct 21  6:27:21 2000

(8,13,8) <- (4,0,4).*(2, 11+2,2): 37.643162 Mflop/s
(14,13,14) <- (7,1,7).*(2, 11+2,2): 35.819896 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 37.643162
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 14 14 13 13 14 14 14
<<< (M = 14, K = 13, N = 14) : 35.819896
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 11,2) :    36.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3139 (27.9%), 8111 (72.1%) left; Finishing by Sat Oct 21  6:27:17 2000

(10,11,9) <- (0,1,9).*(10, 9+2,1): 83.523326 Mflop/s
(10,11,15) <- (1,1,15).*(10, 9+2,1): 90.680784 Mflop/s

Testing m0 = 10, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 10  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 11 9 10 11 11 9 10 9
<<< (M = 10, K = 11, N = 9) : 83.523326
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 11 15 10 11 11 15 10 15
<<< (M = 10, K = 11, N = 15) : 90.680784
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (10, 9,1) :    87.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3140 (27.9%), 8110 (72.1%) left; Finishing by Sat Oct 21  6:27:16 2000

(9,8,7) <- (9,1,1).*(1, 6+2,7): 103.044241 Mflop/s
(15,16,14) <- (15,2,2).*(1, 6+2,7): 80.946425 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 7 9 8 8 7 9 7
<<< (M = 9, K = 8, N = 7) : 103.044241
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 80.946425
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,7) :    90.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3141 (27.9%), 8109 (72.1%) left; Finishing by Sat Oct 21  6:27:15 2000

(9,27,9) <- (9,9,9).*(1,1+2,1): 74.848025 Mflop/s
(15,45,15) <- (15,15,15).*(1,1+2,1): 76.161618 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 9 9 27 27 9 9 9
<<< (M = 9, K = 27, N = 9) : 74.848025
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 15 15 45 45 15 15 15
<<< (M = 15, K = 45, N = 15) : 76.161618
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,1) :    75.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3142 (27.9%), 8108 (72.1%) left; Finishing by Sat Oct 21  6:27:14 2000

(9,15,7) <- (9,0,1).*(1, 13+2,7): 114.421790 Mflop/s
(15,15,14) <- (15,1,2).*(1, 13+2,7): 71.657605 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 7 9 15 15 7 9 7
<<< (M = 9, K = 15, N = 7) : 114.421790
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 71.657605
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,7) :    88.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3143 (27.9%), 8107 (72.1%) left; Finishing by Sat Oct 21  6:27:13 2000

(9,16,13) <- (9,4,0).*(1, 2+2,13): 88.816600 Mflop/s
(15,28,13) <- (15,7,1).*(1, 2+2,13): 100.432607 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 13 9 16 16 13 9 13
<<< (M = 9, K = 16, N = 13) : 88.816600
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 13 15 28 28 13 15 13
<<< (M = 15, K = 28, N = 13) : 100.432607
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,13) :    94.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3144 (27.9%), 8106 (72.1%) left; Finishing by Sat Oct 21  6:27:08 2000

(9,7,6) <- (9,1,1).*(1, 5+2,6): 100.636386 Mflop/s
(15,21,12) <- (15,3,2).*(1, 5+2,6): 149.211792 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 6 9 7 7 6 9 6
<<< (M = 9, K = 7, N = 6) : 100.636386
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 12 15 21 21 12 15 12
<<< (M = 15, K = 21, N = 12) : 149.211792
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,6) :   120.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3145 (28.0%), 8105 (72.0%) left; Finishing by Sat Oct 21  6:27:11 2000

(9,16,15) <- (9,0,0).*(1, 14+2,15): 98.312363 Mflop/s
(15,16,15) <- (15,1,1).*(1, 14+2,15): 90.457773 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 15 9 16 16 15 9 15
<<< (M = 9, K = 16, N = 15) : 98.312363
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 90.457773
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,15) :    94.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3146 (28.0%), 8104 (72.0%) left; Finishing by Sat Oct 21  6:27:14 2000

(14,14,9) <- (0,0,9).*(14, 12+2,1): 26.006406 Mflop/s
(14,14,15) <- (1,1,15).*(14, 12+2,1): 28.498972 Mflop/s

Testing m0 = 14, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 14  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 9 14 14 14 9 14 9
<<< (M = 14, K = 14, N = 9) : 26.006406
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 28.498972
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (14, 12,1) :    27.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3147 (28.0%), 8103 (72.0%) left; Finishing by Sat Oct 21  6:27:13 2000

(8,15,8) <- (2,3,4).*(4, 3+2,2): 118.621365 Mflop/s
(12,25,14) <- (3,5,7).*(4, 3+2,2): 123.861997 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 118.621365
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 25 14 12 25 25 14 12 14
<<< (M = 12, K = 25, N = 14) : 123.861997
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 3,2) :   121.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3148 (28.0%), 8102 (72.0%) left; Finishing by Sat Oct 21  6:27:12 2000

(9,8,9) <- (1,1,9).*(9, 6+2,1): 30.096526 Mflop/s
(9,16,15) <- (1,2,15).*(9, 6+2,1): 37.471289 Mflop/s

Testing m0 = 9, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 9  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 30.096526
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 15 9 16 16 15 9 15
<<< (M = 9, K = 16, N = 15) : 37.471289
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (9, 6,1) :    33.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3149 (28.0%), 8101 (72.0%) left; Finishing by Sat Oct 21  6:27:11 2000

(9,8,8) <- (3,1,4).*(3, 6+2,2): 104.827774 Mflop/s
(15,16,14) <- (5,2,7).*(3, 6+2,2): 135.318599 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 104.827774
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 135.318599
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 6,2) :   118.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3150 (28.0%), 8100 (72.0%) left; Finishing by Sat Oct 21  6:27:10 2000

(7,15,9) <- (1,0,9).*(7, 13+2,1): 29.824866 Mflop/s
(14,15,15) <- (2,1,15).*(7, 13+2,1): 32.851874 Mflop/s

Testing m0 = 7, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 15 9 7 15 15 9 7 9
<<< (M = 7, K = 15, N = 9) : 29.824866
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 32.851874
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 13,1) :    31.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3151 (28.0%), 8099 (72.0%) left; Finishing by Sat Oct 21  6:27:09 2000

(7,13,9) <- (1,0,9).*(7, 11+2,1): 29.815574 Mflop/s
(14,13,15) <- (2,1,15).*(7, 11+2,1): 33.047265 Mflop/s

Testing m0 = 7, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 13 9 7 13 13 9 7 9
<<< (M = 7, K = 13, N = 9) : 29.815574
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 33.047265
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 11,1) :    31.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3152 (28.0%), 8098 (72.0%) left; Finishing by Sat Oct 21  6:27:08 2000

(9,16,10) <- (9,4,0).*(1, 2+2,10): 94.929993 Mflop/s
(15,28,10) <- (15,7,1).*(1, 2+2,10): 97.701389 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 10 9 16 16 10 9 10
<<< (M = 9, K = 16, N = 10) : 94.929993
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 10 15 28 28 10 15 10
<<< (M = 15, K = 28, N = 10) : 97.701389
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,10) :    96.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3153 (28.0%), 8097 (72.0%) left; Finishing by Sat Oct 21  6:27:07 2000

(8,12,5) <- (4,0,1).*(2, 10+2,5): 24.285287 Mflop/s
(14,12,15) <- (7,1,3).*(2, 10+2,5): 26.221498 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  10 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 5 8 12 12 5 8 5
<<< (M = 8, K = 12, N = 5) : 24.285287
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 26.221498
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 10,5) :    25.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3154 (28.0%), 8096 (72.0%) left; Finishing by Sat Oct 21  6:27:06 2000

(9,11,8) <- (9,1,2).*(1, 9+2,4): 109.320424 Mflop/s
(15,11,12) <- (15,1,3).*(1, 9+2,4): 111.766355 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 109.320424
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 111.766355
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,4) :   110.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3155 (28.0%), 8095 (72.0%) left; Finishing by Sat Oct 21  6:27:05 2000

(9,14,8) <- (3,0,4).*(3, 12+2,2): 116.353258 Mflop/s
(15,14,14) <- (5,1,7).*(3, 12+2,2): 117.236842 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 116.353258
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 117.236842
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 12,2) :   116.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3156 (28.1%), 8094 (71.9%) left; Finishing by Sat Oct 21  6:27:00 2000

(9,10,9) <- (3,1,9).*(3, 8+2,1): 134.382015 Mflop/s
(15,10,15) <- (5,1,15).*(3, 8+2,1): 141.119826 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 134.382015
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 141.119826
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 8,1) :   137.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3157 (28.1%), 8093 (71.9%) left; Finishing by Sat Oct 21  6:27:03 2000

(7,16,8) <- (1,4,4).*(7, 2+2,2): 99.547791 Mflop/s
(14,28,14) <- (2,7,7).*(7, 2+2,2): 104.742855 Mflop/s

Testing m0 = 7, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 16 8 7 16 16 8 7 8
<<< (M = 7, K = 16, N = 8) : 99.547791
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 28 14 14 28 28 14 14 14
<<< (M = 14, K = 28, N = 14) : 104.742855
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 2,2) :   102.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3158 (28.1%), 8092 (71.9%) left; Finishing by Sat Oct 21  6:27:02 2000

(9,8,9) <- (3,1,3).*(3, 6+2,3): 107.918097 Mflop/s
(15,16,15) <- (5,2,5).*(3, 6+2,3): 135.831584 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 107.918097
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 135.831584
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 6,3) :   120.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3159 (28.1%), 8091 (71.9%) left; Finishing by Sat Oct 21  6:27:04 2000

(5,12,8) <- (1,0,4).*(5, 10+2,2): 25.423826 Mflop/s
(15,12,14) <- (3,1,7).*(5, 10+2,2): 26.890091 Mflop/s

Testing m0 = 5, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 8 5 12 12 8 5 8
<<< (M = 5, K = 12, N = 8) : 25.423826
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 26.890091
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 10,2) :    26.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3160 (28.1%), 8090 (71.9%) left; Finishing by Sat Oct 21  6:27:04 2000

(9,27,9) <- (9,9,3).*(1,1+2,3): 80.672709 Mflop/s
(15,45,15) <- (15,15,5).*(1,1+2,3): 46.871755 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 9 9 27 27 9 9 9
<<< (M = 9, K = 27, N = 9) : 80.672709
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 15 15 45 45 15 15 15
<<< (M = 15, K = 45, N = 15) : 46.871755
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,3) :    59.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3161 (28.1%), 8089 (71.9%) left; Finishing by Sat Oct 21  6:27:03 2000

(7,27,8) <- (1,9,4).*(7,1+2,2): 99.840376 Mflop/s
(14,45,14) <- (2,15,7).*(7,1+2,2): 101.275083 Mflop/s

Testing m0 = 7, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 27 8 7 27 27 8 7 8
<<< (M = 7, K = 27, N = 8) : 99.840376
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 45 14 14 45 45 14 14 14
<<< (M = 14, K = 45, N = 14) : 101.275083
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7,1,2) :   100.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3162 (28.1%), 8088 (71.9%) left; Finishing by Sat Oct 21  6:26:58 2000

(8,7,6) <- (4,1,1).*(2, 5+2,6): 23.588062 Mflop/s
(14,21,12) <- (7,3,2).*(2, 5+2,6): 30.069812 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  5 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 6 8 7 7 6 8 6
<<< (M = 8, K = 7, N = 6) : 23.588062
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 12 14 21 21 12 14 12
<<< (M = 14, K = 21, N = 12) : 30.069812
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 5,6) :    26.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3163 (28.1%), 8087 (71.9%) left; Finishing by Sat Oct 21  6:26:57 2000

(8,16,5) <- (4,0,1).*(2, 14+2,5): 24.787589 Mflop/s
(14,16,15) <- (7,1,3).*(2, 14+2,5): 26.713245 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  14 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 5 8 16 16 5 8 5
<<< (M = 8, K = 16, N = 5) : 24.787589
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 26.713245
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 14,5) :    25.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3164 (28.1%), 8086 (71.9%) left; Finishing by Sat Oct 21  6:26:56 2000

(9,15,9) <- (9,3,9).*(1, 3+2,1): 114.857663 Mflop/s
(15,25,15) <- (15,5,15).*(1, 3+2,1): 111.605500 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 114.857663
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 15 15 25 25 15 15 15
<<< (M = 15, K = 25, N = 15) : 111.605500
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,1) :   113.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3165 (28.1%), 8085 (71.9%) left; Finishing by Sat Oct 21  6:26:59 2000

(6,12,9) <- (1,0,9).*(6, 10+2,1): 93.719650 Mflop/s
(12,12,15) <- (2,1,15).*(6, 10+2,1): 110.402609 Mflop/s

Testing m0 = 6, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 9 6 12 12 9 6 9
<<< (M = 6, K = 12, N = 9) : 93.719650
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 110.402609
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 10,1) :   101.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3166 (28.1%), 8084 (71.9%) left; Finishing by Sat Oct 21  6:26:58 2000

(9,11,9) <- (9,1,1).*(1, 9+2,9): 78.283841 Mflop/s
(15,11,9) <- (15,1,1).*(1, 9+2,9): 77.991932 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 78.283841
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 9 15 11 11 9 15 9
<<< (M = 15, K = 11, N = 9) : 77.991932
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,9) :    78.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3167 (28.2%), 8083 (71.8%) left; Finishing by Sat Oct 21  6:26:57 2000

(8,7,8) <- (4,1,1).*(2, 5+2,8): 23.549860 Mflop/s
(14,21,8) <- (7,3,1).*(2, 5+2,8): 32.121885 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  5 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 23.549860
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 8 14 21 21 8 14 8
<<< (M = 14, K = 21, N = 8) : 32.121885
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 5,8) :    27.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3168 (28.2%), 8082 (71.8%) left; Finishing by Sat Oct 21  6:26:56 2000

(11,11,9) <- (0,1,9).*(11, 9+2,1): 27.128433 Mflop/s
(11,11,15) <- (1,1,15).*(11, 9+2,1): 25.777125 Mflop/s

Testing m0 = 11, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 11  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 11 9 11 11 11 9 11 9
<<< (M = 11, K = 11, N = 9) : 27.128433
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 11 15 11 11 11 15 11 15
<<< (M = 11, K = 11, N = 15) : 25.777125
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (11, 9,1) :    26.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3169 (28.2%), 8081 (71.8%) left; Finishing by Sat Oct 21  6:26:55 2000

(10,16,9) <- (0,4,9).*(10, 2+2,1): 27.341647 Mflop/s
(10,28,15) <- (1,7,15).*(10, 2+2,1): 23.352173 Mflop/s

Testing m0 = 10, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 10  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 16 9 10 16 16 9 10 9
<<< (M = 10, K = 16, N = 9) : 27.341647
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 28 15 10 28 28 15 10 15
<<< (M = 10, K = 28, N = 15) : 23.352173
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (10, 2,1) :    25.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3170 (28.2%), 8080 (71.8%) left; Finishing by Sat Oct 21  6:26:54 2000

(12,10,9) <- (0,1,9).*(12, 8+2,1): 28.260588 Mflop/s
(12,10,15) <- (1,1,15).*(12, 8+2,1): 27.605691 Mflop/s

Testing m0 = 12, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 12  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 9 12 10 10 9 12 9
<<< (M = 12, K = 10, N = 9) : 28.260588
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 27.605691
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (12, 8,1) :    27.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3171 (28.2%), 8079 (71.8%) left; Finishing by Sat Oct 21  6:26:53 2000

(8,10,8) <- (2,1,4).*(4, 8+2,2): 27.390329 Mflop/s
(12,10,14) <- (3,1,7).*(4, 8+2,2): 27.319130 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 27.390329
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 14 12 10 10 14 12 14
<<< (M = 12, K = 10, N = 14) : 27.319130
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 8,2) :    27.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3172 (28.2%), 8078 (71.8%) left; Finishing by Sat Oct 21  6:26:52 2000

(8,16,8) <- (1,0,4).*(8, 14+2,2): 104.502054 Mflop/s
(8,16,14) <- (1,1,7).*(8, 14+2,2): 104.882996 Mflop/s

Testing m0 = 8, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 104.502054
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 14 8 16 16 14 8 14
<<< (M = 8, K = 16, N = 14) : 104.882996
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 14,2) :   104.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3173 (28.2%), 8077 (71.8%) left; Finishing by Sat Oct 21  6:26:55 2000

(9,27,12) <- (9,9,0).*(1,1+2,12): 21.405272 Mflop/s
(15,45,12) <- (15,15,1).*(1,1+2,12): 23.000091 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 12 9 27 27 12 9 12
<<< (M = 9, K = 27, N = 12) : 21.405272
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 12 15 45 45 12 15 12
<<< (M = 15, K = 45, N = 12) : 23.000091
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,12) :    22.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3174 (28.2%), 8076 (71.8%) left; Finishing by Sat Oct 21  6:26:54 2000

(8,16,8) <- (2,0,2).*(4, 14+2,4): 26.086528 Mflop/s
(12,16,12) <- (3,1,3).*(4, 14+2,4): 25.930022 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 26.086528
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 12 12 16 16 12 12 12
<<< (M = 12, K = 16, N = 12) : 25.930022
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 14,4) :    26.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3175 (28.2%), 8075 (71.8%) left; Finishing by Sat Oct 21  6:26:53 2000

(8,14,9) <- (2,0,9).*(4, 12+2,1): 132.460505 Mflop/s
(12,14,15) <- (3,1,15).*(4, 12+2,1): 132.473072 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 132.460505
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 132.473072
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 12,1) :   132.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3176 (28.2%), 8074 (71.8%) left; Finishing by Sat Oct 21  6:26:52 2000

(9,16,9) <- (3,0,9).*(3, 14+2,1): 170.778305 Mflop/s
(15,16,15) <- (5,1,15).*(3, 14+2,1): 174.225645 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 170.778305
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 174.225645
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 14,1) :   172.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3177 (28.2%), 8073 (71.8%) left; Finishing by Sat Oct 21  6:26:47 2000

(9,15,8) <- (9,3,4).*(1, 3+2,2): 137.962518 Mflop/s
(15,25,14) <- (15,5,7).*(1, 3+2,2): 140.078598 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 137.962518
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 14 15 25 25 14 15 14
<<< (M = 15, K = 25, N = 14) : 140.078598
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,2) :   139.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3178 (28.2%), 8072 (71.8%) left; Finishing by Sat Oct 21  6:26:46 2000

(9,14,9) <- (9,0,9).*(1, 12+2,1): 128.896447 Mflop/s
(15,14,15) <- (15,1,15).*(1, 12+2,1): 134.098370 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 128.896447
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 134.098370
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,1) :   131.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3179 (28.3%), 8071 (71.7%) left; Finishing by Sat Oct 21  6:26:45 2000

(9,13,9) <- (9,0,9).*(1, 11+2,1): 128.272201 Mflop/s
(15,13,15) <- (15,1,15).*(1, 11+2,1): 131.581410 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 128.272201
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 131.581410
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,1) :   129.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3180 (28.3%), 8070 (71.7%) left; Finishing by Sat Oct 21  6:26:41 2000

(8,10,8) <- (4,1,1).*(2, 8+2,8): 24.835679 Mflop/s
(14,10,8) <- (7,1,1).*(2, 8+2,8): 24.865421 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  8 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 24.835679
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 8 14 10 10 8 14 8
<<< (M = 14, K = 10, N = 8) : 24.865421
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 8,8) :    24.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3181 (28.3%), 8069 (71.7%) left; Finishing by Sat Oct 21  6:26:40 2000

(8,12,5) <- (4,2,1).*(2, 4+2,5): 29.012499 Mflop/s
(14,18,15) <- (7,3,3).*(2, 4+2,5): 27.119047 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  4 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 5 8 12 12 5 8 5
<<< (M = 8, K = 12, N = 5) : 29.012499
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 27.119047
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 4,5) :    28.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3182 (28.3%), 8068 (71.7%) left; Finishing by Sat Oct 21  6:26:39 2000

(9,15,5) <- (9,3,1).*(1, 3+2,5): 72.296056 Mflop/s
(15,25,15) <- (15,5,3).*(1, 3+2,5): 127.991624 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 5 9 15 15 5 9 5
<<< (M = 9, K = 15, N = 5) : 72.296056
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 15 15 25 25 15 15 15
<<< (M = 15, K = 25, N = 15) : 127.991624
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,5) :    92.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3183 (28.3%), 8067 (71.7%) left; Finishing by Sat Oct 21  6:26:38 2000

(7,17,8) <- (1,0,4).*(7, 15+2,2): 22.353463 Mflop/s
(14,17,14) <- (2,1,7).*(7, 15+2,2): 25.332131 Mflop/s

Testing m0 = 7, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 17 8 7 17 17 8 7 8
<<< (M = 7, K = 17, N = 8) : 22.353463
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 17 14 14 17 17 14 14 14
<<< (M = 14, K = 17, N = 14) : 25.332131
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 15,2) :    23.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3184 (28.3%), 8066 (71.7%) left; Finishing by Sat Oct 21  6:26:37 2000

(9,17,13) <- (9,0,0).*(1, 15+2,13): 86.057545 Mflop/s
(15,17,13) <- (15,1,1).*(1, 15+2,13): 100.566378 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 13 9 17 17 13 9 13
<<< (M = 9, K = 17, N = 13) : 86.057545
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 13 15 17 17 13 15 13
<<< (M = 15, K = 17, N = 13) : 100.566378
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,13) :    92.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3185 (28.3%), 8065 (71.7%) left; Finishing by Sat Oct 21  6:26:36 2000

(11,7,9) <- (0,1,9).*(11, 5+2,1): 88.351922 Mflop/s
(11,21,15) <- (1,3,15).*(11, 5+2,1): 133.242459 Mflop/s

Testing m0 = 11, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 11  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 7 9 11 7 7 9 11 9
<<< (M = 11, K = 7, N = 9) : 88.351922
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 21 15 11 21 21 15 11 15
<<< (M = 11, K = 21, N = 15) : 133.242459
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (11, 5,1) :   106.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3186 (28.3%), 8064 (71.7%) left; Finishing by Sat Oct 21  6:26:42 2000

(12,9,9) <- (0,1,9).*(12, 7+2,1): 27.796893 Mflop/s
(12,18,15) <- (1,2,15).*(12, 7+2,1): 32.679816 Mflop/s

Testing m0 = 12, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 12  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 9 9 12 9 9 9 12 9
<<< (M = 12, K = 9, N = 9) : 27.796893
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 32.679816
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (12, 7,1) :    30.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3187 (28.3%), 8063 (71.7%) left; Finishing by Sat Oct 21  6:26:41 2000

(8,16,9) <- (2,4,9).*(4, 2+2,1): 81.209182 Mflop/s
(12,28,15) <- (3,7,15).*(4, 2+2,1): 86.699854 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 81.209182
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 28 15 12 28 28 15 12 15
<<< (M = 12, K = 28, N = 15) : 86.699854
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 2,1) :    83.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3188 (28.3%), 8062 (71.7%) left; Finishing by Sat Oct 21  6:26:37 2000

(9,16,8) <- (3,4,2).*(3, 2+2,4): 26.170889 Mflop/s
(15,28,12) <- (5,7,3).*(3, 2+2,4): 26.359696 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 26.170889
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 12 15 28 28 12 15 12
<<< (M = 15, K = 28, N = 12) : 26.359696
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 2,4) :    26.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3189 (28.3%), 8061 (71.7%) left; Finishing by Sat Oct 21  6:26:36 2000

(8,12,8) <- (4,2,1).*(2, 4+2,8): 29.981854 Mflop/s
(14,18,8) <- (7,3,1).*(2, 4+2,8): 25.929432 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  4 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 29.981854
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 8 14 18 18 8 14 8
<<< (M = 14, K = 18, N = 8) : 25.929432
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 4,8) :    27.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3190 (28.4%), 8060 (71.6%) left; Finishing by Sat Oct 21  6:26:35 2000

(8,10,8) <- (4,1,2).*(2, 8+2,4): 28.471351 Mflop/s
(14,10,12) <- (7,1,3).*(2, 8+2,4): 25.633248 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 28.471351
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 12 14 10 10 12 14 12
<<< (M = 14, K = 10, N = 12) : 25.633248
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 8,4) :    27.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3191 (28.4%), 8059 (71.6%) left; Finishing by Sat Oct 21  6:26:34 2000

(9,17,9) <- (1,0,9).*(9, 15+2,1): 33.523897 Mflop/s
(9,17,15) <- (1,1,15).*(9, 15+2,1): 33.630775 Mflop/s

Testing m0 = 9, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 9  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 9 9 17 17 9 9 9
<<< (M = 9, K = 17, N = 9) : 33.523897
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 15 9 17 17 15 9 15
<<< (M = 9, K = 17, N = 15) : 33.630775
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (9, 15,1) :    33.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3192 (28.4%), 8058 (71.6%) left; Finishing by Sat Oct 21  6:26:33 2000

(9,10,12) <- (9,1,0).*(1, 8+2,12): 92.834256 Mflop/s
(15,10,12) <- (15,1,1).*(1, 8+2,12): 93.283273 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 12 9 10 10 12 9 12
<<< (M = 9, K = 10, N = 12) : 92.834256
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 93.283273
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,12) :    93.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3193 (28.4%), 8057 (71.6%) left; Finishing by Sat Oct 21  6:26:32 2000

(9,17,14) <- (9,0,0).*(1, 15+2,14): 100.838036 Mflop/s
(15,17,14) <- (15,1,1).*(1, 15+2,14): 100.827306 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 14 9 17 17 14 9 14
<<< (M = 9, K = 17, N = 14) : 100.838036
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 14 15 17 17 14 15 14
<<< (M = 15, K = 17, N = 14) : 100.827306
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,14) :   100.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3194 (28.4%), 8056 (71.6%) left; Finishing by Sat Oct 21  6:26:35 2000

(9,16,9) <- (3,0,3).*(3, 14+2,3): 118.968654 Mflop/s
(15,16,15) <- (5,1,5).*(3, 14+2,3): 120.245274 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 118.968654
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 120.245274
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 14,3) :   119.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3195 (28.4%), 8055 (71.6%) left; Finishing by Sat Oct 21  6:26:34 2000

(5,9,9) <- (1,1,9).*(5, 7+2,1): 47.933797 Mflop/s
(15,18,15) <- (3,2,15).*(5, 7+2,1): 71.418603 Mflop/s

Testing m0 = 5, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 47.933797
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 71.418603
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 7,1) :    57.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3196 (28.4%), 8054 (71.6%) left; Finishing by Sat Oct 21  6:26:29 2000

(9,11,12) <- (9,1,0).*(1, 9+2,12): 93.951340 Mflop/s
(15,11,12) <- (15,1,1).*(1, 9+2,12): 94.163951 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 12 9 11 11 12 9 12
<<< (M = 9, K = 11, N = 12) : 93.951340
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 94.163951
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,12) :    94.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3197 (28.4%), 8053 (71.6%) left; Finishing by Sat Oct 21  6:26:32 2000

(9,16,12) <- (9,4,0).*(1, 2+2,12): 97.092286 Mflop/s
(15,28,12) <- (15,7,1).*(1, 2+2,12): 100.269780 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 12 9 16 16 12 9 12
<<< (M = 9, K = 16, N = 12) : 97.092286
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 12 15 28 28 12 15 12
<<< (M = 15, K = 28, N = 12) : 100.269780
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,12) :    98.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3198 (28.4%), 8052 (71.6%) left; Finishing by Sat Oct 21  6:26:34 2000

(5,13,9) <- (1,0,9).*(5, 11+2,1): 54.612711 Mflop/s
(15,13,15) <- (3,1,15).*(5, 11+2,1): 64.020516 Mflop/s

Testing m0 = 5, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 13 9 5 13 13 9 5 9
<<< (M = 5, K = 13, N = 9) : 54.612711
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 64.020516
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 11,1) :    58.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3199 (28.4%), 8051 (71.6%) left; Finishing by Sat Oct 21  6:26:33 2000

(8,13,8) <- (4,0,1).*(2, 11+2,8): 25.257737 Mflop/s
(14,13,8) <- (7,1,1).*(2, 11+2,8): 25.410955 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  11 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 25.257737
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 8 14 13 13 8 14 8
<<< (M = 14, K = 13, N = 8) : 25.410955
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 11,8) :    25.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3200 (28.4%), 8050 (71.6%) left; Finishing by Sat Oct 21  6:26:32 2000

(9,16,11) <- (9,4,0).*(1, 2+2,11): 92.007354 Mflop/s
(15,28,11) <- (15,7,1).*(1, 2+2,11): 85.876429 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 11 9 16 16 11 9 11
<<< (M = 9, K = 16, N = 11) : 92.007354
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 11 15 28 28 11 15 11
<<< (M = 15, K = 28, N = 11) : 85.876429
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,11) :    88.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3201 (28.5%), 8049 (71.5%) left; Finishing by Sat Oct 21  6:26:28 2000

(8,17,6) <- (4,0,1).*(2, 15+2,6): 25.309724 Mflop/s
(14,17,12) <- (7,1,2).*(2, 15+2,6): 24.304685 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  15 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 6 8 17 17 6 8 6
<<< (M = 8, K = 17, N = 6) : 25.309724
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 17 12 14 17 17 12 14 12
<<< (M = 14, K = 17, N = 12) : 24.304685
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 15,6) :    24.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3202 (28.5%), 8048 (71.5%) left; Finishing by Sat Oct 21  6:26:31 2000

(5,27,9) <- (1,9,9).*(5,1+2,1): 38.755223 Mflop/s
(15,45,15) <- (3,15,15).*(5,1+2,1): 45.735885 Mflop/s

Testing m0 = 5, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 27 9 5 27 27 9 5 9
<<< (M = 5, K = 27, N = 9) : 38.755223
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 15 15 45 45 15 15 15
<<< (M = 15, K = 45, N = 15) : 45.735885
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5,1,1) :    42.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3203 (28.5%), 8047 (71.5%) left; Finishing by Sat Oct 21  6:26:26 2000

(8,8,9) <- (1,1,9).*(8, 6+2,1): 76.944242 Mflop/s
(8,16,15) <- (1,2,15).*(8, 6+2,1): 104.463587 Mflop/s

Testing m0 = 8, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 76.944242
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 15 8 16 16 15 8 15
<<< (M = 8, K = 16, N = 15) : 104.463587
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 6,1) :    88.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (3, 15,1) :   175.3 MFLOPS.
Done 3204 (28.5%), 8046 (71.5%) left; Finishing by Sat Oct 21  6:26:25 2000

(8,12,9) <- (4,2,9).*(2, 4+2,1): 185.334699 Mflop/s
(14,18,15) <- (7,3,15).*(2, 4+2,1): 175.869230 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 185.334699
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 175.869230
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 4,1) :   180.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3205 (28.5%), 8045 (71.5%) left; Finishing by Sat Oct 21  6:26:28 2000

(6,27,9) <- (1,9,9).*(6,1+2,1): 24.170917 Mflop/s
(12,45,15) <- (2,15,15).*(6,1+2,1): 25.279138 Mflop/s

Testing m0 = 6, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 27 9 6 27 27 9 6 9
<<< (M = 6, K = 27, N = 9) : 24.170917
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 45 15 12 45 45 15 12 15
<<< (M = 12, K = 45, N = 15) : 25.279138
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6,1,1) :    24.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3206 (28.5%), 8044 (71.5%) left; Finishing by Sat Oct 21  6:26:23 2000

(9,10,9) <- (9,1,9).*(1, 8+2,1): 119.820476 Mflop/s
(15,10,15) <- (15,1,15).*(1, 8+2,1): 124.956003 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 119.820476
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 124.956003
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,1) :   122.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3207 (28.5%), 8043 (71.5%) left; Finishing by Sat Oct 21  6:26:22 2000

(6,11,9) <- (1,1,9).*(6, 9+2,1): 91.161633 Mflop/s
(12,11,15) <- (2,1,15).*(6, 9+2,1): 104.910800 Mflop/s

Testing m0 = 6, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 11 9 6 11 11 9 6 9
<<< (M = 6, K = 11, N = 9) : 91.161633
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 104.910800
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 9,1) :    97.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3208 (28.5%), 8042 (71.5%) left; Finishing by Sat Oct 21  6:26:25 2000

(9,15,5) <- (9,0,1).*(1, 13+2,5): 66.138283 Mflop/s
(15,15,15) <- (15,1,3).*(1, 13+2,5): 116.672225 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 5 9 15 15 5 9 5
<<< (M = 9, K = 15, N = 5) : 66.138283
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 116.672225
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,5) :    84.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3209 (28.5%), 8041 (71.5%) left; Finishing by Sat Oct 21  6:26:24 2000

(9,8,14) <- (9,1,0).*(1, 6+2,14): 94.026993 Mflop/s
(15,16,14) <- (15,2,1).*(1, 6+2,14): 113.895580 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 14 9 8 8 14 9 14
<<< (M = 9, K = 8, N = 14) : 94.026993
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 113.895580
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,14) :   103.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3210 (28.5%), 8040 (71.5%) left; Finishing by Sat Oct 21  6:26:20 2000

(9,15,9) <- (9,0,3).*(1, 13+2,3): 130.835185 Mflop/s
(15,15,15) <- (15,1,5).*(1, 13+2,3): 119.031961 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 130.835185
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 119.031961
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,3) :   124.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3211 (28.5%), 8039 (71.5%) left; Finishing by Sat Oct 21  6:26:19 2000

(9,12,6) <- (9,2,1).*(1, 4+2,6): 132.316013 Mflop/s
(15,18,12) <- (15,3,2).*(1, 4+2,6): 119.000195 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 6 9 12 12 6 9 6
<<< (M = 9, K = 12, N = 6) : 132.316013
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 119.000195
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,6) :   125.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3212 (28.6%), 8038 (71.4%) left; Finishing by Sat Oct 21  6:26:21 2000

(8,13,8) <- (2,0,4).*(4, 11+2,2): 27.124664 Mflop/s
(12,13,14) <- (3,1,7).*(4, 11+2,2): 28.881105 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 27.124664
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 14 12 13 13 14 12 14
<<< (M = 12, K = 13, N = 14) : 28.881105
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 11,2) :    28.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3213 (28.6%), 8037 (71.4%) left; Finishing by Sat Oct 21  6:26:20 2000

(8,11,8) <- (4,1,2).*(2, 9+2,4): 29.152392 Mflop/s
(14,11,12) <- (7,1,3).*(2, 9+2,4): 26.385618 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 29.152392
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 12 14 11 11 12 14 12
<<< (M = 14, K = 11, N = 12) : 26.385618
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 9,4) :    27.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3214 (28.6%), 8036 (71.4%) left; Finishing by Sat Oct 21  6:26:19 2000

(5,9,8) <- (1,1,4).*(5, 7+2,2): 24.633634 Mflop/s
(15,18,14) <- (3,2,7).*(5, 7+2,2): 31.041733 Mflop/s

Testing m0 = 5, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 8 5 9 9 8 5 8
<<< (M = 5, K = 9, N = 8) : 24.633634
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 31.041733
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 7,2) :    27.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3215 (28.6%), 8035 (71.4%) left; Finishing by Sat Oct 21  6:26:18 2000

(8,14,7) <- (4,0,1).*(2, 12+2,7): 25.742086 Mflop/s
(14,14,14) <- (7,1,2).*(2, 12+2,7): 23.204801 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  12 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 7 8 14 14 7 8 7
<<< (M = 8, K = 14, N = 7) : 25.742086
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 23.204801
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 12,7) :    24.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3216 (28.6%), 8034 (71.4%) left; Finishing by Sat Oct 21  6:26:17 2000

(9,15,9) <- (3,0,9).*(3, 13+2,1): 168.325144 Mflop/s
(15,15,15) <- (5,1,15).*(3, 13+2,1): 171.103990 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 168.325144
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 171.103990
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 13,1) :   169.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3217 (28.6%), 8033 (71.4%) left; Finishing by Sat Oct 21  6:26:13 2000

(9,12,12) <- (9,2,0).*(1, 4+2,12): 112.160826 Mflop/s
(15,18,12) <- (15,3,1).*(1, 4+2,12): 97.024260 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 12 9 12 12 12 9 12
<<< (M = 9, K = 12, N = 12) : 112.160826
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 97.024260
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,12) :   104.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3218 (28.6%), 8032 (71.4%) left; Finishing by Sat Oct 21  6:26:12 2000

(9,16,9) <- (1,0,9).*(9, 14+2,1): 33.492036 Mflop/s
(9,16,15) <- (1,1,15).*(9, 14+2,1): 33.666082 Mflop/s

Testing m0 = 9, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 9  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 33.492036
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 15 9 16 16 15 9 15
<<< (M = 9, K = 16, N = 15) : 33.666082
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (9, 14,1) :    33.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3219 (28.6%), 8031 (71.4%) left; Finishing by Sat Oct 21  6:26:11 2000

(8,15,8) <- (4,3,2).*(2, 3+2,4): 31.247017 Mflop/s
(14,25,12) <- (7,5,3).*(2, 3+2,4): 29.629635 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 31.247017
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 25 12 14 25 25 12 14 12
<<< (M = 14, K = 25, N = 12) : 29.629635
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 3,4) :    30.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3220 (28.6%), 8030 (71.4%) left; Finishing by Sat Oct 21  6:26:10 2000

(9,12,9) <- (3,0,3).*(3, 10+2,3): 115.608669 Mflop/s
(15,12,15) <- (5,1,5).*(3, 10+2,3): 117.513101 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 115.608669
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 117.513101
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 10,3) :   116.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3221 (28.6%), 8029 (71.4%) left; Finishing by Sat Oct 21  6:26:13 2000

(6,16,8) <- (1,0,4).*(6, 14+2,2): 106.096592 Mflop/s
(12,16,14) <- (2,1,7).*(6, 14+2,2): 107.765959 Mflop/s

Testing m0 = 6, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 16 8 6 16 16 8 6 8
<<< (M = 6, K = 16, N = 8) : 106.096592
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 14 12 16 16 14 12 14
<<< (M = 12, K = 16, N = 14) : 107.765959
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 14,2) :   106.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3222 (28.6%), 8028 (71.4%) left; Finishing by Sat Oct 21  6:26:12 2000

(9,15,9) <- (3,3,3).*(3, 3+2,3): 122.517470 Mflop/s
(15,25,15) <- (5,5,5).*(3, 3+2,3): 128.345260 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 122.517470
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 15 15 25 25 15 15 15
<<< (M = 15, K = 25, N = 15) : 128.345260
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 3,3) :   125.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3223 (28.6%), 8027 (71.4%) left; Finishing by Sat Oct 21  6:26:11 2000

(9,10,8) <- (3,1,2).*(3, 8+2,4): 111.661501 Mflop/s
(15,10,12) <- (5,1,3).*(3, 8+2,4): 112.935789 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  8 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 111.661501
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 112.935789
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 8,4) :   112.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3224 (28.7%), 8026 (71.3%) left; Finishing by Sat Oct 21  6:26:13 2000

(9,13,14) <- (9,0,0).*(1, 11+2,14): 98.095358 Mflop/s
(15,13,14) <- (15,1,1).*(1, 11+2,14): 98.208858 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 14 9 13 13 14 9 14
<<< (M = 9, K = 13, N = 14) : 98.095358
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 98.208858
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,14) :    98.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3225 (28.7%), 8025 (71.3%) left; Finishing by Sat Oct 21  6:26:13 2000

(10,8,9) <- (0,1,9).*(10, 6+2,1): 75.940697 Mflop/s
(10,16,15) <- (1,2,15).*(10, 6+2,1): 103.241218 Mflop/s

Testing m0 = 10, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 10  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 8 9 10 8 8 9 10 9
<<< (M = 10, K = 8, N = 9) : 75.940697
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 16 15 10 16 16 15 10 15
<<< (M = 10, K = 16, N = 15) : 103.241218
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (10, 6,1) :    87.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3226 (28.7%), 8024 (71.3%) left; Finishing by Sat Oct 21  6:26:12 2000

(8,11,7) <- (4,1,1).*(2, 9+2,7): 25.226651 Mflop/s
(14,11,14) <- (7,1,2).*(2, 9+2,7): 22.836827 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  9 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 7 8 11 11 7 8 7
<<< (M = 8, K = 11, N = 7) : 25.226651
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 14 14 11 11 14 14 14
<<< (M = 14, K = 11, N = 14) : 22.836827
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 9,7) :    24.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3227 (28.7%), 8023 (71.3%) left; Finishing by Sat Oct 21  6:26:11 2000

(8,8,8) <- (4,1,4).*(2, 6+2,2): 34.112269 Mflop/s
(14,16,14) <- (7,2,7).*(2, 6+2,2): 40.126792 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 34.112269
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 40.126792
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 6,2) :    36.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3228 (28.7%), 8022 (71.3%) left; Finishing by Sat Oct 21  6:26:10 2000

(8,7,8) <- (2,1,4).*(4, 5+2,2): 25.844433 Mflop/s
(12,21,14) <- (3,3,7).*(4, 5+2,2): 36.399540 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 25.844433
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 14 12 21 21 14 12 14
<<< (M = 12, K = 21, N = 14) : 36.399540
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 5,2) :    30.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3229 (28.7%), 8021 (71.3%) left; Finishing by Sat Oct 21  6:26:09 2000

(13,7,9) <- (0,1,9).*(13, 5+2,1): 87.706304 Mflop/s
(13,21,15) <- (1,3,15).*(13, 5+2,1): 129.876629 Mflop/s

Testing m0 = 13, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 13  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 7 9 13 7 7 9 13 9
<<< (M = 13, K = 7, N = 9) : 87.706304
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 21 15 13 21 21 15 13 15
<<< (M = 13, K = 21, N = 15) : 129.876629
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (13, 5,1) :   104.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3230 (28.7%), 8020 (71.3%) left; Finishing by Sat Oct 21  6:26:08 2000

(9,16,8) <- (3,0,4).*(3, 14+2,2): 119.170582 Mflop/s
(15,16,14) <- (5,1,7).*(3, 14+2,2): 119.897597 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 119.170582
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 119.897597
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 14,2) :   119.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3231 (28.7%), 8019 (71.3%) left; Finishing by Sat Oct 21  6:26:03 2000

(16,16,9) <- (0,4,9).*(16, 2+2,1): 23.206530 Mflop/s
(16,28,15) <- (0,7,15).*(16, 2+2,1): 19.183607 Mflop/s

Testing m0 = 16, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 16  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 16 9 16 16 16 9 16 9
<<< (M = 16, K = 16, N = 9) : 23.206530
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 28 15 16 28 28 15 16 15
<<< (M = 16, K = 28, N = 15) : 19.183607
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (16, 2,1) :    21.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3232 (28.7%), 8018 (71.3%) left; Finishing by Sat Oct 21  6:26:03 2000

(8,12,6) <- (4,0,1).*(2, 10+2,6): 24.706008 Mflop/s
(14,12,12) <- (7,1,2).*(2, 10+2,6): 23.915934 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  10 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 6 8 12 12 6 8 6
<<< (M = 8, K = 12, N = 6) : 24.706008
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 12 14 12 12 12 14 12
<<< (M = 14, K = 12, N = 12) : 23.915934
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 10,6) :    24.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3233 (28.7%), 8017 (71.3%) left; Finishing by Sat Oct 21  6:26:02 2000

(8,9,8) <- (4,1,2).*(2, 7+2,4): 28.502094 Mflop/s
(14,18,12) <- (7,2,3).*(2, 7+2,4): 30.220146 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 28.502094
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 12 14 18 18 12 14 12
<<< (M = 14, K = 18, N = 12) : 30.220146
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 7,4) :    29.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3234 (28.7%), 8016 (71.3%) left; Finishing by Sat Oct 21  6:26:01 2000

(9,12,14) <- (9,0,0).*(1, 10+2,14): 97.694056 Mflop/s
(15,12,14) <- (15,1,1).*(1, 10+2,14): 97.663111 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 14 9 12 12 14 9 14
<<< (M = 9, K = 12, N = 14) : 97.694056
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 97.663111
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,14) :    97.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3235 (28.8%), 8015 (71.2%) left; Finishing by Sat Oct 21  6:26:00 2000

(9,12,8) <- (3,0,4).*(3, 10+2,2): 113.115878 Mflop/s
(15,12,14) <- (5,1,7).*(3, 10+2,2): 114.880240 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 113.115878
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 114.880240
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 10,2) :   114.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3236 (28.8%), 8014 (71.2%) left; Finishing by Sat Oct 21  6:25:59 2000

(9,15,9) <- (9,3,1).*(1, 3+2,9): 85.258385 Mflop/s
(15,25,9) <- (15,5,1).*(1, 3+2,9): 88.902041 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 85.258385
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 9 15 25 25 9 15 9
<<< (M = 15, K = 25, N = 9) : 88.902041
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,9) :    87.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3237 (28.8%), 8013 (71.2%) left; Finishing by Sat Oct 21  6:25:58 2000

(11,9,9) <- (0,1,9).*(11, 7+2,1): 99.426852 Mflop/s
(11,18,15) <- (1,2,15).*(11, 7+2,1): 123.468341 Mflop/s

Testing m0 = 11, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 11  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 9 9 11 9 9 9 11 9
<<< (M = 11, K = 9, N = 9) : 99.426852
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 18 15 11 18 18 15 11 15
<<< (M = 11, K = 18, N = 15) : 123.468341
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (11, 7,1) :   110.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3238 (28.8%), 8012 (71.2%) left; Finishing by Sat Oct 21  6:25:57 2000

(6,7,9) <- (1,1,9).*(6, 5+2,1): 73.789048 Mflop/s
(12,21,15) <- (2,3,15).*(6, 5+2,1): 131.609148 Mflop/s

Testing m0 = 6, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 7 9 6 7 7 9 6 9
<<< (M = 6, K = 7, N = 9) : 73.789048
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 15 12 21 21 15 12 15
<<< (M = 12, K = 21, N = 15) : 131.609148
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 5,1) :    94.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3239 (28.8%), 8011 (71.2%) left; Finishing by Sat Oct 21  6:25:56 2000

(8,12,9) <- (4,0,3).*(2, 10+2,3): 32.221945 Mflop/s
(14,12,15) <- (7,1,5).*(2, 10+2,3): 23.522727 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 32.221945
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 23.522727
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 10,3) :    27.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3240 (28.8%), 8010 (71.2%) left; Finishing by Sat Oct 21  6:25:55 2000

(8,27,8) <- (2,9,4).*(4,1+2,2): 108.341812 Mflop/s
(12,45,14) <- (3,15,7).*(4,1+2,2): 110.754541 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 27 8 8 27 27 8 8 8
<<< (M = 8, K = 27, N = 8) : 108.341812
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 45 14 12 45 45 14 12 14
<<< (M = 12, K = 45, N = 14) : 110.754541
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4,1,2) :   109.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3241 (28.8%), 8009 (71.2%) left; Finishing by Sat Oct 21  6:25:54 2000

(9,14,14) <- (9,0,0).*(1, 12+2,14): 98.589994 Mflop/s
(15,14,14) <- (15,1,1).*(1, 12+2,14): 99.054153 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 14 9 14 14 14 9 14
<<< (M = 9, K = 14, N = 14) : 98.589994
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 99.054153
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,14) :    98.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3242 (28.8%), 8008 (71.2%) left; Finishing by Sat Oct 21  6:25:53 2000

(9,16,9) <- (9,0,9).*(1, 14+2,1): 134.488602 Mflop/s
(15,16,15) <- (15,1,15).*(1, 14+2,1): 140.501816 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 134.488602
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 140.501816
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,1) :   137.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3243 (28.8%), 8007 (71.2%) left; Finishing by Sat Oct 21  6:25:52 2000

(9,9,6) <- (9,1,1).*(1, 7+2,6): 107.402179 Mflop/s
(15,18,12) <- (15,2,2).*(1, 7+2,6): 136.708861 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 6 9 9 9 6 9 6
<<< (M = 9, K = 9, N = 6) : 107.402179
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 136.708861
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,6) :   120.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3244 (28.8%), 8006 (71.2%) left; Finishing by Sat Oct 21  6:25:55 2000

(7,12,9) <- (1,2,9).*(7, 4+2,1): 33.002404 Mflop/s
(14,18,15) <- (2,3,15).*(7, 4+2,1): 33.058270 Mflop/s

Testing m0 = 7, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 9 7 12 12 9 7 9
<<< (M = 7, K = 12, N = 9) : 33.002404
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 33.058270
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 4,1) :    33.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3245 (28.8%), 8005 (71.2%) left; Finishing by Sat Oct 21  6:25:51 2000

(9,14,9) <- (9,0,3).*(1, 12+2,3): 128.642106 Mflop/s
(15,14,15) <- (15,1,5).*(1, 12+2,3): 116.052321 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 128.642106
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 116.052321
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,3) :   122.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3246 (28.9%), 8004 (71.1%) left; Finishing by Sat Oct 21  6:25:50 2000

(9,27,9) <- (9,9,1).*(1,1+2,9): 26.162001 Mflop/s
(15,45,9) <- (15,15,1).*(1,1+2,9): 26.424426 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 9 9 27 27 9 9 9
<<< (M = 9, K = 27, N = 9) : 26.162001
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 9 15 45 45 9 15 9
<<< (M = 15, K = 45, N = 9) : 26.424426
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,9) :    26.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3247 (28.9%), 8003 (71.1%) left; Finishing by Sat Oct 21  6:25:49 2000

(15,12,9) <- (0,0,9).*(15, 10+2,1): 104.413273 Mflop/s
(15,12,15) <- (1,1,15).*(15, 10+2,1): 104.753939 Mflop/s

Testing m0 = 15, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 15  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 9 15 12 12 9 15 9
<<< (M = 15, K = 12, N = 9) : 104.413273
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 104.753939
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (15, 10,1) :   104.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3248 (28.9%), 8002 (71.1%) left; Finishing by Sat Oct 21  6:25:51 2000

(8,27,8) <- (4,9,1).*(2,1+2,8): 75.658345 Mflop/s
(14,45,8) <- (7,15,1).*(2,1+2,8): 76.551440 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2 1 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 27 8 8 27 27 8 8 8
<<< (M = 8, K = 27, N = 8) : 75.658345
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 45 8 14 45 45 8 14 8
<<< (M = 14, K = 45, N = 8) : 76.551440
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2,1,8) :    76.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3249 (28.9%), 8001 (71.1%) left; Finishing by Sat Oct 21  6:25:50 2000

(9,12,5) <- (9,2,1).*(1, 4+2,5): 73.973246 Mflop/s
(15,18,15) <- (15,3,3).*(1, 4+2,5): 113.287780 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 73.973246
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 113.287780
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,5) :    89.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3250 (28.9%), 8000 (71.1%) left; Finishing by Sat Oct 21  6:25:46 2000

(6,9,9) <- (1,1,9).*(6, 7+2,1): 79.807632 Mflop/s
(12,18,15) <- (2,2,15).*(6, 7+2,1): 121.689292 Mflop/s

Testing m0 = 6, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 9 6 9 9 9 6 9
<<< (M = 6, K = 9, N = 9) : 79.807632
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 121.689292
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 7,1) :    96.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3251 (28.9%), 7999 (71.1%) left; Finishing by Sat Oct 21  6:25:49 2000

(9,13,9) <- (3,0,3).*(3, 11+2,3): 115.499985 Mflop/s
(15,13,15) <- (5,1,5).*(3, 11+2,3): 117.036534 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 115.499985
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 117.036534
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 11,3) :   116.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3252 (28.9%), 7998 (71.1%) left; Finishing by Sat Oct 21  6:25:48 2000

(6,17,9) <- (1,0,9).*(6, 15+2,1): 107.404030 Mflop/s
(12,17,15) <- (2,1,15).*(6, 15+2,1): 117.932375 Mflop/s

Testing m0 = 6, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 17 9 6 17 17 9 6 9
<<< (M = 6, K = 17, N = 9) : 107.404030
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 17 15 12 17 17 15 12 15
<<< (M = 12, K = 17, N = 15) : 117.932375
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 15,1) :   112.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3253 (28.9%), 7997 (71.1%) left; Finishing by Sat Oct 21  6:25:47 2000

(7,11,9) <- (1,1,9).*(7, 9+2,1): 27.922676 Mflop/s
(14,11,15) <- (2,1,15).*(7, 9+2,1): 31.487313 Mflop/s

Testing m0 = 7, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 11 9 7 11 11 9 7 9
<<< (M = 7, K = 11, N = 9) : 27.922676
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 31.487313
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 9,1) :    29.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3254 (28.9%), 7996 (71.1%) left; Finishing by Sat Oct 21  6:25:46 2000

(9,15,15) <- (9,3,0).*(1, 3+2,15): 103.453843 Mflop/s
(15,25,15) <- (15,5,1).*(1, 3+2,15): 99.813309 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 103.453843
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 15 15 25 25 15 15 15
<<< (M = 15, K = 25, N = 15) : 99.813309
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,15) :   101.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3255 (28.9%), 7995 (71.1%) left; Finishing by Sat Oct 21  6:25:45 2000

(5,10,9) <- (1,1,3).*(5, 8+2,3): 24.608951 Mflop/s
(15,10,15) <- (3,1,5).*(5, 8+2,3): 25.072056 Mflop/s

Testing m0 = 5, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 9 5 10 10 9 5 9
<<< (M = 5, K = 10, N = 9) : 24.608951
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 25.072056
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 8,3) :    24.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3256 (28.9%), 7994 (71.1%) left; Finishing by Sat Oct 21  6:25:44 2000

(8,11,6) <- (4,1,1).*(2, 9+2,6): 24.617691 Mflop/s
(14,11,12) <- (7,1,2).*(2, 9+2,6): 23.664852 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  9 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 6 8 11 11 6 8 6
<<< (M = 8, K = 11, N = 6) : 24.617691
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 12 14 11 11 12 14 12
<<< (M = 14, K = 11, N = 12) : 23.664852
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 9,6) :    24.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3257 (29.0%), 7993 (71.0%) left; Finishing by Sat Oct 21  6:25:43 2000

(8,14,8) <- (2,0,2).*(4, 12+2,4): 25.994384 Mflop/s
(12,14,12) <- (3,1,3).*(4, 12+2,4): 25.854055 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 25.994384
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 12 12 14 14 12 12 12
<<< (M = 12, K = 14, N = 12) : 25.854055
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 12,4) :    25.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3258 (29.0%), 7992 (71.0%) left; Finishing by Sat Oct 21  6:25:46 2000

(8,27,9) <- (2,9,3).*(4,1+2,3): 103.906321 Mflop/s
(12,45,15) <- (3,15,5).*(4,1+2,3): 98.775304 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 27 9 8 27 27 9 8 9
<<< (M = 8, K = 27, N = 9) : 103.906321
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 45 15 12 45 45 15 12 15
<<< (M = 12, K = 45, N = 15) : 98.775304
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4,1,3) :   101.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3259 (29.0%), 7991 (71.0%) left; Finishing by Sat Oct 21  6:25:41 2000

(9,27,8) <- (3,9,4).*(3,1+2,2): 32.186093 Mflop/s
(15,45,14) <- (5,15,7).*(3,1+2,2): 29.154375 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 8 9 27 27 8 9 8
<<< (M = 9, K = 27, N = 8) : 32.186093
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 14 15 45 45 14 15 14
<<< (M = 15, K = 45, N = 14) : 29.154375
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3,1,2) :    30.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3260 (29.0%), 7990 (71.0%) left; Finishing by Sat Oct 21  6:25:40 2000

(13,15,9) <- (0,0,9).*(13, 13+2,1): 27.350872 Mflop/s
(13,15,15) <- (1,1,15).*(13, 13+2,1): 29.049126 Mflop/s

Testing m0 = 13, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 13  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 9 13 15 15 9 13 9
<<< (M = 13, K = 15, N = 9) : 27.350872
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 15 13 15 15 15 13 15
<<< (M = 13, K = 15, N = 15) : 29.049126
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (13, 13,1) :    28.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3261 (29.0%), 7989 (71.0%) left; Finishing by Sat Oct 21  6:25:39 2000

(7,10,8) <- (1,1,4).*(7, 8+2,2): 21.561691 Mflop/s
(14,10,14) <- (2,1,7).*(7, 8+2,2): 24.322503 Mflop/s

Testing m0 = 7, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 10 8 7 10 10 8 7 8
<<< (M = 7, K = 10, N = 8) : 21.561691
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 14 14 10 10 14 14 14
<<< (M = 14, K = 10, N = 14) : 24.322503
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 8,2) :    22.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3262 (29.0%), 7988 (71.0%) left; Finishing by Sat Oct 21  6:25:38 2000

(9,7,7) <- (9,1,1).*(1, 5+2,7): 99.109071 Mflop/s
(15,21,14) <- (15,3,2).*(1, 5+2,7): 87.671136 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 7 9 7 7 7 9 7
<<< (M = 9, K = 7, N = 7) : 99.109071
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 14 15 21 21 14 15 14
<<< (M = 15, K = 21, N = 14) : 87.671136
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,7) :    93.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3263 (29.0%), 7987 (71.0%) left; Finishing by Sat Oct 21  6:25:38 2000

(9,15,5) <- (3,3,1).*(3, 3+2,5): 28.157248 Mflop/s
(15,25,15) <- (5,5,3).*(3, 3+2,5): 27.717406 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  3 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 5 9 15 15 5 9 5
<<< (M = 9, K = 15, N = 5) : 28.157248
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 15 15 25 25 15 15 15
<<< (M = 15, K = 25, N = 15) : 27.717406
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 3,5) :    27.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3264 (29.0%), 7986 (71.0%) left; Finishing by Sat Oct 21  6:25:37 2000

(5,15,8) <- (1,3,4).*(5, 3+2,2): 27.682950 Mflop/s
(15,25,14) <- (3,5,7).*(5, 3+2,2): 30.512395 Mflop/s

Testing m0 = 5, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 8 5 15 15 8 5 8
<<< (M = 5, K = 15, N = 8) : 27.682950
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 14 15 25 25 14 15 14
<<< (M = 15, K = 25, N = 14) : 30.512395
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 3,2) :    29.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3265 (29.0%), 7985 (71.0%) left; Finishing by Sat Oct 21  6:25:36 2000

(8,9,9) <- (1,1,9).*(8, 7+2,1): 79.311907 Mflop/s
(8,18,15) <- (1,2,15).*(8, 7+2,1): 103.109270 Mflop/s

Testing m0 = 8, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 79.311907
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 15 8 18 18 15 8 15
<<< (M = 8, K = 18, N = 15) : 103.109270
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 7,1) :    89.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3266 (29.0%), 7984 (71.0%) left; Finishing by Sat Oct 21  6:25:38 2000

(9,12,9) <- (9,2,9).*(1, 4+2,1): 139.697894 Mflop/s
(15,18,15) <- (15,3,15).*(1, 4+2,1): 139.940060 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 139.697894
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 139.940060
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,1) :   139.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3267 (29.0%), 7983 (71.0%) left; Finishing by Sat Oct 21  6:25:41 2000

(9,16,12) <- (9,0,0).*(1, 14+2,12): 96.811165 Mflop/s
(15,16,12) <- (15,1,1).*(1, 14+2,12): 97.098741 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 12 9 16 16 12 9 12
<<< (M = 9, K = 16, N = 12) : 96.811165
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 97.098741
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,12) :    97.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3268 (29.0%), 7982 (71.0%) left; Finishing by Sat Oct 21  6:25:40 2000

(9,9,12) <- (9,1,0).*(1, 7+2,12): 92.330575 Mflop/s
(15,18,12) <- (15,2,1).*(1, 7+2,12): 109.316354 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 12 9 9 9 12 9 12
<<< (M = 9, K = 9, N = 12) : 92.330575
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 109.316354
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,12) :   100.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3269 (29.1%), 7981 (70.9%) left; Finishing by Sat Oct 21  6:25:39 2000

(9,16,9) <- (9,4,3).*(1, 2+2,3): 94.488363 Mflop/s
(15,28,15) <- (15,7,5).*(1, 2+2,3): 53.220936 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 94.488363
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 15 15 28 28 15 15 15
<<< (M = 15, K = 28, N = 15) : 53.220936
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,3) :    68.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3270 (29.1%), 7980 (70.9%) left; Finishing by Sat Oct 21  6:25:38 2000

(5,14,9) <- (1,0,3).*(5, 12+2,3): 24.945173 Mflop/s
(15,14,15) <- (3,1,5).*(5, 12+2,3): 25.643216 Mflop/s

Testing m0 = 5, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 14 9 5 14 14 9 5 9
<<< (M = 5, K = 14, N = 9) : 24.945173
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 25.643216
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 12,3) :    25.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3271 (29.1%), 7979 (70.9%) left; Finishing by Sat Oct 21  6:25:37 2000

(8,15,8) <- (4,3,4).*(2, 3+2,2): 44.839471 Mflop/s
(14,25,14) <- (7,5,7).*(2, 3+2,2): 39.418944 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 44.839471
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 25 14 14 25 25 14 14 14
<<< (M = 14, K = 25, N = 14) : 39.418944
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 3,2) :    42.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3272 (29.1%), 7978 (70.9%) left; Finishing by Sat Oct 21  6:25:36 2000

(9,11,8) <- (9,1,1).*(1, 9+2,8): 104.231782 Mflop/s
(15,11,8) <- (15,1,1).*(1, 9+2,8): 105.061684 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 104.231782
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 8 15 11 11 8 15 8
<<< (M = 15, K = 11, N = 8) : 105.061684
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,8) :   104.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3273 (29.1%), 7977 (70.9%) left; Finishing by Sat Oct 21  6:25:39 2000

(8,16,9) <- (4,0,3).*(2, 14+2,3): 32.986955 Mflop/s
(14,16,15) <- (7,1,5).*(2, 14+2,3): 23.946276 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 32.986955
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 23.946276
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 14,3) :    27.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3274 (29.1%), 7976 (70.9%) left; Finishing by Sat Oct 21  6:25:38 2000

(9,11,8) <- (9,1,4).*(1, 9+2,2): 140.577603 Mflop/s
(15,11,14) <- (15,1,7).*(1, 9+2,2): 144.953727 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 140.577603
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 144.953727
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,2) :   142.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3275 (29.1%), 7975 (70.9%) left; Finishing by Sat Oct 21  6:25:37 2000

(9,11,9) <- (9,1,3).*(1, 9+2,3): 121.490533 Mflop/s
(15,11,15) <- (15,1,5).*(1, 9+2,3): 110.365221 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 121.490533
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 110.365221
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,3) :   115.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3276 (29.1%), 7974 (70.9%) left; Finishing by Sat Oct 21  6:25:40 2000

(9,13,11) <- (9,0,0).*(1, 11+2,11): 97.079382 Mflop/s
(15,13,11) <- (15,1,1).*(1, 11+2,11): 82.347293 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 11 9 13 13 11 9 11
<<< (M = 9, K = 13, N = 11) : 97.079382
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 11 15 13 13 11 15 11
<<< (M = 15, K = 13, N = 11) : 82.347293
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,11) :    89.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3277 (29.1%), 7973 (70.9%) left; Finishing by Sat Oct 21  6:25:39 2000

(9,13,16) <- (9,0,0).*(1, 11+2,16): 96.670068 Mflop/s
(15,13,16) <- (15,1,0).*(1, 11+2,16): 96.997306 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 16 9 13 13 16 9 16
<<< (M = 9, K = 13, N = 16) : 96.670068
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 16 15 13 13 16 15 16
<<< (M = 15, K = 13, N = 16) : 96.997306
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,16) :    96.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3278 (29.1%), 7972 (70.9%) left; Finishing by Sat Oct 21  6:25:38 2000

(8,7,8) <- (4,1,2).*(2, 5+2,4): 27.365593 Mflop/s
(14,21,12) <- (7,3,3).*(2, 5+2,4): 33.456162 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 27.365593
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 12 14 21 21 12 14 12
<<< (M = 14, K = 21, N = 12) : 33.456162
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 5,4) :    30.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3279 (29.1%), 7971 (70.9%) left; Finishing by Sat Oct 21  6:25:37 2000

(9,11,6) <- (9,1,1).*(1, 9+2,6): 113.452188 Mflop/s
(15,11,12) <- (15,1,2).*(1, 9+2,6): 118.470450 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 6 9 11 11 6 9 6
<<< (M = 9, K = 11, N = 6) : 113.452188
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 118.470450
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,6) :   115.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3280 (29.2%), 7970 (70.8%) left; Finishing by Sat Oct 21  6:25:36 2000

(10,10,9) <- (0,1,9).*(10, 8+2,1): 82.882568 Mflop/s
(10,10,15) <- (1,1,15).*(10, 8+2,1): 88.993245 Mflop/s

Testing m0 = 10, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 10  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 10 9 10 10 10 9 10 9
<<< (M = 10, K = 10, N = 9) : 82.882568
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 10 15 10 10 10 15 10 15
<<< (M = 10, K = 10, N = 15) : 88.993245
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (10, 8,1) :    85.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3281 (29.2%), 7969 (70.8%) left; Finishing by Sat Oct 21  6:25:35 2000

(9,15,9) <- (3,3,9).*(3, 3+2,1): 153.375618 Mflop/s
(15,25,15) <- (5,5,15).*(3, 3+2,1): 164.909726 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 153.375618
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 15 15 25 25 15 15 15
<<< (M = 15, K = 25, N = 15) : 164.909726
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 3,1) :   158.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3282 (29.2%), 7968 (70.8%) left; Finishing by Sat Oct 21  6:25:34 2000

(8,12,9) <- (4,2,3).*(2, 4+2,3): 37.254975 Mflop/s
(14,18,15) <- (7,3,5).*(2, 4+2,3): 24.017196 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 37.254975
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 24.017196
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 4,3) :    29.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3283 (29.2%), 7967 (70.8%) left; Finishing by Sat Oct 21  6:25:33 2000

(8,16,9) <- (1,4,9).*(8, 2+2,1): 26.281064 Mflop/s
(8,28,15) <- (1,7,15).*(8, 2+2,1): 27.023774 Mflop/s

Testing m0 = 8, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 26.281064
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 28 15 8 28 28 15 8 15
<<< (M = 8, K = 28, N = 15) : 27.023774
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 2,1) :    26.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3284 (29.2%), 7966 (70.8%) left; Finishing by Sat Oct 21  6:25:32 2000

(5,16,8) <- (1,4,4).*(5, 2+2,2): 25.682062 Mflop/s
(15,28,14) <- (3,7,7).*(5, 2+2,2): 28.800109 Mflop/s

Testing m0 = 5, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 16 8 5 16 16 8 5 8
<<< (M = 5, K = 16, N = 8) : 25.682062
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 14 15 28 28 14 15 14
<<< (M = 15, K = 28, N = 14) : 28.800109
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 2,2) :    27.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3285 (29.2%), 7965 (70.8%) left; Finishing by Sat Oct 21  6:25:31 2000

(9,7,14) <- (9,1,0).*(1, 5+2,14): 89.206852 Mflop/s
(15,21,14) <- (15,3,1).*(1, 5+2,14): 124.429062 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 14 9 7 7 14 9 14
<<< (M = 9, K = 7, N = 14) : 89.206852
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 14 15 21 21 14 15 14
<<< (M = 15, K = 21, N = 14) : 124.429062
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,14) :   103.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3286 (29.2%), 7964 (70.8%) left; Finishing by Sat Oct 21  6:25:31 2000

(9,14,9) <- (1,0,9).*(9, 12+2,1): 33.728331 Mflop/s
(9,14,15) <- (1,1,15).*(9, 12+2,1): 33.739164 Mflop/s

Testing m0 = 9, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 9  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 33.728331
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 15 9 14 14 15 9 15
<<< (M = 9, K = 14, N = 15) : 33.739164
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (9, 12,1) :    33.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3287 (29.2%), 7963 (70.8%) left; Finishing by Sat Oct 21  6:25:30 2000

(8,15,6) <- (4,3,1).*(2, 3+2,6): 26.960536 Mflop/s
(14,25,12) <- (7,5,2).*(2, 3+2,6): 26.749229 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  3 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 6 8 15 15 6 8 6
<<< (M = 8, K = 15, N = 6) : 26.960536
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 25 12 14 25 25 12 14 12
<<< (M = 14, K = 25, N = 12) : 26.749229
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 3,6) :    26.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3288 (29.2%), 7962 (70.8%) left; Finishing by Sat Oct 21  6:25:29 2000

(8,12,8) <- (1,0,4).*(8, 10+2,2): 101.660749 Mflop/s
(8,12,14) <- (1,1,7).*(8, 10+2,2): 101.539587 Mflop/s

Testing m0 = 8, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 101.660749
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 14 8 12 12 14 8 14
<<< (M = 8, K = 12, N = 14) : 101.539587
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 10,2) :   101.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3289 (29.2%), 7961 (70.8%) left; Finishing by Sat Oct 21  6:25:31 2000

(8,7,8) <- (4,1,4).*(2, 5+2,2): 37.527876 Mflop/s
(14,21,14) <- (7,3,7).*(2, 5+2,2): 45.179497 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 37.527876
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 14 14 21 21 14 14 14
<<< (M = 14, K = 21, N = 14) : 45.179497
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 5,2) :    41.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3290 (29.2%), 7960 (70.8%) left; Finishing by Sat Oct 21  6:25:30 2000

(9,10,6) <- (9,1,1).*(1, 8+2,6): 112.277417 Mflop/s
(15,10,12) <- (15,1,2).*(1, 8+2,6): 114.140477 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 6 9 10 10 6 9 6
<<< (M = 9, K = 10, N = 6) : 112.277417
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 12 15 10 10 12 15 12
<<< (M = 15, K = 10, N = 12) : 114.140477
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,6) :   113.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3291 (29.3%), 7959 (70.7%) left; Finishing by Sat Oct 21  6:25:33 2000

(6,14,9) <- (1,0,9).*(6, 12+2,1): 102.759544 Mflop/s
(12,14,15) <- (2,1,15).*(6, 12+2,1): 114.103792 Mflop/s

Testing m0 = 6, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 14 9 6 14 14 9 6 9
<<< (M = 6, K = 14, N = 9) : 102.759544
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 114.103792
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 12,1) :   108.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3292 (29.3%), 7958 (70.7%) left; Finishing by Sat Oct 21  6:25:32 2000

(9,8,8) <- (3,1,2).*(3, 6+2,4): 105.858483 Mflop/s
(15,16,12) <- (5,2,3).*(3, 6+2,4): 134.008431 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 105.858483
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 134.008431
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 6,4) :   118.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3293 (29.3%), 7957 (70.7%) left; Finishing by Sat Oct 21  6:25:28 2000

(9,13,9) <- (9,0,3).*(1, 11+2,3): 127.219881 Mflop/s
(15,13,15) <- (15,1,5).*(1, 11+2,3): 116.813608 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 127.219881
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 116.813608
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,3) :   121.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3294 (29.3%), 7956 (70.7%) left; Finishing by Sat Oct 21  6:25:27 2000

(9,17,7) <- (9,0,1).*(1, 15+2,7): 115.646472 Mflop/s
(15,17,14) <- (15,1,2).*(1, 15+2,7): 70.769535 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 7 9 17 17 7 9 7
<<< (M = 9, K = 17, N = 7) : 115.646472
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 14 15 17 17 14 15 14
<<< (M = 15, K = 17, N = 14) : 70.769535
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,7) :    87.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3295 (29.3%), 7955 (70.7%) left; Finishing by Sat Oct 21  6:25:26 2000

(9,27,8) <- (3,9,2).*(3,1+2,4): 25.778842 Mflop/s
(15,45,12) <- (5,15,3).*(3,1+2,4): 26.861654 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 8 9 27 27 8 9 8
<<< (M = 9, K = 27, N = 8) : 25.778842
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 12 15 45 45 12 15 12
<<< (M = 15, K = 45, N = 12) : 26.861654
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3,1,4) :    26.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3296 (29.3%), 7954 (70.7%) left; Finishing by Sat Oct 21  6:25:25 2000

(8,9,8) <- (2,1,2).*(4, 7+2,4): 109.992353 Mflop/s
(12,18,12) <- (3,2,3).*(4, 7+2,4): 136.065054 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 109.992353
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 12 12 18 18 12 12 12
<<< (M = 12, K = 18, N = 12) : 136.065054
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 7,4) :   121.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3297 (29.3%), 7953 (70.7%) left; Finishing by Sat Oct 21  6:25:27 2000

(8,9,9) <- (2,1,3).*(4, 7+2,3): 25.328267 Mflop/s
(12,18,15) <- (3,2,5).*(4, 7+2,3): 31.575782 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 9 8 9 9 9 8 9
<<< (M = 8, K = 9, N = 9) : 25.328267
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 31.575782
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 7,3) :    28.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3298 (29.3%), 7952 (70.7%) left; Finishing by Sat Oct 21  6:25:27 2000

(8,16,8) <- (4,0,4).*(2, 14+2,2): 38.126651 Mflop/s
(14,16,14) <- (7,1,7).*(2, 14+2,2): 36.549634 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 38.126651
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 36.549634
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 14,2) :    37.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3299 (29.3%), 7951 (70.7%) left; Finishing by Sat Oct 21  6:25:26 2000

(5,16,9) <- (1,4,9).*(5, 2+2,1): 45.070199 Mflop/s
(15,28,15) <- (3,7,15).*(5, 2+2,1): 49.867349 Mflop/s

Testing m0 = 5, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 16 9 5 16 16 9 5 9
<<< (M = 5, K = 16, N = 9) : 45.070199
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 15 15 28 28 15 15 15
<<< (M = 15, K = 28, N = 15) : 49.867349
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 2,1) :    47.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3300 (29.3%), 7950 (70.7%) left; Finishing by Sat Oct 21  6:25:21 2000

(9,7,15) <- (9,1,0).*(1, 5+2,15): 89.958606 Mflop/s
(15,21,15) <- (15,3,1).*(1, 5+2,15): 111.186505 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 15 9 7 7 15 9 15
<<< (M = 9, K = 7, N = 15) : 89.958606
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 111.186505
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,15) :    99.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3301 (29.3%), 7949 (70.7%) left; Finishing by Sat Oct 21  6:25:20 2000

(9,11,16) <- (9,1,0).*(1, 9+2,16): 97.186371 Mflop/s
(15,11,16) <- (15,1,0).*(1, 9+2,16): 97.393117 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 16 9 11 11 16 9 16
<<< (M = 9, K = 11, N = 16) : 97.186371
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 16 15 11 11 16 15 16
<<< (M = 15, K = 11, N = 16) : 97.393117
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,16) :    97.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3302 (29.4%), 7948 (70.6%) left; Finishing by Sat Oct 21  6:25:20 2000

(9,17,9) <- (9,0,1).*(1, 15+2,9): 80.857606 Mflop/s
(15,17,9) <- (15,1,1).*(1, 15+2,9): 81.329776 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 9 9 17 17 9 9 9
<<< (M = 9, K = 17, N = 9) : 80.857606
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 9 15 17 17 9 15 9
<<< (M = 15, K = 17, N = 9) : 81.329776
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,9) :    81.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3303 (29.4%), 7947 (70.6%) left; Finishing by Sat Oct 21  6:25:22 2000

(9,12,8) <- (9,2,1).*(1, 4+2,8): 123.591979 Mflop/s
(15,18,8) <- (15,3,1).*(1, 4+2,8): 110.691530 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 123.591979
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 8 15 18 18 8 15 8
<<< (M = 15, K = 18, N = 8) : 110.691530
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,8) :   116.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3304 (29.4%), 7946 (70.6%) left; Finishing by Sat Oct 21  6:25:21 2000

(9,9,10) <- (9,1,0).*(1, 7+2,10): 94.299797 Mflop/s
(15,18,10) <- (15,2,1).*(1, 7+2,10): 112.687532 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 10 9 9 9 10 9 10
<<< (M = 9, K = 9, N = 10) : 94.299797
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 10 15 18 18 10 15 10
<<< (M = 15, K = 18, N = 10) : 112.687532
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,10) :   102.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3305 (29.4%), 7945 (70.6%) left; Finishing by Sat Oct 21  6:25:20 2000

(8,15,9) <- (1,3,9).*(8, 3+2,1): 99.347201 Mflop/s
(8,25,15) <- (1,5,15).*(8, 3+2,1): 105.124500 Mflop/s

Testing m0 = 8, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 99.347201
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 25 15 8 25 25 15 8 15
<<< (M = 8, K = 25, N = 15) : 105.124500
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 3,1) :   102.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3306 (29.4%), 7944 (70.6%) left; Finishing by Sat Oct 21  6:25:19 2000

(9,14,11) <- (9,0,0).*(1, 12+2,11): 98.006641 Mflop/s
(15,14,11) <- (15,1,1).*(1, 12+2,11): 83.026604 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 11 9 14 14 11 9 11
<<< (M = 9, K = 14, N = 11) : 98.006641
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 11 15 14 14 11 15 11
<<< (M = 15, K = 14, N = 11) : 83.026604
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,11) :    89.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3307 (29.4%), 7943 (70.6%) left; Finishing by Sat Oct 21  6:25:19 2000

(5,13,8) <- (1,0,4).*(5, 11+2,2): 25.840036 Mflop/s
(15,13,14) <- (3,1,7).*(5, 11+2,2): 26.980543 Mflop/s

Testing m0 = 5, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 13 8 5 13 13 8 5 8
<<< (M = 5, K = 13, N = 8) : 25.840036
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 26.980543
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 11,2) :    26.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3308 (29.4%), 7942 (70.6%) left; Finishing by Sat Oct 21  6:25:18 2000

(9,13,8) <- (9,0,2).*(1, 11+2,4): 113.022890 Mflop/s
(15,13,12) <- (15,1,3).*(1, 11+2,4): 115.239559 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 113.022890
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 115.239559
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,4) :   114.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3309 (29.4%), 7941 (70.6%) left; Finishing by Sat Oct 21  6:25:17 2000

(9,17,8) <- (9,0,2).*(1, 15+2,4): 117.427989 Mflop/s
(15,17,12) <- (15,1,3).*(1, 15+2,4): 118.940059 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 8 9 17 17 8 9 8
<<< (M = 9, K = 17, N = 8) : 117.427989
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 12 15 17 17 12 15 12
<<< (M = 15, K = 17, N = 12) : 118.940059
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,4) :   118.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3310 (29.4%), 7940 (70.6%) left; Finishing by Sat Oct 21  6:25:12 2000

(9,15,12) <- (9,0,0).*(1, 13+2,12): 96.499105 Mflop/s
(15,15,12) <- (15,1,1).*(1, 13+2,12): 96.397112 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 12 9 15 15 12 9 12
<<< (M = 9, K = 15, N = 12) : 96.499105
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 96.397112
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,12) :    96.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3311 (29.4%), 7939 (70.6%) left; Finishing by Sat Oct 21  6:25:15 2000

(5,7,9) <- (1,1,9).*(5, 5+2,1): 45.032626 Mflop/s
(15,21,15) <- (3,3,15).*(5, 5+2,1): 75.074317 Mflop/s

Testing m0 = 5, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 7 9 5 7 7 9 5 9
<<< (M = 5, K = 7, N = 9) : 45.032626
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 75.074317
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 5,1) :    56.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3312 (29.4%), 7938 (70.6%) left; Finishing by Sat Oct 21  6:25:11 2000

(15,7,9) <- (0,1,9).*(15, 5+2,1): 89.529305 Mflop/s
(15,21,15) <- (1,3,15).*(15, 5+2,1): 128.879242 Mflop/s

Testing m0 = 15, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 15  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 7 9 15 7 7 9 15 9
<<< (M = 15, K = 7, N = 9) : 89.529305
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 128.879242
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (15, 5,1) :   105.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3313 (29.4%), 7937 (70.6%) left; Finishing by Sat Oct 21  6:25:10 2000

(14,12,9) <- (0,0,9).*(14, 10+2,1): 25.181522 Mflop/s
(14,12,15) <- (1,1,15).*(14, 10+2,1): 28.300695 Mflop/s

Testing m0 = 14, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 14  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 9 14 12 12 9 14 9
<<< (M = 14, K = 12, N = 9) : 25.181522
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 15 14 12 12 15 14 15
<<< (M = 14, K = 12, N = 15) : 28.300695
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (14, 10,1) :    26.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3314 (29.5%), 7936 (70.5%) left; Finishing by Sat Oct 21  6:25:09 2000

(6,15,8) <- (1,3,4).*(6, 3+2,2): 111.896699 Mflop/s
(12,25,14) <- (2,5,7).*(6, 3+2,2): 117.900105 Mflop/s

Testing m0 = 6, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 15 8 6 15 15 8 6 8
<<< (M = 6, K = 15, N = 8) : 111.896699
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 25 14 12 25 25 14 12 14
<<< (M = 12, K = 25, N = 14) : 117.900105
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 3,2) :   114.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3315 (29.5%), 7935 (70.5%) left; Finishing by Sat Oct 21  6:25:11 2000

(9,12,10) <- (9,2,0).*(1, 4+2,10): 113.280201 Mflop/s
(15,18,10) <- (15,3,1).*(1, 4+2,10): 98.997001 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 10 9 12 12 10 9 10
<<< (M = 9, K = 12, N = 10) : 113.280201
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 10 15 18 18 10 15 10
<<< (M = 15, K = 18, N = 10) : 98.997001
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,10) :   105.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3316 (29.5%), 7934 (70.5%) left; Finishing by Sat Oct 21  6:25:11 2000

(16,17,9) <- (0,0,9).*(16, 15+2,1): 28.005463 Mflop/s
(16,17,15) <- (0,1,15).*(16, 15+2,1): 28.316493 Mflop/s

Testing m0 = 16, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 16  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 17 9 16 17 17 9 16 9
<<< (M = 16, K = 17, N = 9) : 28.005463
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 17 15 16 17 17 15 16 15
<<< (M = 16, K = 17, N = 15) : 28.316493
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (16, 15,1) :    28.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3317 (29.5%), 7933 (70.5%) left; Finishing by Sat Oct 21  6:25:10 2000

(8,15,7) <- (4,0,1).*(2, 13+2,7): 25.828419 Mflop/s
(14,15,14) <- (7,1,2).*(2, 13+2,7): 23.304229 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  13 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 7 8 15 15 7 8 7
<<< (M = 8, K = 15, N = 7) : 25.828419
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 23.304229
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 13,7) :    24.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3318 (29.5%), 7932 (70.5%) left; Finishing by Sat Oct 21  6:25:12 2000

(8,14,9) <- (4,0,9).*(2, 12+2,1): 166.812873 Mflop/s
(14,14,15) <- (7,1,15).*(2, 12+2,1): 171.152841 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 166.812873
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 171.152841
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 12,1) :   169.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3319 (29.5%), 7931 (70.5%) left; Finishing by Sat Oct 21  6:25:11 2000

(8,16,9) <- (4,4,9).*(2, 2+2,1): 106.746248 Mflop/s
(14,28,15) <- (7,7,15).*(2, 2+2,1): 112.511739 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 106.746248
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 28 15 14 28 28 15 14 15
<<< (M = 14, K = 28, N = 15) : 112.511739
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 2,1) :   109.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3320 (29.5%), 7930 (70.5%) left; Finishing by Sat Oct 21  6:25:10 2000

(10,14,9) <- (0,0,9).*(10, 12+2,1): 96.236220 Mflop/s
(10,14,15) <- (1,1,15).*(10, 12+2,1): 101.547110 Mflop/s

Testing m0 = 10, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 10  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 9 10 14 14 9 10 9
<<< (M = 10, K = 14, N = 9) : 96.236220
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 14 15 10 14 14 15 10 15
<<< (M = 10, K = 14, N = 15) : 101.547110
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (10, 12,1) :    98.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3321 (29.5%), 7929 (70.5%) left; Finishing by Sat Oct 21  6:25:09 2000

(8,17,8) <- (1,0,4).*(8, 15+2,2): 105.845518 Mflop/s
(8,17,14) <- (1,1,7).*(8, 15+2,2): 106.748726 Mflop/s

Testing m0 = 8, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 8 8 17 17 8 8 8
<<< (M = 8, K = 17, N = 8) : 105.845518
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 14 8 17 17 14 8 14
<<< (M = 8, K = 17, N = 14) : 106.748726
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 15,2) :   106.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3322 (29.5%), 7928 (70.5%) left; Finishing by Sat Oct 21  6:25:09 2000

(8,10,8) <- (4,1,4).*(2, 8+2,2): 36.234669 Mflop/s
(14,10,14) <- (7,1,7).*(2, 8+2,2): 34.291292 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 36.234669
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 14 14 10 10 14 14 14
<<< (M = 14, K = 10, N = 14) : 34.291292
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 8,2) :    35.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3323 (29.5%), 7927 (70.5%) left; Finishing by Sat Oct 21  6:25:08 2000

(8,11,9) <- (4,1,3).*(2, 9+2,3): 32.038736 Mflop/s
(14,11,15) <- (7,1,5).*(2, 9+2,3): 23.296929 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 32.038736
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 23.296929
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 9,3) :    27.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3324 (29.5%), 7926 (70.5%) left; Finishing by Sat Oct 21  6:25:07 2000

(9,11,5) <- (9,1,1).*(1, 9+2,5): 63.906622 Mflop/s
(15,11,15) <- (15,1,3).*(1, 9+2,5): 113.048216 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 5 9 11 11 5 9 5
<<< (M = 9, K = 11, N = 5) : 63.906622
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 113.048216
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,5) :    81.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3325 (29.6%), 7925 (70.4%) left; Finishing by Sat Oct 21  6:25:03 2000

(16,8,9) <- (0,1,9).*(16, 6+2,1): 25.576921 Mflop/s
(16,16,15) <- (0,2,15).*(16, 6+2,1): 31.378076 Mflop/s

Testing m0 = 16, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 16  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 8 9 16 8 8 9 16 9
<<< (M = 16, K = 8, N = 9) : 25.576921
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 16 15 16 16 16 15 16 15
<<< (M = 16, K = 16, N = 15) : 31.378076
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (16, 6,1) :    28.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3326 (29.6%), 7924 (70.4%) left; Finishing by Sat Oct 21  6:25:02 2000

(9,17,8) <- (9,0,1).*(1, 15+2,8): 110.041327 Mflop/s
(15,17,8) <- (15,1,1).*(1, 15+2,8): 110.592081 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 8 9 17 17 8 9 8
<<< (M = 9, K = 17, N = 8) : 110.041327
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 8 15 17 17 8 15 8
<<< (M = 15, K = 17, N = 8) : 110.592081
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,8) :   110.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3327 (29.6%), 7923 (70.4%) left; Finishing by Sat Oct 21  6:25:01 2000

(9,7,8) <- (9,1,1).*(1, 5+2,8): 96.088149 Mflop/s
(15,21,8) <- (15,3,1).*(1, 5+2,8): 135.969213 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 96.088149
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 8 15 21 21 8 15 8
<<< (M = 15, K = 21, N = 8) : 135.969213
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,8) :   112.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3328 (29.6%), 7922 (70.4%) left; Finishing by Sat Oct 21  6:25:03 2000

(9,10,16) <- (9,1,0).*(1, 8+2,16): 93.845345 Mflop/s
(15,10,16) <- (15,1,0).*(1, 8+2,16): 96.616552 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 16 9 10 10 16 9 16
<<< (M = 9, K = 10, N = 16) : 93.845345
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 16 15 10 10 16 15 16
<<< (M = 15, K = 10, N = 16) : 96.616552
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,16) :    95.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3329 (29.6%), 7921 (70.4%) left; Finishing by Sat Oct 21  6:25:02 2000

(12,15,9) <- (0,0,9).*(12, 13+2,1): 93.698550 Mflop/s
(12,15,15) <- (1,1,15).*(12, 13+2,1): 95.330054 Mflop/s

Testing m0 = 12, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 12  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 9 12 15 15 9 12 9
<<< (M = 12, K = 15, N = 9) : 93.698550
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 95.330054
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (12, 13,1) :    94.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3330 (29.6%), 7920 (70.4%) left; Finishing by Sat Oct 21  6:25:02 2000

(9,17,5) <- (9,0,1).*(1, 15+2,5): 66.868969 Mflop/s
(15,17,15) <- (15,1,3).*(1, 15+2,5): 117.470986 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 5 9 17 17 5 9 5
<<< (M = 9, K = 17, N = 5) : 66.868969
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 15 15 17 17 15 15 15
<<< (M = 15, K = 17, N = 15) : 117.470986
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,5) :    85.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3331 (29.6%), 7919 (70.4%) left; Finishing by Sat Oct 21  6:25:01 2000

(9,9,9) <- (3,1,9).*(3, 7+2,1): 131.874500 Mflop/s
(15,18,15) <- (5,2,15).*(3, 7+2,1): 180.094321 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 131.874500
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 180.094321
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 7,1) :   152.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3332 (29.6%), 7918 (70.4%) left; Finishing by Sat Oct 21  6:25:03 2000

(9,15,13) <- (9,0,0).*(1, 13+2,13): 85.081068 Mflop/s
(15,15,13) <- (15,1,1).*(1, 13+2,13): 99.387924 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 13 9 15 15 13 9 13
<<< (M = 9, K = 15, N = 13) : 85.081068
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 13 15 15 15 13 15 13
<<< (M = 15, K = 15, N = 13) : 99.387924
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,13) :    91.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3333 (29.6%), 7917 (70.4%) left; Finishing by Sat Oct 21  6:25:02 2000

(8,10,9) <- (1,1,9).*(8, 8+2,1): 82.760939 Mflop/s
(8,10,15) <- (1,1,15).*(8, 8+2,1): 83.261510 Mflop/s

Testing m0 = 8, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 82.760939
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 15 8 10 10 15 8 15
<<< (M = 8, K = 10, N = 15) : 83.261510
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 8,1) :    83.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3334 (29.6%), 7916 (70.4%) left; Finishing by Sat Oct 21  6:25:01 2000

(13,14,9) <- (0,0,9).*(13, 12+2,1): 27.062790 Mflop/s
(13,14,15) <- (1,1,15).*(13, 12+2,1): 28.968562 Mflop/s

Testing m0 = 13, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 13  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 9 13 14 14 9 13 9
<<< (M = 13, K = 14, N = 9) : 27.062790
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 14 15 13 14 14 15 13 15
<<< (M = 13, K = 14, N = 15) : 28.968562
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (13, 12,1) :    28.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3335 (29.6%), 7915 (70.4%) left; Finishing by Sat Oct 21  6:25:04 2000

(9,12,6) <- (9,0,1).*(1, 10+2,6): 115.080123 Mflop/s
(15,12,12) <- (15,1,2).*(1, 10+2,6): 118.017593 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 6 9 12 12 6 9 6
<<< (M = 9, K = 12, N = 6) : 115.080123
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 118.017593
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,6) :   116.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3336 (29.7%), 7914 (70.3%) left; Finishing by Sat Oct 21  6:25:06 2000

(8,10,6) <- (4,1,1).*(2, 8+2,6): 24.335988 Mflop/s
(14,10,12) <- (7,1,2).*(2, 8+2,6): 23.534376 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  8 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 6 8 10 10 6 8 6
<<< (M = 8, K = 10, N = 6) : 24.335988
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 12 14 10 10 12 14 12
<<< (M = 14, K = 10, N = 12) : 23.534376
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 8,6) :    23.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3337 (29.7%), 7913 (70.3%) left; Finishing by Sat Oct 21  6:25:06 2000

(8,16,5) <- (4,4,1).*(2, 2+2,5): 24.564000 Mflop/s
(14,28,15) <- (7,7,3).*(2, 2+2,5): 27.012361 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  2 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 5 8 16 16 5 8 5
<<< (M = 8, K = 16, N = 5) : 24.564000
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 28 15 14 28 28 15 14 15
<<< (M = 14, K = 28, N = 15) : 27.012361
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 2,5) :    25.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3338 (29.7%), 7912 (70.3%) left; Finishing by Sat Oct 21  6:25:05 2000

(6,15,9) <- (1,0,9).*(6, 13+2,1): 98.911538 Mflop/s
(12,15,15) <- (2,1,15).*(6, 13+2,1): 111.785030 Mflop/s

Testing m0 = 6, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 15 9 6 15 15 9 6 9
<<< (M = 6, K = 15, N = 9) : 98.911538
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 111.785030
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 13,1) :   105.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3339 (29.7%), 7911 (70.3%) left; Finishing by Sat Oct 21  6:25:04 2000

(8,12,9) <- (2,0,9).*(4, 10+2,1): 124.425818 Mflop/s
(12,12,15) <- (3,1,15).*(4, 10+2,1): 124.476272 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 124.425818
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 124.476272
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 10,1) :   124.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3340 (29.7%), 7910 (70.3%) left; Finishing by Sat Oct 21  6:25:06 2000

(7,16,9) <- (1,0,9).*(7, 14+2,1): 30.415633 Mflop/s
(14,16,15) <- (2,1,15).*(7, 14+2,1): 32.691465 Mflop/s

Testing m0 = 7, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 16 9 7 16 16 9 7 9
<<< (M = 7, K = 16, N = 9) : 30.415633
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 32.691465
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 14,1) :    31.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3341 (29.7%), 7909 (70.3%) left; Finishing by Sat Oct 21  6:25:05 2000

(9,17,8) <- (3,0,4).*(3, 15+2,2): 120.695224 Mflop/s
(15,17,14) <- (5,1,7).*(3, 15+2,2): 121.061648 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 8 9 17 17 8 9 8
<<< (M = 9, K = 17, N = 8) : 120.695224
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 14 15 17 17 14 15 14
<<< (M = 15, K = 17, N = 14) : 121.061648
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 15,2) :   120.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3342 (29.7%), 7908 (70.3%) left; Finishing by Sat Oct 21  6:25:08 2000

(9,7,13) <- (9,1,0).*(1, 5+2,13): 79.925668 Mflop/s
(15,21,13) <- (15,3,1).*(1, 5+2,13): 124.447245 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 13 9 7 7 13 9 13
<<< (M = 9, K = 7, N = 13) : 79.925668
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 13 15 21 21 13 15 13
<<< (M = 15, K = 21, N = 13) : 124.447245
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,13) :    97.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3343 (29.7%), 7907 (70.3%) left; Finishing by Sat Oct 21  6:25:04 2000

(8,15,9) <- (4,0,9).*(2, 13+2,1): 175.840766 Mflop/s
(14,15,15) <- (7,1,15).*(2, 13+2,1): 178.215413 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 175.840766
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 178.215413
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 13,1) :   177.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3344 (29.7%), 7906 (70.3%) left; Finishing by Sat Oct 21  6:25:03 2000

(9,17,12) <- (9,0,0).*(1, 15+2,12): 98.421580 Mflop/s
(15,17,12) <- (15,1,1).*(1, 15+2,12): 98.370628 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 12 9 17 17 12 9 12
<<< (M = 9, K = 17, N = 12) : 98.421580
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 12 15 17 17 12 15 12
<<< (M = 15, K = 17, N = 12) : 98.370628
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,12) :    98.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3345 (29.7%), 7905 (70.3%) left; Finishing by Sat Oct 21  6:25:02 2000

(12,12,9) <- (0,2,9).*(12, 4+2,1): 30.928052 Mflop/s
(12,18,15) <- (1,3,15).*(12, 4+2,1): 26.724201 Mflop/s

Testing m0 = 12, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 12  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 9 12 12 12 9 12 9
<<< (M = 12, K = 12, N = 9) : 30.928052
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 26.724201
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (12, 4,1) :    28.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3346 (29.7%), 7904 (70.3%) left; Finishing by Sat Oct 21  6:25:01 2000

(8,27,8) <- (2,9,2).*(4,1+2,4): 107.774414 Mflop/s
(12,45,12) <- (3,15,3).*(4,1+2,4): 108.835806 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4 1 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 27 8 8 27 27 8 8 8
<<< (M = 8, K = 27, N = 8) : 107.774414
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 45 12 12 45 45 12 12 12
<<< (M = 12, K = 45, N = 12) : 108.835806
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4,1,4) :   108.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3347 (29.8%), 7903 (70.2%) left; Finishing by Sat Oct 21  6:25:00 2000

(9,7,8) <- (9,1,2).*(1, 5+2,4): 98.802348 Mflop/s
(15,21,12) <- (15,3,3).*(1, 5+2,4): 145.214770 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 98.802348
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 12 15 21 21 12 15 12
<<< (M = 15, K = 21, N = 12) : 145.214770
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,4) :   117.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3348 (29.8%), 7902 (70.2%) left; Finishing by Sat Oct 21  6:25:03 2000

(9,9,8) <- (9,1,2).*(1, 7+2,4): 104.370363 Mflop/s
(15,18,12) <- (15,2,3).*(1, 7+2,4): 129.805666 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 104.370363
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 129.805666
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,4) :   115.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3349 (29.8%), 7901 (70.2%) left; Finishing by Sat Oct 21  6:25:05 2000

(8,17,9) <- (1,0,9).*(8, 15+2,1): 101.732124 Mflop/s
(8,17,15) <- (1,1,15).*(8, 15+2,1): 102.368866 Mflop/s

Testing m0 = 8, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 9 8 17 17 9 8 9
<<< (M = 8, K = 17, N = 9) : 101.732124
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 15 8 17 17 15 8 15
<<< (M = 8, K = 17, N = 15) : 102.368866
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 15,1) :   102.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3350 (29.8%), 7900 (70.2%) left; Finishing by Sat Oct 21  6:25:04 2000

(9,16,9) <- (1,4,9).*(9, 2+2,1): 65.354729 Mflop/s
(9,28,15) <- (1,7,15).*(9, 2+2,1): 68.304126 Mflop/s

Testing m0 = 9, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 9  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 65.354729
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 28 15 9 28 28 15 9 15
<<< (M = 9, K = 28, N = 15) : 68.304126
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (9, 2,1) :    66.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3351 (29.8%), 7899 (70.2%) left; Finishing by Sat Oct 21  6:25:07 2000

(8,27,9) <- (2,9,9).*(4,1+2,1): 47.451908 Mflop/s
(12,45,15) <- (3,15,15).*(4,1+2,1): 46.948687 Mflop/s

Testing m0 = 4, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 27 9 8 27 27 9 8 9
<<< (M = 8, K = 27, N = 9) : 47.451908
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 45 15 12 45 45 15 12 15
<<< (M = 12, K = 45, N = 15) : 46.948687
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4,1,1) :    47.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3352 (29.8%), 7898 (70.2%) left; Finishing by Sat Oct 21  6:25:06 2000

(14,16,9) <- (0,0,9).*(14, 14+2,1): 92.383457 Mflop/s
(14,16,15) <- (1,1,15).*(14, 14+2,1): 95.937982 Mflop/s

Testing m0 = 14, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 14  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 9 14 16 16 9 14 9
<<< (M = 14, K = 16, N = 9) : 92.383457
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 95.937982
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (14, 14,1) :    94.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3353 (29.8%), 7897 (70.2%) left; Finishing by Sat Oct 21  6:25:05 2000

(9,16,14) <- (9,0,0).*(1, 14+2,14): 100.111841 Mflop/s
(15,16,14) <- (15,1,1).*(1, 14+2,14): 100.052275 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 14 9 16 16 14 9 14
<<< (M = 9, K = 16, N = 14) : 100.111841
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 100.052275
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,14) :   100.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3354 (29.8%), 7896 (70.2%) left; Finishing by Sat Oct 21  6:25:04 2000

(8,16,8) <- (4,0,1).*(2, 14+2,8): 25.608546 Mflop/s
(14,16,8) <- (7,1,1).*(2, 14+2,8): 25.656982 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  14 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 25.608546
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 8 14 16 16 8 14 8
<<< (M = 14, K = 16, N = 8) : 25.656982
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 14,8) :    25.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3355 (29.8%), 7895 (70.2%) left; Finishing by Sat Oct 21  6:25:07 2000

(8,8,9) <- (4,1,9).*(2, 6+2,1): 138.374539 Mflop/s
(14,16,15) <- (7,2,15).*(2, 6+2,1): 182.236356 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 138.374539
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 182.236356
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 6,1) :   157.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3356 (29.8%), 7894 (70.2%) left; Finishing by Sat Oct 21  6:25:06 2000

(6,12,9) <- (1,2,9).*(6, 4+2,1): 90.105425 Mflop/s
(12,18,15) <- (2,3,15).*(6, 4+2,1): 104.308140 Mflop/s

Testing m0 = 6, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 9 6 12 12 9 6 9
<<< (M = 6, K = 12, N = 9) : 90.105425
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 104.308140
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 4,1) :    96.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3357 (29.8%), 7893 (70.2%) left; Finishing by Sat Oct 21  6:25:05 2000

(8,12,9) <- (2,2,9).*(4, 4+2,1): 132.728631 Mflop/s
(12,18,15) <- (3,3,15).*(4, 4+2,1): 131.275583 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 132.728631
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 15 12 18 18 15 12 15
<<< (M = 12, K = 18, N = 15) : 131.275583
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 4,1) :   132.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3358 (29.8%), 7892 (70.2%) left; Finishing by Sat Oct 21  6:25:07 2000

(11,17,9) <- (0,0,9).*(11, 15+2,1): 28.836930 Mflop/s
(11,17,15) <- (1,1,15).*(11, 15+2,1): 27.317390 Mflop/s

Testing m0 = 11, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 11  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 17 9 11 17 17 9 11 9
<<< (M = 11, K = 17, N = 9) : 28.836930
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 17 15 11 17 17 15 11 15
<<< (M = 11, K = 17, N = 15) : 27.317390
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (11, 15,1) :    28.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3359 (29.9%), 7891 (70.1%) left; Finishing by Sat Oct 21  6:25:06 2000

(8,13,9) <- (1,0,9).*(8, 11+2,1): 95.765983 Mflop/s
(8,13,15) <- (1,1,15).*(8, 11+2,1): 96.472767 Mflop/s

Testing m0 = 8, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 95.765983
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 15 8 13 13 15 8 15
<<< (M = 8, K = 13, N = 15) : 96.472767
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 11,1) :    96.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3360 (29.9%), 7890 (70.1%) left; Finishing by Sat Oct 21  6:25:06 2000

(8,27,5) <- (4,9,1).*(2,1+2,5): 96.701825 Mflop/s
(14,45,15) <- (7,15,3).*(2,1+2,5): 116.509002 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2 1 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 27 5 8 27 27 5 8 5
<<< (M = 8, K = 27, N = 5) : 96.701825
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 45 15 14 45 45 15 14 15
<<< (M = 14, K = 45, N = 15) : 116.509002
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2,1,5) :   105.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3361 (29.9%), 7889 (70.1%) left; Finishing by Sat Oct 21  6:25:05 2000

(11,16,9) <- (0,4,9).*(11, 2+2,1): 61.802907 Mflop/s
(11,28,15) <- (1,7,15).*(11, 2+2,1): 63.197191 Mflop/s

Testing m0 = 11, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 11  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 16 9 11 16 16 9 11 9
<<< (M = 11, K = 16, N = 9) : 61.802907
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 28 15 11 28 28 15 11 15
<<< (M = 11, K = 28, N = 15) : 63.197191
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (11, 2,1) :    62.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3362 (29.9%), 7888 (70.1%) left; Finishing by Sat Oct 21  6:25:04 2000

(9,12,9) <- (9,0,3).*(1, 10+2,3): 123.531582 Mflop/s
(15,12,15) <- (15,1,5).*(1, 10+2,3): 113.916013 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 123.531582
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 113.916013
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,3) :   118.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3363 (29.9%), 7887 (70.1%) left; Finishing by Sat Oct 21  6:25:00 2000

(11,10,9) <- (0,1,9).*(11, 8+2,1): 26.715074 Mflop/s
(11,10,15) <- (1,1,15).*(11, 8+2,1): 25.282026 Mflop/s

Testing m0 = 11, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 11  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 10 9 11 10 10 9 11 9
<<< (M = 11, K = 10, N = 9) : 26.715074
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 10 15 11 10 10 15 11 15
<<< (M = 11, K = 10, N = 15) : 25.282026
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (11, 8,1) :    26.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3364 (29.9%), 7886 (70.1%) left; Finishing by Sat Oct 21  6:24:59 2000

(9,15,8) <- (9,0,4).*(1, 13+2,2): 151.078019 Mflop/s
(15,15,14) <- (15,1,7).*(1, 13+2,2): 151.544067 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 151.078019
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 151.544067
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,2) :   151.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3365 (29.9%), 7885 (70.1%) left; Finishing by Sat Oct 21  6:24:58 2000

(5,11,9) <- (1,1,3).*(5, 9+2,3): 24.514428 Mflop/s
(15,11,15) <- (3,1,5).*(5, 9+2,3): 25.214827 Mflop/s

Testing m0 = 5, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 11 9 5 11 11 9 5 9
<<< (M = 5, K = 11, N = 9) : 24.514428
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 25.214827
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 9,3) :    24.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3366 (29.9%), 7884 (70.1%) left; Finishing by Sat Oct 21  6:24:57 2000

(9,27,8) <- (9,9,4).*(1,1+2,2): 82.827248 Mflop/s
(15,45,14) <- (15,15,7).*(1,1+2,2): 83.856845 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 8 9 27 27 8 9 8
<<< (M = 9, K = 27, N = 8) : 82.827248
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 14 15 45 45 14 15 14
<<< (M = 15, K = 45, N = 14) : 83.856845
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,2) :    83.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3367 (29.9%), 7883 (70.1%) left; Finishing by Sat Oct 21  6:24:56 2000

(8,27,9) <- (4,9,3).*(2,1+2,3): 103.338696 Mflop/s
(14,45,15) <- (7,15,5).*(2,1+2,3): 105.838759 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 27 9 8 27 27 9 8 9
<<< (M = 8, K = 27, N = 9) : 103.338696
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 45 15 14 45 45 15 14 15
<<< (M = 14, K = 45, N = 15) : 105.838759
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2,1,3) :   104.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3368 (29.9%), 7882 (70.1%) left; Finishing by Sat Oct 21  6:24:52 2000

(8,16,8) <- (4,4,2).*(2, 2+2,4): 29.275323 Mflop/s
(14,28,12) <- (7,7,3).*(2, 2+2,4): 27.328544 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 29.275323
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 28 12 14 28 28 12 14 12
<<< (M = 14, K = 28, N = 12) : 27.328544
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 2,4) :    28.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3369 (29.9%), 7881 (70.1%) left; Finishing by Sat Oct 21  6:24:51 2000

(5,17,9) <- (1,0,9).*(5, 15+2,1): 55.003111 Mflop/s
(15,17,15) <- (3,1,15).*(5, 15+2,1): 67.246007 Mflop/s

Testing m0 = 5, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 17 9 5 17 17 9 5 9
<<< (M = 5, K = 17, N = 9) : 55.003111
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 15 15 17 17 15 15 15
<<< (M = 15, K = 17, N = 15) : 67.246007
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 15,1) :    60.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3370 (30.0%), 7880 (70.0%) left; Finishing by Sat Oct 21  6:24:50 2000

(9,16,9) <- (9,4,9).*(1, 2+2,1): 101.866272 Mflop/s
(15,28,15) <- (15,7,15).*(1, 2+2,1): 119.075601 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 101.866272
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 15 15 28 28 15 15 15
<<< (M = 15, K = 28, N = 15) : 119.075601
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,1) :   109.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3371 (30.0%), 7879 (70.0%) left; Finishing by Sat Oct 21  6:24:46 2000

(9,9,14) <- (9,1,0).*(1, 7+2,14): 93.855213 Mflop/s
(15,18,14) <- (15,2,1).*(1, 7+2,14): 112.753299 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 14 9 9 9 14 9 14
<<< (M = 9, K = 9, N = 14) : 93.855213
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 112.753299
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,14) :   102.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3372 (30.0%), 7878 (70.0%) left; Finishing by Sat Oct 21  6:24:45 2000

(9,14,16) <- (9,0,0).*(1, 12+2,16): 99.140878 Mflop/s
(15,14,16) <- (15,1,0).*(1, 12+2,16): 99.293200 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 16 9 14 14 16 9 16
<<< (M = 9, K = 14, N = 16) : 99.140878
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 16 15 14 14 16 15 16
<<< (M = 15, K = 14, N = 16) : 99.293200
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,16) :    99.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3373 (30.0%), 7877 (70.0%) left; Finishing by Sat Oct 21  6:24:48 2000

(12,8,9) <- (0,1,9).*(12, 6+2,1): 27.430234 Mflop/s
(12,16,15) <- (1,2,15).*(12, 6+2,1): 32.661722 Mflop/s

Testing m0 = 12, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 12  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 8 9 12 8 8 9 12 9
<<< (M = 12, K = 8, N = 9) : 27.430234
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 32.661722
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (12, 6,1) :    29.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3374 (30.0%), 7876 (70.0%) left; Finishing by Sat Oct 21  6:24:47 2000

(6,16,9) <- (1,0,9).*(6, 14+2,1): 101.036198 Mflop/s
(12,16,15) <- (2,1,15).*(6, 14+2,1): 113.889172 Mflop/s

Testing m0 = 6, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 16 9 6 16 16 9 6 9
<<< (M = 6, K = 16, N = 9) : 101.036198
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 113.889172
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 14,1) :   107.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3375 (30.0%), 7875 (70.0%) left; Finishing by Sat Oct 21  6:24:46 2000

(8,12,8) <- (4,2,2).*(2, 4+2,4): 34.509274 Mflop/s
(14,18,12) <- (7,3,3).*(2, 4+2,4): 26.691703 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 34.509274
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 12 14 18 18 12 14 12
<<< (M = 14, K = 18, N = 12) : 26.691703
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 4,4) :    30.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3376 (30.0%), 7874 (70.0%) left; Finishing by Sat Oct 21  6:24:42 2000

(8,16,8) <- (4,4,1).*(2, 2+2,8): 25.568715 Mflop/s
(14,28,8) <- (7,7,1).*(2, 2+2,8): 26.175478 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  2 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 25.568715
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 28 8 14 28 28 8 14 8
<<< (M = 14, K = 28, N = 8) : 26.175478
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 2,8) :    25.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3377 (30.0%), 7873 (70.0%) left; Finishing by Sat Oct 21  6:24:41 2000

(8,17,8) <- (4,0,2).*(2, 15+2,4): 30.241154 Mflop/s
(14,17,12) <- (7,1,3).*(2, 15+2,4): 27.068877 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  15 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 8 8 17 17 8 8 8
<<< (M = 8, K = 17, N = 8) : 30.241154
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 17 12 14 17 17 12 14 12
<<< (M = 14, K = 17, N = 12) : 27.068877
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 15,4) :    28.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3378 (30.0%), 7872 (70.0%) left; Finishing by Sat Oct 21  6:24:40 2000

(9,10,8) <- (9,1,4).*(1, 8+2,2): 136.133426 Mflop/s
(15,10,14) <- (15,1,7).*(1, 8+2,2): 136.769523 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 136.133426
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 136.769523
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,2) :   136.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3379 (30.0%), 7871 (70.0%) left; Finishing by Sat Oct 21  6:24:42 2000

(9,13,13) <- (9,0,0).*(1, 11+2,13): 84.594055 Mflop/s
(15,13,13) <- (15,1,1).*(1, 11+2,13): 98.790645 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 13 9 13 13 13 9 13
<<< (M = 9, K = 13, N = 13) : 84.594055
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 13 15 13 13 13 15 13
<<< (M = 15, K = 13, N = 13) : 98.790645
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,13) :    91.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3380 (30.0%), 7870 (70.0%) left; Finishing by Sat Oct 21  6:24:42 2000

(6,12,8) <- (1,2,4).*(6, 4+2,2): 121.213331 Mflop/s
(12,18,14) <- (2,3,7).*(6, 4+2,2): 108.494016 Mflop/s

Testing m0 = 6, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 12 8 6 12 12 8 6 8
<<< (M = 6, K = 12, N = 8) : 121.213331
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 14 12 18 18 14 12 14
<<< (M = 12, K = 18, N = 14) : 108.494016
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 4,2) :   114.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3381 (30.1%), 7869 (69.9%) left; Finishing by Sat Oct 21  6:24:41 2000

(9,15,12) <- (9,3,0).*(1, 3+2,12): 103.070891 Mflop/s
(15,25,12) <- (15,5,1).*(1, 3+2,12): 107.245489 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 12 9 15 15 12 9 12
<<< (M = 9, K = 15, N = 12) : 103.070891
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 12 15 25 25 12 15 12
<<< (M = 15, K = 25, N = 12) : 107.245489
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,12) :   105.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3382 (30.1%), 7868 (69.9%) left; Finishing by Sat Oct 21  6:24:36 2000

(8,13,9) <- (4,0,9).*(2, 11+2,1): 162.869157 Mflop/s
(14,13,15) <- (7,1,15).*(2, 11+2,1): 166.859767 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 162.869157
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 166.859767
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 11,1) :   164.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3383 (30.1%), 7867 (69.9%) left; Finishing by Sat Oct 21  6:24:36 2000

(12,27,9) <- (0,9,9).*(12,1+2,1): 22.308644 Mflop/s
(12,45,15) <- (1,15,15).*(12,1+2,1): 22.569738 Mflop/s

Testing m0 = 12, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 12 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 27 9 12 27 27 9 12 9
<<< (M = 12, K = 27, N = 9) : 22.308644
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 45 15 12 45 45 15 12 15
<<< (M = 12, K = 45, N = 15) : 22.569738
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (12,1,1) :    22.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3384 (30.1%), 7866 (69.9%) left; Finishing by Sat Oct 21  6:24:35 2000

(8,15,9) <- (4,3,9).*(2, 3+2,1): 155.287431 Mflop/s
(14,25,15) <- (7,5,15).*(2, 3+2,1): 157.419782 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 155.287431
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 25 15 14 25 25 15 14 15
<<< (M = 14, K = 25, N = 15) : 157.419782
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 3,1) :   156.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3385 (30.1%), 7865 (69.9%) left; Finishing by Sat Oct 21  6:24:37 2000

(11,8,9) <- (0,1,9).*(11, 6+2,1): 92.152968 Mflop/s
(11,16,15) <- (1,2,15).*(11, 6+2,1): 121.290157 Mflop/s

Testing m0 = 11, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 11  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 8 9 11 8 8 9 11 9
<<< (M = 11, K = 8, N = 9) : 92.152968
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 16 15 11 16 16 15 11 15
<<< (M = 11, K = 16, N = 15) : 121.290157
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (11, 6,1) :   104.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3386 (30.1%), 7864 (69.9%) left; Finishing by Sat Oct 21  6:24:33 2000

(15,27,9) <- (0,9,9).*(15,1+2,1): 41.670452 Mflop/s
(15,45,15) <- (1,15,15).*(15,1+2,1): 41.335422 Mflop/s

Testing m0 = 15, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 15 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 27 9 15 27 27 9 15 9
<<< (M = 15, K = 27, N = 9) : 41.670452
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 15 15 45 45 15 15 15
<<< (M = 15, K = 45, N = 15) : 41.335422
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (15,1,1) :    41.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3387 (30.1%), 7863 (69.9%) left; Finishing by Sat Oct 21  6:24:36 2000

(6,8,9) <- (1,1,9).*(6, 6+2,1): 79.706366 Mflop/s
(12,16,15) <- (2,2,15).*(6, 6+2,1): 121.177137 Mflop/s

Testing m0 = 6, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 9 6 8 8 9 6 9
<<< (M = 6, K = 8, N = 9) : 79.706366
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 121.177137
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 6,1) :    96.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3388 (30.1%), 7862 (69.9%) left; Finishing by Sat Oct 21  6:24:31 2000

(9,27,9) <- (1,9,9).*(9,1+2,1): 48.776019 Mflop/s
(9,45,15) <- (1,15,15).*(9,1+2,1): 49.840682 Mflop/s

Testing m0 = 9, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 9 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 9 9 27 27 9 9 9
<<< (M = 9, K = 27, N = 9) : 48.776019
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 45 15 9 45 45 15 9 15
<<< (M = 9, K = 45, N = 15) : 49.840682
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (9,1,1) :    49.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3389 (30.1%), 7861 (69.9%) left; Finishing by Sat Oct 21  6:24:30 2000

(9,12,13) <- (9,2,0).*(1, 4+2,13): 101.187101 Mflop/s
(15,18,13) <- (15,3,1).*(1, 4+2,13): 100.608047 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 13 9 12 12 13 9 13
<<< (M = 9, K = 12, N = 13) : 101.187101
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 13 15 18 18 13 15 13
<<< (M = 15, K = 18, N = 13) : 100.608047
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,13) :   100.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3390 (30.1%), 7860 (69.9%) left; Finishing by Sat Oct 21  6:24:30 2000

(9,11,9) <- (3,1,3).*(3, 9+2,3): 114.386077 Mflop/s
(15,11,15) <- (5,1,5).*(3, 9+2,3): 116.061028 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 114.386077
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 116.061028
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 9,3) :   115.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3391 (30.1%), 7859 (69.9%) left; Finishing by Sat Oct 21  6:24:29 2000

(14,27,9) <- (0,9,9).*(14,1+2,1): 20.666078 Mflop/s
(14,45,15) <- (1,15,15).*(14,1+2,1): 21.082910 Mflop/s

Testing m0 = 14, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 14 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 27 9 14 27 27 9 14 9
<<< (M = 14, K = 27, N = 9) : 20.666078
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 45 15 14 45 45 15 14 15
<<< (M = 14, K = 45, N = 15) : 21.082910
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (14,1,1) :    20.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3392 (30.2%), 7858 (69.8%) left; Finishing by Sat Oct 21  6:24:28 2000

(7,15,8) <- (1,0,4).*(7, 13+2,2): 22.368566 Mflop/s
(14,15,14) <- (2,1,7).*(7, 13+2,2): 25.132329 Mflop/s

Testing m0 = 7, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 15 8 7 15 15 8 7 8
<<< (M = 7, K = 15, N = 8) : 22.368566
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 25.132329
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 13,2) :    23.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3393 (30.2%), 7857 (69.8%) left; Finishing by Sat Oct 21  6:24:30 2000

(8,16,8) <- (4,4,4).*(2, 2+2,2): 41.603198 Mflop/s
(14,28,14) <- (7,7,7).*(2, 2+2,2): 36.624138 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 41.603198
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 28 14 14 28 28 14 14 14
<<< (M = 14, K = 28, N = 14) : 36.624138
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 2,2) :    39.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3394 (30.2%), 7856 (69.8%) left; Finishing by Sat Oct 21  6:24:26 2000

(9,12,14) <- (9,2,0).*(1, 4+2,14): 114.521233 Mflop/s
(15,18,14) <- (15,3,1).*(1, 4+2,14): 99.700873 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 14 9 12 12 14 9 14
<<< (M = 9, K = 12, N = 14) : 114.521233
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 99.700873
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,14) :   106.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3395 (30.2%), 7855 (69.8%) left; Finishing by Sat Oct 21  6:24:25 2000

(9,9,9) <- (9,1,1).*(1, 7+2,9): 76.640456 Mflop/s
(15,18,9) <- (15,2,1).*(1, 7+2,9): 91.389414 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 76.640456
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 9 15 18 18 9 15 9
<<< (M = 15, K = 18, N = 9) : 91.389414
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,9) :    83.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3396 (30.2%), 7854 (69.8%) left; Finishing by Sat Oct 21  6:24:25 2000

(14,11,9) <- (0,1,9).*(14, 9+2,1): 25.041086 Mflop/s
(14,11,15) <- (1,1,15).*(14, 9+2,1): 28.005109 Mflop/s

Testing m0 = 14, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 14  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 9 14 11 11 9 14 9
<<< (M = 14, K = 11, N = 9) : 25.041086
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 28.005109
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (14, 9,1) :    26.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3397 (30.2%), 7853 (69.8%) left; Finishing by Sat Oct 21  6:24:24 2000

(13,16,9) <- (0,4,9).*(13, 2+2,1): 64.214761 Mflop/s
(13,28,15) <- (1,7,15).*(13, 2+2,1): 62.552400 Mflop/s

Testing m0 = 13, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 13  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 16 9 13 16 16 9 13 9
<<< (M = 13, K = 16, N = 9) : 64.214761
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 28 15 13 28 28 15 13 15
<<< (M = 13, K = 28, N = 15) : 62.552400
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (13, 2,1) :    63.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3398 (30.2%), 7852 (69.8%) left; Finishing by Sat Oct 21  6:24:23 2000

(16,16,9) <- (0,0,9).*(16, 14+2,1): 27.634656 Mflop/s
(16,16,15) <- (0,1,15).*(16, 14+2,1): 27.688594 Mflop/s

Testing m0 = 16, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 16  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 16 9 16 16 16 9 16 9
<<< (M = 16, K = 16, N = 9) : 27.634656
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 16 15 16 16 16 15 16 15
<<< (M = 16, K = 16, N = 15) : 27.688594
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (16, 14,1) :    27.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3399 (30.2%), 7851 (69.8%) left; Finishing by Sat Oct 21  6:24:25 2000

(8,16,9) <- (2,0,9).*(4, 14+2,1): 134.437422 Mflop/s
(12,16,15) <- (3,1,15).*(4, 14+2,1): 134.630309 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 134.437422
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 134.630309
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 14,1) :   134.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3400 (30.2%), 7850 (69.8%) left; Finishing by Sat Oct 21  6:24:21 2000

(9,10,14) <- (9,1,0).*(1, 8+2,14): 95.291538 Mflop/s
(15,10,14) <- (15,1,1).*(1, 8+2,14): 95.686683 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 14 9 10 10 14 9 14
<<< (M = 9, K = 10, N = 14) : 95.291538
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 95.686683
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,14) :    95.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3401 (30.2%), 7849 (69.8%) left; Finishing by Sat Oct 21  6:24:20 2000

(9,16,8) <- (3,4,4).*(3, 2+2,2): 114.527693 Mflop/s
(15,28,14) <- (5,7,7).*(3, 2+2,2): 122.792248 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 114.527693
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 14 15 28 28 14 15 14
<<< (M = 15, K = 28, N = 14) : 122.792248
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 2,2) :   118.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3402 (30.2%), 7848 (69.8%) left; Finishing by Sat Oct 21  6:24:19 2000

(9,15,9) <- (9,3,3).*(1, 3+2,3): 90.606192 Mflop/s
(15,25,15) <- (15,5,5).*(1, 3+2,3): 58.224260 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 90.606192
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 15 15 25 25 15 15 15
<<< (M = 15, K = 25, N = 15) : 58.224260
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,3) :    70.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3403 (30.2%), 7847 (69.8%) left; Finishing by Sat Oct 21  6:24:19 2000

(9,11,9) <- (9,1,9).*(1, 9+2,1): 122.451828 Mflop/s
(15,11,15) <- (15,1,15).*(1, 9+2,1): 129.817548 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 122.451828
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 129.817548
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,1) :   126.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3404 (30.3%), 7846 (69.7%) left; Finishing by Sat Oct 21  6:24:14 2000

(7,17,9) <- (1,0,9).*(7, 15+2,1): 31.257638 Mflop/s
(14,17,15) <- (2,1,15).*(7, 15+2,1): 33.277463 Mflop/s

Testing m0 = 7, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 17 9 7 17 17 9 7 9
<<< (M = 7, K = 17, N = 9) : 31.257638
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 17 15 14 17 17 15 14 15
<<< (M = 14, K = 17, N = 15) : 33.277463
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 15,1) :    32.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3405 (30.3%), 7845 (69.7%) left; Finishing by Sat Oct 21  6:24:14 2000

(9,15,9) <- (9,0,9).*(1, 13+2,1): 132.165062 Mflop/s
(15,15,15) <- (15,1,15).*(1, 13+2,1): 135.234435 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 132.165062
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 135.234435
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,1) :   133.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3406 (30.3%), 7844 (69.7%) left; Finishing by Sat Oct 21  6:24:13 2000

(8,12,8) <- (4,0,1).*(2, 10+2,8): 25.116835 Mflop/s
(14,12,8) <- (7,1,1).*(2, 10+2,8): 25.152118 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  10 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 25.116835
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 8 14 12 12 8 14 8
<<< (M = 14, K = 12, N = 8) : 25.152118
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 10,8) :    25.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3407 (30.3%), 7843 (69.7%) left; Finishing by Sat Oct 21  6:24:12 2000

(9,15,8) <- (3,0,4).*(3, 13+2,2): 117.923527 Mflop/s
(15,15,14) <- (5,1,7).*(3, 13+2,2): 118.386411 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 117.923527
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 118.386411
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 13,2) :   118.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3408 (30.3%), 7842 (69.7%) left; Finishing by Sat Oct 21  6:24:08 2000

(9,13,8) <- (9,0,4).*(1, 11+2,2): 146.721446 Mflop/s
(15,13,14) <- (15,1,7).*(1, 11+2,2): 147.113019 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 146.721446
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 147.113019
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,2) :   146.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 4,1) :   180.5 MFLOPS.
Done 3409 (30.3%), 7841 (69.7%) left; Finishing by Sat Oct 21  6:24:10 2000

(8,17,9) <- (4,0,9).*(2, 15+2,1): 182.515491 Mflop/s
(14,17,15) <- (7,1,15).*(2, 15+2,1): 187.250098 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 9 8 17 17 9 8 9
<<< (M = 8, K = 17, N = 9) : 182.515491
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 17 15 14 17 17 15 14 15
<<< (M = 14, K = 17, N = 15) : 187.250098
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 15,1) :   184.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3410 (30.3%), 7840 (69.7%) left; Finishing by Sat Oct 21  6:24:09 2000

(9,16,9) <- (3,4,9).*(3, 2+2,1): 125.047471 Mflop/s
(15,28,15) <- (5,7,15).*(3, 2+2,1): 137.021367 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 125.047471
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 15 15 28 28 15 15 15
<<< (M = 15, K = 28, N = 15) : 137.021367
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 2,1) :   130.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3411 (30.3%), 7839 (69.7%) left; Finishing by Sat Oct 21  6:24:05 2000

(16,9,9) <- (0,1,9).*(16, 7+2,1): 25.808246 Mflop/s
(16,18,15) <- (0,2,15).*(16, 7+2,1): 31.089840 Mflop/s

Testing m0 = 16, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 16  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 9 9 16 9 9 9 16 9
<<< (M = 16, K = 9, N = 9) : 25.808246
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 18 15 16 18 18 15 16 15
<<< (M = 16, K = 18, N = 15) : 31.089840
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (16, 7,1) :    28.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3412 (30.3%), 7838 (69.7%) left; Finishing by Sat Oct 21  6:24:08 2000

(9,13,15) <- (9,0,0).*(1, 11+2,15): 96.844161 Mflop/s
(15,13,15) <- (15,1,1).*(1, 11+2,15): 88.395917 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 15 9 13 13 15 9 15
<<< (M = 9, K = 13, N = 15) : 96.844161
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 88.395917
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,15) :    92.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3413 (30.3%), 7837 (69.7%) left; Finishing by Sat Oct 21  6:24:07 2000

(8,16,7) <- (4,0,1).*(2, 14+2,7): 25.889670 Mflop/s
(14,16,14) <- (7,1,2).*(2, 14+2,7): 23.381193 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  14 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 7 8 16 16 7 8 7
<<< (M = 8, K = 16, N = 7) : 25.889670
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 23.381193
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 14,7) :    24.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3414 (30.3%), 7836 (69.7%) left; Finishing by Sat Oct 21  6:24:06 2000

(8,27,7) <- (4,9,1).*(2,1+2,7): 116.157353 Mflop/s
(14,45,14) <- (7,15,2).*(2,1+2,7): 118.732979 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2 1 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 27 7 8 27 27 7 8 7
<<< (M = 8, K = 27, N = 7) : 116.157353
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 45 14 14 45 45 14 14 14
<<< (M = 14, K = 45, N = 14) : 118.732979
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2,1,7) :   117.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3415 (30.4%), 7835 (69.6%) left; Finishing by Sat Oct 21  6:24:05 2000

(9,7,8) <- (3,1,4).*(3, 5+2,2): 104.248122 Mflop/s
(15,21,14) <- (5,3,7).*(3, 5+2,2): 151.644461 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 104.248122
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 14 15 21 21 14 15 14
<<< (M = 15, K = 21, N = 14) : 151.644461
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 5,2) :   123.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3416 (30.4%), 7834 (69.6%) left; Finishing by Sat Oct 21  6:24:04 2000

(9,9,8) <- (9,1,1).*(1, 7+2,8): 100.277243 Mflop/s
(15,18,8) <- (15,2,1).*(1, 7+2,8): 122.715230 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 100.277243
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 8 15 18 18 8 15 8
<<< (M = 15, K = 18, N = 8) : 122.715230
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,8) :   110.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3417 (30.4%), 7833 (69.6%) left; Finishing by Sat Oct 21  6:24:07 2000

(9,8,8) <- (9,1,2).*(1, 6+2,4): 97.691602 Mflop/s
(15,16,12) <- (15,2,3).*(1, 6+2,4): 124.010373 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 97.691602
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 124.010373
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,4) :   109.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3418 (30.4%), 7832 (69.6%) left; Finishing by Sat Oct 21  6:24:06 2000

(9,13,5) <- (9,0,1).*(1, 11+2,5): 65.147787 Mflop/s
(15,13,15) <- (15,1,3).*(1, 11+2,5): 114.089960 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 5 9 13 13 5 9 5
<<< (M = 9, K = 13, N = 5) : 65.147787
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 114.089960
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,5) :    82.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3419 (30.4%), 7831 (69.6%) left; Finishing by Sat Oct 21  6:24:08 2000

(9,12,10) <- (9,0,0).*(1, 10+2,10): 96.570657 Mflop/s
(15,12,10) <- (15,1,1).*(1, 10+2,10): 96.966732 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 10 9 12 12 10 9 10
<<< (M = 9, K = 12, N = 10) : 96.570657
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 10 15 12 12 10 15 10
<<< (M = 15, K = 12, N = 10) : 96.966732
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,10) :    96.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3420 (30.4%), 7830 (69.6%) left; Finishing by Sat Oct 21  6:24:08 2000

(9,17,15) <- (9,0,0).*(1, 15+2,15): 98.942067 Mflop/s
(15,17,15) <- (15,1,1).*(1, 15+2,15): 90.234614 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 15 9 17 17 15 9 15
<<< (M = 9, K = 17, N = 15) : 98.942067
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 15 15 17 17 15 15 15
<<< (M = 15, K = 17, N = 15) : 90.234614
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,15) :    94.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3421 (30.4%), 7829 (69.6%) left; Finishing by Sat Oct 21  6:24:07 2000

(8,15,8) <- (4,3,1).*(2, 3+2,8): 27.032718 Mflop/s
(14,25,8) <- (7,5,1).*(2, 3+2,8): 28.469053 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  3 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 27.032718
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 25 8 14 25 25 8 14 8
<<< (M = 14, K = 25, N = 8) : 28.469053
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 3,8) :    27.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3422 (30.4%), 7828 (69.6%) left; Finishing by Sat Oct 21  6:24:06 2000

(9,12,11) <- (9,0,0).*(1, 10+2,11): 96.847722 Mflop/s
(15,12,11) <- (15,1,1).*(1, 10+2,11): 81.166623 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 11 9 12 12 11 9 11
<<< (M = 9, K = 12, N = 11) : 96.847722
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 11 15 12 12 11 15 11
<<< (M = 15, K = 12, N = 11) : 81.166623
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,11) :    88.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3423 (30.4%), 7827 (69.6%) left; Finishing by Sat Oct 21  6:24:08 2000

(9,7,9) <- (3,1,3).*(3, 5+2,3): 104.442527 Mflop/s
(15,21,15) <- (5,3,5).*(3, 5+2,3): 148.859078 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 104.442527
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 148.859078
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 5,3) :   122.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3424 (30.4%), 7826 (69.6%) left; Finishing by Sat Oct 21  6:24:07 2000

(15,11,9) <- (0,1,9).*(15, 9+2,1): 101.913082 Mflop/s
(15,11,15) <- (1,1,15).*(15, 9+2,1): 102.725026 Mflop/s

Testing m0 = 15, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 15  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 9 15 11 11 9 15 9
<<< (M = 15, K = 11, N = 9) : 101.913082
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 102.725026
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (15, 9,1) :   102.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3425 (30.4%), 7825 (69.6%) left; Finishing by Sat Oct 21  6:24:07 2000

(14,13,9) <- (0,0,9).*(14, 11+2,1): 25.874711 Mflop/s
(14,13,15) <- (1,1,15).*(14, 11+2,1): 28.152188 Mflop/s

Testing m0 = 14, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 14  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 9 14 13 13 9 14 9
<<< (M = 14, K = 13, N = 9) : 25.874711
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 15 14 13 13 15 14 15
<<< (M = 14, K = 13, N = 15) : 28.152188
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (14, 11,1) :    27.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3426 (30.5%), 7824 (69.5%) left; Finishing by Sat Oct 21  6:24:06 2000

(9,17,6) <- (9,0,1).*(1, 15+2,6): 120.740036 Mflop/s
(15,17,12) <- (15,1,2).*(1, 15+2,6): 124.053918 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 6 9 17 17 6 9 6
<<< (M = 9, K = 17, N = 6) : 120.740036
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 12 15 17 17 12 15 12
<<< (M = 15, K = 17, N = 12) : 124.053918
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,6) :   122.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3427 (30.5%), 7823 (69.5%) left; Finishing by Sat Oct 21  6:24:05 2000

(9,15,8) <- (3,3,4).*(3, 3+2,2): 122.360644 Mflop/s
(15,25,14) <- (5,5,7).*(3, 3+2,2): 128.899077 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 122.360644
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 14 15 25 25 14 15 14
<<< (M = 15, K = 25, N = 14) : 128.899077
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 3,2) :   125.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3428 (30.5%), 7822 (69.5%) left; Finishing by Sat Oct 21  6:24:04 2000

(11,15,9) <- (0,0,9).*(11, 13+2,1): 28.352828 Mflop/s
(11,15,15) <- (1,1,15).*(11, 13+2,1): 26.847932 Mflop/s

Testing m0 = 11, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 11  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 9 11 15 15 9 11 9
<<< (M = 11, K = 15, N = 9) : 28.352828
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 15 11 15 15 15 11 15
<<< (M = 11, K = 15, N = 15) : 26.847932
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (11, 13,1) :    27.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3429 (30.5%), 7821 (69.5%) left; Finishing by Sat Oct 21  6:24:03 2000

(5,11,9) <- (1,1,9).*(5, 9+2,1): 50.378505 Mflop/s
(15,11,15) <- (3,1,15).*(5, 9+2,1): 60.121179 Mflop/s

Testing m0 = 5, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 11 9 5 11 11 9 5 9
<<< (M = 5, K = 11, N = 9) : 50.378505
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 60.121179
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 9,1) :    54.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3430 (30.5%), 7820 (69.5%) left; Finishing by Sat Oct 21  6:23:59 2000

(6,14,8) <- (1,0,4).*(6, 12+2,2): 104.803919 Mflop/s
(12,14,14) <- (2,1,7).*(6, 12+2,2): 106.241451 Mflop/s

Testing m0 = 6, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 14 8 6 14 14 8 6 8
<<< (M = 6, K = 14, N = 8) : 104.803919
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 106.241451
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 12,2) :   105.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3431 (30.5%), 7819 (69.5%) left; Finishing by Sat Oct 21  6:24:05 2000

(5,14,8) <- (1,0,4).*(5, 12+2,2): 25.862573 Mflop/s
(15,14,14) <- (3,1,7).*(5, 12+2,2): 27.341835 Mflop/s

Testing m0 = 5, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 14 8 5 14 14 8 5 8
<<< (M = 5, K = 14, N = 8) : 25.862573
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 27.341835
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 12,2) :    26.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3432 (30.5%), 7818 (69.5%) left; Finishing by Sat Oct 21  6:24:04 2000

(9,12,15) <- (9,0,0).*(1, 10+2,15): 96.321411 Mflop/s
(15,12,15) <- (15,1,1).*(1, 10+2,15): 88.581734 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 96.321411
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 88.581734
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,15) :    92.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3433 (30.5%), 7817 (69.5%) left; Finishing by Sat Oct 21  6:24:03 2000

(8,9,6) <- (4,1,1).*(2, 7+2,6): 24.237929 Mflop/s
(14,18,12) <- (7,2,2).*(2, 7+2,6): 27.344090 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  7 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 6 8 9 9 6 8 6
<<< (M = 8, K = 9, N = 6) : 24.237929
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 12 14 18 18 12 14 12
<<< (M = 14, K = 18, N = 12) : 27.344090
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 7,6) :    25.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3434 (30.5%), 7816 (69.5%) left; Finishing by Sat Oct 21  6:24:02 2000

(9,10,9) <- (1,1,9).*(9, 8+2,1): 31.591028 Mflop/s
(9,10,15) <- (1,1,15).*(9, 8+2,1): 31.761993 Mflop/s

Testing m0 = 9, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 9  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 31.591028
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 15 9 10 10 15 9 15
<<< (M = 9, K = 10, N = 15) : 31.761993
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (9, 8,1) :    31.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3435 (30.5%), 7815 (69.5%) left; Finishing by Sat Oct 21  6:24:01 2000

(9,12,8) <- (9,2,2).*(1, 4+2,4): 117.294002 Mflop/s
(15,18,12) <- (15,3,3).*(1, 4+2,4): 102.534513 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 117.294002
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 102.534513
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,4) :   109.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3436 (30.5%), 7814 (69.5%) left; Finishing by Sat Oct 21  6:24:01 2000

(9,27,8) <- (9,9,1).*(1,1+2,8): 111.054252 Mflop/s
(15,45,8) <- (15,15,1).*(1,1+2,8): 114.151852 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 8 9 27 27 8 9 8
<<< (M = 9, K = 27, N = 8) : 111.054252
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 8 15 45 45 8 15 8
<<< (M = 15, K = 45, N = 8) : 114.151852
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,8) :   112.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3437 (30.6%), 7813 (69.4%) left; Finishing by Sat Oct 21  6:24:00 2000

(9,27,9) <- (3,9,9).*(3,1+2,1): 46.730024 Mflop/s
(15,45,15) <- (5,15,15).*(3,1+2,1): 79.325432 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 9 9 27 27 9 9 9
<<< (M = 9, K = 27, N = 9) : 46.730024
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 15 15 45 45 15 15 15
<<< (M = 15, K = 45, N = 15) : 79.325432
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3,1,1) :    58.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3438 (30.6%), 7812 (69.4%) left; Finishing by Sat Oct 21  6:23:59 2000

(9,16,8) <- (9,4,1).*(1, 2+2,8): 106.454013 Mflop/s
(15,28,8) <- (15,7,1).*(1, 2+2,8): 111.663067 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 106.454013
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 8 15 28 28 8 15 8
<<< (M = 15, K = 28, N = 8) : 111.663067
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,8) :   109.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3439 (30.6%), 7811 (69.4%) left; Finishing by Sat Oct 21  6:23:58 2000

(9,11,7) <- (9,1,1).*(1, 9+2,7): 109.412445 Mflop/s
(15,11,14) <- (15,1,2).*(1, 9+2,7): 69.917362 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 7 9 11 11 7 9 7
<<< (M = 9, K = 11, N = 7) : 109.412445
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 69.917362
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,7) :    85.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3440 (30.6%), 7810 (69.4%) left; Finishing by Sat Oct 21  6:24:01 2000

(9,11,15) <- (9,1,0).*(1, 9+2,15): 95.556653 Mflop/s
(15,11,15) <- (15,1,1).*(1, 9+2,15): 86.903744 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 15 9 11 11 15 9 15
<<< (M = 9, K = 11, N = 15) : 95.556653
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 86.903744
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,15) :    91.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3441 (30.6%), 7809 (69.4%) left; Finishing by Sat Oct 21  6:24:00 2000

(8,12,8) <- (4,2,4).*(2, 4+2,2): 49.300106 Mflop/s
(14,18,14) <- (7,3,7).*(2, 4+2,2): 36.408503 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 49.300106
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 14 14 18 18 14 14 14
<<< (M = 14, K = 18, N = 14) : 36.408503
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 4,2) :    41.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3442 (30.6%), 7808 (69.4%) left; Finishing by Sat Oct 21  6:23:59 2000

(5,15,9) <- (1,3,9).*(5, 3+2,1): 52.306814 Mflop/s
(15,25,15) <- (3,5,15).*(5, 3+2,1): 61.355399 Mflop/s

Testing m0 = 5, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 9 5 15 15 9 5 9
<<< (M = 5, K = 15, N = 9) : 52.306814
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 15 15 25 25 15 15 15
<<< (M = 15, K = 25, N = 15) : 61.355399
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 3,1) :    56.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3443 (30.6%), 7807 (69.4%) left; Finishing by Sat Oct 21  6:23:58 2000

(9,16,14) <- (9,4,0).*(1, 2+2,14): 98.949099 Mflop/s
(15,28,14) <- (15,7,1).*(1, 2+2,14): 101.492544 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 14 9 16 16 14 9 14
<<< (M = 9, K = 16, N = 14) : 98.949099
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 14 15 28 28 14 15 14
<<< (M = 15, K = 28, N = 14) : 101.492544
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,14) :   100.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3444 (30.6%), 7806 (69.4%) left; Finishing by Sat Oct 21  6:23:54 2000

(8,16,8) <- (1,4,4).*(8, 2+2,2): 24.389746 Mflop/s
(8,28,14) <- (1,7,7).*(8, 2+2,2): 24.954061 Mflop/s

Testing m0 = 8, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 24.389746
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 28 14 8 28 28 14 8 14
<<< (M = 8, K = 28, N = 14) : 24.954061
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 2,2) :    24.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3445 (30.6%), 7805 (69.4%) left; Finishing by Sat Oct 21  6:23:53 2000

(8,12,9) <- (1,0,9).*(8, 10+2,1): 93.508226 Mflop/s
(8,12,15) <- (1,1,15).*(8, 10+2,1): 94.074584 Mflop/s

Testing m0 = 8, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 93.508226
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 15 8 12 12 15 8 15
<<< (M = 8, K = 12, N = 15) : 94.074584
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 10,1) :    93.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3446 (30.6%), 7804 (69.4%) left; Finishing by Sat Oct 21  6:23:52 2000

(8,10,9) <- (2,1,9).*(4, 8+2,1): 112.759626 Mflop/s
(12,10,15) <- (3,1,15).*(4, 8+2,1): 115.195899 Mflop/s

Testing m0 = 4, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 9 8 10 10 9 8 9
<<< (M = 8, K = 10, N = 9) : 112.759626
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 115.195899
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 8,1) :   114.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3447 (30.6%), 7803 (69.4%) left; Finishing by Sat Oct 21  6:23:52 2000

(9,15,8) <- (3,3,2).*(3, 3+2,4): 123.717887 Mflop/s
(15,25,12) <- (5,5,3).*(3, 3+2,4): 131.215727 Mflop/s

Testing m0 = 3, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 123.717887
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 12 15 25 25 12 15 12
<<< (M = 15, K = 25, N = 12) : 131.215727
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 3,4) :   127.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3448 (30.6%), 7802 (69.4%) left; Finishing by Sat Oct 21  6:23:47 2000

(9,14,5) <- (3,0,1).*(3, 12+2,5): 113.946294 Mflop/s
(15,14,15) <- (5,1,3).*(3, 12+2,5): 116.823677 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  12 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 5 9 14 14 5 9 5
<<< (M = 9, K = 14, N = 5) : 113.946294
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 116.823677
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 12,5) :   115.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3449 (30.7%), 7801 (69.3%) left; Finishing by Sat Oct 21  6:23:53 2000

(9,12,13) <- (9,0,0).*(1, 10+2,13): 83.418473 Mflop/s
(15,12,13) <- (15,1,1).*(1, 10+2,13): 97.879186 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 13 9 12 12 13 9 13
<<< (M = 9, K = 12, N = 13) : 83.418473
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 13 15 12 12 13 15 13
<<< (M = 15, K = 12, N = 13) : 97.879186
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,13) :    90.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3450 (30.7%), 7800 (69.3%) left; Finishing by Sat Oct 21  6:23:52 2000

(9,14,7) <- (9,0,1).*(1, 12+2,7): 113.671157 Mflop/s
(15,14,14) <- (15,1,2).*(1, 12+2,7): 69.610196 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 7 9 14 14 7 9 7
<<< (M = 9, K = 14, N = 7) : 113.671157
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 69.610196
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,7) :    86.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3451 (30.7%), 7799 (69.3%) left; Finishing by Sat Oct 21  6:23:48 2000

(9,16,9) <- (9,0,3).*(1, 14+2,3): 134.571161 Mflop/s
(15,16,15) <- (15,1,5).*(1, 14+2,3): 121.716581 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 134.571161
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 121.716581
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,3) :   127.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3452 (30.7%), 7798 (69.3%) left; Finishing by Sat Oct 21  6:23:47 2000

(9,16,16) <- (9,4,0).*(1, 2+2,16): 97.313794 Mflop/s
(15,28,16) <- (15,7,0).*(1, 2+2,16): 98.707544 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 16 9 16 16 16 9 16
<<< (M = 9, K = 16, N = 16) : 97.313794
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 16 15 28 28 16 15 16
<<< (M = 15, K = 28, N = 16) : 98.707544
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,16) :    98.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3453 (30.7%), 7797 (69.3%) left; Finishing by Sat Oct 21  6:23:47 2000

(7,27,9) <- (1,9,9).*(7,1+2,1): 45.524999 Mflop/s
(14,45,15) <- (2,15,15).*(7,1+2,1): 45.428744 Mflop/s

Testing m0 = 7, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 27 9 7 27 27 9 7 9
<<< (M = 7, K = 27, N = 9) : 45.524999
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 45 15 14 45 45 15 14 15
<<< (M = 14, K = 45, N = 15) : 45.428744
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7,1,1) :    45.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3454 (30.7%), 7796 (69.3%) left; Finishing by Sat Oct 21  6:23:46 2000

(8,27,8) <- (4,9,4).*(2,1+2,2): 116.426864 Mflop/s
(14,45,14) <- (7,15,7).*(2,1+2,2): 119.836081 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 27 8 8 27 27 8 8 8
<<< (M = 8, K = 27, N = 8) : 116.426864
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 45 14 14 45 45 14 14 14
<<< (M = 14, K = 45, N = 14) : 119.836081
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2,1,2) :   118.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3455 (30.7%), 7795 (69.3%) left; Finishing by Sat Oct 21  6:23:45 2000

(13,13,9) <- (0,0,9).*(13, 11+2,1): 26.767954 Mflop/s
(13,13,15) <- (1,1,15).*(13, 11+2,1): 28.765681 Mflop/s

Testing m0 = 13, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 13  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 13 9 13 13 13 9 13 9
<<< (M = 13, K = 13, N = 9) : 26.767954
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 13 15 13 13 13 15 13 15
<<< (M = 13, K = 13, N = 15) : 28.765681
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (13, 11,1) :    27.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3456 (30.7%), 7794 (69.3%) left; Finishing by Sat Oct 21  6:23:44 2000

(9,14,5) <- (9,0,1).*(1, 12+2,5): 64.638287 Mflop/s
(15,14,15) <- (15,1,3).*(1, 12+2,5): 114.677877 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 5 9 14 14 5 9 5
<<< (M = 9, K = 14, N = 5) : 64.638287
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 114.677877
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,5) :    82.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3457 (30.7%), 7793 (69.3%) left; Finishing by Sat Oct 21  6:23:43 2000

(8,15,9) <- (4,0,3).*(2, 13+2,3): 33.037002 Mflop/s
(14,15,15) <- (7,1,5).*(2, 13+2,3): 23.782117 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 33.037002
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 23.782117
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 13,3) :    27.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3458 (30.7%), 7792 (69.3%) left; Finishing by Sat Oct 21  6:23:42 2000

(8,11,9) <- (2,1,3).*(4, 9+2,3): 25.878130 Mflop/s
(12,11,15) <- (3,1,5).*(4, 9+2,3): 27.292920 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  9 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 25.878130
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 27.292920
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 9,3) :    26.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3459 (30.7%), 7791 (69.3%) left; Finishing by Sat Oct 21  6:23:42 2000

(9,8,13) <- (9,1,0).*(1, 6+2,13): 80.106931 Mflop/s
(15,16,13) <- (15,2,1).*(1, 6+2,13): 113.484897 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 13 9 8 8 13 9 13
<<< (M = 9, K = 8, N = 13) : 80.106931
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 13 15 16 16 13 15 13
<<< (M = 15, K = 16, N = 13) : 113.484897
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,13) :    93.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3460 (30.8%), 7790 (69.2%) left; Finishing by Sat Oct 21  6:23:41 2000

(9,12,8) <- (3,0,2).*(3, 10+2,4): 113.090035 Mflop/s
(15,12,12) <- (5,1,3).*(3, 10+2,4): 114.867990 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 113.090035
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 114.867990
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 10,4) :   114.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3461 (30.8%), 7789 (69.2%) left; Finishing by Sat Oct 21  6:23:40 2000

(8,7,7) <- (4,1,1).*(2, 5+2,7): 24.085415 Mflop/s
(14,21,14) <- (7,3,2).*(2, 5+2,7): 29.215960 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  5 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 7 8 7 7 7 8 7
<<< (M = 8, K = 7, N = 7) : 24.085415
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 14 14 21 21 14 14 14
<<< (M = 14, K = 21, N = 14) : 29.215960
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 5,7) :    26.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3462 (30.8%), 7788 (69.2%) left; Finishing by Sat Oct 21  6:23:39 2000

(6,8,8) <- (1,1,4).*(6, 6+2,2): 93.131150 Mflop/s
(12,16,14) <- (2,2,7).*(6, 6+2,2): 121.616320 Mflop/s

Testing m0 = 6, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 8 8 6 8 8 8 6 8
<<< (M = 6, K = 8, N = 8) : 93.131150
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 14 12 16 16 14 12 14
<<< (M = 12, K = 16, N = 14) : 121.616320
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 6,2) :   105.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3463 (30.8%), 7787 (69.2%) left; Finishing by Sat Oct 21  6:23:42 2000

(14,9,9) <- (0,1,9).*(14, 7+2,1): 24.729842 Mflop/s
(14,18,15) <- (1,2,15).*(14, 7+2,1): 32.600346 Mflop/s

Testing m0 = 14, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 14  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 9 9 14 9 9 9 14 9
<<< (M = 14, K = 9, N = 9) : 24.729842
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 32.600346
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (14, 7,1) :    28.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3464 (30.8%), 7786 (69.2%) left; Finishing by Sat Oct 21  6:23:41 2000

(9,16,16) <- (9,0,0).*(1, 14+2,16): 100.400004 Mflop/s
(15,16,16) <- (15,1,0).*(1, 14+2,16): 100.643448 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 16 9 16 16 16 9 16
<<< (M = 9, K = 16, N = 16) : 100.400004
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 16 15 16 16 16 15 16
<<< (M = 15, K = 16, N = 16) : 100.643448
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,16) :   100.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3465 (30.8%), 7785 (69.2%) left; Finishing by Sat Oct 21  6:23:40 2000

(13,15,9) <- (0,3,9).*(13, 3+2,1): 77.179666 Mflop/s
(13,25,15) <- (1,5,15).*(13, 3+2,1): 78.183474 Mflop/s

Testing m0 = 13, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 13  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 15 9 13 15 15 9 13 9
<<< (M = 13, K = 15, N = 9) : 77.179666
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 25 15 13 25 25 15 13 15
<<< (M = 13, K = 25, N = 15) : 78.183474
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (13, 3,1) :    77.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3466 (30.8%), 7784 (69.2%) left; Finishing by Sat Oct 21  6:23:39 2000

(6,9,8) <- (1,1,4).*(6, 7+2,2): 98.043216 Mflop/s
(12,18,14) <- (2,2,7).*(6, 7+2,2): 121.412348 Mflop/s

Testing m0 = 6, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 9 8 6 9 9 8 6 8
<<< (M = 6, K = 9, N = 8) : 98.043216
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 14 12 18 18 14 12 14
<<< (M = 12, K = 18, N = 14) : 121.412348
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 7,2) :   108.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3467 (30.8%), 7783 (69.2%) left; Finishing by Sat Oct 21  6:23:38 2000

(8,13,6) <- (4,0,1).*(2, 11+2,6): 24.896266 Mflop/s
(14,13,12) <- (7,1,2).*(2, 11+2,6): 23.943521 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  11 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 6 8 13 13 6 8 6
<<< (M = 8, K = 13, N = 6) : 24.896266
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 12 14 13 13 12 14 12
<<< (M = 14, K = 13, N = 12) : 23.943521
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 11,6) :    24.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3468 (30.8%), 7782 (69.2%) left; Finishing by Sat Oct 21  6:23:37 2000

(9,11,9) <- (3,1,9).*(3, 9+2,1): 150.311925 Mflop/s
(15,11,15) <- (5,1,15).*(3, 9+2,1): 155.148850 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 150.311925
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 155.148850
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 9,1) :   152.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3469 (30.8%), 7781 (69.2%) left; Finishing by Sat Oct 21  6:23:40 2000

(8,13,8) <- (2,0,2).*(4, 11+2,4): 25.764800 Mflop/s
(12,13,12) <- (3,1,3).*(4, 11+2,4): 25.618894 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 25.764800
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 12 12 13 13 12 12 12
<<< (M = 12, K = 13, N = 12) : 25.618894
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 11,4) :    25.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3470 (30.8%), 7780 (69.2%) left; Finishing by Sat Oct 21  6:23:39 2000

(9,15,6) <- (9,3,1).*(1, 3+2,6): 121.698288 Mflop/s
(15,25,12) <- (15,5,2).*(1, 3+2,6): 126.207183 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 6 9 15 15 6 9 6
<<< (M = 9, K = 15, N = 6) : 121.698288
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 12 15 25 25 12 15 12
<<< (M = 15, K = 25, N = 12) : 126.207183
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,6) :   123.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3471 (30.9%), 7779 (69.1%) left; Finishing by Sat Oct 21  6:23:38 2000

(9,11,5) <- (3,1,1).*(3, 9+2,5): 110.335329 Mflop/s
(15,11,15) <- (5,1,3).*(3, 9+2,5): 114.990104 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  9 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 5 9 11 11 5 9 5
<<< (M = 9, K = 11, N = 5) : 110.335329
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 15 15 11 11 15 15 15
<<< (M = 15, K = 11, N = 15) : 114.990104
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 9,5) :   112.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3472 (30.9%), 7778 (69.1%) left; Finishing by Sat Oct 21  6:23:41 2000

(11,13,9) <- (0,0,9).*(11, 11+2,1): 27.745720 Mflop/s
(11,13,15) <- (1,1,15).*(11, 11+2,1): 26.416943 Mflop/s

Testing m0 = 11, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 11  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 13 9 11 13 13 9 11 9
<<< (M = 11, K = 13, N = 9) : 27.745720
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 13 15 11 13 13 15 11 15
<<< (M = 11, K = 13, N = 15) : 26.416943
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (11, 11,1) :    27.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3473 (30.9%), 7777 (69.1%) left; Finishing by Sat Oct 21  6:23:40 2000

(9,16,5) <- (9,0,1).*(1, 14+2,5): 62.742007 Mflop/s
(15,16,15) <- (15,1,3).*(1, 14+2,5): 115.405385 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 5 9 16 16 5 9 5
<<< (M = 9, K = 16, N = 5) : 62.742007
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 115.405385
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,5) :    81.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3474 (30.9%), 7776 (69.1%) left; Finishing by Sat Oct 21  6:23:39 2000

(8,16,7) <- (4,4,1).*(2, 2+2,7): 25.362981 Mflop/s
(14,28,14) <- (7,7,2).*(2, 2+2,7): 23.947486 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  2 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 7 8 16 16 7 8 7
<<< (M = 8, K = 16, N = 7) : 25.362981
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 28 14 14 28 28 14 14 14
<<< (M = 14, K = 28, N = 14) : 23.947486
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 2,7) :    24.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3475 (30.9%), 7775 (69.1%) left; Finishing by Sat Oct 21  6:23:38 2000

(16,14,9) <- (0,0,9).*(16, 12+2,1): 27.357734 Mflop/s
(16,14,15) <- (0,1,15).*(16, 12+2,1): 27.292704 Mflop/s

Testing m0 = 16, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 16  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 9 16 14 14 9 16 9
<<< (M = 16, K = 14, N = 9) : 27.357734
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 14 15 16 14 14 15 16 15
<<< (M = 16, K = 14, N = 15) : 27.292704
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (16, 12,1) :    27.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3476 (30.9%), 7774 (69.1%) left; Finishing by Sat Oct 21  6:23:41 2000

(9,13,12) <- (9,0,0).*(1, 11+2,12): 96.095597 Mflop/s
(15,13,12) <- (15,1,1).*(1, 11+2,12): 96.430375 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 12 9 13 13 12 9 12
<<< (M = 9, K = 13, N = 12) : 96.095597
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 96.430375
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,12) :    96.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3477 (30.9%), 7773 (69.1%) left; Finishing by Sat Oct 21  6:23:40 2000

(9,12,9) <- (1,0,9).*(9, 10+2,1): 32.024715 Mflop/s
(9,12,15) <- (1,1,15).*(9, 10+2,1): 32.164877 Mflop/s

Testing m0 = 9, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 9  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 32.024715
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 32.164877
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (9, 10,1) :    32.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3478 (30.9%), 7772 (69.1%) left; Finishing by Sat Oct 21  6:23:39 2000

(5,27,9) <- (1,9,3).*(5,1+2,3): 25.692622 Mflop/s
(15,45,15) <- (3,15,5).*(5,1+2,3): 22.221262 Mflop/s

Testing m0 = 5, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 27 9 5 27 27 9 5 9
<<< (M = 5, K = 27, N = 9) : 25.692622
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 15 15 45 45 15 15 15
<<< (M = 15, K = 45, N = 15) : 22.221262
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5,1,3) :    23.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3479 (30.9%), 7771 (69.1%) left; Finishing by Sat Oct 21  6:23:38 2000

(9,8,5) <- (9,1,1).*(1, 6+2,5): 58.715396 Mflop/s
(15,16,15) <- (15,2,3).*(1, 6+2,5): 129.621542 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 58.715396
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 129.621542
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,5) :    80.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3480 (30.9%), 7770 (69.1%) left; Finishing by Sat Oct 21  6:23:41 2000

(5,12,9) <- (1,0,9).*(5, 10+2,1): 51.413330 Mflop/s
(15,12,15) <- (3,1,15).*(5, 10+2,1): 61.085757 Mflop/s

Testing m0 = 5, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 51.413330
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 61.085757
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 10,1) :    55.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3481 (30.9%), 7769 (69.1%) left; Finishing by Sat Oct 21  6:23:40 2000

(8,16,9) <- (1,0,9).*(8, 14+2,1): 100.415789 Mflop/s
(8,16,15) <- (1,1,15).*(8, 14+2,1): 101.065138 Mflop/s

Testing m0 = 8, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 100.415789
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 15 8 16 16 15 8 15
<<< (M = 8, K = 16, N = 15) : 101.065138
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 14,1) :   100.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3482 (31.0%), 7768 (69.0%) left; Finishing by Sat Oct 21  6:23:39 2000

(9,8,15) <- (9,1,0).*(1, 6+2,15): 91.974655 Mflop/s
(15,16,15) <- (15,2,1).*(1, 6+2,15): 103.103352 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 15 9 8 8 15 9 15
<<< (M = 9, K = 8, N = 15) : 91.974655
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 103.103352
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,15) :    97.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3483 (31.0%), 7767 (69.0%) left; Finishing by Sat Oct 21  6:23:38 2000

(9,14,13) <- (9,0,0).*(1, 12+2,13): 84.392771 Mflop/s
(15,14,13) <- (15,1,1).*(1, 12+2,13): 98.879739 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 13 9 14 14 13 9 13
<<< (M = 9, K = 14, N = 13) : 84.392771
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 13 15 14 14 13 15 13
<<< (M = 15, K = 14, N = 13) : 98.879739
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,13) :    91.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3484 (31.0%), 7766 (69.0%) left; Finishing by Sat Oct 21  6:23:41 2000

(7,14,8) <- (1,0,4).*(7, 12+2,2): 22.175963 Mflop/s
(14,14,14) <- (2,1,7).*(7, 12+2,2): 25.027010 Mflop/s

Testing m0 = 7, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 14 8 7 14 14 8 7 8
<<< (M = 7, K = 14, N = 8) : 22.175963
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 25.027010
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 12,2) :    23.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3485 (31.0%), 7765 (69.0%) left; Finishing by Sat Oct 21  6:23:40 2000

(15,16,9) <- (0,4,9).*(15, 2+2,1): 58.393006 Mflop/s
(15,28,15) <- (1,7,15).*(15, 2+2,1): 59.544979 Mflop/s

Testing m0 = 15, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 15  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 9 15 16 16 9 15 9
<<< (M = 15, K = 16, N = 9) : 58.393006
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 15 15 28 28 15 15 15
<<< (M = 15, K = 28, N = 15) : 59.544979
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (15, 2,1) :    59.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3486 (31.0%), 7764 (69.0%) left; Finishing by Sat Oct 21  6:23:39 2000

(14,17,9) <- (0,0,9).*(14, 15+2,1): 94.598525 Mflop/s
(14,17,15) <- (1,1,15).*(14, 15+2,1): 98.187584 Mflop/s

Testing m0 = 14, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 14  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 17 9 14 17 17 9 14 9
<<< (M = 14, K = 17, N = 9) : 94.598525
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 17 15 14 17 17 15 14 15
<<< (M = 14, K = 17, N = 15) : 98.187584
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (14, 15,1) :    96.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3487 (31.0%), 7763 (69.0%) left; Finishing by Sat Oct 21  6:23:41 2000

(9,7,5) <- (9,1,1).*(1, 5+2,5): 59.725451 Mflop/s
(15,21,15) <- (15,3,3).*(1, 5+2,5): 139.759831 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 5 9 7 7 5 9 5
<<< (M = 9, K = 7, N = 5) : 59.725451
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 139.759831
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,5) :    83.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3488 (31.0%), 7762 (69.0%) left; Finishing by Sat Oct 21  6:23:40 2000

(8,11,8) <- (4,1,1).*(2, 9+2,8): 24.865405 Mflop/s
(14,11,8) <- (7,1,1).*(2, 9+2,8): 25.117499 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  9 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 24.865405
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 8 14 11 11 8 14 8
<<< (M = 14, K = 11, N = 8) : 25.117499
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 9,8) :    25.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3489 (31.0%), 7761 (69.0%) left; Finishing by Sat Oct 21  6:23:40 2000

(9,9,11) <- (9,1,0).*(1, 7+2,11): 93.308405 Mflop/s
(15,18,11) <- (15,2,1).*(1, 7+2,11): 96.180652 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 11 9 9 9 11 9 11
<<< (M = 9, K = 9, N = 11) : 93.308405
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 11 15 18 18 11 15 11
<<< (M = 15, K = 18, N = 11) : 96.180652
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,11) :    94.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3490 (31.0%), 7760 (69.0%) left; Finishing by Sat Oct 21  6:23:42 2000

(8,17,5) <- (4,0,1).*(2, 15+2,5): 24.828389 Mflop/s
(14,17,15) <- (7,1,3).*(2, 15+2,5): 26.759199 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  15 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 5 8 17 17 5 8 5
<<< (M = 8, K = 17, N = 5) : 24.828389
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 17 15 14 17 17 15 14 15
<<< (M = 14, K = 17, N = 15) : 26.759199
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 15,5) :    25.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3491 (31.0%), 7759 (69.0%) left; Finishing by Sat Oct 21  6:23:41 2000

(9,27,10) <- (9,9,0).*(1,1+2,10): 23.091769 Mflop/s
(15,45,10) <- (15,15,1).*(1,1+2,10): 23.305420 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 10 9 27 27 10 9 10
<<< (M = 9, K = 27, N = 10) : 23.091769
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 10 15 45 45 10 15 10
<<< (M = 15, K = 45, N = 10) : 23.305420
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,10) :    23.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3492 (31.0%), 7758 (69.0%) left; Finishing by Sat Oct 21  6:23:40 2000

(8,15,8) <- (2,0,2).*(4, 13+2,4): 26.079306 Mflop/s
(12,15,12) <- (3,1,3).*(4, 13+2,4): 25.944533 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 26.079306
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 12 12 15 15 12 12 12
<<< (M = 12, K = 15, N = 12) : 25.944533
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 13,4) :    26.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3493 (31.0%), 7757 (69.0%) left; Finishing by Sat Oct 21  6:23:40 2000

(13,17,9) <- (0,0,9).*(13, 15+2,1): 27.780793 Mflop/s
(13,17,15) <- (1,1,15).*(13, 15+2,1): 29.480903 Mflop/s

Testing m0 = 13, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 13  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 17 9 13 17 17 9 13 9
<<< (M = 13, K = 17, N = 9) : 27.780793
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 17 15 13 17 17 15 13 15
<<< (M = 13, K = 17, N = 15) : 29.480903
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (13, 15,1) :    28.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3494 (31.1%), 7756 (68.9%) left; Finishing by Sat Oct 21  6:23:42 2000

(5,15,9) <- (1,0,9).*(5, 13+2,1): 53.261966 Mflop/s
(15,15,15) <- (3,1,15).*(5, 13+2,1): 64.719873 Mflop/s

Testing m0 = 5, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 9 5 15 15 9 5 9
<<< (M = 5, K = 15, N = 9) : 53.261966
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 64.719873
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 13,1) :    58.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3495 (31.1%), 7755 (68.9%) left; Finishing by Sat Oct 21  6:23:41 2000

(9,8,10) <- (9,1,0).*(1, 6+2,10): 92.424318 Mflop/s
(15,16,10) <- (15,2,1).*(1, 6+2,10): 113.302786 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 10 9 8 8 10 9 10
<<< (M = 9, K = 8, N = 10) : 92.424318
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 10 15 16 16 10 15 10
<<< (M = 15, K = 16, N = 10) : 113.302786
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,10) :   101.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3496 (31.1%), 7754 (68.9%) left; Finishing by Sat Oct 21  6:23:37 2000

(8,16,8) <- (2,4,2).*(4, 2+2,4): 113.506976 Mflop/s
(12,28,12) <- (3,7,3).*(4, 2+2,4): 119.592794 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 113.506976
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 28 12 12 28 28 12 12 12
<<< (M = 12, K = 28, N = 12) : 119.592794
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 2,4) :   116.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3497 (31.1%), 7753 (68.9%) left; Finishing by Sat Oct 21  6:23:36 2000

(9,10,9) <- (9,1,3).*(1, 8+2,3): 121.397536 Mflop/s
(15,10,15) <- (15,1,5).*(1, 8+2,3): 107.179601 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 121.397536
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 107.179601
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,3) :   113.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3498 (31.1%), 7752 (68.9%) left; Finishing by Sat Oct 21  6:23:36 2000

(11,16,9) <- (0,0,9).*(11, 14+2,1): 28.611916 Mflop/s
(11,16,15) <- (1,1,15).*(11, 14+2,1): 27.033600 Mflop/s

Testing m0 = 11, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 11  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 16 9 11 16 16 9 11 9
<<< (M = 11, K = 16, N = 9) : 28.611916
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 16 15 11 16 16 15 11 15
<<< (M = 11, K = 16, N = 15) : 27.033600
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (11, 14,1) :    27.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3499 (31.1%), 7751 (68.9%) left; Finishing by Sat Oct 21  6:23:35 2000

(9,7,9) <- (9,1,3).*(1, 5+2,3): 108.960442 Mflop/s
(15,21,15) <- (15,3,5).*(1, 5+2,3): 126.845456 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 108.960442
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 126.845456
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,3) :   117.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3500 (31.1%), 7750 (68.9%) left; Finishing by Sat Oct 21  6:23:37 2000

(16,27,9) <- (0,9,9).*(16,1+2,1): 20.073609 Mflop/s
(16,45,15) <- (0,15,15).*(16,1+2,1): 14.923103 Mflop/s

Testing m0 = 16, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 16 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 27 9 16 27 27 9 16 9
<<< (M = 16, K = 27, N = 9) : 20.073609
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 45 15 16 45 45 15 16 15
<<< (M = 16, K = 45, N = 15) : 14.923103
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (16,1,1) :    17.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3501 (31.1%), 7749 (68.9%) left; Finishing by Sat Oct 21  6:23:36 2000

(5,16,9) <- (1,0,9).*(5, 14+2,1): 54.740659 Mflop/s
(15,16,15) <- (3,1,15).*(5, 14+2,1): 65.686751 Mflop/s

Testing m0 = 5, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 16 9 5 16 16 9 5 9
<<< (M = 5, K = 16, N = 9) : 54.740659
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 65.686751
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 14,1) :    59.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3502 (31.1%), 7748 (68.9%) left; Finishing by Sat Oct 21  6:23:36 2000

(8,16,6) <- (4,0,1).*(2, 14+2,6): 25.180524 Mflop/s
(14,16,12) <- (7,1,2).*(2, 14+2,6): 24.219051 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  14 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 6 8 16 16 6 8 6
<<< (M = 8, K = 16, N = 6) : 25.180524
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 12 14 16 16 12 14 12
<<< (M = 14, K = 16, N = 12) : 24.219051
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 14,6) :    24.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3503 (31.1%), 7747 (68.9%) left; Finishing by Sat Oct 21  6:23:35 2000

(9,13,7) <- (9,0,1).*(1, 11+2,7): 111.615012 Mflop/s
(15,13,14) <- (15,1,2).*(1, 11+2,7): 69.474927 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 7 9 13 13 7 9 7
<<< (M = 9, K = 13, N = 7) : 111.615012
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 69.474927
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,7) :    85.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3504 (31.1%), 7746 (68.9%) left; Finishing by Sat Oct 21  6:23:34 2000

(9,16,8) <- (3,0,2).*(3, 14+2,4): 117.739584 Mflop/s
(15,16,12) <- (5,1,3).*(3, 14+2,4): 118.485344 Mflop/s

Testing m0 = 3, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 117.739584
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 118.485344
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 14,4) :   118.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3505 (31.2%), 7745 (68.8%) left; Finishing by Sat Oct 21  6:23:33 2000

(14,8,9) <- (0,1,9).*(14, 6+2,1): 24.501793 Mflop/s
(14,16,15) <- (1,2,15).*(14, 6+2,1): 32.641599 Mflop/s

Testing m0 = 14, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 14  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 8 9 14 8 8 9 14 9
<<< (M = 14, K = 8, N = 9) : 24.501793
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 32.641599
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (14, 6,1) :    28.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3506 (31.2%), 7744 (68.8%) left; Finishing by Sat Oct 21  6:23:35 2000

(9,15,9) <- (9,0,1).*(1, 13+2,9): 80.565893 Mflop/s
(15,15,9) <- (15,1,1).*(1, 13+2,9): 80.251572 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 80.565893
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 80.251572
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,9) :    80.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3507 (31.2%), 7743 (68.8%) left; Finishing by Sat Oct 21  6:23:35 2000

(9,27,13) <- (9,9,0).*(1,1+2,13): 23.845643 Mflop/s
(15,45,13) <- (15,15,1).*(1,1+2,13): 22.714317 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 13 9 27 27 13 9 13
<<< (M = 9, K = 27, N = 13) : 23.845643
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 13 15 45 45 13 15 13
<<< (M = 15, K = 45, N = 13) : 22.714317
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,13) :    23.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3508 (31.2%), 7742 (68.8%) left; Finishing by Sat Oct 21  6:23:34 2000

(8,15,8) <- (4,0,2).*(2, 13+2,4): 30.041216 Mflop/s
(14,15,12) <- (7,1,3).*(2, 13+2,4): 26.945225 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 30.041216
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 26.945225
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 13,4) :    28.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3509 (31.2%), 7741 (68.8%) left; Finishing by Sat Oct 21  6:23:30 2000

(9,17,9) <- (3,0,3).*(3, 15+2,3): 119.806740 Mflop/s
(15,17,15) <- (5,1,5).*(3, 15+2,3): 120.849880 Mflop/s

Testing m0 = 3, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 9 9 17 17 9 9 9
<<< (M = 9, K = 17, N = 9) : 119.806740
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 15 15 17 17 15 15 15
<<< (M = 15, K = 17, N = 15) : 120.849880
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 15,3) :   120.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3510 (31.2%), 7740 (68.8%) left; Finishing by Sat Oct 21  6:23:29 2000

(8,15,9) <- (2,3,3).*(4, 3+2,3): 119.890517 Mflop/s
(12,25,15) <- (3,5,5).*(4, 3+2,3): 125.421647 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 119.890517
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 25 15 12 25 25 15 12 15
<<< (M = 12, K = 25, N = 15) : 125.421647
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 3,3) :   122.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3511 (31.2%), 7739 (68.8%) left; Finishing by Sat Oct 21  6:23:28 2000

(9,9,13) <- (9,1,0).*(1, 7+2,13): 82.188638 Mflop/s
(15,18,13) <- (15,2,1).*(1, 7+2,13): 113.014197 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 13 9 9 9 13 9 13
<<< (M = 9, K = 9, N = 13) : 82.188638
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 13 15 18 18 13 15 13
<<< (M = 15, K = 18, N = 13) : 113.014197
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,13) :    95.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3512 (31.2%), 7738 (68.8%) left; Finishing by Sat Oct 21  6:23:27 2000

(9,16,5) <- (9,4,1).*(1, 2+2,5): 68.781556 Mflop/s
(15,28,15) <- (15,7,3).*(1, 2+2,5): 113.447805 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 5 9 16 16 5 9 5
<<< (M = 9, K = 16, N = 5) : 68.781556
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 15 15 28 28 15 15 15
<<< (M = 15, K = 28, N = 15) : 113.447805
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,5) :    85.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3513 (31.2%), 7737 (68.8%) left; Finishing by Sat Oct 21  6:23:27 2000

(9,16,5) <- (3,4,1).*(3, 2+2,5): 26.428465 Mflop/s
(15,28,15) <- (5,7,3).*(3, 2+2,5): 25.749722 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  2 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 5 9 16 16 5 9 5
<<< (M = 9, K = 16, N = 5) : 26.428465
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 15 15 28 28 15 15 15
<<< (M = 15, K = 28, N = 15) : 25.749722
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 2,5) :    26.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3514 (31.2%), 7736 (68.8%) left; Finishing by Sat Oct 21  6:23:26 2000

(12,12,9) <- (0,0,9).*(12, 10+2,1): 28.821943 Mflop/s
(12,12,15) <- (1,1,15).*(12, 10+2,1): 28.233577 Mflop/s

Testing m0 = 12, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 12  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 9 12 12 12 9 12 9
<<< (M = 12, K = 12, N = 9) : 28.821943
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 15 12 12 12 15 12 15
<<< (M = 12, K = 12, N = 15) : 28.233577
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (12, 10,1) :    28.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3515 (31.2%), 7735 (68.8%) left; Finishing by Sat Oct 21  6:23:25 2000

(9,9,8) <- (3,1,4).*(3, 7+2,2): 106.643389 Mflop/s
(15,18,14) <- (5,2,7).*(3, 7+2,2): 134.556911 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 106.643389
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 134.556911
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 7,2) :   119.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3516 (31.3%), 7734 (68.7%) left; Finishing by Sat Oct 21  6:23:27 2000

(7,7,9) <- (1,1,9).*(7, 5+2,1): 25.929243 Mflop/s
(14,21,15) <- (2,3,15).*(7, 5+2,1): 40.369806 Mflop/s

Testing m0 = 7, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 7 9 7 7 7 9 7 9
<<< (M = 7, K = 7, N = 9) : 25.929243
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 15 14 21 21 15 14 15
<<< (M = 14, K = 21, N = 15) : 40.369806
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 5,1) :    31.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3517 (31.3%), 7733 (68.7%) left; Finishing by Sat Oct 21  6:23:27 2000

(5,15,9) <- (1,0,3).*(5, 13+2,3): 25.174509 Mflop/s
(15,15,15) <- (3,1,5).*(5, 13+2,3): 25.742577 Mflop/s

Testing m0 = 5, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 9 5 15 15 9 5 9
<<< (M = 5, K = 15, N = 9) : 25.174509
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 25.742577
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 13,3) :    25.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3518 (31.3%), 7732 (68.7%) left; Finishing by Sat Oct 21  6:23:29 2000

(8,14,8) <- (4,0,4).*(2, 12+2,2): 37.887280 Mflop/s
(14,14,14) <- (7,1,7).*(2, 12+2,2): 35.920411 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 37.887280
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 14 14 14 14 14 14 14
<<< (M = 14, K = 14, N = 14) : 35.920411
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 12,2) :    36.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3519 (31.3%), 7731 (68.7%) left; Finishing by Sat Oct 21  6:23:28 2000

(9,16,8) <- (9,0,4).*(1, 14+2,2): 154.404507 Mflop/s
(15,16,14) <- (15,1,7).*(1, 14+2,2): 151.729860 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 154.404507
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 151.729860
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,2) :   153.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3520 (31.3%), 7730 (68.7%) left; Finishing by Sat Oct 21  6:23:27 2000

(16,13,9) <- (0,0,9).*(16, 11+2,1): 27.136758 Mflop/s
(16,13,15) <- (0,1,15).*(16, 11+2,1): 27.108763 Mflop/s

Testing m0 = 16, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 16  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 13 9 16 13 13 9 16 9
<<< (M = 16, K = 13, N = 9) : 27.136758
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 13 15 16 13 13 15 16 15
<<< (M = 16, K = 13, N = 15) : 27.108763
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (16, 11,1) :    27.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3521 (31.3%), 7729 (68.7%) left; Finishing by Sat Oct 21  6:23:30 2000

(9,12,15) <- (9,2,0).*(1, 4+2,15): 113.322476 Mflop/s
(15,18,15) <- (15,3,1).*(1, 4+2,15): 91.133176 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 15 9 12 12 15 9 15
<<< (M = 9, K = 12, N = 15) : 113.322476
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 91.133176
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,15) :   101.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3522 (31.3%), 7728 (68.7%) left; Finishing by Sat Oct 21  6:23:29 2000

(6,7,8) <- (1,1,4).*(6, 5+2,2): 93.701225 Mflop/s
(12,21,14) <- (2,3,7).*(6, 5+2,2): 134.121408 Mflop/s

Testing m0 = 6, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 7 8 6 7 7 8 6 8
<<< (M = 6, K = 7, N = 8) : 93.701225
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 14 12 21 21 14 12 14
<<< (M = 12, K = 21, N = 14) : 134.121408
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 5,2) :   110.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3523 (31.3%), 7727 (68.7%) left; Finishing by Sat Oct 21  6:23:31 2000

(8,17,9) <- (2,0,9).*(4, 15+2,1): 134.776483 Mflop/s
(12,17,15) <- (3,1,15).*(4, 15+2,1): 138.190955 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 9 8 17 17 9 8 9
<<< (M = 8, K = 17, N = 9) : 134.776483
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 17 15 12 17 17 15 12 15
<<< (M = 12, K = 17, N = 15) : 138.190955
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 15,1) :   136.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3524 (31.3%), 7726 (68.7%) left; Finishing by Sat Oct 21  6:23:31 2000

(9,13,8) <- (9,0,1).*(1, 11+2,8): 106.550041 Mflop/s
(15,13,8) <- (15,1,1).*(1, 11+2,8): 107.288327 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 106.550041
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 8 15 13 13 8 15 8
<<< (M = 15, K = 13, N = 8) : 107.288327
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,8) :   106.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3525 (31.3%), 7725 (68.7%) left; Finishing by Sat Oct 21  6:23:30 2000

(9,8,8) <- (9,1,4).*(1, 6+2,2): 129.690409 Mflop/s
(15,16,14) <- (15,2,7).*(1, 6+2,2): 165.250624 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 8 9 8 8 8 9 8
<<< (M = 9, K = 8, N = 8) : 129.690409
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 165.250624
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,2) :   145.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3526 (31.3%), 7724 (68.7%) left; Finishing by Sat Oct 21  6:23:29 2000

(9,16,7) <- (9,4,1).*(1, 2+2,7): 106.418919 Mflop/s
(15,28,14) <- (15,7,2).*(1, 2+2,7): 69.817646 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 7 9 16 16 7 9 7
<<< (M = 9, K = 16, N = 7) : 106.418919
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 14 15 28 28 14 15 14
<<< (M = 15, K = 28, N = 14) : 69.817646
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,7) :    84.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3527 (31.4%), 7723 (68.6%) left; Finishing by Sat Oct 21  6:23:28 2000

(5,7,9) <- (1,1,3).*(5, 5+2,3): 23.551630 Mflop/s
(15,21,15) <- (3,3,5).*(5, 5+2,3): 32.413027 Mflop/s

Testing m0 = 5, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 7 9 5 7 7 9 5 9
<<< (M = 5, K = 7, N = 9) : 23.551630
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 32.413027
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 5,3) :    27.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3528 (31.4%), 7722 (68.6%) left; Finishing by Sat Oct 21  6:23:27 2000

(9,15,11) <- (9,3,0).*(1, 3+2,11): 100.475821 Mflop/s
(15,25,11) <- (15,5,1).*(1, 3+2,11): 93.477718 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 11 9 15 15 11 9 11
<<< (M = 9, K = 15, N = 11) : 100.475821
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 11 15 25 25 11 15 11
<<< (M = 15, K = 25, N = 11) : 93.477718
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,11) :    96.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3529 (31.4%), 7721 (68.6%) left; Finishing by Sat Oct 21  6:23:27 2000

(9,12,8) <- (9,0,4).*(1, 10+2,2): 143.791323 Mflop/s
(15,12,14) <- (15,1,7).*(1, 10+2,2): 144.168835 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 143.791323
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 14 15 12 12 14 15 14
<<< (M = 15, K = 12, N = 14) : 144.168835
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,2) :   144.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3530 (31.4%), 7720 (68.6%) left; Finishing by Sat Oct 21  6:23:26 2000

(8,12,8) <- (2,0,2).*(4, 10+2,4): 25.496046 Mflop/s
(12,12,12) <- (3,1,3).*(4, 10+2,4): 25.526012 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 25.496046
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 12 12 12 12 12 12 12
<<< (M = 12, K = 12, N = 12) : 25.526012
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 10,4) :    25.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3531 (31.4%), 7719 (68.6%) left; Finishing by Sat Oct 21  6:23:28 2000

(8,8,9) <- (2,1,9).*(4, 6+2,1): 106.565627 Mflop/s
(12,16,15) <- (3,2,15).*(4, 6+2,1): 144.073685 Mflop/s

Testing m0 = 4, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 106.565627
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 15 12 16 16 15 12 15
<<< (M = 12, K = 16, N = 15) : 144.073685
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 6,1) :   122.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3532 (31.4%), 7718 (68.6%) left; Finishing by Sat Oct 21  6:23:24 2000

(14,16,9) <- (0,4,9).*(14, 2+2,1): 23.144388 Mflop/s
(14,28,15) <- (1,7,15).*(14, 2+2,1): 24.926015 Mflop/s

Testing m0 = 14, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 14  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 9 14 16 16 9 14 9
<<< (M = 14, K = 16, N = 9) : 23.144388
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 28 15 14 28 28 15 14 15
<<< (M = 14, K = 28, N = 15) : 24.926015
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (14, 2,1) :    24.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3533 (31.4%), 7717 (68.6%) left; Finishing by Sat Oct 21  6:23:23 2000

(9,17,11) <- (9,0,0).*(1, 15+2,11): 99.833229 Mflop/s
(15,17,11) <- (15,1,1).*(1, 15+2,11): 83.134409 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 11 9 17 17 11 9 11
<<< (M = 9, K = 17, N = 11) : 99.833229
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 11 15 17 17 11 15 11
<<< (M = 15, K = 17, N = 11) : 83.134409
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,11) :    90.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3534 (31.4%), 7716 (68.6%) left; Finishing by Sat Oct 21  6:23:23 2000

(9,7,9) <- (9,1,9).*(1, 5+2,1): 100.733088 Mflop/s
(15,21,15) <- (15,3,15).*(1, 5+2,1): 161.834622 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 100.733088
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 161.834622
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,1) :   124.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3535 (31.4%), 7715 (68.6%) left; Finishing by Sat Oct 21  6:23:25 2000

(9,10,8) <- (3,1,4).*(3, 8+2,2): 109.839416 Mflop/s
(15,10,14) <- (5,1,7).*(3, 8+2,2): 110.593604 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 109.839416
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 14 15 10 10 14 15 14
<<< (M = 15, K = 10, N = 14) : 110.593604
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 8,2) :   110.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3536 (31.4%), 7714 (68.6%) left; Finishing by Sat Oct 21  6:23:27 2000

(6,17,8) <- (1,0,4).*(6, 15+2,2): 107.061750 Mflop/s
(12,17,14) <- (2,1,7).*(6, 15+2,2): 108.094584 Mflop/s

Testing m0 = 6, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 17 8 6 17 17 8 6 8
<<< (M = 6, K = 17, N = 8) : 107.061750
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 17 14 12 17 17 14 12 14
<<< (M = 12, K = 17, N = 14) : 108.094584
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 15,2) :   107.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3537 (31.4%), 7713 (68.6%) left; Finishing by Sat Oct 21  6:23:26 2000

(9,7,10) <- (9,1,0).*(1, 5+2,10): 89.051684 Mflop/s
(15,21,10) <- (15,3,1).*(1, 5+2,10): 122.907691 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 10 9 7 7 10 9 10
<<< (M = 9, K = 7, N = 10) : 89.051684
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 10 15 21 21 10 15 10
<<< (M = 15, K = 21, N = 10) : 122.907691
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,10) :   103.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3538 (31.4%), 7712 (68.6%) left; Finishing by Sat Oct 21  6:23:29 2000

(5,10,9) <- (1,1,9).*(5, 8+2,1): 51.601452 Mflop/s
(15,10,15) <- (3,1,15).*(5, 8+2,1): 58.136037 Mflop/s

Testing m0 = 5, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 10 9 5 10 10 9 5 9
<<< (M = 5, K = 10, N = 9) : 51.601452
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 58.136037
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 8,1) :    54.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3539 (31.5%), 7711 (68.5%) left; Finishing by Sat Oct 21  6:23:25 2000

(8,9,7) <- (4,1,1).*(2, 7+2,7): 24.745737 Mflop/s
(14,18,14) <- (7,2,2).*(2, 7+2,7): 26.472230 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  7 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 7 8 9 9 7 8 7
<<< (M = 8, K = 9, N = 7) : 24.745737
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 14 14 18 18 14 14 14
<<< (M = 14, K = 18, N = 14) : 26.472230
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 7,7) :    25.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3540 (31.5%), 7710 (68.5%) left; Finishing by Sat Oct 21  6:23:24 2000

(8,14,6) <- (4,0,1).*(2, 12+2,6): 24.976291 Mflop/s
(14,14,12) <- (7,1,2).*(2, 12+2,6): 24.113996 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  12 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 6 8 14 14 6 8 6
<<< (M = 8, K = 14, N = 6) : 24.976291
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 12 14 14 14 12 14 12
<<< (M = 14, K = 14, N = 12) : 24.113996
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 12,6) :    24.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3541 (31.5%), 7709 (68.5%) left; Finishing by Sat Oct 21  6:23:26 2000

(9,7,9) <- (3,1,9).*(3, 5+2,1): 120.047771 Mflop/s
(15,21,15) <- (5,3,15).*(3, 5+2,1): 200.795312 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 9 9 7 7 9 9 9
<<< (M = 9, K = 7, N = 9) : 120.047771
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 200.795312
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 5,1) :   150.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3542 (31.5%), 7708 (68.5%) left; Finishing by Sat Oct 21  6:23:26 2000

(16,15,9) <- (0,0,9).*(16, 13+2,1): 27.564736 Mflop/s
(16,15,15) <- (0,1,15).*(16, 13+2,1): 27.355347 Mflop/s

Testing m0 = 16, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 16  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 9 16 15 15 9 16 9
<<< (M = 16, K = 15, N = 9) : 27.564736
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 15 16 15 15 15 16 15
<<< (M = 16, K = 15, N = 15) : 27.355347
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (16, 13,1) :    27.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3543 (31.5%), 7707 (68.5%) left; Finishing by Sat Oct 21  6:23:28 2000

(9,16,13) <- (9,0,0).*(1, 14+2,13): 84.923950 Mflop/s
(15,16,13) <- (15,1,1).*(1, 14+2,13): 100.327726 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 13 9 16 16 13 9 13
<<< (M = 9, K = 16, N = 13) : 84.923950
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 13 15 16 16 13 15 13
<<< (M = 15, K = 16, N = 13) : 100.327726
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,13) :    92.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3544 (31.5%), 7706 (68.5%) left; Finishing by Sat Oct 21  6:23:27 2000

(9,10,5) <- (3,1,1).*(3, 8+2,5): 109.618564 Mflop/s
(15,10,15) <- (5,1,3).*(3, 8+2,5): 114.278167 Mflop/s

Testing m0 = 3, k0 =  8, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  8 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 5 9 10 10 5 9 5
<<< (M = 9, K = 10, N = 5) : 109.618564
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 15 15 10 10 15 15 15
<<< (M = 15, K = 10, N = 15) : 114.278167
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 8,5) :   111.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3545 (31.5%), 7705 (68.5%) left; Finishing by Sat Oct 21  6:23:30 2000

(9,8,5) <- (3,1,1).*(3, 6+2,5): 105.255979 Mflop/s
(15,16,15) <- (5,2,3).*(3, 6+2,5): 135.539580 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  6 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 5 9 8 8 5 9 5
<<< (M = 9, K = 8, N = 5) : 105.255979
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 135.539580
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 6,5) :   118.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3546 (31.5%), 7704 (68.5%) left; Finishing by Sat Oct 21  6:23:32 2000

(9,9,5) <- (9,1,1).*(1, 7+2,5): 62.063332 Mflop/s
(15,18,15) <- (15,2,3).*(1, 7+2,5): 129.965486 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 62.063332
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 129.965486
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,5) :    84.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3547 (31.5%), 7703 (68.5%) left; Finishing by Sat Oct 21  6:23:34 2000

(6,16,9) <- (1,4,9).*(6, 2+2,1): 89.512624 Mflop/s
(12,28,15) <- (2,7,15).*(6, 2+2,1): 95.512165 Mflop/s

Testing m0 = 6, k0 =  2, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  2 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 16 9 6 16 16 9 6 9
<<< (M = 6, K = 16, N = 9) : 89.512624
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 28 15 12 28 28 15 12 15
<<< (M = 12, K = 28, N = 15) : 95.512165
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 2,1) :    92.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3548 (31.5%), 7702 (68.5%) left; Finishing by Sat Oct 21  6:23:30 2000

(6,15,9) <- (1,3,9).*(6, 3+2,1): 79.602391 Mflop/s
(12,25,15) <- (2,5,15).*(6, 3+2,1): 105.651232 Mflop/s

Testing m0 = 6, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 15 9 6 15 15 9 6 9
<<< (M = 6, K = 15, N = 9) : 79.602391
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 25 15 12 25 25 15 12 15
<<< (M = 12, K = 25, N = 15) : 105.651232
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 3,1) :    90.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3549 (31.5%), 7701 (68.5%) left; Finishing by Sat Oct 21  6:23:30 2000

(15,13,9) <- (0,0,9).*(15, 11+2,1): 105.893691 Mflop/s
(15,13,15) <- (1,1,15).*(15, 11+2,1): 106.086874 Mflop/s

Testing m0 = 15, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 15  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 9 15 13 13 9 15 9
<<< (M = 15, K = 13, N = 9) : 105.893691
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 106.086874
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (15, 11,1) :   106.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3550 (31.6%), 7700 (68.4%) left; Finishing by Sat Oct 21  6:23:29 2000

(8,8,8) <- (4,1,1).*(2, 6+2,8): 24.249226 Mflop/s
(14,16,8) <- (7,2,1).*(2, 6+2,8): 29.335479 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  6 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 24.249226
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 8 14 16 16 8 14 8
<<< (M = 14, K = 16, N = 8) : 29.335479
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 6,8) :    26.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3551 (31.6%), 7699 (68.4%) left; Finishing by Sat Oct 21  6:23:28 2000

(8,12,8) <- (2,0,4).*(4, 10+2,2): 26.898853 Mflop/s
(12,12,14) <- (3,1,7).*(4, 10+2,2): 28.650554 Mflop/s

Testing m0 = 4, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 26.898853
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 12 14 12 12 12 14 12 14
<<< (M = 12, K = 12, N = 14) : 28.650554
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 10,2) :    27.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3552 (31.6%), 7698 (68.4%) left; Finishing by Sat Oct 21  6:23:27 2000

(13,12,9) <- (0,0,9).*(13, 10+2,1): 103.694812 Mflop/s
(13,12,15) <- (1,1,15).*(13, 10+2,1): 104.607878 Mflop/s

Testing m0 = 13, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 13  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 9 13 12 12 9 13 9
<<< (M = 13, K = 12, N = 9) : 103.694812
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 15 13 12 12 15 13 15
<<< (M = 13, K = 12, N = 15) : 104.607878
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (13, 10,1) :   104.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3553 (31.6%), 7697 (68.4%) left; Finishing by Sat Oct 21  6:23:26 2000

(10,17,9) <- (0,0,9).*(10, 15+2,1): 96.749638 Mflop/s
(10,17,15) <- (1,1,15).*(10, 15+2,1): 101.984435 Mflop/s

Testing m0 = 10, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 10  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 17 9 10 17 17 9 10 9
<<< (M = 10, K = 17, N = 9) : 96.749638
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 17 15 10 17 17 15 10 15
<<< (M = 10, K = 17, N = 15) : 101.984435
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (10, 15,1) :    99.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3554 (31.6%), 7696 (68.4%) left; Finishing by Sat Oct 21  6:23:26 2000

(15,16,9) <- (0,0,9).*(15, 14+2,1): 25.783111 Mflop/s
(15,16,15) <- (1,1,15).*(15, 14+2,1): 26.869882 Mflop/s

Testing m0 = 15, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 15  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 9 15 16 16 9 15 9
<<< (M = 15, K = 16, N = 9) : 25.783111
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 26.869882
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (15, 14,1) :    26.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3555 (31.6%), 7695 (68.4%) left; Finishing by Sat Oct 21  6:23:28 2000

(10,12,9) <- (0,0,9).*(10, 10+2,1): 86.323571 Mflop/s
(10,12,15) <- (1,1,15).*(10, 10+2,1): 90.859824 Mflop/s

Testing m0 = 10, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 10  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 9 10 12 12 9 10 9
<<< (M = 10, K = 12, N = 9) : 86.323571
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 15 10 12 12 15 10 15
<<< (M = 10, K = 12, N = 15) : 90.859824
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (10, 10,1) :    88.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3556 (31.6%), 7694 (68.4%) left; Finishing by Sat Oct 21  6:23:27 2000

(8,9,8) <- (4,1,4).*(2, 7+2,2): 35.872604 Mflop/s
(14,18,14) <- (7,2,7).*(2, 7+2,2): 40.950530 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 35.872604
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 14 14 18 18 14 14 14
<<< (M = 14, K = 18, N = 14) : 40.950530
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 7,2) :    38.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3557 (31.6%), 7693 (68.4%) left; Finishing by Sat Oct 21  6:23:26 2000

(8,16,9) <- (4,4,3).*(2, 2+2,3): 32.704746 Mflop/s
(14,28,15) <- (7,7,5).*(2, 2+2,3): 27.844287 Mflop/s

Testing m0 = 2, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 32.704746
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 28 15 14 28 28 15 14 15
<<< (M = 14, K = 28, N = 15) : 27.844287
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 2,3) :    30.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3558 (31.6%), 7692 (68.4%) left; Finishing by Sat Oct 21  6:23:22 2000

(9,12,9) <- (3,0,9).*(3, 10+2,1): 148.481861 Mflop/s
(15,12,15) <- (5,1,15).*(3, 10+2,1): 150.352237 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 148.481861
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 150.352237
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 10,1) :   149.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3559 (31.6%), 7691 (68.4%) left; Finishing by Sat Oct 21  6:23:25 2000

(8,11,9) <- (2,1,9).*(4, 9+2,1): 120.930310 Mflop/s
(12,11,15) <- (3,1,15).*(4, 9+2,1): 123.313502 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 120.930310
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 123.313502
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 9,1) :   122.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3560 (31.6%), 7690 (68.4%) left; Finishing by Sat Oct 21  6:23:27 2000

(8,10,8) <- (1,1,4).*(8, 8+2,2): 96.685456 Mflop/s
(8,10,14) <- (1,1,7).*(8, 8+2,2): 96.948393 Mflop/s

Testing m0 = 8, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 8 8 10 10 8 8 8
<<< (M = 8, K = 10, N = 8) : 96.685456
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 14 8 10 10 14 8 14
<<< (M = 8, K = 10, N = 14) : 96.948393
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 8,2) :    96.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3561 (31.7%), 7689 (68.3%) left; Finishing by Sat Oct 21  6:23:29 2000

(9,16,8) <- (9,0,1).*(1, 14+2,8): 108.620539 Mflop/s
(15,16,8) <- (15,1,1).*(1, 14+2,8): 109.181880 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 108.620539
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 8 15 16 16 8 15 8
<<< (M = 15, K = 16, N = 8) : 109.181880
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,8) :   108.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3562 (31.7%), 7688 (68.3%) left; Finishing by Sat Oct 21  6:23:29 2000

(8,12,8) <- (2,2,4).*(4, 4+2,2): 33.012409 Mflop/s
(12,18,14) <- (3,3,7).*(4, 4+2,2): 28.529345 Mflop/s

Testing m0 = 4, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 33.012409
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 14 12 18 18 14 12 14
<<< (M = 12, K = 18, N = 14) : 28.529345
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 4,2) :    30.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3563 (31.7%), 7687 (68.3%) left; Finishing by Sat Oct 21  6:23:28 2000

(7,8,9) <- (1,1,9).*(7, 6+2,1): 26.421075 Mflop/s
(14,16,15) <- (2,2,15).*(7, 6+2,1): 37.104741 Mflop/s

Testing m0 = 7, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 8 9 7 8 8 9 7 9
<<< (M = 7, K = 8, N = 9) : 26.421075
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 37.104741
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 6,1) :    30.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3564 (31.7%), 7686 (68.3%) left; Finishing by Sat Oct 21  6:23:24 2000

(8,16,9) <- (2,4,3).*(4, 2+2,3): 111.998774 Mflop/s
(12,28,15) <- (3,7,5).*(4, 2+2,3): 116.817662 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 111.998774
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 28 15 12 28 28 15 12 15
<<< (M = 12, K = 28, N = 15) : 116.817662
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 2,3) :   114.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3565 (31.7%), 7685 (68.3%) left; Finishing by Sat Oct 21  6:23:23 2000

(9,16,9) <- (9,0,1).*(1, 14+2,9): 80.491296 Mflop/s
(15,16,9) <- (15,1,1).*(1, 14+2,9): 80.727546 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 80.491296
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 9 15 16 16 9 15 9
<<< (M = 15, K = 16, N = 9) : 80.727546
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,9) :    80.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3566 (31.7%), 7684 (68.3%) left; Finishing by Sat Oct 21  6:23:22 2000

(5,7,8) <- (1,1,4).*(5, 5+2,2): 23.884226 Mflop/s
(15,21,14) <- (3,3,7).*(5, 5+2,2): 34.308732 Mflop/s

Testing m0 = 5, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 7 8 5 7 7 8 5 8
<<< (M = 5, K = 7, N = 8) : 23.884226
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 14 15 21 21 14 15 14
<<< (M = 15, K = 21, N = 14) : 34.308732
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 5,2) :    28.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3567 (31.7%), 7683 (68.3%) left; Finishing by Sat Oct 21  6:23:22 2000

(16,12,9) <- (0,0,9).*(16, 10+2,1): 26.941893 Mflop/s
(16,12,15) <- (0,1,15).*(16, 10+2,1): 27.067471 Mflop/s

Testing m0 = 16, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 16  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 9 16 12 12 9 16 9
<<< (M = 16, K = 12, N = 9) : 26.941893
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 15 16 12 12 15 16 15
<<< (M = 16, K = 12, N = 15) : 27.067471
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (16, 10,1) :    27.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3568 (31.7%), 7682 (68.3%) left; Finishing by Sat Oct 21  6:23:21 2000

(9,12,9) <- (9,0,9).*(1, 10+2,1): 125.592016 Mflop/s
(15,12,15) <- (15,1,15).*(1, 10+2,1): 130.134075 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 125.592016
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 130.134075
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,1) :   127.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3569 (31.7%), 7681 (68.3%) left; Finishing by Sat Oct 21  6:23:20 2000

(13,8,9) <- (0,1,9).*(13, 6+2,1): 91.880041 Mflop/s
(13,16,15) <- (1,2,15).*(13, 6+2,1): 119.296965 Mflop/s

Testing m0 = 13, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 13  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 8 9 13 8 8 9 13 9
<<< (M = 13, K = 8, N = 9) : 91.880041
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 16 15 13 16 16 15 13 15
<<< (M = 13, K = 16, N = 15) : 119.296965
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (13, 6,1) :   103.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3570 (31.7%), 7680 (68.3%) left; Finishing by Sat Oct 21  6:23:19 2000

(9,15,14) <- (9,3,0).*(1, 3+2,14): 105.761571 Mflop/s
(15,25,14) <- (15,5,1).*(1, 3+2,14): 109.141219 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 14 9 15 15 14 9 14
<<< (M = 9, K = 15, N = 14) : 105.761571
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 14 15 25 25 14 15 14
<<< (M = 15, K = 25, N = 14) : 109.141219
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,14) :   107.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3571 (31.7%), 7679 (68.3%) left; Finishing by Sat Oct 21  6:23:18 2000

(10,15,9) <- (0,3,9).*(10, 3+2,1): 30.196590 Mflop/s
(10,25,15) <- (1,5,15).*(10, 3+2,1): 26.543975 Mflop/s

Testing m0 = 10, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 10  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 15 9 10 15 15 9 10 9
<<< (M = 10, K = 15, N = 9) : 30.196590
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 25 15 10 25 25 15 10 15
<<< (M = 10, K = 25, N = 15) : 26.543975
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (10, 3,1) :    28.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3572 (31.8%), 7678 (68.2%) left; Finishing by Sat Oct 21  6:23:14 2000

(11,15,9) <- (0,3,9).*(11, 3+2,1): 72.809613 Mflop/s
(11,25,15) <- (1,5,15).*(11, 3+2,1): 76.441244 Mflop/s

Testing m0 = 11, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 11  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 15 9 11 15 15 9 11 9
<<< (M = 11, K = 15, N = 9) : 72.809613
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 25 15 11 25 25 15 11 15
<<< (M = 11, K = 25, N = 15) : 76.441244
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (11, 3,1) :    74.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3573 (31.8%), 7677 (68.2%) left; Finishing by Sat Oct 21  6:23:14 2000

(5,12,9) <- (1,2,3).*(5, 4+2,3): 29.331824 Mflop/s
(15,18,15) <- (3,3,5).*(5, 4+2,3): 25.975653 Mflop/s

Testing m0 = 5, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 29.331824
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 25.975653
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 4,3) :    27.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3574 (31.8%), 7676 (68.2%) left; Finishing by Sat Oct 21  6:23:13 2000

(8,9,8) <- (2,1,4).*(4, 7+2,2): 26.402656 Mflop/s
(12,18,14) <- (3,2,7).*(4, 7+2,2): 32.980034 Mflop/s

Testing m0 = 4, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 26.402656
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 18 14 12 18 18 14 12 14
<<< (M = 12, K = 18, N = 14) : 32.980034
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 7,2) :    29.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3575 (31.8%), 7675 (68.2%) left; Finishing by Sat Oct 21  6:23:12 2000

(5,9,9) <- (1,1,3).*(5, 7+2,3): 24.332414 Mflop/s
(15,18,15) <- (3,2,5).*(5, 7+2,3): 29.257188 Mflop/s

Testing m0 = 5, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 9 9 5 9 9 9 5 9
<<< (M = 5, K = 9, N = 9) : 24.332414
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 29.257188
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 7,3) :    26.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3576 (31.8%), 7674 (68.2%) left; Finishing by Sat Oct 21  6:23:11 2000

(9,9,9) <- (9,1,9).*(1, 7+2,1): 113.470518 Mflop/s
(15,18,15) <- (15,2,15).*(1, 7+2,1): 150.633140 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 113.470518
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 150.633140
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,1) :   129.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3577 (31.8%), 7673 (68.2%) left; Finishing by Sat Oct 21  6:23:07 2000

(16,15,9) <- (0,3,9).*(16, 3+2,1): 25.979715 Mflop/s
(16,25,15) <- (0,5,15).*(16, 3+2,1): 23.735544 Mflop/s

Testing m0 = 16, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 16  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 15 9 16 15 15 9 16 9
<<< (M = 16, K = 15, N = 9) : 25.979715
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 25 15 16 25 25 15 16 15
<<< (M = 16, K = 25, N = 15) : 23.735544
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (16, 3,1) :    24.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3578 (31.8%), 7672 (68.2%) left; Finishing by Sat Oct 21  6:23:07 2000

(9,9,5) <- (3,1,1).*(3, 7+2,5): 106.946687 Mflop/s
(15,18,15) <- (5,2,3).*(3, 7+2,5): 135.111197 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  7 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 5 9 9 9 5 9 5
<<< (M = 9, K = 9, N = 5) : 106.946687
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 135.111197
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 7,5) :   119.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3579 (31.8%), 7671 (68.2%) left; Finishing by Sat Oct 21  6:23:09 2000

(7,7,8) <- (1,1,4).*(7, 5+2,2): 20.505391 Mflop/s
(14,21,14) <- (2,3,7).*(7, 5+2,2): 31.224561 Mflop/s

Testing m0 = 7, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 7 8 7 7 7 8 7 8
<<< (M = 7, K = 7, N = 8) : 20.505391
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 14 14 21 21 14 14 14
<<< (M = 14, K = 21, N = 14) : 31.224561
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 5,2) :    24.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3580 (31.8%), 7670 (68.2%) left; Finishing by Sat Oct 21  6:23:08 2000

(7,15,8) <- (1,3,4).*(7, 3+2,2): 23.712546 Mflop/s
(14,25,14) <- (2,5,7).*(7, 3+2,2): 27.997959 Mflop/s

Testing m0 = 7, k0 =  3, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  3 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 15 8 7 15 15 8 7 8
<<< (M = 7, K = 15, N = 8) : 23.712546
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 25 14 14 25 25 14 14 14
<<< (M = 14, K = 25, N = 14) : 27.997959
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 3,2) :    25.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3581 (31.8%), 7669 (68.2%) left; Finishing by Sat Oct 21  6:23:07 2000

(8,13,9) <- (2,0,9).*(4, 11+2,1): 122.648615 Mflop/s
(12,13,15) <- (3,1,15).*(4, 11+2,1): 128.260849 Mflop/s

Testing m0 = 4, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 9 8 13 13 9 8 9
<<< (M = 8, K = 13, N = 9) : 122.648615
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 128.260849
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 11,1) :   125.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3582 (31.8%), 7668 (68.2%) left; Finishing by Sat Oct 21  6:23:07 2000

(9,27,7) <- (9,9,1).*(1,1+2,7): 100.637881 Mflop/s
(15,45,14) <- (15,15,2).*(1,1+2,7): 78.132313 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 7 9 27 27 7 9 7
<<< (M = 9, K = 27, N = 7) : 100.637881
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 14 15 45 45 14 15 14
<<< (M = 15, K = 45, N = 14) : 78.132313
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,7) :    88.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3583 (31.8%), 7667 (68.2%) left; Finishing by Sat Oct 21  6:23:03 2000

(9,14,8) <- (9,0,4).*(1, 12+2,2): 150.444300 Mflop/s
(15,14,14) <- (15,1,7).*(1, 12+2,2): 155.868333 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 150.444300
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 14 15 14 14 14 15 14
<<< (M = 15, K = 14, N = 14) : 155.868333
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,2) :   153.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3584 (31.9%), 7666 (68.1%) left; Finishing by Sat Oct 21  6:23:02 2000

(5,14,9) <- (1,0,9).*(5, 12+2,1): 55.470820 Mflop/s
(15,14,15) <- (3,1,15).*(5, 12+2,1): 63.316146 Mflop/s

Testing m0 = 5, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 14 9 5 14 14 9 5 9
<<< (M = 5, K = 14, N = 9) : 55.470820
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 63.316146
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 12,1) :    59.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3585 (31.9%), 7665 (68.1%) left; Finishing by Sat Oct 21  6:23:01 2000

(5,12,9) <- (1,0,3).*(5, 10+2,3): 24.658924 Mflop/s
(15,12,15) <- (3,1,5).*(5, 10+2,3): 25.348442 Mflop/s

Testing m0 = 5, k0 =  10, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  10 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 12 9 5 12 12 9 5 9
<<< (M = 5, K = 12, N = 9) : 24.658924
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 25.348442
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 10,3) :    25.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3586 (31.9%), 7664 (68.1%) left; Finishing by Sat Oct 21  6:23:00 2000

(9,7,5) <- (3,1,1).*(3, 5+2,5): 101.413454 Mflop/s
(15,21,15) <- (5,3,3).*(3, 5+2,5): 148.138934 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  5 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 5 9 7 7 5 9 5
<<< (M = 9, K = 7, N = 5) : 101.413454
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 15 15 21 21 15 15 15
<<< (M = 15, K = 21, N = 15) : 148.138934
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 5,5) :   120.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3587 (31.9%), 7663 (68.1%) left; Finishing by Sat Oct 21  6:23:03 2000

(9,9,8) <- (3,1,2).*(3, 7+2,4): 109.460988 Mflop/s
(15,18,12) <- (5,2,3).*(3, 7+2,4): 134.436913 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  7 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 8 9 9 9 8 9 8
<<< (M = 9, K = 9, N = 8) : 109.460988
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 12 15 18 18 12 15 12
<<< (M = 15, K = 18, N = 12) : 134.436913
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 7,4) :   120.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3588 (31.9%), 7662 (68.1%) left; Finishing by Sat Oct 21  6:22:59 2000

(9,27,5) <- (3,9,1).*(3,1+2,5): 22.540152 Mflop/s
(15,45,15) <- (5,15,3).*(3,1+2,5): 25.160242 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3 1 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 5 9 27 27 5 9 5
<<< (M = 9, K = 27, N = 5) : 22.540152
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 15 15 45 45 15 15 15
<<< (M = 15, K = 45, N = 15) : 25.160242
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3,1,5) :    23.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3589 (31.9%), 7661 (68.1%) left; Finishing by Sat Oct 21  6:22:58 2000

(8,7,8) <- (1,1,4).*(8, 5+2,2): 91.854567 Mflop/s
(8,21,14) <- (1,3,7).*(8, 5+2,2): 130.139424 Mflop/s

Testing m0 = 8, k0 =  5, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  5 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 8 8 7 7 8 8 8
<<< (M = 8, K = 7, N = 8) : 91.854567
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 21 14 8 21 21 14 8 14
<<< (M = 8, K = 21, N = 14) : 130.139424
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 5,2) :   107.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3590 (31.9%), 7660 (68.1%) left; Finishing by Sat Oct 21  6:23:00 2000

(8,10,5) <- (4,1,1).*(2, 8+2,5): 23.931750 Mflop/s
(14,10,15) <- (7,1,3).*(2, 8+2,5): 25.781572 Mflop/s

Testing m0 = 2, k0 =  8, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  8 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 10 5 8 10 10 5 8 5
<<< (M = 8, K = 10, N = 5) : 23.931750
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 25.781572
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 8,5) :    24.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3591 (31.9%), 7659 (68.1%) left; Finishing by Sat Oct 21  6:23:00 2000

(9,12,16) <- (9,2,0).*(1, 4+2,16): 115.392912 Mflop/s
(15,18,16) <- (15,3,0).*(1, 4+2,16): 99.701182 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 16 9 12 12 16 9 16
<<< (M = 9, K = 12, N = 16) : 115.392912
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 16 15 18 18 16 15 16
<<< (M = 15, K = 18, N = 16) : 99.701182
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,16) :   107.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3592 (31.9%), 7658 (68.1%) left; Finishing by Sat Oct 21  6:22:59 2000

(9,14,9) <- (3,0,3).*(3, 12+2,3): 117.164899 Mflop/s
(15,14,15) <- (5,1,5).*(3, 12+2,3): 118.945760 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 117.164899
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 118.945760
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 12,3) :   118.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3593 (31.9%), 7657 (68.1%) left; Finishing by Sat Oct 21  6:22:58 2000

(9,15,9) <- (1,0,9).*(9, 13+2,1): 33.155409 Mflop/s
(9,15,15) <- (1,1,15).*(9, 13+2,1): 33.245352 Mflop/s

Testing m0 = 9, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 9  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 9 9 15 15 9 9 9
<<< (M = 9, K = 15, N = 9) : 33.155409
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 15 9 15 15 15 9 15
<<< (M = 9, K = 15, N = 15) : 33.245352
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (9, 13,1) :    33.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3594 (31.9%), 7656 (68.1%) left; Finishing by Sat Oct 21  6:22:57 2000

(8,14,8) <- (4,0,1).*(2, 12+2,8): 25.440164 Mflop/s
(14,14,8) <- (7,1,1).*(2, 12+2,8): 25.461697 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  12 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 25.440164
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 8 14 14 14 8 14 8
<<< (M = 14, K = 14, N = 8) : 25.461697
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 12,8) :    25.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3595 (32.0%), 7655 (68.0%) left; Finishing by Sat Oct 21  6:22:56 2000

(7,11,8) <- (1,1,4).*(7, 9+2,2): 21.587662 Mflop/s
(14,11,14) <- (2,1,7).*(7, 9+2,2): 24.464663 Mflop/s

Testing m0 = 7, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 11 8 7 11 11 8 7 8
<<< (M = 7, K = 11, N = 8) : 21.587662
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 14 14 11 11 14 14 14
<<< (M = 14, K = 11, N = 14) : 24.464663
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 9,2) :    22.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3596 (32.0%), 7654 (68.0%) left; Finishing by Sat Oct 21  6:22:56 2000

(8,14,9) <- (4,0,3).*(2, 12+2,3): 32.584034 Mflop/s
(14,14,15) <- (7,1,5).*(2, 12+2,3): 23.667387 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 32.584034
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 23.667387
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 12,3) :    27.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3597 (32.0%), 7653 (68.0%) left; Finishing by Sat Oct 21  6:22:55 2000

(9,14,9) <- (9,0,1).*(1, 12+2,9): 79.340535 Mflop/s
(15,14,9) <- (15,1,1).*(1, 12+2,9): 79.595550 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 79.340535
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 79.595550
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,9) :    79.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3598 (32.0%), 7652 (68.0%) left; Finishing by Sat Oct 21  6:22:54 2000

(8,8,7) <- (4,1,1).*(2, 6+2,7): 24.265890 Mflop/s
(14,16,14) <- (7,2,2).*(2, 6+2,7): 26.626739 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  6 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 7 8 8 8 7 8 7
<<< (M = 8, K = 8, N = 7) : 24.265890
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 26.626739
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 6,7) :    25.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3599 (32.0%), 7651 (68.0%) left; Finishing by Sat Oct 21  6:22:53 2000

(9,12,9) <- (9,2,1).*(1, 4+2,9): 95.723083 Mflop/s
(15,18,9) <- (15,3,1).*(1, 4+2,9): 81.783993 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 95.723083
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 9 15 18 18 9 15 9
<<< (M = 15, K = 18, N = 9) : 81.783993
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,9) :    88.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3600 (32.0%), 7650 (68.0%) left; Finishing by Sat Oct 21  6:22:53 2000

(10,9,9) <- (0,1,9).*(10, 7+2,1): 74.845905 Mflop/s
(10,18,15) <- (1,2,15).*(10, 7+2,1): 106.653450 Mflop/s

Testing m0 = 10, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 10  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 9 9 10 9 9 9 10 9
<<< (M = 10, K = 9, N = 9) : 74.845905
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 18 15 10 18 18 15 10 15
<<< (M = 10, K = 18, N = 15) : 106.653450
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (10, 7,1) :    88.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3601 (32.0%), 7649 (68.0%) left; Finishing by Sat Oct 21  6:22:49 2000

(8,16,9) <- (4,0,9).*(2, 14+2,1): 180.517774 Mflop/s
(14,16,15) <- (7,1,15).*(2, 14+2,1): 185.067396 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 9 8 16 16 9 8 9
<<< (M = 8, K = 16, N = 9) : 180.517774
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 185.067396
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 14,1) :   182.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3602 (32.0%), 7648 (68.0%) left; Finishing by Sat Oct 21  6:22:51 2000

(8,12,9) <- (1,2,9).*(8, 4+2,1): 90.311450 Mflop/s
(8,18,15) <- (1,3,15).*(8, 4+2,1): 85.020881 Mflop/s

Testing m0 = 8, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 9 8 12 12 9 8 9
<<< (M = 8, K = 12, N = 9) : 90.311450
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 15 8 18 18 15 8 15
<<< (M = 8, K = 18, N = 15) : 85.020881
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 4,1) :    87.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3603 (32.0%), 7647 (68.0%) left; Finishing by Sat Oct 21  6:22:50 2000

(6,15,8) <- (1,0,4).*(6, 13+2,2): 105.468172 Mflop/s
(12,15,14) <- (2,1,7).*(6, 13+2,2): 107.511128 Mflop/s

Testing m0 = 6, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 15 8 6 15 15 8 6 8
<<< (M = 6, K = 15, N = 8) : 105.468172
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 107.511128
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 13,2) :   106.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3604 (32.0%), 7646 (68.0%) left; Finishing by Sat Oct 21  6:22:49 2000

(12,7,9) <- (0,1,9).*(12, 5+2,1): 26.755992 Mflop/s
(12,21,15) <- (1,3,15).*(12, 5+2,1): 35.803967 Mflop/s

Testing m0 = 12, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 12  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 7 9 12 7 7 9 12 9
<<< (M = 12, K = 7, N = 9) : 26.755992
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 15 12 21 21 15 12 15
<<< (M = 12, K = 21, N = 15) : 35.803967
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (12, 5,1) :    30.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3605 (32.0%), 7645 (68.0%) left; Finishing by Sat Oct 21  6:22:49 2000

(8,15,8) <- (1,0,4).*(8, 13+2,2): 104.640252 Mflop/s
(8,15,14) <- (1,1,7).*(8, 13+2,2): 105.406168 Mflop/s

Testing m0 = 8, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 104.640252
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 14 8 15 15 14 8 14
<<< (M = 8, K = 15, N = 14) : 105.406168
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 13,2) :   105.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3606 (32.1%), 7644 (67.9%) left; Finishing by Sat Oct 21  6:22:48 2000

(8,9,5) <- (4,1,1).*(2, 7+2,5): 23.728304 Mflop/s
(14,18,15) <- (7,2,3).*(2, 7+2,5): 30.076348 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  7 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 5 8 9 9 5 8 5
<<< (M = 8, K = 9, N = 5) : 23.728304
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 15 14 18 18 15 14 15
<<< (M = 14, K = 18, N = 15) : 30.076348
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 7,5) :    26.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3607 (32.1%), 7643 (67.9%) left; Finishing by Sat Oct 21  6:22:47 2000

(9,8,16) <- (9,1,0).*(1, 6+2,16): 93.509408 Mflop/s
(15,16,16) <- (15,2,0).*(1, 6+2,16): 113.161658 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 16 9 8 8 16 9 16
<<< (M = 9, K = 8, N = 16) : 93.509408
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 16 15 16 16 16 15 16
<<< (M = 15, K = 16, N = 16) : 113.161658
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,16) :   102.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3608 (32.1%), 7642 (67.9%) left; Finishing by Sat Oct 21  6:22:46 2000

(8,17,8) <- (4,0,1).*(2, 15+2,8): 25.705231 Mflop/s
(14,17,8) <- (7,1,1).*(2, 15+2,8): 25.897355 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  15 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 8 8 17 17 8 8 8
<<< (M = 8, K = 17, N = 8) : 25.705231
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 17 8 14 17 17 8 14 8
<<< (M = 14, K = 17, N = 8) : 25.897355
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 15,8) :    25.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3609 (32.1%), 7641 (67.9%) left; Finishing by Sat Oct 21  6:22:49 2000

(8,27,9) <- (4,9,9).*(2,1+2,1): 88.054610 Mflop/s
(14,45,15) <- (7,15,15).*(2,1+2,1): 90.874370 Mflop/s

Testing m0 = 2, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 27 9 8 27 27 9 8 9
<<< (M = 8, K = 27, N = 9) : 88.054610
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 45 15 14 45 45 15 14 15
<<< (M = 14, K = 45, N = 15) : 90.874370
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2,1,1) :    89.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3610 (32.1%), 7640 (67.9%) left; Finishing by Sat Oct 21  6:22:45 2000

(14,7,9) <- (0,1,9).*(14, 5+2,1): 23.801269 Mflop/s
(14,21,15) <- (1,3,15).*(14, 5+2,1): 35.663371 Mflop/s

Testing m0 = 14, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 14  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 7 9 14 7 7 9 14 9
<<< (M = 14, K = 7, N = 9) : 23.801269
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 15 14 21 21 15 14 15
<<< (M = 14, K = 21, N = 15) : 35.663371
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (14, 5,1) :    28.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3611 (32.1%), 7639 (67.9%) left; Finishing by Sat Oct 21  6:22:47 2000

(9,14,9) <- (3,0,9).*(3, 12+2,1): 166.758140 Mflop/s
(15,14,15) <- (5,1,15).*(3, 12+2,1): 169.956854 Mflop/s

Testing m0 = 3, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 9 9 14 14 9 9 9
<<< (M = 9, K = 14, N = 9) : 166.758140
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 169.956854
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 12,1) :   168.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3612 (32.1%), 7638 (67.9%) left; Finishing by Sat Oct 21  6:22:43 2000

(9,11,14) <- (9,1,0).*(1, 9+2,14): 95.958294 Mflop/s
(15,11,14) <- (15,1,1).*(1, 9+2,14): 96.249592 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 14 9 11 11 14 9 14
<<< (M = 9, K = 11, N = 14) : 95.958294
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 96.249592
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,14) :    96.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3613 (32.1%), 7637 (67.9%) left; Finishing by Sat Oct 21  6:22:42 2000

(9,13,8) <- (3,0,4).*(3, 11+2,2): 114.598583 Mflop/s
(15,13,14) <- (5,1,7).*(3, 11+2,2): 115.854784 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 8 9 13 13 8 9 8
<<< (M = 9, K = 13, N = 8) : 114.598583
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 14 15 13 13 14 15 14
<<< (M = 15, K = 13, N = 14) : 115.854784
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 11,2) :   115.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3614 (32.1%), 7636 (67.9%) left; Finishing by Sat Oct 21  6:22:42 2000

(6,13,8) <- (1,0,4).*(6, 11+2,2): 104.196390 Mflop/s
(12,13,14) <- (2,1,7).*(6, 11+2,2): 105.382961 Mflop/s

Testing m0 = 6, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 13 8 6 13 13 8 6 8
<<< (M = 6, K = 13, N = 8) : 104.196390
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 14 12 13 13 14 12 14
<<< (M = 12, K = 13, N = 14) : 105.382961
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 11,2) :   104.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3615 (32.1%), 7635 (67.9%) left; Finishing by Sat Oct 21  6:22:44 2000

(9,12,16) <- (9,0,0).*(1, 10+2,16): 97.742873 Mflop/s
(15,12,16) <- (15,1,0).*(1, 10+2,16): 98.003145 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 16 9 12 12 16 9 16
<<< (M = 9, K = 12, N = 16) : 97.742873
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 16 15 12 12 16 15 16
<<< (M = 15, K = 12, N = 16) : 98.003145
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,16) :    97.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3616 (32.1%), 7634 (67.9%) left; Finishing by Sat Oct 21  6:22:43 2000

(9,15,8) <- (3,0,2).*(3, 13+2,4): 116.811471 Mflop/s
(15,15,12) <- (5,1,3).*(3, 13+2,4): 118.052337 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 116.811471
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 118.052337
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 13,4) :   117.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3617 (32.2%), 7633 (67.8%) left; Finishing by Sat Oct 21  6:22:42 2000

(13,16,9) <- (0,0,9).*(13, 14+2,1): 27.581622 Mflop/s
(13,16,15) <- (1,1,15).*(13, 14+2,1): 29.297343 Mflop/s

Testing m0 = 13, k0 =  14, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 13  14 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 16 9 13 16 16 9 13 9
<<< (M = 13, K = 16, N = 9) : 27.581622
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 16 15 13 16 16 15 13 15
<<< (M = 13, K = 16, N = 15) : 29.297343
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (13, 14,1) :    28.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3618 (32.2%), 7632 (67.8%) left; Finishing by Sat Oct 21  6:22:45 2000

(8,11,8) <- (2,1,2).*(4, 9+2,4): 25.335024 Mflop/s
(12,11,12) <- (3,1,3).*(4, 9+2,4): 25.381295 Mflop/s

Testing m0 = 4, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 25.335024
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 12 12 11 11 12 12 12
<<< (M = 12, K = 11, N = 12) : 25.381295
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 9,4) :    25.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3619 (32.2%), 7631 (67.8%) left; Finishing by Sat Oct 21  6:22:44 2000

(8,15,8) <- (2,0,4).*(4, 13+2,2): 27.313521 Mflop/s
(12,15,14) <- (3,1,7).*(4, 13+2,2): 29.160057 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 27.313521
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 14 12 15 15 14 12 14
<<< (M = 12, K = 15, N = 14) : 29.160057
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 13,2) :    28.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3620 (32.2%), 7630 (67.8%) left; Finishing by Sat Oct 21  6:22:43 2000

(8,14,9) <- (2,0,3).*(4, 12+2,3): 26.309046 Mflop/s
(12,14,15) <- (3,1,5).*(4, 12+2,3): 27.849354 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  12 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 26.309046
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 15 12 14 14 15 12 15
<<< (M = 12, K = 14, N = 15) : 27.849354
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 12,3) :    27.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3621 (32.2%), 7629 (67.8%) left; Finishing by Sat Oct 21  6:22:42 2000

(9,12,5) <- (9,0,1).*(1, 10+2,5): 61.265680 Mflop/s
(15,12,15) <- (15,1,3).*(1, 10+2,5): 111.631781 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 61.265680
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 111.631781
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,5) :    79.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3622 (32.2%), 7628 (67.8%) left; Finishing by Sat Oct 21  6:22:42 2000

(9,16,10) <- (9,0,0).*(1, 14+2,10): 100.245060 Mflop/s
(15,16,10) <- (15,1,1).*(1, 14+2,10): 100.313427 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 10 9 16 16 10 9 10
<<< (M = 9, K = 16, N = 10) : 100.245060
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 10 15 16 16 10 15 10
<<< (M = 15, K = 16, N = 10) : 100.313427
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,10) :   100.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3623 (32.2%), 7627 (67.8%) left; Finishing by Sat Oct 21  6:22:41 2000

(14,15,9) <- (0,0,9).*(14, 13+2,1): 90.971095 Mflop/s
(14,15,15) <- (1,1,15).*(14, 13+2,1): 94.602934 Mflop/s

Testing m0 = 14, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 14  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 9 14 15 15 9 14 9
<<< (M = 14, K = 15, N = 9) : 90.971095
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 15 14 15 15 15 14 15
<<< (M = 14, K = 15, N = 15) : 94.602934
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (14, 13,1) :    92.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3624 (32.2%), 7626 (67.8%) left; Finishing by Sat Oct 21  6:22:40 2000

(12,15,9) <- (0,3,9).*(12, 3+2,1): 27.697764 Mflop/s
(12,25,15) <- (1,5,15).*(12, 3+2,1): 28.857775 Mflop/s

Testing m0 = 12, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 12  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 9 12 15 15 9 12 9
<<< (M = 12, K = 15, N = 9) : 27.697764
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 25 15 12 25 25 15 12 15
<<< (M = 12, K = 25, N = 15) : 28.857775
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (12, 3,1) :    28.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3625 (32.2%), 7625 (67.8%) left; Finishing by Sat Oct 21  6:22:39 2000

(9,13,6) <- (9,0,1).*(1, 11+2,6): 117.459539 Mflop/s
(15,13,12) <- (15,1,2).*(1, 11+2,6): 121.122950 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 6 9 13 13 6 9 6
<<< (M = 9, K = 13, N = 6) : 117.459539
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 12 15 13 13 12 15 12
<<< (M = 15, K = 13, N = 12) : 121.122950
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,6) :   119.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3626 (32.2%), 7624 (67.8%) left; Finishing by Sat Oct 21  6:22:42 2000

(15,17,9) <- (0,0,9).*(15, 15+2,1): 26.086240 Mflop/s
(15,17,15) <- (1,1,15).*(15, 15+2,1): 27.069396 Mflop/s

Testing m0 = 15, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 15  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 9 15 17 17 9 15 9
<<< (M = 15, K = 17, N = 9) : 26.086240
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 15 15 17 17 15 15 15
<<< (M = 15, K = 17, N = 15) : 27.069396
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (15, 15,1) :    26.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3627 (32.2%), 7623 (67.8%) left; Finishing by Sat Oct 21  6:22:44 2000

(16,7,9) <- (0,1,9).*(16, 5+2,1): 24.931284 Mflop/s
(16,21,15) <- (0,3,15).*(16, 5+2,1): 34.082802 Mflop/s

Testing m0 = 16, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 16  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 7 9 16 7 7 9 16 9
<<< (M = 16, K = 7, N = 9) : 24.931284
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 21 15 16 21 21 15 16 15
<<< (M = 16, K = 21, N = 15) : 34.082802
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (16, 5,1) :    28.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3628 (32.2%), 7622 (67.8%) left; Finishing by Sat Oct 21  6:22:43 2000

(9,16,8) <- (9,4,4).*(1, 2+2,2): 130.255952 Mflop/s
(15,28,14) <- (15,7,7).*(1, 2+2,2): 147.682472 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 130.255952
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 14 15 28 28 14 15 14
<<< (M = 15, K = 28, N = 14) : 147.682472
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,2) :   138.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3629 (32.3%), 7621 (67.7%) left; Finishing by Sat Oct 21  6:22:39 2000

(7,12,8) <- (1,0,4).*(7, 10+2,2): 21.821025 Mflop/s
(14,12,14) <- (2,1,7).*(7, 10+2,2): 24.440172 Mflop/s

Testing m0 = 7, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 12 8 7 12 12 8 7 8
<<< (M = 7, K = 12, N = 8) : 21.821025
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 24.440172
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 10,2) :    23.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3630 (32.3%), 7620 (67.7%) left; Finishing by Sat Oct 21  6:22:42 2000

(9,8,9) <- (9,1,3).*(1, 6+2,3): 86.324920 Mflop/s
(15,16,15) <- (15,2,5).*(1, 6+2,3): 66.947617 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 86.324920
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 66.947617
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,3) :    75.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3631 (32.3%), 7619 (67.7%) left; Finishing by Sat Oct 21  6:22:38 2000

(9,9,7) <- (9,1,1).*(1, 7+2,7): 103.683490 Mflop/s
(15,18,14) <- (15,2,2).*(1, 7+2,7): 79.752077 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 7 9 9 9 7 9 7
<<< (M = 9, K = 9, N = 7) : 103.683490
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 79.752077
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,7) :    90.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3632 (32.3%), 7618 (67.7%) left; Finishing by Sat Oct 21  6:22:40 2000

(8,8,5) <- (4,1,1).*(2, 6+2,5): 23.384227 Mflop/s
(14,16,15) <- (7,2,3).*(2, 6+2,5): 30.732551 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  6 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 5 8 8 8 5 8 5
<<< (M = 8, K = 8, N = 5) : 23.384227
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 30.732551
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 6,5) :    26.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3633 (32.3%), 7617 (67.7%) left; Finishing by Sat Oct 21  6:22:39 2000

(9,13,10) <- (9,0,0).*(1, 11+2,10): 97.417596 Mflop/s
(15,13,10) <- (15,1,1).*(1, 11+2,10): 97.649777 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 10 9 13 13 10 9 10
<<< (M = 9, K = 13, N = 10) : 97.417596
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 10 15 13 13 10 15 10
<<< (M = 15, K = 13, N = 10) : 97.649777
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,10) :    97.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3634 (32.3%), 7616 (67.7%) left; Finishing by Sat Oct 21  6:22:39 2000

(9,11,8) <- (3,1,2).*(3, 9+2,4): 113.040046 Mflop/s
(15,11,12) <- (5,1,3).*(3, 9+2,4): 114.554039 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  9 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 113.040046
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 12 15 11 11 12 15 12
<<< (M = 15, K = 11, N = 12) : 114.554039
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 9,4) :   113.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3635 (32.3%), 7615 (67.7%) left; Finishing by Sat Oct 21  6:22:41 2000

(13,9,9) <- (0,1,9).*(13, 7+2,1): 94.580072 Mflop/s
(13,18,15) <- (1,2,15).*(13, 7+2,1): 120.960667 Mflop/s

Testing m0 = 13, k0 =  7, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 13  7 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 9 9 13 9 9 9 13 9
<<< (M = 13, K = 9, N = 9) : 94.580072
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 18 15 13 18 18 15 13 15
<<< (M = 13, K = 18, N = 15) : 120.960667
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (13, 7,1) :   106.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3636 (32.3%), 7614 (67.7%) left; Finishing by Sat Oct 21  6:22:40 2000

(8,12,6) <- (4,2,1).*(2, 4+2,6): 29.598540 Mflop/s
(14,18,12) <- (7,3,2).*(2, 4+2,6): 24.312602 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  4 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 6 8 12 12 6 8 6
<<< (M = 8, K = 12, N = 6) : 29.598540
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 12 14 18 18 12 14 12
<<< (M = 14, K = 18, N = 12) : 24.312602
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 4,6) :    26.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3637 (32.3%), 7613 (67.7%) left; Finishing by Sat Oct 21  6:22:39 2000

(9,8,9) <- (9,1,9).*(1, 6+2,1): 116.940173 Mflop/s
(15,16,15) <- (15,2,15).*(1, 6+2,1): 159.788722 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 116.940173
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 159.788722
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,1) :   135.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3638 (32.3%), 7612 (67.7%) left; Finishing by Sat Oct 21  6:22:42 2000

(13,12,9) <- (0,2,9).*(13, 4+2,1): 90.550721 Mflop/s
(13,18,15) <- (1,3,15).*(13, 4+2,1): 76.512602 Mflop/s

Testing m0 = 13, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 13  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 12 9 13 12 12 9 13 9
<<< (M = 13, K = 12, N = 9) : 90.550721
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 18 15 13 18 18 15 13 15
<<< (M = 13, K = 18, N = 15) : 76.512602
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (13, 4,1) :    82.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3639 (32.3%), 7611 (67.7%) left; Finishing by Sat Oct 21  6:22:41 2000

(8,15,9) <- (2,0,9).*(4, 13+2,1): 133.647036 Mflop/s
(12,15,15) <- (3,1,15).*(4, 13+2,1): 133.215957 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 133.647036
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 133.215957
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 13,1) :   133.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3640 (32.4%), 7610 (67.6%) left; Finishing by Sat Oct 21  6:22:37 2000

(9,16,9) <- (3,4,3).*(3, 2+2,3): 112.251514 Mflop/s
(15,28,15) <- (5,7,5).*(3, 2+2,3): 117.360737 Mflop/s

Testing m0 = 3, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 9 9 16 16 9 9 9
<<< (M = 9, K = 16, N = 9) : 112.251514
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 15 15 28 28 15 15 15
<<< (M = 15, K = 28, N = 15) : 117.360737
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 2,3) :   114.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3641 (32.4%), 7609 (67.6%) left; Finishing by Sat Oct 21  6:22:36 2000

(9,14,6) <- (9,0,1).*(1, 12+2,6): 119.064630 Mflop/s
(15,14,12) <- (15,1,2).*(1, 12+2,6): 121.630334 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 6 9 14 14 6 9 6
<<< (M = 9, K = 14, N = 6) : 119.064630
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 121.630334
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,6) :   120.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3642 (32.4%), 7608 (67.6%) left; Finishing by Sat Oct 21  6:22:36 2000

(9,16,8) <- (9,4,2).*(1, 2+2,4): 111.693825 Mflop/s
(15,28,12) <- (15,7,3).*(1, 2+2,4): 119.851399 Mflop/s

Testing m0 = 1, k0 =  2, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  2 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 111.693825
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 12 15 28 28 12 15 12
<<< (M = 15, K = 28, N = 12) : 119.851399
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 2,4) :   115.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3643 (32.4%), 7607 (67.6%) left; Finishing by Sat Oct 21  6:22:32 2000

(8,7,5) <- (4,1,1).*(2, 5+2,5): 22.922494 Mflop/s
(14,21,15) <- (7,3,3).*(2, 5+2,5): 33.619312 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  5 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 5 8 7 7 5 8 5
<<< (M = 8, K = 7, N = 5) : 22.922494
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 15 14 21 21 15 14 15
<<< (M = 14, K = 21, N = 15) : 33.619312
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 5,5) :    27.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3644 (32.4%), 7606 (67.6%) left; Finishing by Sat Oct 21  6:22:34 2000

(9,12,8) <- (9,0,2).*(1, 10+2,4): 112.446666 Mflop/s
(15,12,12) <- (15,1,3).*(1, 10+2,4): 114.349365 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 112.446666
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 114.349365
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,4) :   113.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3645 (32.4%), 7605 (67.6%) left; Finishing by Sat Oct 21  6:22:33 2000

(6,13,9) <- (1,0,9).*(6, 11+2,1): 100.449092 Mflop/s
(12,13,15) <- (2,1,15).*(6, 11+2,1): 116.007649 Mflop/s

Testing m0 = 6, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 13 9 6 13 13 9 6 9
<<< (M = 6, K = 13, N = 9) : 100.449092
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 13 15 12 13 13 15 12 15
<<< (M = 12, K = 13, N = 15) : 116.007649
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 11,1) :   107.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3646 (32.4%), 7604 (67.6%) left; Finishing by Sat Oct 21  6:22:36 2000

(9,14,8) <- (9,0,2).*(1, 12+2,4): 115.162170 Mflop/s
(15,14,12) <- (15,1,3).*(1, 12+2,4): 116.854156 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 8 9 14 14 8 9 8
<<< (M = 9, K = 14, N = 8) : 115.162170
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 12 15 14 14 12 15 12
<<< (M = 15, K = 14, N = 12) : 116.854156
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,4) :   116.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3647 (32.4%), 7603 (67.6%) left; Finishing by Sat Oct 21  6:22:35 2000

(9,9,9) <- (9,1,3).*(1, 7+2,3): 115.635968 Mflop/s
(15,18,15) <- (15,2,5).*(1, 7+2,3): 121.709855 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 115.635968
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 121.709855
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,3) :   118.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3648 (32.4%), 7602 (67.6%) left; Finishing by Sat Oct 21  6:22:34 2000

(8,15,7) <- (4,3,1).*(2, 3+2,7): 26.725195 Mflop/s
(14,25,14) <- (7,5,2).*(2, 3+2,7): 25.297872 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  3 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 7 8 15 15 7 8 7
<<< (M = 8, K = 15, N = 7) : 26.725195
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 25 14 14 25 25 14 14 14
<<< (M = 14, K = 25, N = 14) : 25.297872
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 3,7) :    26.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3649 (32.4%), 7601 (67.6%) left; Finishing by Sat Oct 21  6:22:33 2000

(16,11,9) <- (0,1,9).*(16, 9+2,1): 26.650164 Mflop/s
(16,11,15) <- (0,1,15).*(16, 9+2,1): 26.725035 Mflop/s

Testing m0 = 16, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 16  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 11 9 16 11 11 9 16 9
<<< (M = 16, K = 11, N = 9) : 26.650164
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 11 15 16 11 11 15 16 15
<<< (M = 16, K = 11, N = 15) : 26.725035
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (16, 9,1) :    26.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3650 (32.4%), 7600 (67.6%) left; Finishing by Sat Oct 21  6:22:33 2000

(9,12,8) <- (9,0,1).*(1, 10+2,8): 104.963915 Mflop/s
(15,12,8) <- (15,1,1).*(1, 10+2,8): 105.709746 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 104.963915
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 8 15 12 12 8 15 8
<<< (M = 15, K = 12, N = 8) : 105.709746
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,8) :   105.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3651 (32.5%), 7599 (67.5%) left; Finishing by Sat Oct 21  6:22:32 2000

(8,16,8) <- (2,0,4).*(4, 14+2,2): 27.284656 Mflop/s
(12,16,14) <- (3,1,7).*(4, 14+2,2): 29.231457 Mflop/s

Testing m0 = 4, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 27.284656
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 16 14 12 16 16 14 12 14
<<< (M = 12, K = 16, N = 14) : 29.231457
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 14,2) :    28.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3652 (32.5%), 7598 (67.5%) left; Finishing by Sat Oct 21  6:22:31 2000

(11,27,9) <- (0,9,9).*(11,1+2,1): 44.891851 Mflop/s
(11,45,15) <- (1,15,15).*(11,1+2,1): 43.298479 Mflop/s

Testing m0 = 11, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 11 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 27 9 11 27 27 9 11 9
<<< (M = 11, K = 27, N = 9) : 44.891851
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 45 15 11 45 45 15 11 15
<<< (M = 11, K = 45, N = 15) : 43.298479
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (11,1,1) :    44.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3653 (32.5%), 7597 (67.5%) left; Finishing by Sat Oct 21  6:22:27 2000

(14,10,9) <- (0,1,9).*(14, 8+2,1): 24.914843 Mflop/s
(14,10,15) <- (1,1,15).*(14, 8+2,1): 27.725583 Mflop/s

Testing m0 = 14, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 14  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 9 14 10 10 9 14 9
<<< (M = 14, K = 10, N = 9) : 24.914843
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 10 15 14 10 10 15 14 15
<<< (M = 14, K = 10, N = 15) : 27.725583
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (14, 8,1) :    26.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3654 (32.5%), 7596 (67.5%) left; Finishing by Sat Oct 21  6:22:30 2000

(16,12,9) <- (0,2,9).*(16, 4+2,1): 29.410606 Mflop/s
(16,18,15) <- (0,3,15).*(16, 4+2,1): 22.498697 Mflop/s

Testing m0 = 16, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 16  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 12 9 16 12 12 9 16 9
<<< (M = 16, K = 12, N = 9) : 29.410606
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 18 15 16 18 18 15 16 15
<<< (M = 16, K = 18, N = 15) : 22.498697
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (16, 4,1) :    25.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3655 (32.5%), 7595 (67.5%) left; Finishing by Sat Oct 21  6:22:29 2000

(8,15,9) <- (2,0,3).*(4, 13+2,3): 26.454734 Mflop/s
(12,15,15) <- (3,1,5).*(4, 13+2,3): 27.878760 Mflop/s

Testing m0 = 4, k0 =  13, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  13 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 26.454734
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 15 15 12 15 15 15 12 15
<<< (M = 12, K = 15, N = 15) : 27.878760
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 13,3) :    27.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3656 (32.5%), 7594 (67.5%) left; Finishing by Sat Oct 21  6:22:28 2000

(8,11,8) <- (1,1,4).*(8, 9+2,2): 99.954219 Mflop/s
(8,11,14) <- (1,1,7).*(8, 9+2,2): 100.718248 Mflop/s

Testing m0 = 8, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 99.954219
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 14 8 11 11 14 8 14
<<< (M = 8, K = 11, N = 14) : 100.718248
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 9,2) :   100.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3657 (32.5%), 7593 (67.5%) left; Finishing by Sat Oct 21  6:22:30 2000

(9,27,14) <- (9,9,0).*(1,1+2,14): 21.685378 Mflop/s
(15,45,14) <- (15,15,1).*(1,1+2,14): 21.985228 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 14 9 27 27 14 9 14
<<< (M = 9, K = 27, N = 14) : 21.685378
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 14 15 45 45 14 15 14
<<< (M = 15, K = 45, N = 14) : 21.985228
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,14) :    21.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3658 (32.5%), 7592 (67.5%) left; Finishing by Sat Oct 21  6:22:30 2000

(11,14,9) <- (0,0,9).*(11, 12+2,1): 28.270052 Mflop/s
(11,14,15) <- (1,1,15).*(11, 12+2,1): 26.657394 Mflop/s

Testing m0 = 11, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 11  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 9 11 14 14 9 11 9
<<< (M = 11, K = 14, N = 9) : 28.270052
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 11 14 15 11 14 14 15 11 15
<<< (M = 11, K = 14, N = 15) : 26.657394
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (11, 12,1) :    27.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3659 (32.5%), 7591 (67.5%) left; Finishing by Sat Oct 21  6:22:29 2000

(9,15,13) <- (9,3,0).*(1, 3+2,13): 93.578376 Mflop/s
(15,25,13) <- (15,5,1).*(1, 3+2,13): 108.836708 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 13 9 15 15 13 9 13
<<< (M = 9, K = 15, N = 13) : 93.578376
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 13 15 25 25 13 15 13
<<< (M = 15, K = 25, N = 13) : 108.836708
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,13) :   100.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3660 (32.5%), 7590 (67.5%) left; Finishing by Sat Oct 21  6:22:28 2000

(8,15,6) <- (4,0,1).*(2, 13+2,6): 25.053014 Mflop/s
(14,15,12) <- (7,1,2).*(2, 13+2,6): 24.163394 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 6...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  13 6 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 6 8 15 15 6 8 6
<<< (M = 8, K = 15, N = 6) : 25.053014
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 12 14 15 15 12 14 12
<<< (M = 14, K = 15, N = 12) : 24.163394
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 13,6) :    24.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3661 (32.5%), 7589 (67.5%) left; Finishing by Sat Oct 21  6:22:27 2000

(5,27,8) <- (1,9,4).*(5,1+2,2): 25.462080 Mflop/s
(15,45,14) <- (3,15,7).*(5,1+2,2): 27.962451 Mflop/s

Testing m0 = 5, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 27 8 5 27 27 8 5 8
<<< (M = 5, K = 27, N = 8) : 25.462080
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 14 15 45 45 14 15 14
<<< (M = 15, K = 45, N = 14) : 27.962451
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5,1,2) :    26.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3662 (32.6%), 7588 (67.4%) left; Finishing by Sat Oct 21  6:22:27 2000

(8,13,7) <- (4,0,1).*(2, 11+2,7): 25.522356 Mflop/s
(14,13,14) <- (7,1,2).*(2, 11+2,7): 23.106237 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  11 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 7 8 13 13 7 8 7
<<< (M = 8, K = 13, N = 7) : 25.522356
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 14 14 13 13 14 14 14
<<< (M = 14, K = 13, N = 14) : 23.106237
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 11,7) :    24.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3663 (32.6%), 7587 (67.4%) left; Finishing by Sat Oct 21  6:22:26 2000

(10,12,9) <- (0,2,9).*(10, 4+2,1): 36.873194 Mflop/s
(10,18,15) <- (1,3,15).*(10, 4+2,1): 27.343000 Mflop/s

Testing m0 = 10, k0 =  4, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 10  4 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 12 9 10 12 12 9 10 9
<<< (M = 10, K = 12, N = 9) : 36.873194
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 18 15 10 18 18 15 10 15
<<< (M = 10, K = 18, N = 15) : 27.343000
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (10, 4,1) :    31.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3664 (32.6%), 7586 (67.4%) left; Finishing by Sat Oct 21  6:22:25 2000

(9,7,16) <- (9,1,0).*(1, 5+2,16): 90.488989 Mflop/s
(15,21,16) <- (15,3,0).*(1, 5+2,16): 121.550862 Mflop/s

Testing m0 = 1, k0 =  5, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  5 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 16 9 7 7 16 9 16
<<< (M = 9, K = 7, N = 16) : 90.488989
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 16 15 21 21 16 15 16
<<< (M = 15, K = 21, N = 16) : 121.550862
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 5,16) :   103.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3665 (32.6%), 7585 (67.4%) left; Finishing by Sat Oct 21  6:22:24 2000

(9,15,10) <- (9,3,0).*(1, 3+2,10): 103.101238 Mflop/s
(15,25,10) <- (15,5,1).*(1, 3+2,10): 106.740342 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 10 9 15 15 10 9 10
<<< (M = 9, K = 15, N = 10) : 103.101238
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 10 15 25 25 10 15 10
<<< (M = 15, K = 25, N = 10) : 106.740342
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,10) :   104.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3666 (32.6%), 7584 (67.4%) left; Finishing by Sat Oct 21  6:22:24 2000

(9,27,5) <- (9,9,1).*(1,1+2,5): 69.634875 Mflop/s
(15,45,15) <- (15,15,3).*(1,1+2,5): 107.908942 Mflop/s

Testing m0 = 1, k0 = 1, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1 1 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 5 9 27 27 5 9 5
<<< (M = 9, K = 27, N = 5) : 69.634875
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 15 15 45 45 15 15 15
<<< (M = 15, K = 45, N = 15) : 107.908942
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1,1,5) :    84.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3667 (32.6%), 7583 (67.4%) left; Finishing by Sat Oct 21  6:22:20 2000

(8,15,9) <- (1,0,9).*(8, 13+2,1): 97.214122 Mflop/s
(8,15,15) <- (1,1,15).*(8, 13+2,1): 97.800675 Mflop/s

Testing m0 = 8, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 97.214122
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 15 8 15 15 15 8 15
<<< (M = 8, K = 15, N = 15) : 97.800675
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 13,1) :    97.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3668 (32.6%), 7582 (67.4%) left; Finishing by Sat Oct 21  6:22:19 2000

(7,13,8) <- (1,0,4).*(7, 11+2,2): 21.984631 Mflop/s
(14,13,14) <- (2,1,7).*(7, 11+2,2): 24.919280 Mflop/s

Testing m0 = 7, k0 =  11, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  11 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 13 8 7 13 13 8 7 8
<<< (M = 7, K = 13, N = 8) : 21.984631
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 14 14 13 13 14 14 14
<<< (M = 14, K = 13, N = 14) : 24.919280
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 11,2) :    23.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3669 (32.6%), 7581 (67.4%) left; Finishing by Sat Oct 21  6:22:18 2000

(8,7,9) <- (2,1,3).*(4, 5+2,3): 100.157875 Mflop/s
(12,21,15) <- (3,3,5).*(4, 5+2,3): 141.110444 Mflop/s

Testing m0 = 4, k0 =  5, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  5 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 100.157875
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 21 15 12 21 21 15 12 15
<<< (M = 12, K = 21, N = 15) : 141.110444
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 5,3) :   117.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3670 (32.6%), 7580 (67.4%) left; Finishing by Sat Oct 21  6:22:21 2000

(13,11,9) <- (0,1,9).*(13, 9+2,1): 101.656856 Mflop/s
(13,11,15) <- (1,1,15).*(13, 9+2,1): 102.717647 Mflop/s

Testing m0 = 13, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 13  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 11 9 13 11 11 9 13 9
<<< (M = 13, K = 11, N = 9) : 101.656856
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 11 15 13 11 11 15 13 15
<<< (M = 13, K = 11, N = 15) : 102.717647
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (13, 9,1) :   102.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3671 (32.6%), 7579 (67.4%) left; Finishing by Sat Oct 21  6:22:20 2000

(9,12,5) <- (3,0,1).*(3, 10+2,5): 112.144285 Mflop/s
(15,12,15) <- (5,1,3).*(3, 10+2,5): 116.243518 Mflop/s

Testing m0 = 3, k0 =  10, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  10 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 5 9 12 12 5 9 5
<<< (M = 9, K = 12, N = 5) : 112.144285
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 15 15 12 12 15 15 15
<<< (M = 15, K = 12, N = 15) : 116.243518
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 10,5) :   114.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3672 (32.6%), 7578 (67.4%) left; Finishing by Sat Oct 21  6:22:22 2000

(6,10,8) <- (1,1,4).*(6, 8+2,2): 100.195941 Mflop/s
(12,10,14) <- (2,1,7).*(6, 8+2,2): 102.639344 Mflop/s

Testing m0 = 6, k0 =  8, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  8 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 10 8 6 10 10 8 6 8
<<< (M = 6, K = 10, N = 8) : 100.195941
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 14 12 10 10 14 12 14
<<< (M = 12, K = 10, N = 14) : 102.639344
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 8,2) :   101.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3673 (32.6%), 7577 (67.4%) left; Finishing by Sat Oct 21  6:22:24 2000

(13,27,9) <- (0,9,9).*(13,1+2,1): 46.714758 Mflop/s
(13,45,15) <- (1,15,15).*(13,1+2,1): 41.831877 Mflop/s

Testing m0 = 13, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 13 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 27 9 13 27 27 9 13 9
<<< (M = 13, K = 27, N = 9) : 46.714758
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 45 15 13 45 45 15 13 15
<<< (M = 13, K = 45, N = 15) : 41.831877
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (13,1,1) :    44.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3674 (32.7%), 7576 (67.3%) left; Finishing by Sat Oct 21  6:22:24 2000

(9,15,8) <- (9,3,1).*(1, 3+2,8): 114.399562 Mflop/s
(15,25,8) <- (15,5,1).*(1, 3+2,8): 117.596729 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 114.399562
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 8 15 25 25 8 15 8
<<< (M = 15, K = 25, N = 8) : 117.596729
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,8) :   116.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3675 (32.7%), 7575 (67.3%) left; Finishing by Sat Oct 21  6:22:23 2000

(9,7,8) <- (3,1,2).*(3, 5+2,4): 104.860970 Mflop/s
(15,21,12) <- (5,3,3).*(3, 5+2,4): 149.724041 Mflop/s

Testing m0 = 3, k0 =  5, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  5 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 7 8 9 7 7 8 9 8
<<< (M = 9, K = 7, N = 8) : 104.860970
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 21 12 15 21 21 12 15 12
<<< (M = 15, K = 21, N = 12) : 149.724041
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 5,4) :   123.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3676 (32.7%), 7574 (67.3%) left; Finishing by Sat Oct 21  6:22:25 2000

(8,7,9) <- (4,1,9).*(2, 5+2,1): 125.463324 Mflop/s
(14,21,15) <- (7,3,15).*(2, 5+2,1): 209.816326 Mflop/s

Testing m0 = 2, k0 =  5, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  5 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 7 9 8 7 7 9 8 9
<<< (M = 8, K = 7, N = 9) : 125.463324
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 21 15 14 21 21 15 14 15
<<< (M = 14, K = 21, N = 15) : 209.816326
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 5,1) :   157.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3677 (32.7%), 7573 (67.3%) left; Finishing by Sat Oct 21  6:22:24 2000

(9,15,14) <- (9,0,0).*(1, 13+2,14): 99.283227 Mflop/s
(15,15,14) <- (15,1,1).*(1, 13+2,14): 99.362140 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 14...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 14 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 14 9 15 15 14 9 14
<<< (M = 9, K = 15, N = 14) : 99.283227
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 99.362140
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,14) :    99.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3678 (32.7%), 7572 (67.3%) left; Finishing by Sat Oct 21  6:22:27 2000

(9,16,8) <- (9,0,2).*(1, 14+2,4): 117.365865 Mflop/s
(15,16,12) <- (15,1,3).*(1, 14+2,4): 118.986287 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 8 9 16 16 8 9 8
<<< (M = 9, K = 16, N = 8) : 117.365865
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 118.986287
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,4) :   118.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3679 (32.7%), 7571 (67.3%) left; Finishing by Sat Oct 21  6:22:26 2000

(8,16,8) <- (2,4,4).*(4, 2+2,2): 108.012868 Mflop/s
(12,28,14) <- (3,7,7).*(4, 2+2,2): 114.970587 Mflop/s

Testing m0 = 4, k0 =  2, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  2 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 108.012868
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 28 14 12 28 28 14 12 14
<<< (M = 12, K = 28, N = 14) : 114.970587
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 2,2) :   111.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3680 (32.7%), 7570 (67.3%) left; Finishing by Sat Oct 21  6:22:22 2000

(12,11,9) <- (0,1,9).*(12, 9+2,1): 28.611783 Mflop/s
(12,11,15) <- (1,1,15).*(12, 9+2,1): 27.910402 Mflop/s

Testing m0 = 12, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 12  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 9 12 11 11 9 12 9
<<< (M = 12, K = 11, N = 9) : 28.611783
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 15 12 11 11 15 12 15
<<< (M = 12, K = 11, N = 15) : 27.910402
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (12, 9,1) :    28.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3681 (32.7%), 7569 (67.3%) left; Finishing by Sat Oct 21  6:22:25 2000

(9,13,9) <- (1,0,9).*(9, 11+2,1): 33.504477 Mflop/s
(9,13,15) <- (1,1,15).*(9, 11+2,1): 33.597595 Mflop/s

Testing m0 = 9, k0 =  11, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 9  11 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 33.504477
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 15 9 13 13 15 9 15
<<< (M = 9, K = 13, N = 15) : 33.597595
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (9, 11,1) :    33.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3682 (32.7%), 7568 (67.3%) left; Finishing by Sat Oct 21  6:22:24 2000

(8,11,8) <- (4,1,4).*(2, 9+2,2): 36.843361 Mflop/s
(14,11,14) <- (7,1,7).*(2, 9+2,2): 34.840774 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 8 8 11 11 8 8 8
<<< (M = 8, K = 11, N = 8) : 36.843361
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 14 14 11 11 14 14 14
<<< (M = 14, K = 11, N = 14) : 34.840774
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 9,2) :    35.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3683 (32.7%), 7567 (67.3%) left; Finishing by Sat Oct 21  6:22:20 2000

(9,15,16) <- (9,0,0).*(1, 13+2,16): 99.694892 Mflop/s
(15,15,16) <- (15,1,0).*(1, 13+2,16): 100.044914 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 16 9 15 15 16 9 16
<<< (M = 9, K = 15, N = 16) : 99.694892
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 16 15 15 15 16 15 16
<<< (M = 15, K = 15, N = 16) : 100.044914
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,16) :    99.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3684 (32.7%), 7566 (67.3%) left; Finishing by Sat Oct 21  6:22:22 2000

(9,10,13) <- (9,1,0).*(1, 8+2,13): 82.778113 Mflop/s
(15,10,13) <- (15,1,1).*(1, 8+2,13): 96.138422 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 13...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 13 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 13 9 10 10 13 9 13
<<< (M = 9, K = 10, N = 13) : 82.778113
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 13 15 10 10 13 15 13
<<< (M = 15, K = 10, N = 13) : 96.138422
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,13) :    89.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3685 (32.8%), 7565 (67.2%) left; Finishing by Sat Oct 21  6:22:21 2000

(9,15,8) <- (9,0,2).*(1, 13+2,4): 115.675903 Mflop/s
(15,15,12) <- (15,1,3).*(1, 13+2,4): 117.148677 Mflop/s

Testing m0 = 1, k0 =  13, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  13 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 115.675903
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 12 15 15 15 12 15 12
<<< (M = 15, K = 15, N = 12) : 117.148677
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 13,4) :   116.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3686 (32.8%), 7564 (67.2%) left; Finishing by Sat Oct 21  6:22:18 2000

(6,27,8) <- (1,9,4).*(6,1+2,2): 99.033539 Mflop/s
(12,45,14) <- (2,15,7).*(6,1+2,2): 101.645878 Mflop/s

Testing m0 = 6, k0 = 1, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6 1 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 27 8 6 27 27 8 6 8
<<< (M = 6, K = 27, N = 8) : 99.033539
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 45 14 12 45 45 14 12 14
<<< (M = 12, K = 45, N = 14) : 101.645878
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6,1,2) :   100.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3687 (32.8%), 7563 (67.2%) left; Finishing by Sat Oct 21  6:22:17 2000

(8,9,8) <- (4,1,1).*(2, 7+2,8): 24.300188 Mflop/s
(14,18,8) <- (7,2,1).*(2, 7+2,8): 28.895233 Mflop/s

Testing m0 = 2, k0 =  7, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  7 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 24.300188
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 8 14 18 18 8 14 8
<<< (M = 14, K = 18, N = 8) : 28.895233
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 7,8) :    26.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3688 (32.8%), 7562 (67.2%) left; Finishing by Sat Oct 21  6:22:16 2000

(7,16,8) <- (1,0,4).*(7, 14+2,2): 22.276312 Mflop/s
(14,16,14) <- (2,1,7).*(7, 14+2,2): 25.043419 Mflop/s

Testing m0 = 7, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 16 8 7 16 16 8 7 8
<<< (M = 7, K = 16, N = 8) : 22.276312
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 14 14 16 16 14 14 14
<<< (M = 14, K = 16, N = 14) : 25.043419
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 14,2) :    23.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3689 (32.8%), 7561 (67.2%) left; Finishing by Sat Oct 21  6:22:15 2000

(9,17,10) <- (9,0,0).*(1, 15+2,10): 100.680852 Mflop/s
(15,17,10) <- (15,1,1).*(1, 15+2,10): 100.995113 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 10 9 17 17 10 9 10
<<< (M = 9, K = 17, N = 10) : 100.680852
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 10 15 17 17 10 15 10
<<< (M = 15, K = 17, N = 10) : 100.995113
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,10) :   100.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3690 (32.8%), 7560 (67.2%) left; Finishing by Sat Oct 21  6:22:15 2000

(9,11,8) <- (3,1,4).*(3, 9+2,2): 111.642612 Mflop/s
(15,11,14) <- (5,1,7).*(3, 9+2,2): 112.569965 Mflop/s

Testing m0 = 3, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 8 9 11 11 8 9 8
<<< (M = 9, K = 11, N = 8) : 111.642612
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 14 15 11 11 14 15 14
<<< (M = 15, K = 11, N = 14) : 112.569965
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 9,2) :   112.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3691 (32.8%), 7559 (67.2%) left; Finishing by Sat Oct 21  6:22:17 2000

(8,11,5) <- (4,1,1).*(2, 9+2,5): 24.154920 Mflop/s
(14,11,15) <- (7,1,3).*(2, 9+2,5): 25.922442 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  9 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 5 8 11 11 5 8 5
<<< (M = 8, K = 11, N = 5) : 24.154920
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 25.922442
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 9,5) :    25.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3692 (32.8%), 7558 (67.2%) left; Finishing by Sat Oct 21  6:22:16 2000

(8,15,9) <- (4,3,3).*(2, 3+2,3): 35.296162 Mflop/s
(14,25,15) <- (7,5,5).*(2, 3+2,3): 30.219437 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 35.296162
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 25 15 14 25 25 15 14 15
<<< (M = 14, K = 25, N = 15) : 30.219437
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 3,3) :    32.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3693 (32.8%), 7557 (67.2%) left; Finishing by Sat Oct 21  6:22:15 2000

(5,16,8) <- (1,0,4).*(5, 14+2,2): 26.078973 Mflop/s
(15,16,14) <- (3,1,7).*(5, 14+2,2): 27.434382 Mflop/s

Testing m0 = 5, k0 =  14, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  14 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 16 8 5 16 16 8 5 8
<<< (M = 5, K = 16, N = 8) : 26.078973
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 27.434382
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 14,2) :    26.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3694 (32.8%), 7556 (67.2%) left; Finishing by Sat Oct 21  6:22:15 2000

(7,14,9) <- (1,0,9).*(7, 12+2,1): 30.189528 Mflop/s
(14,14,15) <- (2,1,15).*(7, 12+2,1): 32.738635 Mflop/s

Testing m0 = 7, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 14 9 7 14 14 9 7 9
<<< (M = 7, K = 14, N = 9) : 30.189528
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 32.738635
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 12,1) :    31.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3695 (32.8%), 7555 (67.2%) left; Finishing by Sat Oct 21  6:22:14 2000

(9,8,12) <- (9,1,0).*(1, 6+2,12): 90.144446 Mflop/s
(15,16,12) <- (15,2,1).*(1, 6+2,12): 109.739360 Mflop/s

Testing m0 = 1, k0 =  6, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  6 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 12 9 8 8 12 9 12
<<< (M = 9, K = 8, N = 12) : 90.144446
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 12 15 16 16 12 15 12
<<< (M = 15, K = 16, N = 12) : 109.739360
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 6,12) :    99.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3696 (32.9%), 7554 (67.1%) left; Finishing by Sat Oct 21  6:22:13 2000

(8,14,5) <- (4,0,1).*(2, 12+2,5): 24.555730 Mflop/s
(14,14,15) <- (7,1,3).*(2, 12+2,5): 26.449944 Mflop/s

Testing m0 = 2, k0 =  12, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  12 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 5 8 14 14 5 8 5
<<< (M = 8, K = 14, N = 5) : 24.555730
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 14 15 14 14 14 15 14 15
<<< (M = 14, K = 14, N = 15) : 26.449944
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 12,5) :    25.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3697 (32.9%), 7553 (67.1%) left; Finishing by Sat Oct 21  6:22:13 2000

(8,12,8) <- (4,0,4).*(2, 10+2,2): 37.081950 Mflop/s
(14,12,14) <- (7,1,7).*(2, 10+2,2): 35.381576 Mflop/s

Testing m0 = 2, k0 =  10, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  10 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 37.081950
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 12 14 14 12 12 14 14 14
<<< (M = 14, K = 12, N = 14) : 35.381576
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 10,2) :    36.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3698 (32.9%), 7552 (67.1%) left; Finishing by Sat Oct 21  6:22:12 2000

(8,13,8) <- (4,0,2).*(2, 11+2,4): 29.575681 Mflop/s
(14,13,12) <- (7,1,3).*(2, 11+2,4): 26.714954 Mflop/s

Testing m0 = 2, k0 =  11, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  11 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 13 8 8 13 13 8 8 8
<<< (M = 8, K = 13, N = 8) : 29.575681
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 13 12 14 13 13 12 14 12
<<< (M = 14, K = 13, N = 12) : 26.714954
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 11,4) :    28.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3699 (32.9%), 7551 (67.1%) left; Finishing by Sat Oct 21  6:22:11 2000

(5,15,8) <- (1,0,4).*(5, 13+2,2): 26.061170 Mflop/s
(15,15,14) <- (3,1,7).*(5, 13+2,2): 27.293215 Mflop/s

Testing m0 = 5, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 8 5 15 15 8 5 8
<<< (M = 5, K = 15, N = 8) : 26.061170
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 14 15 15 15 14 15 14
<<< (M = 15, K = 15, N = 14) : 27.293215
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 13,2) :    26.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3700 (32.9%), 7550 (67.1%) left; Finishing by Sat Oct 21  6:22:10 2000

(6,11,8) <- (1,1,4).*(6, 9+2,2): 102.425200 Mflop/s
(12,11,14) <- (2,1,7).*(6, 9+2,2): 103.872601 Mflop/s

Testing m0 = 6, k0 =  9, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  9 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 11 8 6 11 11 8 6 8
<<< (M = 6, K = 11, N = 8) : 102.425200
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 11 14 12 11 11 14 12 14
<<< (M = 12, K = 11, N = 14) : 103.872601
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 9,2) :   103.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3701 (32.9%), 7549 (67.1%) left; Finishing by Sat Oct 21  6:22:13 2000

(9,12,11) <- (9,2,0).*(1, 4+2,11): 112.670168 Mflop/s
(15,18,11) <- (15,3,1).*(1, 4+2,11): 86.362922 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 11...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 11 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 11 9 12 12 11 9 11
<<< (M = 9, K = 12, N = 11) : 112.670168
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 11 15 18 18 11 15 11
<<< (M = 15, K = 18, N = 11) : 86.362922
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,11) :    97.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3702 (32.9%), 7548 (67.1%) left; Finishing by Sat Oct 21  6:22:12 2000

(8,14,8) <- (2,0,4).*(4, 12+2,2): 27.199181 Mflop/s
(12,14,14) <- (3,1,7).*(4, 12+2,2): 29.089958 Mflop/s

Testing m0 = 4, k0 =  12, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  12 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 8 8 14 14 8 8 8
<<< (M = 8, K = 14, N = 8) : 27.199181
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 14 14 12 14 14 14 12 14
<<< (M = 12, K = 14, N = 14) : 29.089958
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 12,2) :    28.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3703 (32.9%), 7547 (67.1%) left; Finishing by Sat Oct 21  6:22:11 2000

(9,12,12) <- (9,0,0).*(1, 10+2,12): 94.460279 Mflop/s
(15,12,12) <- (15,1,1).*(1, 10+2,12): 95.108003 Mflop/s

Testing m0 = 1, k0 =  10, n0 = 12...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  10 12 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 12 9 12 12 12 9 12
<<< (M = 9, K = 12, N = 12) : 94.460279
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 12 12 15 12 12 12 15 12
<<< (M = 15, K = 12, N = 12) : 95.108003
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 10,12) :    94.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3704 (32.9%), 7546 (67.1%) left; Finishing by Sat Oct 21  6:22:10 2000

(8,15,9) <- (2,3,9).*(4, 3+2,1): 124.703316 Mflop/s
(12,25,15) <- (3,5,15).*(4, 3+2,1): 138.209433 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  3 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 9 8 15 15 9 8 9
<<< (M = 8, K = 15, N = 9) : 124.703316
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 25 15 12 25 25 15 12 15
<<< (M = 12, K = 25, N = 15) : 138.209433
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 3,1) :   131.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3705 (32.9%), 7545 (67.1%) left; Finishing by Sat Oct 21  6:22:07 2000

(15,8,9) <- (0,1,9).*(15, 6+2,1): 86.782897 Mflop/s
(15,16,15) <- (1,2,15).*(15, 6+2,1): 112.329822 Mflop/s

Testing m0 = 15, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 15  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 8 9 15 8 8 9 15 9
<<< (M = 15, K = 8, N = 9) : 86.782897
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 112.329822
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (15, 6,1) :    97.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3706 (32.9%), 7544 (67.1%) left; Finishing by Sat Oct 21  6:22:06 2000

(5,15,9) <- (1,3,3).*(5, 3+2,3): 27.026009 Mflop/s
(15,25,15) <- (3,5,5).*(5, 3+2,3): 28.482153 Mflop/s

Testing m0 = 5, k0 =  3, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  3 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 15 9 5 15 15 9 5 9
<<< (M = 5, K = 15, N = 9) : 27.026009
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 15 15 25 25 15 15 15
<<< (M = 15, K = 25, N = 15) : 28.482153
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 3,3) :    27.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3707 (33.0%), 7543 (67.0%) left; Finishing by Sat Oct 21  6:22:05 2000

(9,17,8) <- (9,0,4).*(1, 15+2,2): 153.894081 Mflop/s
(15,17,14) <- (15,1,7).*(1, 15+2,2): 155.430139 Mflop/s

Testing m0 = 1, k0 =  15, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  15 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 17 8 9 17 17 8 9 8
<<< (M = 9, K = 17, N = 8) : 153.894081
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 17 14 15 17 17 14 15 14
<<< (M = 15, K = 17, N = 14) : 155.430139
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 15,2) :   154.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3708 (33.0%), 7542 (67.0%) left; Finishing by Sat Oct 21  6:22:04 2000

(8,15,8) <- (2,3,2).*(4, 3+2,4): 122.919236 Mflop/s
(12,25,12) <- (3,5,3).*(4, 3+2,4): 129.475148 Mflop/s

Testing m0 = 4, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 122.919236
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 25 12 12 25 25 12 12 12
<<< (M = 12, K = 25, N = 12) : 129.475148
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 3,4) :   126.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3709 (33.0%), 7541 (67.0%) left; Finishing by Sat Oct 21  6:22:04 2000

(9,10,9) <- (9,1,1).*(1, 8+2,9): 76.987480 Mflop/s
(15,10,9) <- (15,1,1).*(1, 8+2,9): 77.323950 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 9 9 10 10 9 9 9
<<< (M = 9, K = 10, N = 9) : 76.987480
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 9 15 10 10 9 15 9
<<< (M = 15, K = 10, N = 9) : 77.323950
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,9) :    77.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3710 (33.0%), 7540 (67.0%) left; Finishing by Sat Oct 21  6:22:00 2000

(9,12,9) <- (9,2,3).*(1, 4+2,3): 143.588850 Mflop/s
(15,18,15) <- (15,3,5).*(1, 4+2,3): 96.862120 Mflop/s

Testing m0 = 1, k0 =  4, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  4 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 9 9 12 12 9 9 9
<<< (M = 9, K = 12, N = 9) : 143.588850
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 96.862120
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 4,3) :   115.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3711 (33.0%), 7539 (67.0%) left; Finishing by Sat Oct 21  6:21:59 2000

(8,8,9) <- (4,1,3).*(2, 6+2,3): 30.624652 Mflop/s
(14,16,15) <- (7,2,5).*(2, 6+2,3): 27.369941 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  6 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 9 8 8 8 9 8 9
<<< (M = 8, K = 8, N = 9) : 30.624652
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 15 14 16 16 15 14 15
<<< (M = 14, K = 16, N = 15) : 27.369941
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 6,3) :    28.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3712 (33.0%), 7538 (67.0%) left; Finishing by Sat Oct 21  6:21:58 2000

(8,17,9) <- (2,0,3).*(4, 15+2,3): 26.632960 Mflop/s
(12,17,15) <- (3,1,5).*(4, 15+2,3): 28.088049 Mflop/s

Testing m0 = 4, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 4  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 9 8 17 17 9 8 9
<<< (M = 8, K = 17, N = 9) : 26.632960
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 17 15 12 17 17 15 12 15
<<< (M = 12, K = 17, N = 15) : 28.088049
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (4, 15,3) :    27.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3713 (33.0%), 7537 (67.0%) left; Finishing by Sat Oct 21  6:21:58 2000

(5,16,9) <- (1,4,3).*(5, 2+2,3): 25.083850 Mflop/s
(15,28,15) <- (3,7,5).*(5, 2+2,3): 26.417087 Mflop/s

Testing m0 = 5, k0 =  2, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 5  2 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 5 16 9 5 16 16 9 5 9
<<< (M = 5, K = 16, N = 9) : 25.083850
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 28 15 15 28 28 15 15 15
<<< (M = 15, K = 28, N = 15) : 26.417087
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (5, 2,3) :    25.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3714 (33.0%), 7536 (67.0%) left; Finishing by Sat Oct 21  6:21:57 2000

(9,9,15) <- (9,1,0).*(1, 7+2,15): 93.310254 Mflop/s
(15,18,15) <- (15,2,1).*(1, 7+2,15): 102.228473 Mflop/s

Testing m0 = 1, k0 =  7, n0 = 15...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  7 15 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 15 9 9 9 15 9 15
<<< (M = 9, K = 9, N = 15) : 93.310254
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 102.228473
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 7,15) :    97.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3715 (33.0%), 7535 (67.0%) left; Finishing by Sat Oct 21  6:21:56 2000

(9,27,9) <- (3,9,3).*(3,1+2,3): 27.587208 Mflop/s
(15,45,15) <- (5,15,5).*(3,1+2,3): 28.304790 Mflop/s

Testing m0 = 3, k0 = 1, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3 1 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 27 9 9 27 27 9 9 9
<<< (M = 9, K = 27, N = 9) : 27.587208
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 45 15 15 45 45 15 15 15
<<< (M = 15, K = 45, N = 15) : 28.304790
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3,1,3) :    27.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3716 (33.0%), 7534 (67.0%) left; Finishing by Sat Oct 21  6:21:55 2000

(8,15,5) <- (4,3,1).*(2, 3+2,5): 26.303464 Mflop/s
(14,25,15) <- (7,5,3).*(2, 3+2,5): 29.549018 Mflop/s

Testing m0 = 2, k0 =  3, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  3 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 5 8 15 15 5 8 5
<<< (M = 8, K = 15, N = 5) : 26.303464
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 25 15 14 25 25 15 14 15
<<< (M = 14, K = 25, N = 15) : 29.549018
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 3,5) :    27.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3717 (33.0%), 7533 (67.0%) left; Finishing by Sat Oct 21  6:21:55 2000

(9,13,9) <- (9,0,1).*(1, 11+2,9): 78.768045 Mflop/s
(15,13,9) <- (15,1,1).*(1, 11+2,9): 79.521036 Mflop/s

Testing m0 = 1, k0 =  11, n0 = 9...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  11 9 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 9 9 13 13 9 9 9
<<< (M = 9, K = 13, N = 9) : 78.768045
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 9 15 13 13 9 15 9
<<< (M = 15, K = 13, N = 9) : 79.521036
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 11,9) :    79.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3718 (33.0%), 7532 (67.0%) left; Finishing by Sat Oct 21  6:21:51 2000

(9,16,7) <- (9,0,1).*(1, 14+2,7): 114.684748 Mflop/s
(15,16,14) <- (15,1,2).*(1, 14+2,7): 71.520719 Mflop/s

Testing m0 = 1, k0 =  14, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  14 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 16 7 9 16 16 7 9 7
<<< (M = 9, K = 16, N = 7) : 114.684748
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 14 15 16 16 14 15 14
<<< (M = 15, K = 16, N = 14) : 71.520719
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 14,7) :    88.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3719 (33.1%), 7531 (66.9%) left; Finishing by Sat Oct 21  6:21:50 2000

(9,15,8) <- (9,3,2).*(1, 3+2,4): 98.503576 Mflop/s
(15,25,12) <- (15,5,3).*(1, 3+2,4): 101.216471 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 8 9 15 15 8 9 8
<<< (M = 9, K = 15, N = 8) : 98.503576
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 12 15 25 25 12 15 12
<<< (M = 15, K = 25, N = 12) : 101.216471
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,4) :    99.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3720 (33.1%), 7530 (66.9%) left; Finishing by Sat Oct 21  6:21:49 2000

(8,12,8) <- (1,2,4).*(8, 4+2,2): 114.905854 Mflop/s
(8,18,14) <- (1,3,7).*(8, 4+2,2): 103.850568 Mflop/s

Testing m0 = 8, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 8 8 12 12 8 8 8
<<< (M = 8, K = 12, N = 8) : 114.905854
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 14 8 18 18 14 8 14
<<< (M = 8, K = 18, N = 14) : 103.850568
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 4,2) :   109.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3721 (33.1%), 7529 (66.9%) left; Finishing by Sat Oct 21  6:21:49 2000

(8,9,8) <- (1,1,4).*(8, 7+2,2): 95.949014 Mflop/s
(8,18,14) <- (1,2,7).*(8, 7+2,2): 118.971761 Mflop/s

Testing m0 = 8, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 9 8 8 9 9 8 8 8
<<< (M = 8, K = 9, N = 8) : 95.949014
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 18 14 8 18 18 14 8 14
<<< (M = 8, K = 18, N = 14) : 118.971761
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 7,2) :   106.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3722 (33.1%), 7528 (66.9%) left; Finishing by Sat Oct 21  6:21:51 2000

(10,27,9) <- (0,9,9).*(10,1+2,1): 24.847837 Mflop/s
(10,45,15) <- (1,15,15).*(10,1+2,1): 20.290970 Mflop/s

Testing m0 = 10, k0 = 1, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 10 1 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 27 9 10 27 27 9 10 9
<<< (M = 10, K = 27, N = 9) : 24.847837
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 10 45 15 10 45 45 15 10 15
<<< (M = 10, K = 45, N = 15) : 20.290970
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (10,1,1) :    22.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3723 (33.1%), 7527 (66.9%) left; Finishing by Sat Oct 21  6:21:50 2000

(16,10,9) <- (0,1,9).*(16, 8+2,1): 26.905033 Mflop/s
(16,10,15) <- (0,1,15).*(16, 8+2,1): 26.957937 Mflop/s

Testing m0 = 16, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 16  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 10 9 16 10 10 9 16 9
<<< (M = 16, K = 10, N = 9) : 26.905033
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 16 10 15 16 10 10 15 16 15
<<< (M = 16, K = 10, N = 15) : 26.957937
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (16, 8,1) :    26.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3724 (33.1%), 7526 (66.9%) left; Finishing by Sat Oct 21  6:21:52 2000

(9,13,5) <- (3,0,1).*(3, 11+2,5): 112.966008 Mflop/s
(15,13,15) <- (5,1,3).*(3, 11+2,5): 117.395579 Mflop/s

Testing m0 = 3, k0 =  11, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  11 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 13 5 9 13 13 5 9 5
<<< (M = 9, K = 13, N = 5) : 112.966008
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 13 15 15 13 13 15 15 15
<<< (M = 15, K = 13, N = 15) : 117.395579
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 11,5) :   115.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3725 (33.1%), 7525 (66.9%) left; Finishing by Sat Oct 21  6:21:55 2000

(6,10,9) <- (1,1,9).*(6, 8+2,1): 90.842537 Mflop/s
(12,10,15) <- (2,1,15).*(6, 8+2,1): 105.809950 Mflop/s

Testing m0 = 6, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 6  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 6 10 9 6 10 10 9 6 9
<<< (M = 6, K = 10, N = 9) : 90.842537
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 10 15 12 10 10 15 12 15
<<< (M = 12, K = 10, N = 15) : 105.809950
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (6, 8,1) :    97.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3726 (33.1%), 7524 (66.9%) left; Finishing by Sat Oct 21  6:21:54 2000

(9,11,10) <- (9,1,0).*(1, 9+2,10): 95.455834 Mflop/s
(15,11,10) <- (15,1,1).*(1, 9+2,10): 95.811747 Mflop/s

Testing m0 = 1, k0 =  9, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  9 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 10 9 11 11 10 9 10
<<< (M = 9, K = 11, N = 10) : 95.455834
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 11 10 15 11 11 10 15 10
<<< (M = 15, K = 11, N = 10) : 95.811747
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 9,10) :    95.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3727 (33.1%), 7523 (66.9%) left; Finishing by Sat Oct 21  6:21:53 2000

(8,11,9) <- (4,1,9).*(2, 9+2,1): 155.217790 Mflop/s
(14,11,15) <- (7,1,15).*(2, 9+2,1): 159.527820 Mflop/s

Testing m0 = 2, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 11 9 8 11 11 9 8 9
<<< (M = 8, K = 11, N = 9) : 155.217790
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 11 15 14 11 11 15 14 15
<<< (M = 14, K = 11, N = 15) : 159.527820
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 9,1) :   157.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3728 (33.1%), 7522 (66.9%) left; Finishing by Sat Oct 21  6:21:53 2000

(8,14,9) <- (1,0,9).*(8, 12+2,1): 97.856675 Mflop/s
(8,14,15) <- (1,1,15).*(8, 12+2,1): 98.619697 Mflop/s

Testing m0 = 8, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 8  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 9 8 14 14 9 8 9
<<< (M = 8, K = 14, N = 9) : 97.856675
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 14 15 8 14 14 15 8 15
<<< (M = 8, K = 14, N = 15) : 98.619697
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (8, 12,1) :    98.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3729 (33.1%), 7521 (66.9%) left; Finishing by Sat Oct 21  6:21:52 2000

(8,15,8) <- (4,0,1).*(2, 13+2,8): 25.461483 Mflop/s
(14,15,8) <- (7,1,1).*(2, 13+2,8): 25.714818 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  13 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 25.461483
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 8 14 15 15 8 14 8
<<< (M = 14, K = 15, N = 8) : 25.714818
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 13,8) :    25.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3730 (33.2%), 7520 (66.8%) left; Finishing by Sat Oct 21  6:21:51 2000

(8,17,9) <- (4,0,3).*(2, 15+2,3): 33.281338 Mflop/s
(14,17,15) <- (7,1,5).*(2, 15+2,3): 23.995669 Mflop/s

Testing m0 = 2, k0 =  15, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  15 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 17 9 8 17 17 9 8 9
<<< (M = 8, K = 17, N = 9) : 33.281338
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 17 15 14 17 17 15 14 15
<<< (M = 14, K = 17, N = 15) : 23.995669
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 15,3) :    27.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3731 (33.2%), 7519 (66.8%) left; Finishing by Sat Oct 21  6:21:50 2000

(9,15,5) <- (3,0,1).*(3, 13+2,5): 114.544898 Mflop/s
(15,15,15) <- (5,1,3).*(3, 13+2,5): 117.464485 Mflop/s

Testing m0 = 3, k0 =  13, n0 = 5...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  13 5 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 5 9 15 15 5 9 5
<<< (M = 9, K = 15, N = 5) : 114.544898
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 117.464485
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 13,5) :   116.0 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3732 (33.2%), 7518 (66.8%) left; Finishing by Sat Oct 21  6:21:53 2000

(8,8,8) <- (4,1,2).*(2, 6+2,4): 27.498500 Mflop/s
(14,16,12) <- (7,2,3).*(2, 6+2,4): 29.997088 Mflop/s

Testing m0 = 2, k0 =  6, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  6 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 8 8 8 8 8 8 8 8
<<< (M = 8, K = 8, N = 8) : 27.498500
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 12 14 16 16 12 14 12
<<< (M = 14, K = 16, N = 12) : 29.997088
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 6,4) :    28.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3733 (33.2%), 7517 (66.8%) left; Finishing by Sat Oct 21  6:21:52 2000

(8,16,8) <- (4,0,2).*(2, 14+2,4): 30.154097 Mflop/s
(14,16,12) <- (7,1,3).*(2, 14+2,4): 26.752200 Mflop/s

Testing m0 = 2, k0 =  14, n0 = 4...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  14 4 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 16 8 8 16 16 8 8 8
<<< (M = 8, K = 16, N = 8) : 30.154097
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 16 12 14 16 16 12 14 12
<<< (M = 14, K = 16, N = 12) : 26.752200
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 14,4) :    28.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3734 (33.2%), 7516 (66.8%) left; Finishing by Sat Oct 21  6:21:51 2000

(7,9,8) <- (1,1,4).*(7, 7+2,2): 21.220047 Mflop/s
(14,18,14) <- (2,2,7).*(7, 7+2,2): 28.271211 Mflop/s

Testing m0 = 7, k0 =  7, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 7  7 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 7 9 8 7 9 9 8 7 8
<<< (M = 7, K = 9, N = 8) : 21.220047
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 14 14 18 18 14 14 14
<<< (M = 14, K = 18, N = 14) : 28.271211
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (7, 7,2) :    24.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3735 (33.2%), 7515 (66.8%) left; Finishing by Sat Oct 21  6:21:50 2000

(8,15,8) <- (4,0,4).*(2, 13+2,2): 38.005529 Mflop/s
(14,15,14) <- (7,1,7).*(2, 13+2,2): 36.303491 Mflop/s

Testing m0 = 2, k0 =  13, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  13 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 15 8 8 15 15 8 8 8
<<< (M = 8, K = 15, N = 8) : 38.005529
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 15 14 14 15 15 14 14 14
<<< (M = 14, K = 15, N = 14) : 36.303491
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 13,2) :    37.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3736 (33.2%), 7514 (66.8%) left; Finishing by Sat Oct 21  6:21:50 2000

(13,10,9) <- (0,1,9).*(13, 8+2,1): 100.297397 Mflop/s
(13,10,15) <- (1,1,15).*(13, 8+2,1): 101.117852 Mflop/s

Testing m0 = 13, k0 =  8, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 13  8 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 10 9 13 10 10 9 13 9
<<< (M = 13, K = 10, N = 9) : 100.297397
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 13 10 15 13 10 10 15 13 15
<<< (M = 13, K = 10, N = 15) : 101.117852
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (13, 8,1) :   100.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3737 (33.2%), 7513 (66.8%) left; Finishing by Sat Oct 21  6:21:49 2000

(9,11,9) <- (1,1,9).*(9, 9+2,1): 31.475810 Mflop/s
(9,11,15) <- (1,1,15).*(9, 9+2,1): 31.630522 Mflop/s

Testing m0 = 9, k0 =  9, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 9  9 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 9 9 11 11 9 9 9
<<< (M = 9, K = 11, N = 9) : 31.475810
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 11 15 9 11 11 15 9 15
<<< (M = 9, K = 11, N = 15) : 31.630522
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (9, 9,1) :    31.6 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3738 (33.2%), 7512 (66.8%) left; Finishing by Sat Oct 21  6:21:48 2000

(9,14,10) <- (9,0,0).*(1, 12+2,10): 98.801941 Mflop/s
(15,14,10) <- (15,1,1).*(1, 12+2,10): 99.331822 Mflop/s

Testing m0 = 1, k0 =  12, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  12 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 14 10 9 14 14 10 9 10
<<< (M = 9, K = 14, N = 10) : 98.801941
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 10 15 14 14 10 15 10
<<< (M = 15, K = 14, N = 10) : 99.331822
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 12,10) :    99.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3739 (33.2%), 7511 (66.8%) left; Finishing by Sat Oct 21  6:21:48 2000

(9,10,8) <- (9,1,1).*(1, 8+2,8): 102.993998 Mflop/s
(15,10,8) <- (15,1,1).*(1, 8+2,8): 103.597967 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 8...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 8 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 8 9 10 10 8 9 8
<<< (M = 9, K = 10, N = 8) : 102.993998
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 8 15 10 10 8 15 8
<<< (M = 15, K = 10, N = 8) : 103.597967
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,8) :   103.3 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3740 (33.2%), 7510 (66.8%) left; Finishing by Sat Oct 21  6:21:50 2000

(15,15,9) <- (0,0,9).*(15, 13+2,1): 108.573487 Mflop/s
(15,15,15) <- (1,1,15).*(15, 13+2,1): 109.640870 Mflop/s

Testing m0 = 15, k0 =  13, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 15  13 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 9 15 15 15 9 15 9
<<< (M = 15, K = 15, N = 9) : 108.573487
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 15 15 15 15 15 15 15 15
<<< (M = 15, K = 15, N = 15) : 109.640870
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (15, 13,1) :   109.1 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3741 (33.3%), 7509 (66.7%) left; Finishing by Sat Oct 21  6:21:49 2000

(9,8,9) <- (3,1,9).*(3, 6+2,1): 129.257184 Mflop/s
(15,16,15) <- (5,2,15).*(3, 6+2,1): 186.485660 Mflop/s

Testing m0 = 3, k0 =  6, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  6 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 8 9 9 8 8 9 9 9
<<< (M = 9, K = 8, N = 9) : 129.257184
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 16 15 15 16 16 15 15 15
<<< (M = 15, K = 16, N = 15) : 186.485660
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 6,1) :   152.7 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3742 (33.3%), 7508 (66.7%) left; Finishing by Sat Oct 21  6:21:51 2000

(12,17,9) <- (0,0,9).*(12, 15+2,1): 98.002299 Mflop/s
(12,17,15) <- (1,1,15).*(12, 15+2,1): 99.603069 Mflop/s

Testing m0 = 12, k0 =  15, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 12  15 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 17 9 12 17 17 9 12 9
<<< (M = 12, K = 17, N = 9) : 98.002299
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 12 17 15 12 17 17 15 12 15
<<< (M = 12, K = 17, N = 15) : 99.603069
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (12, 15,1) :    98.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3743 (33.3%), 7507 (66.7%) left; Finishing by Sat Oct 21  6:21:51 2000

(9,12,8) <- (3,2,4).*(3, 4+2,2): 135.113034 Mflop/s
(15,18,14) <- (5,3,7).*(3, 4+2,2): 121.474022 Mflop/s

Testing m0 = 3, k0 =  4, n0 = 2...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  4 2 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 12 8 9 12 12 8 9 8
<<< (M = 9, K = 12, N = 8) : 135.113034
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 14 15 18 18 14 15 14
<<< (M = 15, K = 18, N = 14) : 121.474022
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 4,2) :   127.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3744 (33.3%), 7506 (66.7%) left; Finishing by Sat Oct 21  6:21:53 2000

(9,15,7) <- (9,3,1).*(1, 3+2,7): 116.841764 Mflop/s
(15,25,14) <- (15,5,2).*(1, 3+2,7): 76.488354 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 7 9 15 15 7 9 7
<<< (M = 9, K = 15, N = 7) : 116.841764
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 14 15 25 25 14 15 14
<<< (M = 15, K = 25, N = 14) : 76.488354
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,7) :    92.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3745 (33.3%), 7505 (66.7%) left; Finishing by Sat Oct 21  6:21:52 2000

(9,15,16) <- (9,3,0).*(1, 3+2,16): 104.815080 Mflop/s
(15,25,16) <- (15,5,0).*(1, 3+2,16): 107.635139 Mflop/s

Testing m0 = 1, k0 =  3, n0 = 16...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  3 16 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 15 16 9 15 15 16 9 16
<<< (M = 9, K = 15, N = 16) : 104.815080
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 25 16 15 25 25 16 15 16
<<< (M = 15, K = 25, N = 16) : 107.635139
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 3,16) :   106.2 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3746 (33.3%), 7504 (66.7%) left; Finishing by Sat Oct 21  6:21:51 2000

(9,9,9) <- (3,1,3).*(3, 7+2,3): 110.813257 Mflop/s
(15,18,15) <- (5,2,5).*(3, 7+2,3): 135.221777 Mflop/s

Testing m0 = 3, k0 =  7, n0 = 3...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 3  7 3 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 9 9 9 9 9 9 9 9
<<< (M = 9, K = 9, N = 9) : 110.813257
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 18 15 15 18 18 15 15 15
<<< (M = 15, K = 18, N = 15) : 135.221777
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (3, 7,3) :   121.8 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3747 (33.3%), 7503 (66.7%) left; Finishing by Sat Oct 21  6:21:54 2000

(8,12,7) <- (4,2,1).*(2, 4+2,7): 30.042358 Mflop/s
(14,18,14) <- (7,3,2).*(2, 4+2,7): 23.565721 Mflop/s

Testing m0 = 2, k0 =  4, n0 = 7...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 2  4 7 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 8 12 7 8 12 12 7 8 7
<<< (M = 8, K = 12, N = 7) : 30.042358
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 14 18 14 14 18 18 14 14 14
<<< (M = 14, K = 18, N = 14) : 23.565721
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (2, 4,7) :    26.4 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3748 (33.3%), 7502 (66.7%) left; Finishing by Sat Oct 21  6:21:53 2000

(15,14,9) <- (0,0,9).*(15, 12+2,1): 106.683267 Mflop/s
(15,14,15) <- (1,1,15).*(15, 12+2,1): 107.047215 Mflop/s

Testing m0 = 15, k0 =  12, n0 = 1...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 15  12 1 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 9 15 14 14 9 15 9
<<< (M = 15, K = 14, N = 9) : 106.683267
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 14 15 15 14 14 15 15 15
<<< (M = 15, K = 14, N = 15) : 107.047215
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (15, 12,1) :   106.9 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3749 (33.3%), 7501 (66.7%) left; Finishing by Sat Oct 21  6:21:52 2000

(9,10,10) <- (9,1,0).*(1, 8+2,10): 94.351795 Mflop/s
(15,10,10) <- (15,1,1).*(1, 8+2,10): 94.726784 Mflop/s

Testing m0 = 1, k0 =  8, n0 = 10...
Generating nofringe core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 3 -l0 1  8 10 -no_fringes -file ./src/mm_mult.c -routine_name mm_mult
Compiling code for mm_mult...
>>> gcc -O1 -o ./obj/mm_mult.o -c ./src/mm_mult.c
Linking timer...
>>> gcc -O1 -I./include -L./lib -o ./bin/mm ./obj/mm_timer.o ./obj/mm_mult.o -lm -lipm -lrprf
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 9 10 10 9 10 10 10 9 10
<<< (M = 9, K = 10, N = 10) : 94.351795
Running timer...
>>> ./bin/mm -S-max-rate -t-comp -o 10 -i-auto -i-min-t 0.01 -i-min-m 1000 15 10 10 15 10 10 10 15 10
<<< (M = 15, K = 10, N = 10) : 94.726784
Deleting timer...
>>> rm -f ./bin/mm
Performance for double.NN.1.3.CC (1, 8,10) :    94.5 MFLOPS.
Best Blocking for double.NN.1.3.CC so far : (2, 15,1) :   184.9 MFLOPS.
Done 3750 (33.3%), 7500 (66.7%) left; Finishing by Sat Oct 21  6:21:52 2000

***Nothing to be done for double.NN.1.1A.CC.
***Nothing to be done for double.NN.1.1B.CC.
***Nothing to be done for double.NN.1.2lm.CC.
***Nothing to be done for double.NN.1.2ma.CC.
***Nothing to be done for double.NN.1.3.CC.
***Nothing to be done for double.NN.1.1A.CC.
***Nothing to be done for double.NN.1.1B.CC.
***Nothing to be done for double.NN.1.2lm.CC.
***Nothing to be done for double.NN.1.2ma.CC.
***Nothing to be done for double.NN.1.3.CC.
Compiling timer object code...
>>> gcc -O2 -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0 -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/rprf-v0_19 -o ./obj/mm_timer.o -c /n/srv5/mchalla/Desktop/PHiPAC.gamma/search-2.2/mm_timer.c -DSEARCH_MODE_L0CORE -DALPHA_EQUALS_ONE -DDOUBLE_PREC
Testing double.NN.1.1A.CC (-O2)...
Testing double.NN.1.1B.CC (-O2)...
Testing double.NN.1.2lm.CC (-O2)...
Testing double.NN.1.2ma.CC (-O2)...
Testing double.NN.1.3.CC (-O2)...
Compiling timer object code...
>>> gcc -O3 -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/ipm-2.0 -I/n/srv5/mchalla/Desktop/PHiPAC.gamma/rprf-v0_19 -o ./obj/mm_timer.o -c /n/srv5/mchalla/Desktop/PHiPAC.gamma/search-2.2/mm_timer.c -DSEARCH_MODE_L0CORE -DALPHA_EQUALS_ONE -DDOUBLE_PREC
Testing double.NN.1.1A.CC (-O3)...
Testing double.NN.1.1B.CC (-O3)...
Testing double.NN.1.2lm.CC (-O3)...
Testing double.NN.1.2ma.CC (-O3)...
Testing double.NN.1.3.CC (-O3)...


L0CORE Search ended on ice at Fri Oct 20 19:26:27 MDT 2000



L0CORE Sort started on ice on Fri Oct 20 19:26:28 MDT 2000

L0CORE.double.NN.1.1A.CC
L0CORE.double.NN.1.1B.CC
L0CORE.double.NN.1.2lm.CC
L0CORE.double.NN.1.2ma.CC
L0CORE.double.NN.1.3.CC


L0CORE Sort ended on ice at Fri Oct 20 19:26:28 MDT 2000



Make_GEMM started on ice on Fri Oct 20 19:26:28 MDT 2000

***Compromise: using L0CORE information for L0GEN in case double.NN.1.
***Compromise: using double.NN.1 information for double.NN.c
***Compromise: using double.NN.* information for double.TT.*
***Compromise: using double.NN.* information for double.NT.*
***Compromise: using double.NN.* information for double.TN.*
>>> rm -rf src Makefile; mkdir src
Generating PHiPAC GEMM routines...



Generating double.NN.1...

Generating general core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 4 3 -file ./src/mm_double_NN_1.c -routine_name mm_double_NN_1 -beta c
Generating double.NN.c...

Generating general core code...
>>> ./mm_cgen  -prec double -opA N -opB N -alpha c -ignore_m1 -sp 2ma -l0 1 4 3 -file ./src/mm_double_NN_c.c -routine_name mm_double_NN_c -beta c
Generating double.NT.1...

Generating general core code...
>>> ./mm_cgen  -prec double -opA N -opB T -alpha 1 -ignore_m1 -sp 2ma -l0 1 4 3 -file ./src/mm_double_NT_1.c -routine_name mm_double_NT_1 -beta c
Generating double.NT.c...

Generating general core code...
>>> ./mm_cgen  -prec double -opA N -opB T -alpha c -ignore_m1 -sp 2ma -l0 1 4 3 -file ./src/mm_double_NT_c.c -routine_name mm_double_NT_c -beta c
Generating double.TN.1...

Generating general core code...
>>> ./mm_cgen  -prec double -opA T -opB N -alpha 1 -ignore_m1 -sp 2ma -l0 1 4 3 -file ./src/mm_double_TN_1.c -routine_name mm_double_TN_1 -beta c
Generating double.TN.c...

Generating general core code...
>>> ./mm_cgen  -prec double -opA T -opB N -alpha c -ignore_m1 -sp 2ma -l0 1 4 3 -file ./src/mm_double_TN_c.c -routine_name mm_double_TN_c -beta c
Generating double.TT.1...

Generating general core code...
>>> ./mm_cgen  -prec double -opA T -opB T -alpha 1 -ignore_m1 -sp 2ma -l0 1 4 3 -file ./src/mm_double_TT_1.c -routine_name mm_double_TT_1 -beta c
Generating double.TT.c...

Generating general core code...
>>> ./mm_cgen  -prec double -opA T -opB T -alpha c -ignore_m1 -sp 2ma -l0 1 4 3 -file ./src/mm_double_TT_c.c -routine_name mm_double_TT_c -beta c
>>> rm -rf /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/PHiPAC_dgemm; mkdir /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/PHiPAC_dgemm
>>> cp -r /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/src /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/tmp/Makefile /n/srv5/mchalla/Desktop/PHiPAC.gamma/runs/P3/PHiPAC_dgemm


PHiPAC_gemm directory PHiPAC_dgemm generated.


To compile GEMM library, type:
	cd PHiPAC_dgemm; make


To generate tar-file for distribution, type:
	cd PHiPAC_dgemm; make tar


Make_GEMM ended on ice at Fri Oct 20 19:26:30 MDT 2000

>>> perl /n/srv5/mchalla/Desktop/PHiPAC.gamma/search-2.2/search_start.pl machine_specs
>>> perl /n/srv5/mchalla/Desktop/PHiPAC.gamma/search-2.2/search_L0core.pl machine_specs double compiler_options L0_search
>>> perl /n/srv5/mchalla/Desktop/PHiPAC.gamma/search-2.2/search_sort.pl L0CORE double
>>> perl /n/srv5/mchalla/Desktop/PHiPAC.gamma/search-2.2/make_gemm.pl machine_specs double perf/L0CORE_top.double
