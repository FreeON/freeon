%% 
%% Template of the L0 Search Parameters File
%% 
%% This file specifies various parameters that controls the L0 search
%% scripts.  Lines beginning with "%" are comments and are ignored.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Controls of the L0 Search Space %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The L0 Search_space is the following direct product:
%% 	L0_Options_space X L0_Blocking_space
%% 
%% L0_Options_space is the following direct product:
%% {software-pipelining options} X {alpha type} X {matrix options}
%% 
%% L0_Blocking_space consists of all triplets (m0,k0,n0) that will be used
%% as the register blocking sizes for the generated code.


%% (1) Controls of the L0_Options_space
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

one_stage_holdstripe_A
one_stage_holdstripe_B
two_stage_load_mult
two_stage_mult_add
three_stage

%% These are the software-pipelining options, whose corresponding options
%% passed to the code generator are as follows:
%%   "one_stage_holdstripe_A"		: -sp1 -holdstripe A
%%   "one_stage_holdstripe_B"		: -sp1 -holdstripe B
%%   "two_stage_load_mult"		: -sp2lm
%%   "two_stage_mult_add"		: -sp2ma
%%   "three_stage"			: -sp3
%% Any combination of these options is allowed, but at least
%% one of them must be set for any benchmarking to be done at all.
%% The specified options constitute the factor
%% {software-pipelining options} in the L0_Options_space.


alpha_equals_one
% alpha_arbitrary

%% If "alpha_equals_one" or "alpha_arbitrary" is set, the code
%% for alpha=1 or alpha=c (respectively) matrix multiplication is generated
%% and benchmarked.  Any combination of these options is allowed, but
%% at least one of them must be set for any benchmarking to be done at
%% all.  The specified options constitute the factor {matrix options} in
%% the L0_Options_space.


matop_NN
%matop_NT
%matop_TN
%matop_TT

%% If "matop_NN", "matop_NT", "matop_TN" or "matop_TT" is set, the code
%% for Normal-Normal, Normal-Transpose, Transpose-Normal or
%% Transpose-Transpose (respectively) matrix multiplication is generated
%% and benchmarked.  Any combination of these options is allowed, but
%% at least one of them must be set for any benchmarking to be done at
%% all.  The specified options constitute the factor {matrix options} in
%% the L0_Options_space.


%% (2) Controls of the L0_Blocking_space
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

auto_blockings
%k0_set = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
k0_set = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
% blockings_file = alltest.blockings_file

%% If the "auto_blockings" parameter is set, the set L0_Blocking_space of
%% all triplets (m0,k0,n0) to be used as register blocking sizes will be
%% generated automatically from the values given in "k0set", and
%% the number of floating point registers available for the corresponding
%% arithmetic precision.  The values of m0 and n0 will be restricted to
%% range in such a way that m0*n0 is no more than the number of registers.
%% The value of k0 will be taken from those given in "k0_set".
%% 
%% If the "blockings_file" parameter is specified, the L0_Blocking_space is
%% created from the blocking sizes listed in the file whose name is given
%% by "blockings_file".  This file should be given in the directory in
%% which the search script is started.  An example of this is the file
%% "template.blockings_file" in the "runs/template" directory of the
%% distribution.
%% 
%% If both "auto_blockings" and "blockings_file" are specified, the
%% latter setting is used.

%% (3) Controls of the L0 Search Behavior
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% auto_matrixsizes
fill_cache_percentage = 80
matrixsizes_file = my.matrixsizes_file

%% If the "auto_matrixsizes" parameter is set, each set of blocking sizes
%% will be benchmarked on an automatically generated set of matrix sizes
%% that is chosen to make all three matrices fit within the L1 data cache.
%% The performance of the set of blocking sizes is just the MFLOPS rate
%% achieved by the code on this single set of matrix sizes.  This mode of
%% performance measure is suitable for generating high performance code
%% for large matrices.  The "fill_cache_percentage" value is the
%% percentage of the data cache to be filled for benchmarking such
%% matrices.  If this is set to 100, the sizes of the matrices will be
%% chosen so that as much of the cache size is filled as possible.  A
%% value of 80 is suitable for a normal run of the search script.
%% 
%% If the "matrixsizes_file" parameter is specified, every set of blocking
%% sizes will be benchmarked on each set of matrix sizes listed in the
%% file whose name is given by "matrixsizes_file".  The performance of
%% the set of blocking sizes is the harmonic mean MFLOPS rate achieved by
%% the code on all these sets of matrix sizes.  This file should be given
%% in the directory in which the search script is started.  An example of
%% this is the file "template.matrixsizes_file" in the "runs/template"
%% directory of the distribution.  This mode of performance measure is
%% suitable for generating high performance code for a specific set(s) of
%% predetermined matrix sizes (which are typically small).  The
%% "fill_cache_percentage" parameter has no effect when this mode of
%% performance measure is used.
%%  
%% If both "auto_matrixsizes" and "matrixsizes_file" are specified, the
%% latter setting is used.


use_fatdot
% use_almstsq

%% When the "auto_matrixsizes" parameter is set, one out of two
%% performance readings is chosen to represent the performance of
%% the L0 blocking under consideration.  This L0 blocked code is
%% benchmarked for a fat dot-product matrix workload and for an
%% almost-square matrix workload.  If the "use_fatdot" parameter
%% is set, the performance for the fat dot-product workload is used
%% as the representative performance; if the "use_almstsq" parameter
%% is set, the performance for the almost-square workload is used
%% as the representative performance.  If both parameters are
%% specified, the latter setting is used.
%%
%% Potentially, using different workload to choose the representative
%% performance will yield different optimal blocking sizes.  It is
%% still unclear whether one should optimize for fat dot-product
%% workload or for almost-square workload at the L0 level, which is
%% why this is an option to be specified by the user.


do_L0_gen_frng
%% When the "do_L0_gen_frng" option is set, an additional
%% L0 blocking search is performed after the L1 search. This additional
%% search finds the best blocking for the matrix fringes (that
%% portion of the matrix that is not a multiple of m0, k0, or n0). It
%% does this by selecting a set of matrix sizes that are similar
%% in shape to the matrices that typically occur at the fringes. This
%% option will also speed up small matrix multiplies.


benchmark_l0_out_of_l2
%% When the option "benchmark_l0_out_of_l1" is set, the matrix size 
%% that are used to benchmark the L0 parameters are set according
%% to the L2 cache rather than the L1 cache. This is so that the
%% search should optimize the core code instruction scheduling for memory
%% accesses that are typically out of L1 cache rather than within.

benchmark_l0_out_of_l3
%% The "benchmark_l0_out_of_l3" is similar to the "benchmark_l0_out_of_l2" 
%% option except that the matrix size is chosen to be L3 sized rather
%% than L2.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
