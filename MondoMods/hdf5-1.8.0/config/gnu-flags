#							-*- shell-script -*-
#
# Copyright by The HDF Group.
# Copyright by the Board of Trustees of the University of Illinois.
# All rights reserved.
#
# This file is part of HDF5.  The full HDF5 copyright notice, including
# terms governing use, modification, and redistribution, is contained in
# the files COPYING and Copyright.html.  COPYING can be found at the root
# of the source code distribution tree; Copyright.html can be found at the
# root level of an installed copy of the electronic HDF5 document set and
# is linked from the top-level documents page.  It can also be found at
# http://hdfgroup.org/HDF5/doc/Copyright.html.  If you do not have
# access to either file, you may request a copy from help@hdfgroup.org.


# This file should be sourced into configure if the compiler is the
# GNU gcc compiler or a derivative.  It is careful not to do anything
# if the compiler is not GNU; otherwise `cc_flags_set' is set to `yes'
#

# Get the compiler version in a way that works for gcc, egcs, and
# pgcc unless a compiler version is already known
#
#   cc_vendor:    The compiler name: gcc, egcs, or pgcc
#   cc_version:   Version number: 2.91.60, 2.7.2.1
#
if test X = "X$cc_flags_set"; then
    cc_version="`$CC $CFLAGS $H5_CFLAGS -v 2>&1 |grep 'gcc version' |\
	        sed 's/.*gcc version \([-a-z0-9\.]*\).*/\1/'`"
    cc_vendor=`echo $cc_version |sed 's/\([a-z]*\).*/\1/'`
    cc_version=`echo $cc_version |sed 's/[-a-z]//g'`
    if test X = "X$cc_vendor" -a X != "X$cc_version"; then
	cc_vendor=gcc
    fi
    if test "-" != "$cc_vendor-$cc_version"; then
	echo "compiler '$CC' is GNU $cc_vendor-$cc_version"
    fi

    # Some version numbers
    cc_vers_major=`echo $cc_version | cut -f1 -d.`
    cc_vers_minor=`echo $cc_version | cut -f2 -d.`
    cc_vers_patch=`echo $cc_version | cut -f3 -d.`
    test -n "$cc_vers_major" || cc_vers_major=0
    test -n "$cc_vers_minor" || cc_vers_minor=0
    test -n "$cc_vers_patch" || cc_vers_patch=0
    cc_vers_all=`expr $cc_vers_major '*' 1000000 + $cc_vers_minor '*' 1000 + $cc_vers_patch`
fi

# GCC compilers before gcc-2.8.1 have problems with `long long'.
if test gcc = "$cc_vendor" -a "$cc_vers_all" -lt 2008001; then
    cat <<EOF
    **
    ** This compiler may be unable to properly compile the long long
    ** data type used extensively by hdf5, although specifying
    ** --disable-hsizet for configure may work around those bugs.
    ** There may be other code generation problems also, especially
    ** when optimizations are enabled.  Please upgrade to at least GNU
    ** gcc version 2.8.1 before reporting bugs to the HDF5 team.
    **
EOF
    sleep 5

# GCC v2.96 (shipped with RH7.x) has problems with `float'-> `double' conversions.
elif test gcc = "$cc_vendor" -a "$cc_vers_all" -eq 2096000; then
   cat <<EOF
    **
    ** This compiler may have problems converting 'float' values to
    ** 'double' values.  There may be other code generation problems
    ** as well.
    **
    ** Please use a different version of gcc before reporting bugs.
    **
EOF
       sleep 5

# Current EGCS compilers have problems with `long long' and register
# allocation when optimizations are turned on for x86 systems.
elif test egcs = "$cc_vendor" -a "$cc_vers_all" -le 2091066; then
    if test "$HSIZET" != "large"; then
       cat <<EOF
    **
    ** This compiler may have problems allocating registers when
    ** optimizations are enabled on some platforms. Specifying
    ** --disable-hsizet usually avoids the bug.
    **
EOF
       sleep 5
    fi

# All current versions of PGCC have problems also.
elif test pgcc = "$cc_vendor" -a "$cc_vers_all" -le 2091066; then	    
    cat <<EOF
    **
    ** This compiler may have problems allocating registers for long
    ** long data types when optimizations are enabled. There may be
    ** other code generation problems as well. We know of no version
    ** of pgcc which is capable of compiling HDF5 in production mode.
    ** Please use gcc-2.8 or egcs-1.1.1 before reporting bugs.
    **
EOF
    sleep 5

fi

# Common GCC flags for various situations
case "$cc_vendor-$cc_version" in
  gcc*|egcs*|pgcc*)
    # Architecture-specific flags
    arch=
    case "$host_os-$host_cpu" in
        # FreeBSD sets the information from "uname -m" to the general machine
        # architecture, not the specific CPU for the machine, so even our
        # Pentium II Xeon server is set to "i386".  Once we know we are on a FreeBSD
        # machine, use the "sysctl" command to get the CPU hardware model.
        freebsd*-i386)
            host_cpu_model=`sysctl -n hw.model`
            case "$host_cpu_model" in
                # Hmm.. this might not catch Celerons, but it won't hurt them either...
                *Pro*|*II*|*III*|*IV*|*Athlon*)
                    # architecture-specific optimizations cause problems
                    # for some users who build binaries to be used on
                    # multiple architectures.
                    # arch="-march=i686"
                ;;
            esac
            ;;

        *-i686)
                    # architecture-specific optimizations cause problems
                    # for some users who build binaries to be used on
                    # multiple architectures.
                    # arch="-march=i686"
            ;;
    esac

    # Host-specific flags
    case "`hostname`" in
        sleipnir.ncsa.uiuc.edu)
            arch="$arch -pipe"
            ;;
    esac

    # General
    H5_CFLAGS="$H5_CFLAGS $arch -ansi -pedantic -Wall -W -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wwrite-strings -Wconversion -Wsign-compare -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls -Wnested-externs -Winline"

    # Production
    case "$cc_vendor-$cc_version" in
      gcc-2.95.[34])
        PROD_CFLAGS="-O3"
        ;;
      gcc-3.[0-4]*|gcc-4.[012]*)
        # The optimization level is reduced for gcc 3.* and 4.* due to problems
        # with code generation for src/H5Tconv.c with the -O2 & -O3 
        # optimization levels (which shows up as failures for various integer
        # types -> long long conversions in the test/dtypes test).  Perhaps
        # later versions of gcc will fix this bug... - QAK - 2003/10/20
        PROD_CFLAGS="-O"
        ;;
      gcc-4*)
        # Be optimistic about future versions of gcc.. :-) - QAK - 2003/10/20
        PROD_CFLAGS="-O3"
        ;;
      *)
        PROD_CFLAGS="-O"
        ;;
    esac

    PROD_CFLAGS="$PROD_CFLAGS -fomit-frame-pointer -finline-functions"
    PROD_CPPFLAGS=

    # Debug
    DEBUG_CFLAGS="-g -fverbose-asm"
    DEBUG_CPPFLAGS=

    # Profile
    PROFILE_CFLAGS="-g -pg"
    PROFILE_CPPFLAGS=

    # Flags are set
    cc_flags_set=yes
    ;;
esac

# Version specific GCC flags
#
# Please follow the pattern below by adding new versions at the top, copying
# the information from the previous version and adding modifications to that.
case "$cc_vendor-$cc_version" in

# Closer to the gcc 4.2 release, we should check for additional flags to
# include and break it out into it's own section, like the other versions
# below. -QAK
  gcc-4.[12]*)
    # Replace -ansi flag with -std=c99 flag
    H5_CFLAGS="`echo $H5_CFLAGS | sed -e 's/-ansi/-std=c99/g'`"

    # Disable warnings about using 'long long' type
    H5_CFLAGS="$H5_CFLAGS -Wno-long-long"

    # Append warning flags from gcc-3* case
    # (don't use -Wpadded flag for normal builds, many of the warnings its
    #   issuing can't be fixed and they are making it hard to detect other,
    #   more important warnings)
    #H5_CFLAGS="$H5_CFLAGS -Wfloat-equal -Wmissing-format-attribute -Wpadded"
    H5_CFLAGS="$H5_CFLAGS -Wfloat-equal -Wmissing-format-attribute"

    # Append warning flags from gcc-3.2* case
    H5_CFLAGS="$H5_CFLAGS -Wmissing-noreturn -Wpacked -Wdisabled-optimization -Wmultichar"

    # Enable mort format checking flags, beyond the basic -Wformat included
    # in -Wall
    H5_CFLAGS="$H5_CFLAGS -Wformat-nonliteral -Wformat-security -Wformat-y2k"

    # The "unreachable code" warning does not appear to be reliable yet...
    H5_CFLAGS="$H5_CFLAGS -Wunreachable-code"

    # Append warning flags from gcc-3.3* case
    H5_CFLAGS="$H5_CFLAGS -Wendif-labels"

    # Append warning flags from gcc-3.4* case
    H5_CFLAGS="$H5_CFLAGS -Wdeclaration-after-statement -Wold-style-definition -Winvalid-pch"

    # Replace old -W flag with new -Wextra flag
    H5_CFLAGS="`echo $H5_CFLAGS | sed -e 's/-W\ /-Wextra\ /g'`"

    # Append more extra warning flags that only gcc4.0+ know about
    H5_CFLAGS="$H5_CFLAGS -Wmissing-field-initializers -Wvariadic-macros"

    # Append more extra warning flags that only gcc4.1+ know about
    H5_CFLAGS="$H5_CFLAGS -Wunsafe-loop-optimizations -Wc++-compat -Wvolatile-register-var"

    # Try out the new "stack protector" feature in gcc 4.1
    # (Strictly speaking this isn't really a "warning" flag, so it's added to
    #   the debugging flags)
    #DEBUG_CFLAGS="$DEBUG_CFLAGS -Wstack-protector -fstack-protector-all"
    ;;

  gcc-4.0*)
    # Replace -ansi flag with -std=c99 flag
    H5_CFLAGS="`echo $H5_CFLAGS | sed -e 's/-ansi/-std=c99/g'`"

    # Disable warnings about using 'long long' type
    H5_CFLAGS="$H5_CFLAGS -Wno-long-long"

    # Append warning flags from gcc-3* case
    # (don't use -Wpadded flag for normal builds, many of the warnings its
    #   issuing can't be fixed and they are making it hard to detect other,
    #   more important warnings)
    #H5_CFLAGS="$H5_CFLAGS -Wfloat-equal -Wmissing-format-attribute -Wpadded"
    H5_CFLAGS="$H5_CFLAGS -Wfloat-equal -Wmissing-format-attribute"

    # Append warning flags from gcc-3.2* case
    H5_CFLAGS="$H5_CFLAGS -Wmissing-noreturn -Wpacked -Wdisabled-optimization -Wmultichar"

    # The "format=2" warning generates too many warnings about valid
    # usage in the library.
    #CFLAGS="$CFLAGS -Wformat=2"

    # The "unreachable code" warning does not appear to be reliable yet...
    #CFLAGS="$CFLAGS -Wunreachable-code"

    # Append warning flags from gcc-3.3* case
    H5_CFLAGS="$H5_CFLAGS -Wendif-labels"

    # Append warning flags from gcc-3.4* case
    H5_CFLAGS="$H5_CFLAGS -Wdeclaration-after-statement -Wold-style-definition -Winvalid-pch"

    # Replace old -W flag with new -Wextra flag
    H5_CFLAGS="`echo $H5_CFLAGS | sed -e 's/-W\ /-Wextra\ /g'`"

    # Append more extra warning flags that only gcc4.0+ know about
    H5_CFLAGS="$H5_CFLAGS -Wmissing-field-initializers -Wvariadic-macros"
    ;;

  gcc-3.4*)
    # Replace -ansi flag with -std=c99 flag
    H5_CFLAGS="`echo $H5_CFLAGS | sed -e 's/-ansi/-std=c99/g'`"

    # Disable warnings about using 'long long' type
    H5_CFLAGS="$H5_CFLAGS -Wno-long-long"

    # Append warning flags from gcc-3* case
    # (don't use -Wpadded flag for normal builds, many of the warnings its
    #   issuing can't be fixed and they are making it hard to detect other,
    #   more important warnings)
    #H5_CFLAGS="$H5_CFLAGS -Wfloat-equal -Wmissing-format-attribute -Wpadded"
    H5_CFLAGS="$H5_CFLAGS -Wfloat-equal -Wmissing-format-attribute"

    # Append warning flags from gcc-3.2* case
    H5_CFLAGS="$H5_CFLAGS -Wmissing-noreturn -Wpacked -Wdisabled-optimization -Wmultichar"

    # The "format=2" warning generates too many warnings about valid
    # usage in the library.
    #CFLAGS="$CFLAGS -Wformat=2"

    # The "unreachable code" warning does not appear to be reliable yet...
    #CFLAGS="$CFLAGS -Wunreachable-code"

    # Append warning flags from gcc-3.3* case
    H5_CFLAGS="$H5_CFLAGS -Wendif-labels"

    # Append more extra warning flags that only gcc3.4+ know about
    H5_CFLAGS="$H5_CFLAGS -Wdeclaration-after-statement -Wold-style-definition -Winvalid-pch"

    # Replace old -W flag with new -Wextra flag
    H5_CFLAGS="`echo $H5_CFLAGS | sed -e 's/-W\ /-Wextra\ /g'`"
    ;;

  gcc-3.3*)
    # Replace -ansi flag with -std=c99 flag
    H5_CFLAGS="`echo $H5_CFLAGS | sed -e 's/-ansi/-std=c99/g'`"

    # Disable warnings about using 'long long' type
    H5_CFLAGS="$H5_CFLAGS -Wno-long-long"

    # Append warning flags from gcc-3* case
    # (don't use -Wpadded flag for normal builds, many of the warnings its
    #   issuing can't be fixed and they are making it hard to detect other,
    #   more important warnings)
    #H5_CFLAGS="$H5_CFLAGS -Wfloat-equal -Wmissing-format-attribute -Wpadded"
    H5_CFLAGS="$H5_CFLAGS -Wfloat-equal -Wmissing-format-attribute"

    # Append warning flags from gcc-3.2* case
    H5_CFLAGS="$H5_CFLAGS -Wmissing-noreturn -Wpacked -Wdisabled-optimization -Wmultichar"

    # The "format=2" warning generates too many warnings about valid
    # usage in the library.
    #CFLAGS="$CFLAGS -Wformat=2"

    # The "unreachable code" warning does not appear to be reliable yet...
    #CFLAGS="$CFLAGS -Wunreachable-code"

    # Append more extra warning flags that only gcc3.3+ know about
    H5_CFLAGS="$H5_CFLAGS -Wendif-labels"
    ;;

  gcc-3.2*)
    # Replace -ansi flag with -std=c99 flag
    H5_CFLAGS="`echo $H5_CFLAGS | sed -e 's/-ansi/-std=c99/g'`"

    # Disable warnings about using 'long long' type
    H5_CFLAGS="$H5_CFLAGS -Wno-long-long"

    # Append warning flags from gcc-3* case
    # (don't use -Wpadded flag for normal builds, many of the warnings its
    #   issuing can't be fixed and they are making it hard to detect other,
    #   more important warnings)
    #H5_CFLAGS="$H5_CFLAGS -Wfloat-equal -Wmissing-format-attribute -Wpadded"
    H5_CFLAGS="$H5_CFLAGS -Wfloat-equal -Wmissing-format-attribute"

    # Append more extra warning flags that only gcc3.2+ know about
    H5_CFLAGS="$H5_CFLAGS -Wmissing-noreturn -Wpacked -Wdisabled-optimization -Wmultichar"

    # The "format=2" warning generates too many warnings about valid
    # usage in the library.
    #CFLAGS="$CFLAGS -Wformat=2"

    # The "unreachable code" warning does not appear to be reliable yet...
    #CFLAGS="$CFLAGS -Wunreachable-code"
    ;;

  gcc-3*)
    # Replace -ansi flag with -std=c99 flag
    H5_CFLAGS="`echo $H5_CFLAGS | sed -e 's/-ansi/-std=c99/g'`"

    # Disable warnings about using 'long long' type
    H5_CFLAGS="$H5_CFLAGS -Wno-long-long"

    # Append some extra warning flags that only gcc3+ know about
    # (don't use -Wpadded flag for normal builds, many of the warnings its
    #   issuing can't be fixed and they are making it hard to detect other,
    #   more important warnings)
    #H5_CFLAGS="$H5_CFLAGS -Wfloat-equal -Wmissing-format-attribute -Wpadded"
    H5_CFLAGS="$H5_CFLAGS -Wfloat-equal -Wmissing-format-attribute"
    ;;

  gcc-2.9[56]*)
    # Disable warnings about using 'long long' type
    H5_CFLAGS="$H5_CFLAGS -Wno-long-long"
    ;;
esac

# Clear cc info if no flags set
if test "X$cc_flags_set" = "X"; then
  cc_vendor=
  cc_version=
fi
